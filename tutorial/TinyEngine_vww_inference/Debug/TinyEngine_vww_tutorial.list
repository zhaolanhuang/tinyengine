
TinyEngine_vww_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c040  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00078878  0801c210  0801c210  0002c210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000f4  08094a88  08094a88  000a4a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000190  08094b7c  08094b7c  000a4b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000010  08094d0c  08094d0c  000a4d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  08094d1c  08094d1c  000a4d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000009d8  20000000  08094d24  000b0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001b05c  200009d8  080956fc  000b09d8  2**2
                  ALLOC
  9 ._user_heap_stack 00000a00  2001ba34  080956fc  000bba34  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000b09d8  2**0
                  CONTENTS, READONLY
 11 .debug_info   000bb68e  00000000  00000000  000b0a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008f4b  00000000  00000000  0016c096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000412b0  00000000  00000000  00174fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  001b6298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00008278  00000000  00000000  001b7718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001b5cc  00000000  00000000  001bf990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009c80  00000000  00000000  001daf5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001e4bdc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007164  00000000  00000000  001e4c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  001ebdbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  001ebdf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009d8 	.word	0x200009d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c1f8 	.word	0x0801c1f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009dc 	.word	0x200009dc
 800020c:	0801c1f8 	.word	0x0801c1f8

08000210 <d_make_comp>:
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	1e4c      	subs	r4, r1, #1
 8000214:	4605      	mov	r5, r0
 8000216:	2c4e      	cmp	r4, #78	; 0x4e
 8000218:	d83f      	bhi.n	800029a <d_make_comp+0x8a>
 800021a:	e8df f004 	tbb	[pc, r4]
 800021e:	3b3b      	.short	0x3b3b
 8000220:	3e3e3b3b 	.word	0x3e3e3b3b
 8000224:	28283e3e 	.word	0x28283e3e
 8000228:	2828283b 	.word	0x2828283b
 800022c:	28282828 	.word	0x28282828
 8000230:	28282828 	.word	0x28282828
 8000234:	29293e28 	.word	0x29293e28
 8000238:	29292929 	.word	0x29292929
 800023c:	283b2929 	.word	0x283b2929
 8000240:	28282828 	.word	0x28282828
 8000244:	3c29283e 	.word	0x3c29283e
 8000248:	293b3e3b 	.word	0x293b3e3b
 800024c:	3e3e3c29 	.word	0x3e3e3c29
 8000250:	3b282828 	.word	0x3b282828
 8000254:	3b3b3b3b 	.word	0x3b3b3b3b
 8000258:	283b3b28 	.word	0x283b3b28
 800025c:	283e3e3b 	.word	0x283e3e3b
 8000260:	3e3e2828 	.word	0x3e3e2828
 8000264:	2828283e 	.word	0x2828283e
 8000268:	293b293b 	.word	0x293b293b
 800026c:	29          	.byte	0x29
 800026d:	00          	.byte	0x00
 800026e:	b1a2      	cbz	r2, 800029a <d_make_comp+0x8a>
 8000270:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 8000274:	4284      	cmp	r4, r0
 8000276:	da10      	bge.n	800029a <d_make_comp+0x8a>
 8000278:	692f      	ldr	r7, [r5, #16]
 800027a:	0126      	lsls	r6, r4, #4
 800027c:	19b8      	adds	r0, r7, r6
 800027e:	3401      	adds	r4, #1
 8000280:	f04f 0c00 	mov.w	ip, #0
 8000284:	f8c0 c004 	str.w	ip, [r0, #4]
 8000288:	616c      	str	r4, [r5, #20]
 800028a:	55b9      	strb	r1, [r7, r6]
 800028c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8000290:	bcf0      	pop	{r4, r5, r6, r7}
 8000292:	4770      	bx	lr
 8000294:	b10a      	cbz	r2, 800029a <d_make_comp+0x8a>
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1ea      	bne.n	8000270 <d_make_comp+0x60>
 800029a:	2000      	movs	r0, #0
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
 800029e:	4770      	bx	lr

080002a0 <d_ref_qualifier>:
 80002a0:	b410      	push	{r4}
 80002a2:	68c3      	ldr	r3, [r0, #12]
 80002a4:	781c      	ldrb	r4, [r3, #0]
 80002a6:	2c52      	cmp	r4, #82	; 0x52
 80002a8:	460a      	mov	r2, r1
 80002aa:	d00f      	beq.n	80002cc <d_ref_qualifier+0x2c>
 80002ac:	2c4f      	cmp	r4, #79	; 0x4f
 80002ae:	d003      	beq.n	80002b8 <d_ref_qualifier+0x18>
 80002b0:	4608      	mov	r0, r1
 80002b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ba:	3103      	adds	r1, #3
 80002bc:	6301      	str	r1, [r0, #48]	; 0x30
 80002be:	2120      	movs	r1, #32
 80002c0:	3301      	adds	r3, #1
 80002c2:	60c3      	str	r3, [r0, #12]
 80002c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002c8:	2300      	movs	r3, #0
 80002ca:	e7a1      	b.n	8000210 <d_make_comp>
 80002cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ce:	3102      	adds	r1, #2
 80002d0:	6301      	str	r1, [r0, #48]	; 0x30
 80002d2:	211f      	movs	r1, #31
 80002d4:	e7f4      	b.n	80002c0 <d_ref_qualifier+0x20>
 80002d6:	bf00      	nop

080002d8 <d_count_templates_scopes>:
 80002d8:	2a00      	cmp	r2, #0
 80002da:	d04e      	beq.n	800037a <d_count_templates_scopes+0xa2>
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4605      	mov	r5, r0
 80002e0:	460e      	mov	r6, r1
 80002e2:	4614      	mov	r4, r2
 80002e4:	7823      	ldrb	r3, [r4, #0]
 80002e6:	3b01      	subs	r3, #1
 80002e8:	2b4e      	cmp	r3, #78	; 0x4e
 80002ea:	d82c      	bhi.n	8000346 <d_count_templates_scopes+0x6e>
 80002ec:	e8df f003 	tbb	[pc, r3]
 80002f0:	40373737 	.word	0x40373737
 80002f4:	28282b2b 	.word	0x28282b2b
 80002f8:	37373737 	.word	0x37373737
 80002fc:	37373737 	.word	0x37373737
 8000300:	37373737 	.word	0x37373737
 8000304:	2b373737 	.word	0x2b373737
 8000308:	37373737 	.word	0x37373737
 800030c:	37373737 	.word	0x37373737
 8000310:	30303737 	.word	0x30303737
 8000314:	372b3737 	.word	0x372b3737
 8000318:	2c373737 	.word	0x2c373737
 800031c:	37373737 	.word	0x37373737
 8000320:	3737282b 	.word	0x3737282b
 8000324:	37373737 	.word	0x37373737
 8000328:	37373737 	.word	0x37373737
 800032c:	2b373737 	.word	0x2b373737
 8000330:	2c2c372b 	.word	0x2c2c372b
 8000334:	372b2c2c 	.word	0x372b2c2c
 8000338:	37373737 	.word	0x37373737
 800033c:	3737      	.short	0x3737
 800033e:	37          	.byte	0x37
 800033f:	00          	.byte	0x00
 8000340:	68e4      	ldr	r4, [r4, #12]
 8000342:	2c00      	cmp	r4, #0
 8000344:	d1ce      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	68a4      	ldr	r4, [r4, #8]
 800034a:	2c00      	cmp	r4, #0
 800034c:	d1ca      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 800034e:	e7fa      	b.n	8000346 <d_count_templates_scopes+0x6e>
 8000350:	68a2      	ldr	r2, [r4, #8]
 8000352:	7813      	ldrb	r3, [r2, #0]
 8000354:	2b05      	cmp	r3, #5
 8000356:	d103      	bne.n	8000360 <d_count_templates_scopes+0x88>
 8000358:	6833      	ldr	r3, [r6, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	6033      	str	r3, [r6, #0]
 800035e:	68a2      	ldr	r2, [r4, #8]
 8000360:	4631      	mov	r1, r6
 8000362:	4628      	mov	r0, r5
 8000364:	f7ff ffb8 	bl	80002d8 <d_count_templates_scopes>
 8000368:	68e4      	ldr	r4, [r4, #12]
 800036a:	2c00      	cmp	r4, #0
 800036c:	d1ba      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 800036e:	e7ea      	b.n	8000346 <d_count_templates_scopes+0x6e>
 8000370:	682b      	ldr	r3, [r5, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	602b      	str	r3, [r5, #0]
 8000376:	68a2      	ldr	r2, [r4, #8]
 8000378:	e7f2      	b.n	8000360 <d_count_templates_scopes+0x88>
 800037a:	4770      	bx	lr

0800037c <d_append_buffer>:
 800037c:	b39a      	cbz	r2, 80003e6 <d_append_buffer+0x6a>
 800037e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000382:	188e      	adds	r6, r1, r2
 8000384:	4604      	mov	r4, r0
 8000386:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800038a:	3e01      	subs	r6, #1
 800038c:	1e4d      	subs	r5, r1, #1
 800038e:	2700      	movs	r7, #0
 8000390:	e016      	b.n	80003c0 <d_append_buffer+0x44>
 8000392:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000396:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800039a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800039e:	4798      	blx	r3
 80003a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80003a4:	2200      	movs	r2, #0
 80003a6:	3301      	adds	r3, #1
 80003a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80003ac:	42b5      	cmp	r5, r6
 80003ae:	f04f 0301 	mov.w	r3, #1
 80003b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003b6:	f804 8002 	strb.w	r8, [r4, r2]
 80003ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003be:	d010      	beq.n	80003e2 <d_append_buffer+0x66>
 80003c0:	2bff      	cmp	r3, #255	; 0xff
 80003c2:	4619      	mov	r1, r3
 80003c4:	4620      	mov	r0, r4
 80003c6:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80003ca:	d0e2      	beq.n	8000392 <d_append_buffer+0x16>
 80003cc:	461a      	mov	r2, r3
 80003ce:	42b5      	cmp	r5, r6
 80003d0:	f103 0301 	add.w	r3, r3, #1
 80003d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003d8:	f804 8002 	strb.w	r8, [r4, r2]
 80003dc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003e0:	d1ee      	bne.n	80003c0 <d_append_buffer+0x44>
 80003e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003e6:	4770      	bx	lr

080003e8 <is_fnqual_component_type>:
 80003e8:	f1a0 031c 	sub.w	r3, r0, #28
 80003ec:	2b04      	cmp	r3, #4
 80003ee:	d907      	bls.n	8000400 <is_fnqual_component_type+0x18>
 80003f0:	284c      	cmp	r0, #76	; 0x4c
 80003f2:	d005      	beq.n	8000400 <is_fnqual_component_type+0x18>
 80003f4:	384e      	subs	r0, #78	; 0x4e
 80003f6:	2801      	cmp	r0, #1
 80003f8:	bf8c      	ite	hi
 80003fa:	2000      	movhi	r0, #0
 80003fc:	2001      	movls	r0, #1
 80003fe:	4770      	bx	lr
 8000400:	2001      	movs	r0, #1
 8000402:	4770      	bx	lr

08000404 <d_number.isra.1>:
 8000404:	b470      	push	{r4, r5, r6}
 8000406:	6802      	ldr	r2, [r0, #0]
 8000408:	7811      	ldrb	r1, [r2, #0]
 800040a:	296e      	cmp	r1, #110	; 0x6e
 800040c:	d018      	beq.n	8000440 <d_number.isra.1+0x3c>
 800040e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000412:	2b09      	cmp	r3, #9
 8000414:	d81e      	bhi.n	8000454 <d_number.isra.1+0x50>
 8000416:	2600      	movs	r6, #0
 8000418:	2300      	movs	r3, #0
 800041a:	3201      	adds	r2, #1
 800041c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000420:	6002      	str	r2, [r0, #0]
 8000422:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000426:	7811      	ldrb	r1, [r2, #0]
 8000428:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800042c:	2d09      	cmp	r5, #9
 800042e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000432:	d9f2      	bls.n	800041a <d_number.isra.1+0x16>
 8000434:	b10e      	cbz	r6, 800043a <d_number.isra.1+0x36>
 8000436:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800043a:	4618      	mov	r0, r3
 800043c:	bc70      	pop	{r4, r5, r6}
 800043e:	4770      	bx	lr
 8000440:	1c53      	adds	r3, r2, #1
 8000442:	6003      	str	r3, [r0, #0]
 8000444:	7851      	ldrb	r1, [r2, #1]
 8000446:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800044a:	2a09      	cmp	r2, #9
 800044c:	d802      	bhi.n	8000454 <d_number.isra.1+0x50>
 800044e:	461a      	mov	r2, r3
 8000450:	2601      	movs	r6, #1
 8000452:	e7e1      	b.n	8000418 <d_number.isra.1+0x14>
 8000454:	2300      	movs	r3, #0
 8000456:	4618      	mov	r0, r3
 8000458:	bc70      	pop	{r4, r5, r6}
 800045a:	4770      	bx	lr

0800045c <d_number_component>:
 800045c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000460:	4293      	cmp	r3, r2
 8000462:	b570      	push	{r4, r5, r6, lr}
 8000464:	da0e      	bge.n	8000484 <d_number_component+0x28>
 8000466:	6901      	ldr	r1, [r0, #16]
 8000468:	011a      	lsls	r2, r3, #4
 800046a:	188c      	adds	r4, r1, r2
 800046c:	3301      	adds	r3, #1
 800046e:	2600      	movs	r6, #0
 8000470:	2541      	movs	r5, #65	; 0x41
 8000472:	6066      	str	r6, [r4, #4]
 8000474:	300c      	adds	r0, #12
 8000476:	6083      	str	r3, [r0, #8]
 8000478:	548d      	strb	r5, [r1, r2]
 800047a:	f7ff ffc3 	bl	8000404 <d_number.isra.1>
 800047e:	60a0      	str	r0, [r4, #8]
 8000480:	4620      	mov	r0, r4
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	2400      	movs	r4, #0
 8000486:	4620      	mov	r0, r4
 8000488:	bd70      	pop	{r4, r5, r6, pc}
 800048a:	bf00      	nop

0800048c <d_compact_number>:
 800048c:	b510      	push	{r4, lr}
 800048e:	68c3      	ldr	r3, [r0, #12]
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	2a5f      	cmp	r2, #95	; 0x5f
 8000494:	4604      	mov	r4, r0
 8000496:	d00d      	beq.n	80004b4 <d_compact_number+0x28>
 8000498:	2a6e      	cmp	r2, #110	; 0x6e
 800049a:	d00d      	beq.n	80004b8 <d_compact_number+0x2c>
 800049c:	300c      	adds	r0, #12
 800049e:	f7ff ffb1 	bl	8000404 <d_number.isra.1>
 80004a2:	3001      	adds	r0, #1
 80004a4:	d408      	bmi.n	80004b8 <d_compact_number+0x2c>
 80004a6:	68e3      	ldr	r3, [r4, #12]
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	2a5f      	cmp	r2, #95	; 0x5f
 80004ac:	d104      	bne.n	80004b8 <d_compact_number+0x2c>
 80004ae:	3301      	adds	r3, #1
 80004b0:	60e3      	str	r3, [r4, #12]
 80004b2:	bd10      	pop	{r4, pc}
 80004b4:	2000      	movs	r0, #0
 80004b6:	e7fa      	b.n	80004ae <d_compact_number+0x22>
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	bf00      	nop

080004c0 <d_template_param>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	68c3      	ldr	r3, [r0, #12]
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	2a54      	cmp	r2, #84	; 0x54
 80004c8:	d119      	bne.n	80004fe <d_template_param+0x3e>
 80004ca:	3301      	adds	r3, #1
 80004cc:	60c3      	str	r3, [r0, #12]
 80004ce:	4604      	mov	r4, r0
 80004d0:	f7ff ffdc 	bl	800048c <d_compact_number>
 80004d4:	1e05      	subs	r5, r0, #0
 80004d6:	db12      	blt.n	80004fe <d_template_param+0x3e>
 80004d8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80004dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004de:	428b      	cmp	r3, r1
 80004e0:	f102 0201 	add.w	r2, r2, #1
 80004e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80004e6:	da0a      	bge.n	80004fe <d_template_param+0x3e>
 80004e8:	6921      	ldr	r1, [r4, #16]
 80004ea:	011a      	lsls	r2, r3, #4
 80004ec:	1888      	adds	r0, r1, r2
 80004ee:	3301      	adds	r3, #1
 80004f0:	2700      	movs	r7, #0
 80004f2:	2605      	movs	r6, #5
 80004f4:	6047      	str	r7, [r0, #4]
 80004f6:	6163      	str	r3, [r4, #20]
 80004f8:	548e      	strb	r6, [r1, r2]
 80004fa:	6085      	str	r5, [r0, #8]
 80004fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004fe:	2000      	movs	r0, #0
 8000500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000502:	bf00      	nop

08000504 <d_source_name>:
 8000504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000508:	4604      	mov	r4, r0
 800050a:	300c      	adds	r0, #12
 800050c:	f7ff ff7a 	bl	8000404 <d_number.isra.1>
 8000510:	1e07      	subs	r7, r0, #0
 8000512:	dd49      	ble.n	80005a8 <d_source_name+0xa4>
 8000514:	68e5      	ldr	r5, [r4, #12]
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	1b5b      	subs	r3, r3, r5
 800051a:	429f      	cmp	r7, r3
 800051c:	dc42      	bgt.n	80005a4 <d_source_name+0xa0>
 800051e:	68a2      	ldr	r2, [r4, #8]
 8000520:	19eb      	adds	r3, r5, r7
 8000522:	0752      	lsls	r2, r2, #29
 8000524:	60e3      	str	r3, [r4, #12]
 8000526:	d504      	bpl.n	8000532 <d_source_name+0x2e>
 8000528:	5dea      	ldrb	r2, [r5, r7]
 800052a:	2a24      	cmp	r2, #36	; 0x24
 800052c:	bf04      	itt	eq
 800052e:	3301      	addeq	r3, #1
 8000530:	60e3      	streq	r3, [r4, #12]
 8000532:	2f09      	cmp	r7, #9
 8000534:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 8000538:	dc10      	bgt.n	800055c <d_source_name+0x58>
 800053a:	45b0      	cmp	r8, r6
 800053c:	dd32      	ble.n	80005a4 <d_source_name+0xa0>
 800053e:	6921      	ldr	r1, [r4, #16]
 8000540:	0132      	lsls	r2, r6, #4
 8000542:	1888      	adds	r0, r1, r2
 8000544:	3601      	adds	r6, #1
 8000546:	2300      	movs	r3, #0
 8000548:	6043      	str	r3, [r0, #4]
 800054a:	6166      	str	r6, [r4, #20]
 800054c:	b355      	cbz	r5, 80005a4 <d_source_name+0xa0>
 800054e:	6043      	str	r3, [r0, #4]
 8000550:	548b      	strb	r3, [r1, r2]
 8000552:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000556:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800055c:	2208      	movs	r2, #8
 800055e:	4914      	ldr	r1, [pc, #80]	; (80005b0 <d_source_name+0xac>)
 8000560:	4628      	mov	r0, r5
 8000562:	f018 fa6d 	bl	8018a40 <memcmp>
 8000566:	2800      	cmp	r0, #0
 8000568:	d1e7      	bne.n	800053a <d_source_name+0x36>
 800056a:	7a2b      	ldrb	r3, [r5, #8]
 800056c:	2b2e      	cmp	r3, #46	; 0x2e
 800056e:	d003      	beq.n	8000578 <d_source_name+0x74>
 8000570:	2b5f      	cmp	r3, #95	; 0x5f
 8000572:	d001      	beq.n	8000578 <d_source_name+0x74>
 8000574:	2b24      	cmp	r3, #36	; 0x24
 8000576:	d1e0      	bne.n	800053a <d_source_name+0x36>
 8000578:	7a6b      	ldrb	r3, [r5, #9]
 800057a:	2b4e      	cmp	r3, #78	; 0x4e
 800057c:	d1dd      	bne.n	800053a <d_source_name+0x36>
 800057e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000580:	3316      	adds	r3, #22
 8000582:	1bdf      	subs	r7, r3, r7
 8000584:	45b0      	cmp	r8, r6
 8000586:	6327      	str	r7, [r4, #48]	; 0x30
 8000588:	dd0c      	ble.n	80005a4 <d_source_name+0xa0>
 800058a:	6922      	ldr	r2, [r4, #16]
 800058c:	4d09      	ldr	r5, [pc, #36]	; (80005b4 <d_source_name+0xb0>)
 800058e:	0133      	lsls	r3, r6, #4
 8000590:	18d0      	adds	r0, r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	3601      	adds	r6, #1
 8000596:	6166      	str	r6, [r4, #20]
 8000598:	6041      	str	r1, [r0, #4]
 800059a:	54d1      	strb	r1, [r2, r3]
 800059c:	2315      	movs	r3, #21
 800059e:	e9c0 5302 	strd	r5, r3, [r0, #8]
 80005a2:	e7d8      	b.n	8000556 <d_source_name+0x52>
 80005a4:	2000      	movs	r0, #0
 80005a6:	e7d6      	b.n	8000556 <d_source_name+0x52>
 80005a8:	2000      	movs	r0, #0
 80005aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ae:	bf00      	nop
 80005b0:	08093fb4 	.word	0x08093fb4
 80005b4:	08093fc0 	.word	0x08093fc0

080005b8 <d_abi_tags>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	68c3      	ldr	r3, [r0, #12]
 80005bc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	2a42      	cmp	r2, #66	; 0x42
 80005c2:	4604      	mov	r4, r0
 80005c4:	460d      	mov	r5, r1
 80005c6:	d10f      	bne.n	80005e8 <d_abi_tags+0x30>
 80005c8:	3301      	adds	r3, #1
 80005ca:	60e3      	str	r3, [r4, #12]
 80005cc:	4620      	mov	r0, r4
 80005ce:	f7ff ff99 	bl	8000504 <d_source_name>
 80005d2:	462a      	mov	r2, r5
 80005d4:	4603      	mov	r3, r0
 80005d6:	214b      	movs	r1, #75	; 0x4b
 80005d8:	4620      	mov	r0, r4
 80005da:	f7ff fe19 	bl	8000210 <d_make_comp>
 80005de:	68e3      	ldr	r3, [r4, #12]
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	2a42      	cmp	r2, #66	; 0x42
 80005e4:	4605      	mov	r5, r0
 80005e6:	d0ef      	beq.n	80005c8 <d_abi_tags+0x10>
 80005e8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005ea:	4628      	mov	r0, r5
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
 80005ee:	bf00      	nop

080005f0 <d_substitution>:
 80005f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005f4:	4605      	mov	r5, r0
 80005f6:	68c0      	ldr	r0, [r0, #12]
 80005f8:	7803      	ldrb	r3, [r0, #0]
 80005fa:	2b53      	cmp	r3, #83	; 0x53
 80005fc:	d131      	bne.n	8000662 <d_substitution+0x72>
 80005fe:	1c43      	adds	r3, r0, #1
 8000600:	60eb      	str	r3, [r5, #12]
 8000602:	7842      	ldrb	r2, [r0, #1]
 8000604:	b3a2      	cbz	r2, 8000670 <d_substitution+0x80>
 8000606:	1c83      	adds	r3, r0, #2
 8000608:	60eb      	str	r3, [r5, #12]
 800060a:	7842      	ldrb	r2, [r0, #1]
 800060c:	2a5f      	cmp	r2, #95	; 0x5f
 800060e:	f000 8089 	beq.w	8000724 <d_substitution+0x134>
 8000612:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000616:	b2e3      	uxtb	r3, r4
 8000618:	2b09      	cmp	r3, #9
 800061a:	d825      	bhi.n	8000668 <d_substitution+0x78>
 800061c:	2100      	movs	r1, #0
 800061e:	e00e      	b.n	800063e <d_substitution+0x4e>
 8000620:	3b30      	subs	r3, #48	; 0x30
 8000622:	4299      	cmp	r1, r3
 8000624:	d81d      	bhi.n	8000662 <d_substitution+0x72>
 8000626:	68e9      	ldr	r1, [r5, #12]
 8000628:	780a      	ldrb	r2, [r1, #0]
 800062a:	1c48      	adds	r0, r1, #1
 800062c:	b122      	cbz	r2, 8000638 <d_substitution+0x48>
 800062e:	60e8      	str	r0, [r5, #12]
 8000630:	780a      	ldrb	r2, [r1, #0]
 8000632:	2a5f      	cmp	r2, #95	; 0x5f
 8000634:	f000 8082 	beq.w	800073c <d_substitution+0x14c>
 8000638:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800063c:	4619      	mov	r1, r3
 800063e:	b2e4      	uxtb	r4, r4
 8000640:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000644:	2c09      	cmp	r4, #9
 8000646:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800064a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800064e:	d9e7      	bls.n	8000620 <d_substitution+0x30>
 8000650:	2819      	cmp	r0, #25
 8000652:	d806      	bhi.n	8000662 <d_substitution+0x72>
 8000654:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800065c:	3b37      	subs	r3, #55	; 0x37
 800065e:	4299      	cmp	r1, r3
 8000660:	d9e1      	bls.n	8000626 <d_substitution+0x36>
 8000662:	2000      	movs	r0, #0
 8000664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000668:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800066c:	2b19      	cmp	r3, #25
 800066e:	d9d5      	bls.n	800061c <d_substitution+0x2c>
 8000670:	68ab      	ldr	r3, [r5, #8]
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2401      	movne	r4, #1
 800067c:	2400      	moveq	r4, #0
 800067e:	d101      	bne.n	8000684 <d_substitution+0x94>
 8000680:	2900      	cmp	r1, #0
 8000682:	d15d      	bne.n	8000740 <d_substitution+0x150>
 8000684:	4b35      	ldr	r3, [pc, #212]	; (800075c <d_substitution+0x16c>)
 8000686:	2174      	movs	r1, #116	; 0x74
 8000688:	4291      	cmp	r1, r2
 800068a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800068e:	d005      	beq.n	800069c <d_substitution+0xac>
 8000690:	331c      	adds	r3, #28
 8000692:	4283      	cmp	r3, r0
 8000694:	d2e5      	bcs.n	8000662 <d_substitution+0x72>
 8000696:	7819      	ldrb	r1, [r3, #0]
 8000698:	4291      	cmp	r1, r2
 800069a:	d1f9      	bne.n	8000690 <d_substitution+0xa0>
 800069c:	6958      	ldr	r0, [r3, #20]
 800069e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 80006a2:	b1a8      	cbz	r0, 80006d0 <d_substitution+0xe0>
 80006a4:	428a      	cmp	r2, r1
 80006a6:	da57      	bge.n	8000758 <d_substitution+0x168>
 80006a8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80006ac:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80006b0:	0117      	lsls	r7, r2, #4
 80006b2:	eb0c 0607 	add.w	r6, ip, r7
 80006b6:	3201      	adds	r2, #1
 80006b8:	f04f 0900 	mov.w	r9, #0
 80006bc:	f04f 0818 	mov.w	r8, #24
 80006c0:	f8c6 9004 	str.w	r9, [r6, #4]
 80006c4:	616a      	str	r2, [r5, #20]
 80006c6:	f80c 8007 	strb.w	r8, [ip, r7]
 80006ca:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 80006ce:	62ee      	str	r6, [r5, #44]	; 0x2c
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	d13c      	bne.n	800074e <d_substitution+0x15e>
 80006d4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 80006d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006da:	4291      	cmp	r1, r2
 80006dc:	4423      	add	r3, r4
 80006de:	632b      	str	r3, [r5, #48]	; 0x30
 80006e0:	dd38      	ble.n	8000754 <d_substitution+0x164>
 80006e2:	6929      	ldr	r1, [r5, #16]
 80006e4:	0113      	lsls	r3, r2, #4
 80006e6:	18c8      	adds	r0, r1, r3
 80006e8:	3201      	adds	r2, #1
 80006ea:	f04f 0c00 	mov.w	ip, #0
 80006ee:	2718      	movs	r7, #24
 80006f0:	f8c0 c004 	str.w	ip, [r0, #4]
 80006f4:	616a      	str	r2, [r5, #20]
 80006f6:	54cf      	strb	r7, [r1, r3]
 80006f8:	e9c0 6402 	strd	r6, r4, [r0, #8]
 80006fc:	68eb      	ldr	r3, [r5, #12]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b42      	cmp	r3, #66	; 0x42
 8000702:	d1af      	bne.n	8000664 <d_substitution+0x74>
 8000704:	4601      	mov	r1, r0
 8000706:	4628      	mov	r0, r5
 8000708:	f7ff ff56 	bl	80005b8 <d_abi_tags>
 800070c:	2800      	cmp	r0, #0
 800070e:	d0a8      	beq.n	8000662 <d_substitution+0x72>
 8000710:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000714:	4293      	cmp	r3, r2
 8000716:	daa5      	bge.n	8000664 <d_substitution+0x74>
 8000718:	69e9      	ldr	r1, [r5, #28]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000720:	622a      	str	r2, [r5, #32]
 8000722:	e79f      	b.n	8000664 <d_substitution+0x74>
 8000724:	2300      	movs	r3, #0
 8000726:	6a2a      	ldr	r2, [r5, #32]
 8000728:	429a      	cmp	r2, r3
 800072a:	d99a      	bls.n	8000662 <d_substitution+0x72>
 800072c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800072e:	69e9      	ldr	r1, [r5, #28]
 8000730:	3201      	adds	r2, #1
 8000732:	62aa      	str	r2, [r5, #40]	; 0x28
 8000734:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800073c:	3301      	adds	r3, #1
 800073e:	e7f2      	b.n	8000726 <d_substitution+0x136>
 8000740:	68eb      	ldr	r3, [r5, #12]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3b43      	subs	r3, #67	; 0x43
 8000746:	2b01      	cmp	r3, #1
 8000748:	bf98      	it	ls
 800074a:	460c      	movls	r4, r1
 800074c:	e79a      	b.n	8000684 <d_substitution+0x94>
 800074e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000752:	e7c1      	b.n	80006d8 <d_substitution+0xe8>
 8000754:	2000      	movs	r0, #0
 8000756:	e7d1      	b.n	80006fc <d_substitution+0x10c>
 8000758:	2600      	movs	r6, #0
 800075a:	e7b8      	b.n	80006ce <d_substitution+0xde>
 800075c:	0801c210 	.word	0x0801c210

08000760 <d_discriminator>:
 8000760:	68c3      	ldr	r3, [r0, #12]
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	2a5f      	cmp	r2, #95	; 0x5f
 8000766:	d001      	beq.n	800076c <d_discriminator+0xc>
 8000768:	2001      	movs	r0, #1
 800076a:	4770      	bx	lr
 800076c:	b510      	push	{r4, lr}
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	4604      	mov	r4, r0
 8000772:	f840 2f0c 	str.w	r2, [r0, #12]!
 8000776:	785a      	ldrb	r2, [r3, #1]
 8000778:	2a5f      	cmp	r2, #95	; 0x5f
 800077a:	d004      	beq.n	8000786 <d_discriminator+0x26>
 800077c:	f7ff fe42 	bl	8000404 <d_number.isra.1>
 8000780:	43c0      	mvns	r0, r0
 8000782:	0fc0      	lsrs	r0, r0, #31
 8000784:	bd10      	pop	{r4, pc}
 8000786:	3302      	adds	r3, #2
 8000788:	60e3      	str	r3, [r4, #12]
 800078a:	f7ff fe3b 	bl	8000404 <d_number.isra.1>
 800078e:	2800      	cmp	r0, #0
 8000790:	db05      	blt.n	800079e <d_discriminator+0x3e>
 8000792:	2809      	cmp	r0, #9
 8000794:	dd07      	ble.n	80007a6 <d_discriminator+0x46>
 8000796:	68e3      	ldr	r3, [r4, #12]
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	2a5f      	cmp	r2, #95	; 0x5f
 800079c:	d001      	beq.n	80007a2 <d_discriminator+0x42>
 800079e:	2000      	movs	r0, #0
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	3301      	adds	r3, #1
 80007a4:	60e3      	str	r3, [r4, #12]
 80007a6:	2001      	movs	r0, #1
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop

080007ac <d_index_template_argument.part.9>:
 80007ac:	b170      	cbz	r0, 80007cc <d_index_template_argument.part.9+0x20>
 80007ae:	7803      	ldrb	r3, [r0, #0]
 80007b0:	2b2f      	cmp	r3, #47	; 0x2f
 80007b2:	d10f      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	dc04      	bgt.n	80007c2 <d_index_template_argument.part.9+0x16>
 80007b8:	e009      	b.n	80007ce <d_index_template_argument.part.9+0x22>
 80007ba:	7803      	ldrb	r3, [r0, #0]
 80007bc:	2b2f      	cmp	r3, #47	; 0x2f
 80007be:	d109      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007c0:	b131      	cbz	r1, 80007d0 <d_index_template_argument.part.9+0x24>
 80007c2:	68c0      	ldr	r0, [r0, #12]
 80007c4:	3901      	subs	r1, #1
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d1f7      	bne.n	80007ba <d_index_template_argument.part.9+0xe>
 80007ca:	4770      	bx	lr
 80007cc:	4770      	bx	lr
 80007ce:	d101      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007d0:	6880      	ldr	r0, [r0, #8]
 80007d2:	4770      	bx	lr
 80007d4:	2000      	movs	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <d_lookup_template_argument.isra.10>:
 80007d8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80007dc:	b133      	cbz	r3, 80007ec <d_lookup_template_argument.isra.10+0x14>
 80007de:	6809      	ldr	r1, [r1, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2900      	cmp	r1, #0
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	db04      	blt.n	80007f2 <d_lookup_template_argument.isra.10+0x1a>
 80007e8:	4618      	mov	r0, r3
 80007ea:	e7df      	b.n	80007ac <d_index_template_argument.part.9>
 80007ec:	2201      	movs	r2, #1
 80007ee:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007f2:	4618      	mov	r0, r3
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <d_find_pack>:
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d042      	beq.n	8000882 <d_find_pack+0x8a>
 80007fc:	b538      	push	{r3, r4, r5, lr}
 80007fe:	4605      	mov	r5, r0
 8000800:	460c      	mov	r4, r1
 8000802:	7823      	ldrb	r3, [r4, #0]
 8000804:	2b4b      	cmp	r3, #75	; 0x4b
 8000806:	d827      	bhi.n	8000858 <d_find_pack+0x60>
 8000808:	e8df f003 	tbb	[pc, r3]
 800080c:	2626262e 	.word	0x2626262e
 8000810:	2b2e3026 	.word	0x2b2e3026
 8000814:	2626262b 	.word	0x2626262b
 8000818:	26262626 	.word	0x26262626
 800081c:	26262626 	.word	0x26262626
 8000820:	26262626 	.word	0x26262626
 8000824:	2626262e 	.word	0x2626262e
 8000828:	26262626 	.word	0x26262626
 800082c:	26262626 	.word	0x26262626
 8000830:	2e262626 	.word	0x2e262626
 8000834:	26262626 	.word	0x26262626
 8000838:	2626262e 	.word	0x2626262e
 800083c:	262b2e26 	.word	0x262b2e26
 8000840:	26262626 	.word	0x26262626
 8000844:	26262626 	.word	0x26262626
 8000848:	26262626 	.word	0x26262626
 800084c:	26262e2e 	.word	0x26262e2e
 8000850:	2e2e2e26 	.word	0x2e2e2e26
 8000854:	2e2e2626 	.word	0x2e2e2626
 8000858:	68a1      	ldr	r1, [r4, #8]
 800085a:	4628      	mov	r0, r5
 800085c:	f7ff ffcc 	bl	80007f8 <d_find_pack>
 8000860:	b918      	cbnz	r0, 800086a <d_find_pack+0x72>
 8000862:	68e4      	ldr	r4, [r4, #12]
 8000864:	2c00      	cmp	r4, #0
 8000866:	d1cc      	bne.n	8000802 <d_find_pack+0xa>
 8000868:	2000      	movs	r0, #0
 800086a:	bd38      	pop	{r3, r4, r5, pc}
 800086c:	f104 0108 	add.w	r1, r4, #8
 8000870:	4628      	mov	r0, r5
 8000872:	f7ff ffb1 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8000876:	2800      	cmp	r0, #0
 8000878:	d0f6      	beq.n	8000868 <d_find_pack+0x70>
 800087a:	7803      	ldrb	r3, [r0, #0]
 800087c:	2b2f      	cmp	r3, #47	; 0x2f
 800087e:	d1f3      	bne.n	8000868 <d_find_pack+0x70>
 8000880:	bd38      	pop	{r3, r4, r5, pc}
 8000882:	2000      	movs	r0, #0
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <d_growable_string_callback_adapter>:
 8000888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800088c:	4614      	mov	r4, r2
 800088e:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 8000892:	6852      	ldr	r2, [r2, #4]
 8000894:	1c4b      	adds	r3, r1, #1
 8000896:	4413      	add	r3, r2
 8000898:	42ab      	cmp	r3, r5
 800089a:	b082      	sub	sp, #8
 800089c:	460e      	mov	r6, r1
 800089e:	4680      	mov	r8, r0
 80008a0:	d814      	bhi.n	80008cc <d_growable_string_callback_adapter+0x44>
 80008a2:	b117      	cbz	r7, 80008aa <d_growable_string_callback_adapter+0x22>
 80008a4:	b002      	add	sp, #8
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008aa:	e9d4 0300 	ldrd	r0, r3, [r4]
 80008ae:	4632      	mov	r2, r6
 80008b0:	4641      	mov	r1, r8
 80008b2:	4418      	add	r0, r3
 80008b4:	f018 f8d3 	bl	8018a5e <memcpy>
 80008b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80008bc:	4433      	add	r3, r6
 80008be:	549f      	strb	r7, [r3, r2]
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	441e      	add	r6, r3
 80008c4:	6066      	str	r6, [r4, #4]
 80008c6:	b002      	add	sp, #8
 80008c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008cc:	2f00      	cmp	r7, #0
 80008ce:	d1e9      	bne.n	80008a4 <d_growable_string_callback_adapter+0x1c>
 80008d0:	b91d      	cbnz	r5, 80008da <d_growable_string_callback_adapter+0x52>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	f04f 0502 	mov.w	r5, #2
 80008d8:	d902      	bls.n	80008e0 <d_growable_string_callback_adapter+0x58>
 80008da:	006d      	lsls	r5, r5, #1
 80008dc:	42ab      	cmp	r3, r5
 80008de:	d8fc      	bhi.n	80008da <d_growable_string_callback_adapter+0x52>
 80008e0:	4629      	mov	r1, r5
 80008e2:	6820      	ldr	r0, [r4, #0]
 80008e4:	f018 f928 	bl	8018b38 <realloc>
 80008e8:	b128      	cbz	r0, 80008f6 <d_growable_string_callback_adapter+0x6e>
 80008ea:	68e7      	ldr	r7, [r4, #12]
 80008ec:	6020      	str	r0, [r4, #0]
 80008ee:	60a5      	str	r5, [r4, #8]
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d1d7      	bne.n	80008a4 <d_growable_string_callback_adapter+0x1c>
 80008f4:	e7d9      	b.n	80008aa <d_growable_string_callback_adapter+0x22>
 80008f6:	9001      	str	r0, [sp, #4]
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	f017 fe63 	bl	80185c4 <free>
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	e9c4 3300 	strd	r3, r3, [r4]
 8000906:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800090a:	e7cb      	b.n	80008a4 <d_growable_string_callback_adapter+0x1c>

0800090c <d_call_offset>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4604      	mov	r4, r0
 8000910:	b929      	cbnz	r1, 800091e <d_call_offset+0x12>
 8000912:	68c3      	ldr	r3, [r0, #12]
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	b132      	cbz	r2, 8000926 <d_call_offset+0x1a>
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	60c2      	str	r2, [r0, #12]
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	2968      	cmp	r1, #104	; 0x68
 8000920:	d012      	beq.n	8000948 <d_call_offset+0x3c>
 8000922:	2976      	cmp	r1, #118	; 0x76
 8000924:	d001      	beq.n	800092a <d_call_offset+0x1e>
 8000926:	2000      	movs	r0, #0
 8000928:	bd38      	pop	{r3, r4, r5, pc}
 800092a:	f104 050c 	add.w	r5, r4, #12
 800092e:	4628      	mov	r0, r5
 8000930:	f7ff fd68 	bl	8000404 <d_number.isra.1>
 8000934:	68e3      	ldr	r3, [r4, #12]
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	2a5f      	cmp	r2, #95	; 0x5f
 800093a:	d1f4      	bne.n	8000926 <d_call_offset+0x1a>
 800093c:	3301      	adds	r3, #1
 800093e:	60e3      	str	r3, [r4, #12]
 8000940:	4628      	mov	r0, r5
 8000942:	f7ff fd5f 	bl	8000404 <d_number.isra.1>
 8000946:	e003      	b.n	8000950 <d_call_offset+0x44>
 8000948:	f104 000c 	add.w	r0, r4, #12
 800094c:	f7ff fd5a 	bl	8000404 <d_number.isra.1>
 8000950:	68e3      	ldr	r3, [r4, #12]
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	2a5f      	cmp	r2, #95	; 0x5f
 8000956:	d1e6      	bne.n	8000926 <d_call_offset+0x1a>
 8000958:	3301      	adds	r3, #1
 800095a:	60e3      	str	r3, [r4, #12]
 800095c:	2001      	movs	r0, #1
 800095e:	bd38      	pop	{r3, r4, r5, pc}

08000960 <d_append_num>:
 8000960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000964:	b088      	sub	sp, #32
 8000966:	460a      	mov	r2, r1
 8000968:	4604      	mov	r4, r0
 800096a:	491c      	ldr	r1, [pc, #112]	; (80009dc <d_append_num+0x7c>)
 800096c:	a801      	add	r0, sp, #4
 800096e:	f018 fae9 	bl	8018f44 <sprintf>
 8000972:	a801      	add	r0, sp, #4
 8000974:	f006 fa16 	bl	8006da4 <strlen>
 8000978:	b368      	cbz	r0, 80009d6 <d_append_num+0x76>
 800097a:	ad01      	add	r5, sp, #4
 800097c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000980:	182e      	adds	r6, r5, r0
 8000982:	2700      	movs	r7, #0
 8000984:	e016      	b.n	80009b4 <d_append_num+0x54>
 8000986:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800098a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800098e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8000992:	4798      	blx	r3
 8000994:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000998:	2200      	movs	r2, #0
 800099a:	3301      	adds	r3, #1
 800099c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80009a0:	42ae      	cmp	r6, r5
 80009a2:	f04f 0301 	mov.w	r3, #1
 80009a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009aa:	f804 8002 	strb.w	r8, [r4, r2]
 80009ae:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009b2:	d010      	beq.n	80009d6 <d_append_num+0x76>
 80009b4:	2bff      	cmp	r3, #255	; 0xff
 80009b6:	4619      	mov	r1, r3
 80009b8:	4620      	mov	r0, r4
 80009ba:	f815 8b01 	ldrb.w	r8, [r5], #1
 80009be:	d0e2      	beq.n	8000986 <d_append_num+0x26>
 80009c0:	461a      	mov	r2, r3
 80009c2:	42ae      	cmp	r6, r5
 80009c4:	f103 0301 	add.w	r3, r3, #1
 80009c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009cc:	f804 8002 	strb.w	r8, [r4, r2]
 80009d0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009d4:	d1ee      	bne.n	80009b4 <d_append_num+0x54>
 80009d6:	b008      	add	sp, #32
 80009d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009dc:	08093fd8 	.word	0x08093fd8

080009e0 <d_exprlist>:
 80009e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e4:	68c3      	ldr	r3, [r0, #12]
 80009e6:	781d      	ldrb	r5, [r3, #0]
 80009e8:	b083      	sub	sp, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	428d      	cmp	r5, r1
 80009ee:	4604      	mov	r4, r0
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	f000 8199 	beq.w	8000d28 <d_exprlist+0x348>
 80009f6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000eb8 <d_exprlist+0x4d8>
 80009fa:	4688      	mov	r8, r1
 80009fc:	af01      	add	r7, sp, #4
 80009fe:	2501      	movs	r5, #1
 8000a00:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8000a02:	6365      	str	r5, [r4, #52]	; 0x34
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	2a4c      	cmp	r2, #76	; 0x4c
 8000a08:	d05c      	beq.n	8000ac4 <d_exprlist+0xe4>
 8000a0a:	2a54      	cmp	r2, #84	; 0x54
 8000a0c:	d066      	beq.n	8000adc <d_exprlist+0xfc>
 8000a0e:	2a73      	cmp	r2, #115	; 0x73
 8000a10:	d045      	beq.n	8000a9e <d_exprlist+0xbe>
 8000a12:	2a66      	cmp	r2, #102	; 0x66
 8000a14:	d11c      	bne.n	8000a50 <d_exprlist+0x70>
 8000a16:	785a      	ldrb	r2, [r3, #1]
 8000a18:	2a70      	cmp	r2, #112	; 0x70
 8000a1a:	f000 8087 	beq.w	8000b2c <d_exprlist+0x14c>
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f001 fa70 	bl	8001f04 <d_operator_name>
 8000a24:	4605      	mov	r5, r0
 8000a26:	2800      	cmp	r0, #0
 8000a28:	f000 818c 	beq.w	8000d44 <d_exprlist+0x364>
 8000a2c:	7803      	ldrb	r3, [r0, #0]
 8000a2e:	2b31      	cmp	r3, #49	; 0x31
 8000a30:	f000 8098 	beq.w	8000b64 <d_exprlist+0x184>
 8000a34:	2b32      	cmp	r3, #50	; 0x32
 8000a36:	d056      	beq.n	8000ae6 <d_exprlist+0x106>
 8000a38:	2b33      	cmp	r3, #51	; 0x33
 8000a3a:	d171      	bne.n	8000b20 <d_exprlist+0x140>
 8000a3c:	68e3      	ldr	r3, [r4, #12]
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	2a5f      	cmp	r2, #95	; 0x5f
 8000a42:	f000 81da 	beq.w	8000dfa <d_exprlist+0x41a>
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 fa38 	bl	8000ebc <d_expression_1>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	e0c1      	b.n	8000bd4 <d_exprlist+0x1f4>
 8000a50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a54:	2909      	cmp	r1, #9
 8000a56:	f200 80e7 	bhi.w	8000c28 <d_exprlist+0x248>
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f001 fbfe 	bl	800225c <d_unqualified_name>
 8000a60:	4605      	mov	r5, r0
 8000a62:	2800      	cmp	r0, #0
 8000a64:	f000 816e 	beq.w	8000d44 <d_exprlist+0x364>
 8000a68:	68e3      	ldr	r3, [r4, #12]
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	2a49      	cmp	r2, #73	; 0x49
 8000a6e:	f000 80b8 	beq.w	8000be2 <d_exprlist+0x202>
 8000a72:	6366      	str	r6, [r4, #52]	; 0x34
 8000a74:	462a      	mov	r2, r5
 8000a76:	2300      	movs	r3, #0
 8000a78:	212e      	movs	r1, #46	; 0x2e
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff fbc8 	bl	8000210 <d_make_comp>
 8000a80:	6038      	str	r0, [r7, #0]
 8000a82:	b330      	cbz	r0, 8000ad2 <d_exprlist+0xf2>
 8000a84:	68e3      	ldr	r3, [r4, #12]
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4542      	cmp	r2, r8
 8000a8a:	f100 070c 	add.w	r7, r0, #12
 8000a8e:	d1b6      	bne.n	80009fe <d_exprlist+0x1e>
 8000a90:	3301      	adds	r3, #1
 8000a92:	9d01      	ldr	r5, [sp, #4]
 8000a94:	60e3      	str	r3, [r4, #12]
 8000a96:	4628      	mov	r0, r5
 8000a98:	b003      	add	sp, #12
 8000a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a9e:	785a      	ldrb	r2, [r3, #1]
 8000aa0:	2a72      	cmp	r2, #114	; 0x72
 8000aa2:	f000 80ab 	beq.w	8000bfc <d_exprlist+0x21c>
 8000aa6:	2a70      	cmp	r2, #112	; 0x70
 8000aa8:	d1b9      	bne.n	8000a1e <d_exprlist+0x3e>
 8000aaa:	3302      	adds	r3, #2
 8000aac:	60e3      	str	r3, [r4, #12]
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f000 fa04 	bl	8000ebc <d_expression_1>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	214a      	movs	r1, #74	; 0x4a
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fba8 	bl	8000210 <d_make_comp>
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	e003      	b.n	8000acc <d_exprlist+0xec>
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f002 f813 	bl	8002af0 <d_expr_primary>
 8000aca:	4605      	mov	r5, r0
 8000acc:	6366      	str	r6, [r4, #52]	; 0x34
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d1d0      	bne.n	8000a74 <d_exprlist+0x94>
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	b003      	add	sp, #12
 8000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000adc:	4620      	mov	r0, r4
 8000ade:	f7ff fcef 	bl	80004c0 <d_template_param>
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	e7f2      	b.n	8000acc <d_exprlist+0xec>
 8000ae6:	6883      	ldr	r3, [r0, #8]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d819      	bhi.n	8000b20 <d_exprlist+0x140>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <d_exprlist+0x114>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000c87 	.word	0x08000c87
 8000af8:	08000a47 	.word	0x08000a47
 8000afc:	08000b21 	.word	0x08000b21
 8000b00:	08000b21 	.word	0x08000b21
 8000b04:	2a74      	cmp	r2, #116	; 0x74
 8000b06:	d18a      	bne.n	8000a1e <d_exprlist+0x3e>
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	2b6c      	cmp	r3, #108	; 0x6c
 8000b0c:	d187      	bne.n	8000a1e <d_exprlist+0x3e>
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f000 fdfe 	bl	8001710 <d_type>
 8000b14:	68e3      	ldr	r3, [r4, #12]
 8000b16:	785a      	ldrb	r2, [r3, #1]
 8000b18:	4605      	mov	r5, r0
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8123 	bne.w	8000d66 <d_exprlist+0x386>
 8000b20:	2500      	movs	r5, #0
 8000b22:	4628      	mov	r0, r5
 8000b24:	6366      	str	r6, [r4, #52]	; 0x34
 8000b26:	b003      	add	sp, #12
 8000b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2c:	1c9a      	adds	r2, r3, #2
 8000b2e:	60e2      	str	r2, [r4, #12]
 8000b30:	789a      	ldrb	r2, [r3, #2]
 8000b32:	2a54      	cmp	r2, #84	; 0x54
 8000b34:	f040 8082 	bne.w	8000c3c <d_exprlist+0x25c>
 8000b38:	3303      	adds	r3, #3
 8000b3a:	60e3      	str	r3, [r4, #12]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	daec      	bge.n	8000b20 <d_exprlist+0x140>
 8000b46:	6921      	ldr	r1, [r4, #16]
 8000b48:	011a      	lsls	r2, r3, #4
 8000b4a:	188d      	adds	r5, r1, r2
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	f04f 0e00 	mov.w	lr, #0
 8000b52:	f04f 0c06 	mov.w	ip, #6
 8000b56:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b5a:	6163      	str	r3, [r4, #20]
 8000b5c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b60:	60a8      	str	r0, [r5, #8]
 8000b62:	e786      	b.n	8000a72 <d_exprlist+0x92>
 8000b64:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b6a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b6e:	f8db a000 	ldr.w	sl, [fp]
 8000b72:	3a02      	subs	r2, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	6323      	str	r3, [r4, #48]	; 0x30
 8000b78:	4650      	mov	r0, sl
 8000b7a:	4649      	mov	r1, r9
 8000b7c:	f006 f908 	bl	8006d90 <strcmp>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	f000 80e4 	beq.w	8000d4e <d_exprlist+0x36e>
 8000b86:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000b8a:	f1bb 0f03 	cmp.w	fp, #3
 8000b8e:	d8c7      	bhi.n	8000b20 <d_exprlist+0x140>
 8000b90:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000b94:	00040079 	.word	0x00040079
 8000b98:	008100f7 	.word	0x008100f7
 8000b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8000ba0:	2b70      	cmp	r3, #112	; 0x70
 8000ba2:	d065      	beq.n	8000c70 <d_exprlist+0x290>
 8000ba4:	2b6d      	cmp	r3, #109	; 0x6d
 8000ba6:	d063      	beq.n	8000c70 <d_exprlist+0x290>
 8000ba8:	f04f 0b00 	mov.w	fp, #0
 8000bac:	4650      	mov	r0, sl
 8000bae:	49bd      	ldr	r1, [pc, #756]	; (8000ea4 <d_exprlist+0x4c4>)
 8000bb0:	f006 f8ee 	bl	8006d90 <strcmp>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	f040 80c0 	bne.w	8000d3a <d_exprlist+0x35a>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f000 fb90 	bl	80012e0 <d_template_args_1>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f1bb 0f00 	cmp.w	fp, #0
 8000bc6:	d005      	beq.n	8000bd4 <d_exprlist+0x1f4>
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2138      	movs	r1, #56	; 0x38
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f7ff fb1f 	bl	8000210 <d_make_comp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	2136      	movs	r1, #54	; 0x36
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f7ff fb19 	bl	8000210 <d_make_comp>
 8000bde:	4605      	mov	r5, r0
 8000be0:	e774      	b.n	8000acc <d_exprlist+0xec>
 8000be2:	3301      	adds	r3, #1
 8000be4:	60e3      	str	r3, [r4, #12]
 8000be6:	4620      	mov	r0, r4
 8000be8:	f000 fb7a 	bl	80012e0 <d_template_args_1>
 8000bec:	462a      	mov	r2, r5
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fb0c 	bl	8000210 <d_make_comp>
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	e767      	b.n	8000acc <d_exprlist+0xec>
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	60e3      	str	r3, [r4, #12]
 8000c00:	4620      	mov	r0, r4
 8000c02:	f000 fd85 	bl	8001710 <d_type>
 8000c06:	4682      	mov	sl, r0
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f001 fb27 	bl	800225c <d_unqualified_name>
 8000c0e:	68e3      	ldr	r3, [r4, #12]
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	2a49      	cmp	r2, #73	; 0x49
 8000c14:	4683      	mov	fp, r0
 8000c16:	d01e      	beq.n	8000c56 <d_exprlist+0x276>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4652      	mov	r2, sl
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff faf6 	bl	8000210 <d_make_comp>
 8000c24:	4605      	mov	r5, r0
 8000c26:	e751      	b.n	8000acc <d_exprlist+0xec>
 8000c28:	2a6f      	cmp	r2, #111	; 0x6f
 8000c2a:	f040 8094 	bne.w	8000d56 <d_exprlist+0x376>
 8000c2e:	785a      	ldrb	r2, [r3, #1]
 8000c30:	2a6e      	cmp	r2, #110	; 0x6e
 8000c32:	f47f aef4 	bne.w	8000a1e <d_exprlist+0x3e>
 8000c36:	3302      	adds	r3, #2
 8000c38:	60e3      	str	r3, [r4, #12]
 8000c3a:	e70e      	b.n	8000a5a <d_exprlist+0x7a>
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f7ff fc25 	bl	800048c <d_compact_number>
 8000c42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c46:	4298      	cmp	r0, r3
 8000c48:	f43f af6a 	beq.w	8000b20 <d_exprlist+0x140>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	f43f af67 	beq.w	8000b20 <d_exprlist+0x140>
 8000c52:	3001      	adds	r0, #1
 8000c54:	e773      	b.n	8000b3e <d_exprlist+0x15e>
 8000c56:	3301      	adds	r3, #1
 8000c58:	60e3      	str	r3, [r4, #12]
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f000 fb40 	bl	80012e0 <d_template_args_1>
 8000c60:	465a      	mov	r2, fp
 8000c62:	4603      	mov	r3, r0
 8000c64:	2104      	movs	r1, #4
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff fad2 	bl	8000210 <d_make_comp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	e7d4      	b.n	8000c1a <d_exprlist+0x23a>
 8000c70:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d197      	bne.n	8000ba8 <d_exprlist+0x1c8>
 8000c78:	68e3      	ldr	r3, [r4, #12]
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	2a5f      	cmp	r2, #95	; 0x5f
 8000c7e:	d195      	bne.n	8000bac <d_exprlist+0x1cc>
 8000c80:	3301      	adds	r3, #1
 8000c82:	60e3      	str	r3, [r4, #12]
 8000c84:	e790      	b.n	8000ba8 <d_exprlist+0x1c8>
 8000c86:	462a      	mov	r2, r5
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2135      	movs	r1, #53	; 0x35
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fabf 	bl	8000210 <d_make_comp>
 8000c92:	4605      	mov	r5, r0
 8000c94:	e71a      	b.n	8000acc <d_exprlist+0xec>
 8000c96:	f1ba 0f00 	cmp.w	sl, #0
 8000c9a:	f43f af41 	beq.w	8000b20 <d_exprlist+0x140>
 8000c9e:	4982      	ldr	r1, [pc, #520]	; (8000ea8 <d_exprlist+0x4c8>)
 8000ca0:	4650      	mov	r0, sl
 8000ca2:	f006 f875 	bl	8006d90 <strcmp>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	f000 80c7 	beq.w	8000e3a <d_exprlist+0x45a>
 8000cac:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb0:	2b66      	cmp	r3, #102	; 0x66
 8000cb2:	f000 80ed 	beq.w	8000e90 <d_exprlist+0x4b0>
 8000cb6:	2b6e      	cmp	r3, #110	; 0x6e
 8000cb8:	f47f af32 	bne.w	8000b20 <d_exprlist+0x140>
 8000cbc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000cc0:	2b77      	cmp	r3, #119	; 0x77
 8000cc2:	d002      	beq.n	8000cca <d_exprlist+0x2ea>
 8000cc4:	2b61      	cmp	r3, #97	; 0x61
 8000cc6:	f47f af2b 	bne.w	8000b20 <d_exprlist+0x140>
 8000cca:	215f      	movs	r1, #95	; 0x5f
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff fe87 	bl	80009e0 <d_exprlist>
 8000cd2:	4682      	mov	sl, r0
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f000 fd1b 	bl	8001710 <d_type>
 8000cda:	68e3      	ldr	r3, [r4, #12]
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	2a45      	cmp	r2, #69	; 0x45
 8000ce0:	4683      	mov	fp, r0
 8000ce2:	f000 8086 	beq.w	8000df2 <d_exprlist+0x412>
 8000ce6:	2a70      	cmp	r2, #112	; 0x70
 8000ce8:	f000 80c6 	beq.w	8000e78 <d_exprlist+0x498>
 8000cec:	2a69      	cmp	r2, #105	; 0x69
 8000cee:	f47f af17 	bne.w	8000b20 <d_exprlist+0x140>
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	2b6c      	cmp	r3, #108	; 0x6c
 8000cf6:	f47f af13 	bne.w	8000b20 <d_exprlist+0x140>
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f000 f8de 	bl	8000ebc <d_expression_1>
 8000d00:	4603      	mov	r3, r0
 8000d02:	465a      	mov	r2, fp
 8000d04:	213b      	movs	r1, #59	; 0x3b
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fa82 	bl	8000210 <d_make_comp>
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	4603      	mov	r3, r0
 8000d10:	213a      	movs	r1, #58	; 0x3a
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff fa7c 	bl	8000210 <d_make_comp>
 8000d18:	462a      	mov	r2, r5
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2139      	movs	r1, #57	; 0x39
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fa76 	bl	8000210 <d_make_comp>
 8000d24:	4605      	mov	r5, r0
 8000d26:	e6d1      	b.n	8000acc <d_exprlist+0xec>
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60c3      	str	r3, [r0, #12]
 8000d2c:	212e      	movs	r1, #46	; 0x2e
 8000d2e:	4613      	mov	r3, r2
 8000d30:	b003      	add	sp, #12
 8000d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d36:	f7ff ba6b 	b.w	8000210 <d_make_comp>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f8be 	bl	8000ebc <d_expression_1>
 8000d40:	4603      	mov	r3, r0
 8000d42:	e73e      	b.n	8000bc2 <d_exprlist+0x1e2>
 8000d44:	4628      	mov	r0, r5
 8000d46:	6366      	str	r6, [r4, #52]	; 0x34
 8000d48:	b003      	add	sp, #12
 8000d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f000 fcde 	bl	8001710 <d_type>
 8000d54:	e73d      	b.n	8000bd2 <d_exprlist+0x1f2>
 8000d56:	2a69      	cmp	r2, #105	; 0x69
 8000d58:	f47f aed4 	bne.w	8000b04 <d_exprlist+0x124>
 8000d5c:	785a      	ldrb	r2, [r3, #1]
 8000d5e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d60:	f47f ae5d 	bne.w	8000a1e <d_exprlist+0x3e>
 8000d64:	2500      	movs	r5, #0
 8000d66:	3302      	adds	r3, #2
 8000d68:	60e3      	str	r3, [r4, #12]
 8000d6a:	2145      	movs	r1, #69	; 0x45
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff fe37 	bl	80009e0 <d_exprlist>
 8000d72:	462a      	mov	r2, r5
 8000d74:	4603      	mov	r3, r0
 8000d76:	2130      	movs	r1, #48	; 0x30
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff fa49 	bl	8000210 <d_make_comp>
 8000d7e:	4605      	mov	r5, r0
 8000d80:	e6a4      	b.n	8000acc <d_exprlist+0xec>
 8000d82:	f1ba 0f00 	cmp.w	sl, #0
 8000d86:	f43f aecb 	beq.w	8000b20 <d_exprlist+0x140>
 8000d8a:	68ab      	ldr	r3, [r5, #8]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	785a      	ldrb	r2, [r3, #1]
 8000d90:	2a63      	cmp	r2, #99	; 0x63
 8000d92:	d03a      	beq.n	8000e0a <d_exprlist+0x42a>
 8000d94:	f89a 3000 	ldrb.w	r3, [sl]
 8000d98:	2b66      	cmp	r3, #102	; 0x66
 8000d9a:	d149      	bne.n	8000e30 <d_exprlist+0x450>
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f001 f8b1 	bl	8001f04 <d_operator_name>
 8000da2:	4683      	mov	fp, r0
 8000da4:	4941      	ldr	r1, [pc, #260]	; (8000eac <d_exprlist+0x4cc>)
 8000da6:	4650      	mov	r0, sl
 8000da8:	f005 fff2 	bl	8006d90 <strcmp>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d039      	beq.n	8000e24 <d_exprlist+0x444>
 8000db0:	493f      	ldr	r1, [pc, #252]	; (8000eb0 <d_exprlist+0x4d0>)
 8000db2:	4650      	mov	r0, sl
 8000db4:	f005 ffec 	bl	8006d90 <strcmp>
 8000db8:	b128      	cbz	r0, 8000dc6 <d_exprlist+0x3e6>
 8000dba:	4650      	mov	r0, sl
 8000dbc:	493d      	ldr	r1, [pc, #244]	; (8000eb4 <d_exprlist+0x4d4>)
 8000dbe:	f005 ffe7 	bl	8006d90 <strcmp>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d168      	bne.n	8000e98 <d_exprlist+0x4b8>
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f001 fa48 	bl	800225c <d_unqualified_name>
 8000dcc:	68e3      	ldr	r3, [r4, #12]
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	2a49      	cmp	r2, #73	; 0x49
 8000dd2:	4682      	mov	sl, r0
 8000dd4:	d043      	beq.n	8000e5e <d_exprlist+0x47e>
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	465a      	mov	r2, fp
 8000dda:	2138      	movs	r1, #56	; 0x38
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff fa17 	bl	8000210 <d_make_comp>
 8000de2:	462a      	mov	r2, r5
 8000de4:	4603      	mov	r3, r0
 8000de6:	2137      	movs	r1, #55	; 0x37
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff fa11 	bl	8000210 <d_make_comp>
 8000dee:	4605      	mov	r5, r0
 8000df0:	e66c      	b.n	8000acc <d_exprlist+0xec>
 8000df2:	3301      	adds	r3, #1
 8000df4:	60e3      	str	r3, [r4, #12]
 8000df6:	2300      	movs	r3, #0
 8000df8:	e783      	b.n	8000d02 <d_exprlist+0x322>
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60e3      	str	r3, [r4, #12]
 8000dfe:	2145      	movs	r1, #69	; 0x45
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fded 	bl	80009e0 <d_exprlist>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e6e4      	b.n	8000bd4 <d_exprlist+0x1f4>
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000e10:	2a01      	cmp	r2, #1
 8000e12:	d902      	bls.n	8000e1a <d_exprlist+0x43a>
 8000e14:	3b72      	subs	r3, #114	; 0x72
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d8bc      	bhi.n	8000d94 <d_exprlist+0x3b4>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 fc78 	bl	8001710 <d_type>
 8000e20:	4683      	mov	fp, r0
 8000e22:	e7bf      	b.n	8000da4 <d_exprlist+0x3c4>
 8000e24:	2145      	movs	r1, #69	; 0x45
 8000e26:	4620      	mov	r0, r4
 8000e28:	f7ff fdda 	bl	80009e0 <d_exprlist>
 8000e2c:	4682      	mov	sl, r0
 8000e2e:	e7d2      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000e30:	4620      	mov	r0, r4
 8000e32:	f000 f843 	bl	8000ebc <d_expression_1>
 8000e36:	4683      	mov	fp, r0
 8000e38:	e7b4      	b.n	8000da4 <d_exprlist+0x3c4>
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f000 f83e 	bl	8000ebc <d_expression_1>
 8000e40:	4682      	mov	sl, r0
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 f83a 	bl	8000ebc <d_expression_1>
 8000e48:	4683      	mov	fp, r0
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 f836 	bl	8000ebc <d_expression_1>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2800      	cmp	r0, #0
 8000e54:	f47f af55 	bne.w	8000d02 <d_exprlist+0x322>
 8000e58:	6366      	str	r6, [r4, #52]	; 0x34
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	e61b      	b.n	8000a96 <d_exprlist+0xb6>
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60e3      	str	r3, [r4, #12]
 8000e62:	4620      	mov	r0, r4
 8000e64:	f000 fa3c 	bl	80012e0 <d_template_args_1>
 8000e68:	4652      	mov	r2, sl
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff f9ce 	bl	8000210 <d_make_comp>
 8000e74:	4682      	mov	sl, r0
 8000e76:	e7ae      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000e78:	785a      	ldrb	r2, [r3, #1]
 8000e7a:	2a69      	cmp	r2, #105	; 0x69
 8000e7c:	f47f ae50 	bne.w	8000b20 <d_exprlist+0x140>
 8000e80:	3302      	adds	r3, #2
 8000e82:	60e3      	str	r3, [r4, #12]
 8000e84:	2145      	movs	r1, #69	; 0x45
 8000e86:	4620      	mov	r0, r4
 8000e88:	f7ff fdaa 	bl	80009e0 <d_exprlist>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e738      	b.n	8000d02 <d_exprlist+0x322>
 8000e90:	4620      	mov	r0, r4
 8000e92:	f001 f837 	bl	8001f04 <d_operator_name>
 8000e96:	e7d3      	b.n	8000e40 <d_exprlist+0x460>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f000 f80f 	bl	8000ebc <d_expression_1>
 8000e9e:	4682      	mov	sl, r0
 8000ea0:	e799      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000ea2:	bf00      	nop
 8000ea4:	08093fdc 	.word	0x08093fdc
 8000ea8:	08093fec 	.word	0x08093fec
 8000eac:	08093fe0 	.word	0x08093fe0
 8000eb0:	08093fe4 	.word	0x08093fe4
 8000eb4:	08093fe8 	.word	0x08093fe8
 8000eb8:	080944f8 	.word	0x080944f8

08000ebc <d_expression_1>:
 8000ebc:	68c1      	ldr	r1, [r0, #12]
 8000ebe:	780b      	ldrb	r3, [r1, #0]
 8000ec0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ec2:	d067      	beq.n	8000f94 <d_expression_1+0xd8>
 8000ec4:	2b54      	cmp	r3, #84	; 0x54
 8000ec6:	d067      	beq.n	8000f98 <d_expression_1+0xdc>
 8000ec8:	2b73      	cmp	r3, #115	; 0x73
 8000eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ece:	4604      	mov	r4, r0
 8000ed0:	d01c      	beq.n	8000f0c <d_expression_1+0x50>
 8000ed2:	2b66      	cmp	r3, #102	; 0x66
 8000ed4:	d13d      	bne.n	8000f52 <d_expression_1+0x96>
 8000ed6:	784b      	ldrb	r3, [r1, #1]
 8000ed8:	2b70      	cmp	r3, #112	; 0x70
 8000eda:	d11d      	bne.n	8000f18 <d_expression_1+0x5c>
 8000edc:	1c8b      	adds	r3, r1, #2
 8000ede:	60c3      	str	r3, [r0, #12]
 8000ee0:	788b      	ldrb	r3, [r1, #2]
 8000ee2:	2b54      	cmp	r3, #84	; 0x54
 8000ee4:	f040 809a 	bne.w	800101c <d_expression_1+0x160>
 8000ee8:	3103      	adds	r1, #3
 8000eea:	60c1      	str	r1, [r0, #12]
 8000eec:	2000      	movs	r0, #0
 8000eee:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	da4a      	bge.n	8000f8c <d_expression_1+0xd0>
 8000ef6:	6921      	ldr	r1, [r4, #16]
 8000ef8:	011a      	lsls	r2, r3, #4
 8000efa:	188d      	adds	r5, r1, r2
 8000efc:	3301      	adds	r3, #1
 8000efe:	2700      	movs	r7, #0
 8000f00:	2606      	movs	r6, #6
 8000f02:	606f      	str	r7, [r5, #4]
 8000f04:	6163      	str	r3, [r4, #20]
 8000f06:	548e      	strb	r6, [r1, r2]
 8000f08:	60a8      	str	r0, [r5, #8]
 8000f0a:	e02f      	b.n	8000f6c <d_expression_1+0xb0>
 8000f0c:	784b      	ldrb	r3, [r1, #1]
 8000f0e:	2b72      	cmp	r3, #114	; 0x72
 8000f10:	d06e      	beq.n	8000ff0 <d_expression_1+0x134>
 8000f12:	2b70      	cmp	r3, #112	; 0x70
 8000f14:	f000 8160 	beq.w	80011d8 <d_expression_1+0x31c>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f000 fff3 	bl	8001f04 <d_operator_name>
 8000f1e:	4605      	mov	r5, r0
 8000f20:	b3a0      	cbz	r0, 8000f8c <d_expression_1+0xd0>
 8000f22:	7803      	ldrb	r3, [r0, #0]
 8000f24:	2b31      	cmp	r3, #49	; 0x31
 8000f26:	d039      	beq.n	8000f9c <d_expression_1+0xe0>
 8000f28:	2b32      	cmp	r3, #50	; 0x32
 8000f2a:	f000 8127 	beq.w	800117c <d_expression_1+0x2c0>
 8000f2e:	2b33      	cmp	r3, #51	; 0x33
 8000f30:	d12c      	bne.n	8000f8c <d_expression_1+0xd0>
 8000f32:	68e3      	ldr	r3, [r4, #12]
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	2a5f      	cmp	r2, #95	; 0x5f
 8000f38:	f000 8176 	beq.w	8001228 <d_expression_1+0x36c>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff ffbd 	bl	8000ebc <d_expression_1>
 8000f42:	4603      	mov	r3, r0
 8000f44:	462a      	mov	r2, r5
 8000f46:	4620      	mov	r0, r4
 8000f48:	2136      	movs	r1, #54	; 0x36
 8000f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	f7ff b95f 	b.w	8000210 <d_make_comp>
 8000f52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f56:	2a09      	cmp	r2, #9
 8000f58:	d841      	bhi.n	8000fde <d_expression_1+0x122>
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f001 f97e 	bl	800225c <d_unqualified_name>
 8000f60:	4605      	mov	r5, r0
 8000f62:	b198      	cbz	r0, 8000f8c <d_expression_1+0xd0>
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	2a49      	cmp	r2, #73	; 0x49
 8000f6a:	d02b      	beq.n	8000fc4 <d_expression_1+0x108>
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f72:	2b74      	cmp	r3, #116	; 0x74
 8000f74:	d1d0      	bne.n	8000f18 <d_expression_1+0x5c>
 8000f76:	784b      	ldrb	r3, [r1, #1]
 8000f78:	2b6c      	cmp	r3, #108	; 0x6c
 8000f7a:	d1cd      	bne.n	8000f18 <d_expression_1+0x5c>
 8000f7c:	f000 fbc8 	bl	8001710 <d_type>
 8000f80:	68e1      	ldr	r1, [r4, #12]
 8000f82:	784b      	ldrb	r3, [r1, #1]
 8000f84:	4605      	mov	r5, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 8190 	bne.w	80012ac <d_expression_1+0x3f0>
 8000f8c:	2500      	movs	r5, #0
 8000f8e:	4628      	mov	r0, r5
 8000f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f94:	f001 bdac 	b.w	8002af0 <d_expr_primary>
 8000f98:	f7ff ba92 	b.w	80004c0 <d_template_param>
 8000f9c:	6887      	ldr	r7, [r0, #8]
 8000f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	683e      	ldr	r6, [r7, #0]
 8000fa4:	49c8      	ldr	r1, [pc, #800]	; (80012c8 <d_expression_1+0x40c>)
 8000fa6:	3a02      	subs	r2, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	6323      	str	r3, [r4, #48]	; 0x30
 8000fac:	4630      	mov	r0, r6
 8000fae:	f005 feef 	bl	8006d90 <strcmp>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d05b      	beq.n	800106e <d_expression_1+0x1b2>
 8000fb6:	68ff      	ldr	r7, [r7, #12]
 8000fb8:	2f03      	cmp	r7, #3
 8000fba:	d8e7      	bhi.n	8000f8c <d_expression_1+0xd0>
 8000fbc:	e8df f007 	tbb	[pc, r7]
 8000fc0:	64a7385c 	.word	0x64a7385c
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	60e3      	str	r3, [r4, #12]
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f000 f989 	bl	80012e0 <d_template_args_1>
 8000fce:	462a      	mov	r2, r5
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fda:	f7ff b919 	b.w	8000210 <d_make_comp>
 8000fde:	2b6f      	cmp	r3, #111	; 0x6f
 8000fe0:	f040 815c 	bne.w	800129c <d_expression_1+0x3e0>
 8000fe4:	784b      	ldrb	r3, [r1, #1]
 8000fe6:	2b6e      	cmp	r3, #110	; 0x6e
 8000fe8:	d196      	bne.n	8000f18 <d_expression_1+0x5c>
 8000fea:	3102      	adds	r1, #2
 8000fec:	60c1      	str	r1, [r0, #12]
 8000fee:	e7b4      	b.n	8000f5a <d_expression_1+0x9e>
 8000ff0:	3102      	adds	r1, #2
 8000ff2:	60c1      	str	r1, [r0, #12]
 8000ff4:	f000 fb8c 	bl	8001710 <d_type>
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f001 f92e 	bl	800225c <d_unqualified_name>
 8001000:	68e3      	ldr	r3, [r4, #12]
 8001002:	7819      	ldrb	r1, [r3, #0]
 8001004:	2949      	cmp	r1, #73	; 0x49
 8001006:	4606      	mov	r6, r0
 8001008:	f000 80d9 	beq.w	80011be <d_expression_1+0x302>
 800100c:	4603      	mov	r3, r0
 800100e:	462a      	mov	r2, r5
 8001010:	4620      	mov	r0, r4
 8001012:	2101      	movs	r1, #1
 8001014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001018:	f7ff b8fa 	b.w	8000210 <d_make_comp>
 800101c:	f7ff fa36 	bl	800048c <d_compact_number>
 8001020:	43c3      	mvns	r3, r0
 8001022:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8001026:	bf18      	it	ne
 8001028:	3001      	addne	r0, #1
 800102a:	f47f af60 	bne.w	8000eee <d_expression_1+0x32>
 800102e:	e7ad      	b.n	8000f8c <d_expression_1+0xd0>
 8001030:	2e00      	cmp	r6, #0
 8001032:	d083      	beq.n	8000f3c <d_expression_1+0x80>
 8001034:	7833      	ldrb	r3, [r6, #0]
 8001036:	2b70      	cmp	r3, #112	; 0x70
 8001038:	f000 80b0 	beq.w	800119c <d_expression_1+0x2e0>
 800103c:	2b6d      	cmp	r3, #109	; 0x6d
 800103e:	f000 80ad 	beq.w	800119c <d_expression_1+0x2e0>
 8001042:	2700      	movs	r7, #0
 8001044:	4630      	mov	r0, r6
 8001046:	49a1      	ldr	r1, [pc, #644]	; (80012cc <d_expression_1+0x410>)
 8001048:	f005 fea2 	bl	8006d90 <strcmp>
 800104c:	2800      	cmp	r0, #0
 800104e:	f040 80b1 	bne.w	80011b4 <d_expression_1+0x2f8>
 8001052:	4620      	mov	r0, r4
 8001054:	f000 f944 	bl	80012e0 <d_template_args_1>
 8001058:	4603      	mov	r3, r0
 800105a:	2f00      	cmp	r7, #0
 800105c:	f43f af72 	beq.w	8000f44 <d_expression_1+0x88>
 8001060:	461a      	mov	r2, r3
 8001062:	2138      	movs	r1, #56	; 0x38
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff f8d3 	bl	8000210 <d_make_comp>
 800106a:	4603      	mov	r3, r0
 800106c:	e76a      	b.n	8000f44 <d_expression_1+0x88>
 800106e:	4620      	mov	r0, r4
 8001070:	f000 fb4e 	bl	8001710 <d_type>
 8001074:	4603      	mov	r3, r0
 8001076:	e765      	b.n	8000f44 <d_expression_1+0x88>
 8001078:	462a      	mov	r2, r5
 800107a:	4620      	mov	r0, r4
 800107c:	2300      	movs	r3, #0
 800107e:	2135      	movs	r1, #53	; 0x35
 8001080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001084:	f7ff b8c4 	b.w	8000210 <d_make_comp>
 8001088:	4991      	ldr	r1, [pc, #580]	; (80012d0 <d_expression_1+0x414>)
 800108a:	4630      	mov	r0, r6
 800108c:	f005 fe80 	bl	8006d90 <strcmp>
 8001090:	2800      	cmp	r0, #0
 8001092:	f000 80d1 	beq.w	8001238 <d_expression_1+0x37c>
 8001096:	7833      	ldrb	r3, [r6, #0]
 8001098:	2b66      	cmp	r3, #102	; 0x66
 800109a:	f000 80f6 	beq.w	800128a <d_expression_1+0x3ce>
 800109e:	2b6e      	cmp	r3, #110	; 0x6e
 80010a0:	f47f af74 	bne.w	8000f8c <d_expression_1+0xd0>
 80010a4:	7873      	ldrb	r3, [r6, #1]
 80010a6:	2b77      	cmp	r3, #119	; 0x77
 80010a8:	d002      	beq.n	80010b0 <d_expression_1+0x1f4>
 80010aa:	2b61      	cmp	r3, #97	; 0x61
 80010ac:	f47f af6e 	bne.w	8000f8c <d_expression_1+0xd0>
 80010b0:	215f      	movs	r1, #95	; 0x5f
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fc94 	bl	80009e0 <d_exprlist>
 80010b8:	4606      	mov	r6, r0
 80010ba:	4620      	mov	r0, r4
 80010bc:	f000 fb28 	bl	8001710 <d_type>
 80010c0:	68e3      	ldr	r3, [r4, #12]
 80010c2:	7819      	ldrb	r1, [r3, #0]
 80010c4:	2945      	cmp	r1, #69	; 0x45
 80010c6:	4607      	mov	r7, r0
 80010c8:	f000 80aa 	beq.w	8001220 <d_expression_1+0x364>
 80010cc:	2970      	cmp	r1, #112	; 0x70
 80010ce:	f000 80d0 	beq.w	8001272 <d_expression_1+0x3b6>
 80010d2:	2969      	cmp	r1, #105	; 0x69
 80010d4:	f47f af5a 	bne.w	8000f8c <d_expression_1+0xd0>
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	2b6c      	cmp	r3, #108	; 0x6c
 80010dc:	f47f af56 	bne.w	8000f8c <d_expression_1+0xd0>
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff feeb 	bl	8000ebc <d_expression_1>
 80010e6:	4603      	mov	r3, r0
 80010e8:	463a      	mov	r2, r7
 80010ea:	213b      	movs	r1, #59	; 0x3b
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff f88f 	bl	8000210 <d_make_comp>
 80010f2:	4632      	mov	r2, r6
 80010f4:	4603      	mov	r3, r0
 80010f6:	213a      	movs	r1, #58	; 0x3a
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff f889 	bl	8000210 <d_make_comp>
 80010fe:	462a      	mov	r2, r5
 8001100:	4603      	mov	r3, r0
 8001102:	2139      	movs	r1, #57	; 0x39
 8001104:	4620      	mov	r0, r4
 8001106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800110a:	f7ff b881 	b.w	8000210 <d_make_comp>
 800110e:	2e00      	cmp	r6, #0
 8001110:	f43f af3c 	beq.w	8000f8c <d_expression_1+0xd0>
 8001114:	68ab      	ldr	r3, [r5, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	785a      	ldrb	r2, [r3, #1]
 800111a:	2a63      	cmp	r2, #99	; 0x63
 800111c:	d068      	beq.n	80011f0 <d_expression_1+0x334>
 800111e:	7833      	ldrb	r3, [r6, #0]
 8001120:	2b66      	cmp	r3, #102	; 0x66
 8001122:	d178      	bne.n	8001216 <d_expression_1+0x35a>
 8001124:	4620      	mov	r0, r4
 8001126:	f000 feed 	bl	8001f04 <d_operator_name>
 800112a:	4607      	mov	r7, r0
 800112c:	4969      	ldr	r1, [pc, #420]	; (80012d4 <d_expression_1+0x418>)
 800112e:	4630      	mov	r0, r6
 8001130:	f005 fe2e 	bl	8006d90 <strcmp>
 8001134:	2800      	cmp	r0, #0
 8001136:	d068      	beq.n	800120a <d_expression_1+0x34e>
 8001138:	4967      	ldr	r1, [pc, #412]	; (80012d8 <d_expression_1+0x41c>)
 800113a:	4630      	mov	r0, r6
 800113c:	f005 fe28 	bl	8006d90 <strcmp>
 8001140:	b130      	cbz	r0, 8001150 <d_expression_1+0x294>
 8001142:	4630      	mov	r0, r6
 8001144:	4965      	ldr	r1, [pc, #404]	; (80012dc <d_expression_1+0x420>)
 8001146:	f005 fe23 	bl	8006d90 <strcmp>
 800114a:	2800      	cmp	r0, #0
 800114c:	f040 80a1 	bne.w	8001292 <d_expression_1+0x3d6>
 8001150:	4620      	mov	r0, r4
 8001152:	f001 f883 	bl	800225c <d_unqualified_name>
 8001156:	68e3      	ldr	r3, [r4, #12]
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	2a49      	cmp	r2, #73	; 0x49
 800115c:	4606      	mov	r6, r0
 800115e:	d07b      	beq.n	8001258 <d_expression_1+0x39c>
 8001160:	4633      	mov	r3, r6
 8001162:	463a      	mov	r2, r7
 8001164:	2138      	movs	r1, #56	; 0x38
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff f852 	bl	8000210 <d_make_comp>
 800116c:	462a      	mov	r2, r5
 800116e:	4603      	mov	r3, r0
 8001170:	2137      	movs	r1, #55	; 0x37
 8001172:	4620      	mov	r0, r4
 8001174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001178:	f7ff b84a 	b.w	8000210 <d_make_comp>
 800117c:	6883      	ldr	r3, [r0, #8]
 800117e:	2b03      	cmp	r3, #3
 8001180:	f63f af04 	bhi.w	8000f8c <d_expression_1+0xd0>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <d_expression_1+0x2d0>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	08001079 	.word	0x08001079
 8001190:	08000f3d 	.word	0x08000f3d
 8001194:	08000f8d 	.word	0x08000f8d
 8001198:	08000f8d 	.word	0x08000f8d
 800119c:	7872      	ldrb	r2, [r6, #1]
 800119e:	429a      	cmp	r2, r3
 80011a0:	f47f af4f 	bne.w	8001042 <d_expression_1+0x186>
 80011a4:	68e3      	ldr	r3, [r4, #12]
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	2a5f      	cmp	r2, #95	; 0x5f
 80011aa:	f47f af4b 	bne.w	8001044 <d_expression_1+0x188>
 80011ae:	3301      	adds	r3, #1
 80011b0:	60e3      	str	r3, [r4, #12]
 80011b2:	e746      	b.n	8001042 <d_expression_1+0x186>
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fe81 	bl	8000ebc <d_expression_1>
 80011ba:	4603      	mov	r3, r0
 80011bc:	e74d      	b.n	800105a <d_expression_1+0x19e>
 80011be:	3301      	adds	r3, #1
 80011c0:	60e3      	str	r3, [r4, #12]
 80011c2:	4620      	mov	r0, r4
 80011c4:	f000 f88c 	bl	80012e0 <d_template_args_1>
 80011c8:	4632      	mov	r2, r6
 80011ca:	4603      	mov	r3, r0
 80011cc:	2104      	movs	r1, #4
 80011ce:	4620      	mov	r0, r4
 80011d0:	f7ff f81e 	bl	8000210 <d_make_comp>
 80011d4:	4603      	mov	r3, r0
 80011d6:	e71a      	b.n	800100e <d_expression_1+0x152>
 80011d8:	3102      	adds	r1, #2
 80011da:	60e1      	str	r1, [r4, #12]
 80011dc:	f7ff fe6e 	bl	8000ebc <d_expression_1>
 80011e0:	2300      	movs	r3, #0
 80011e2:	4602      	mov	r2, r0
 80011e4:	214a      	movs	r1, #74	; 0x4a
 80011e6:	4620      	mov	r0, r4
 80011e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011ec:	f7ff b810 	b.w	8000210 <d_make_comp>
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011f6:	2a01      	cmp	r2, #1
 80011f8:	d902      	bls.n	8001200 <d_expression_1+0x344>
 80011fa:	3b72      	subs	r3, #114	; 0x72
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d88e      	bhi.n	800111e <d_expression_1+0x262>
 8001200:	4620      	mov	r0, r4
 8001202:	f000 fa85 	bl	8001710 <d_type>
 8001206:	4607      	mov	r7, r0
 8001208:	e790      	b.n	800112c <d_expression_1+0x270>
 800120a:	2145      	movs	r1, #69	; 0x45
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fbe7 	bl	80009e0 <d_exprlist>
 8001212:	4606      	mov	r6, r0
 8001214:	e7a4      	b.n	8001160 <d_expression_1+0x2a4>
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff fe50 	bl	8000ebc <d_expression_1>
 800121c:	4607      	mov	r7, r0
 800121e:	e785      	b.n	800112c <d_expression_1+0x270>
 8001220:	3301      	adds	r3, #1
 8001222:	60e3      	str	r3, [r4, #12]
 8001224:	2300      	movs	r3, #0
 8001226:	e75f      	b.n	80010e8 <d_expression_1+0x22c>
 8001228:	3301      	adds	r3, #1
 800122a:	60e3      	str	r3, [r4, #12]
 800122c:	2145      	movs	r1, #69	; 0x45
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff fbd6 	bl	80009e0 <d_exprlist>
 8001234:	4603      	mov	r3, r0
 8001236:	e685      	b.n	8000f44 <d_expression_1+0x88>
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fe3f 	bl	8000ebc <d_expression_1>
 800123e:	4606      	mov	r6, r0
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fe3b 	bl	8000ebc <d_expression_1>
 8001246:	4607      	mov	r7, r0
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff fe37 	bl	8000ebc <d_expression_1>
 800124e:	4603      	mov	r3, r0
 8001250:	2800      	cmp	r0, #0
 8001252:	f47f af49 	bne.w	80010e8 <d_expression_1+0x22c>
 8001256:	e699      	b.n	8000f8c <d_expression_1+0xd0>
 8001258:	3301      	adds	r3, #1
 800125a:	60e3      	str	r3, [r4, #12]
 800125c:	4620      	mov	r0, r4
 800125e:	f000 f83f 	bl	80012e0 <d_template_args_1>
 8001262:	4632      	mov	r2, r6
 8001264:	4603      	mov	r3, r0
 8001266:	2104      	movs	r1, #4
 8001268:	4620      	mov	r0, r4
 800126a:	f7fe ffd1 	bl	8000210 <d_make_comp>
 800126e:	4606      	mov	r6, r0
 8001270:	e776      	b.n	8001160 <d_expression_1+0x2a4>
 8001272:	785a      	ldrb	r2, [r3, #1]
 8001274:	2a69      	cmp	r2, #105	; 0x69
 8001276:	f47f ae89 	bne.w	8000f8c <d_expression_1+0xd0>
 800127a:	3302      	adds	r3, #2
 800127c:	60e3      	str	r3, [r4, #12]
 800127e:	2145      	movs	r1, #69	; 0x45
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff fbad 	bl	80009e0 <d_exprlist>
 8001286:	4603      	mov	r3, r0
 8001288:	e72e      	b.n	80010e8 <d_expression_1+0x22c>
 800128a:	4620      	mov	r0, r4
 800128c:	f000 fe3a 	bl	8001f04 <d_operator_name>
 8001290:	e7d5      	b.n	800123e <d_expression_1+0x382>
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff fe12 	bl	8000ebc <d_expression_1>
 8001298:	4606      	mov	r6, r0
 800129a:	e761      	b.n	8001160 <d_expression_1+0x2a4>
 800129c:	2b69      	cmp	r3, #105	; 0x69
 800129e:	f47f ae68 	bne.w	8000f72 <d_expression_1+0xb6>
 80012a2:	784b      	ldrb	r3, [r1, #1]
 80012a4:	2b6c      	cmp	r3, #108	; 0x6c
 80012a6:	f47f ae37 	bne.w	8000f18 <d_expression_1+0x5c>
 80012aa:	2500      	movs	r5, #0
 80012ac:	3102      	adds	r1, #2
 80012ae:	60e1      	str	r1, [r4, #12]
 80012b0:	4620      	mov	r0, r4
 80012b2:	2145      	movs	r1, #69	; 0x45
 80012b4:	f7ff fb94 	bl	80009e0 <d_exprlist>
 80012b8:	462a      	mov	r2, r5
 80012ba:	4603      	mov	r3, r0
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	4620      	mov	r0, r4
 80012c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	f7fe bfa4 	b.w	8000210 <d_make_comp>
 80012c8:	080944f8 	.word	0x080944f8
 80012cc:	08093fdc 	.word	0x08093fdc
 80012d0:	08093fec 	.word	0x08093fec
 80012d4:	08093fe0 	.word	0x08093fe0
 80012d8:	08093fe4 	.word	0x08093fe4
 80012dc:	08093fe8 	.word	0x08093fe8

080012e0 <d_template_args_1>:
 80012e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e4:	68c2      	ldr	r2, [r0, #12]
 80012e6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80012e8:	7813      	ldrb	r3, [r2, #0]
 80012ea:	2b45      	cmp	r3, #69	; 0x45
 80012ec:	b082      	sub	sp, #8
 80012ee:	4604      	mov	r4, r0
 80012f0:	d04e      	beq.n	8001390 <d_template_args_1+0xb0>
 80012f2:	ad02      	add	r5, sp, #8
 80012f4:	2100      	movs	r1, #0
 80012f6:	f845 1d04 	str.w	r1, [r5, #-4]!
 80012fa:	2601      	movs	r6, #1
 80012fc:	3b49      	subs	r3, #73	; 0x49
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	d83d      	bhi.n	800137e <d_template_args_1+0x9e>
 8001302:	e8df f003 	tbb	[pc, r3]
 8001306:	3737      	.short	0x3737
 8001308:	3c3c323c 	.word	0x3c3c323c
 800130c:	3c3c3c3c 	.word	0x3c3c3c3c
 8001310:	3c3c3c3c 	.word	0x3c3c3c3c
 8001314:	083c      	.short	0x083c
 8001316:	3201      	adds	r2, #1
 8001318:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 800131c:	60e2      	str	r2, [r4, #12]
 800131e:	6366      	str	r6, [r4, #52]	; 0x34
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff fdcb 	bl	8000ebc <d_expression_1>
 8001326:	68e3      	ldr	r3, [r4, #12]
 8001328:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	2a45      	cmp	r2, #69	; 0x45
 8001330:	4684      	mov	ip, r0
 8001332:	f103 0301 	add.w	r3, r3, #1
 8001336:	d127      	bne.n	8001388 <d_template_args_1+0xa8>
 8001338:	60e3      	str	r3, [r4, #12]
 800133a:	2300      	movs	r3, #0
 800133c:	212f      	movs	r1, #47	; 0x2f
 800133e:	4662      	mov	r2, ip
 8001340:	4620      	mov	r0, r4
 8001342:	f1bc 0f00 	cmp.w	ip, #0
 8001346:	d01f      	beq.n	8001388 <d_template_args_1+0xa8>
 8001348:	f7fe ff62 	bl	8000210 <d_make_comp>
 800134c:	6028      	str	r0, [r5, #0]
 800134e:	f100 050c 	add.w	r5, r0, #12
 8001352:	b1c8      	cbz	r0, 8001388 <d_template_args_1+0xa8>
 8001354:	68e2      	ldr	r2, [r4, #12]
 8001356:	7813      	ldrb	r3, [r2, #0]
 8001358:	2b45      	cmp	r3, #69	; 0x45
 800135a:	d1cf      	bne.n	80012fc <d_template_args_1+0x1c>
 800135c:	9801      	ldr	r0, [sp, #4]
 800135e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001360:	3201      	adds	r2, #1
 8001362:	60e2      	str	r2, [r4, #12]
 8001364:	b002      	add	sp, #8
 8001366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800136a:	4620      	mov	r0, r4
 800136c:	f001 fbc0 	bl	8002af0 <d_expr_primary>
 8001370:	4684      	mov	ip, r0
 8001372:	e7e2      	b.n	800133a <d_template_args_1+0x5a>
 8001374:	4620      	mov	r0, r4
 8001376:	f000 f815 	bl	80013a4 <d_template_args>
 800137a:	4684      	mov	ip, r0
 800137c:	e7dd      	b.n	800133a <d_template_args_1+0x5a>
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f9c6 	bl	8001710 <d_type>
 8001384:	4684      	mov	ip, r0
 8001386:	e7d8      	b.n	800133a <d_template_args_1+0x5a>
 8001388:	2000      	movs	r0, #0
 800138a:	b002      	add	sp, #8
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001390:	3201      	adds	r2, #1
 8001392:	2300      	movs	r3, #0
 8001394:	60c2      	str	r2, [r0, #12]
 8001396:	212f      	movs	r1, #47	; 0x2f
 8001398:	461a      	mov	r2, r3
 800139a:	b002      	add	sp, #8
 800139c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013a0:	f7fe bf36 	b.w	8000210 <d_make_comp>

080013a4 <d_template_args>:
 80013a4:	68c3      	ldr	r3, [r0, #12]
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	3a49      	subs	r2, #73	; 0x49
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d802      	bhi.n	80013b4 <d_template_args+0x10>
 80013ae:	3301      	adds	r3, #1
 80013b0:	60c3      	str	r3, [r0, #12]
 80013b2:	e795      	b.n	80012e0 <d_template_args_1>
 80013b4:	2000      	movs	r0, #0
 80013b6:	4770      	bx	lr

080013b8 <d_name>:
 80013b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013bc:	68c2      	ldr	r2, [r0, #12]
 80013be:	7813      	ldrb	r3, [r2, #0]
 80013c0:	3b4e      	subs	r3, #78	; 0x4e
 80013c2:	b083      	sub	sp, #12
 80013c4:	4604      	mov	r4, r0
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d846      	bhi.n	8001458 <d_name+0xa0>
 80013ca:	e8df f003 	tbb	[pc, r3]
 80013ce:	4567      	.short	0x4567
 80013d0:	0e454545 	.word	0x0e454545
 80013d4:	45450745 	.word	0x45450745
 80013d8:	4545      	.short	0x4545
 80013da:	a4          	.byte	0xa4
 80013db:	00          	.byte	0x00
 80013dc:	f000 ff3e 	bl	800225c <d_unqualified_name>
 80013e0:	4605      	mov	r5, r0
 80013e2:	4628      	mov	r0, r5
 80013e4:	b003      	add	sp, #12
 80013e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ea:	7853      	ldrb	r3, [r2, #1]
 80013ec:	2b74      	cmp	r3, #116	; 0x74
 80013ee:	f040 80d7 	bne.w	80015a0 <d_name+0x1e8>
 80013f2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80013f6:	3202      	adds	r2, #2
 80013f8:	428b      	cmp	r3, r1
 80013fa:	60c2      	str	r2, [r0, #12]
 80013fc:	f280 8127 	bge.w	800164e <d_name+0x296>
 8001400:	6901      	ldr	r1, [r0, #16]
 8001402:	48c0      	ldr	r0, [pc, #768]	; (8001704 <d_name+0x34c>)
 8001404:	011a      	lsls	r2, r3, #4
 8001406:	188d      	adds	r5, r1, r2
 8001408:	3301      	adds	r3, #1
 800140a:	6163      	str	r3, [r4, #20]
 800140c:	2300      	movs	r3, #0
 800140e:	606b      	str	r3, [r5, #4]
 8001410:	548b      	strb	r3, [r1, r2]
 8001412:	2303      	movs	r3, #3
 8001414:	e9c5 0302 	strd	r0, r3, [r5, #8]
 8001418:	4620      	mov	r0, r4
 800141a:	f000 ff1f 	bl	800225c <d_unqualified_name>
 800141e:	462a      	mov	r2, r5
 8001420:	4603      	mov	r3, r0
 8001422:	2101      	movs	r1, #1
 8001424:	4620      	mov	r0, r4
 8001426:	f7fe fef3 	bl	8000210 <d_make_comp>
 800142a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800142c:	68e2      	ldr	r2, [r4, #12]
 800142e:	3303      	adds	r3, #3
 8001430:	6323      	str	r3, [r4, #48]	; 0x30
 8001432:	7813      	ldrb	r3, [r2, #0]
 8001434:	2b49      	cmp	r3, #73	; 0x49
 8001436:	4605      	mov	r5, r0
 8001438:	d1d3      	bne.n	80013e2 <d_name+0x2a>
 800143a:	2800      	cmp	r0, #0
 800143c:	f000 80ba 	beq.w	80015b4 <d_name+0x1fc>
 8001440:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001444:	4293      	cmp	r3, r2
 8001446:	f280 80b5 	bge.w	80015b4 <d_name+0x1fc>
 800144a:	69e1      	ldr	r1, [r4, #28]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001452:	6222      	str	r2, [r4, #32]
 8001454:	4620      	mov	r0, r4
 8001456:	e014      	b.n	8001482 <d_name+0xca>
 8001458:	f000 ff00 	bl	800225c <d_unqualified_name>
 800145c:	68e3      	ldr	r3, [r4, #12]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b49      	cmp	r3, #73	; 0x49
 8001462:	4605      	mov	r5, r0
 8001464:	d1bd      	bne.n	80013e2 <d_name+0x2a>
 8001466:	2800      	cmp	r0, #0
 8001468:	f000 80a4 	beq.w	80015b4 <d_name+0x1fc>
 800146c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001470:	4293      	cmp	r3, r2
 8001472:	f280 809f 	bge.w	80015b4 <d_name+0x1fc>
 8001476:	69e1      	ldr	r1, [r4, #28]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800147e:	4620      	mov	r0, r4
 8001480:	6222      	str	r2, [r4, #32]
 8001482:	f7ff ff8f 	bl	80013a4 <d_template_args>
 8001486:	462a      	mov	r2, r5
 8001488:	4603      	mov	r3, r0
 800148a:	2104      	movs	r1, #4
 800148c:	4620      	mov	r0, r4
 800148e:	f7fe febf 	bl	8000210 <d_make_comp>
 8001492:	4605      	mov	r5, r0
 8001494:	4628      	mov	r0, r5
 8001496:	b003      	add	sp, #12
 8001498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800149c:	3201      	adds	r2, #1
 800149e:	60c2      	str	r2, [r0, #12]
 80014a0:	a901      	add	r1, sp, #4
 80014a2:	2201      	movs	r2, #1
 80014a4:	f000 fde6 	bl	8002074 <d_cv_qualifiers>
 80014a8:	4680      	mov	r8, r0
 80014aa:	2800      	cmp	r0, #0
 80014ac:	f000 8082 	beq.w	80015b4 <d_name+0x1fc>
 80014b0:	2100      	movs	r1, #0
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7fe fef4 	bl	80002a0 <d_ref_qualifier>
 80014b8:	68e2      	ldr	r2, [r4, #12]
 80014ba:	4e93      	ldr	r6, [pc, #588]	; (8001708 <d_name+0x350>)
 80014bc:	7815      	ldrb	r5, [r2, #0]
 80014be:	4681      	mov	r9, r0
 80014c0:	2700      	movs	r7, #0
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	f000 80b3 	beq.w	800162e <d_name+0x276>
 80014c8:	2d44      	cmp	r5, #68	; 0x44
 80014ca:	f000 8096 	beq.w	80015fa <d_name+0x242>
 80014ce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b1c      	cmp	r3, #28
 80014d6:	d96f      	bls.n	80015b8 <d_name+0x200>
 80014d8:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b19      	cmp	r3, #25
 80014e0:	d96e      	bls.n	80015c0 <d_name+0x208>
 80014e2:	2d55      	cmp	r5, #85	; 0x55
 80014e4:	f000 80a1 	beq.w	800162a <d_name+0x272>
 80014e8:	2d53      	cmp	r5, #83	; 0x53
 80014ea:	f000 80b2 	beq.w	8001652 <d_name+0x29a>
 80014ee:	2d49      	cmp	r5, #73	; 0x49
 80014f0:	f000 80a4 	beq.w	800163c <d_name+0x284>
 80014f4:	2d54      	cmp	r5, #84	; 0x54
 80014f6:	f000 80e6 	beq.w	80016c6 <d_name+0x30e>
 80014fa:	2d45      	cmp	r5, #69	; 0x45
 80014fc:	f000 80e9 	beq.w	80016d2 <d_name+0x31a>
 8001500:	2d4d      	cmp	r5, #77	; 0x4d
 8001502:	f040 8094 	bne.w	800162e <d_name+0x276>
 8001506:	2f00      	cmp	r7, #0
 8001508:	f000 8091 	beq.w	800162e <d_name+0x276>
 800150c:	1c53      	adds	r3, r2, #1
 800150e:	60e3      	str	r3, [r4, #12]
 8001510:	7855      	ldrb	r5, [r2, #1]
 8001512:	461a      	mov	r2, r3
 8001514:	e7d5      	b.n	80014c2 <d_name+0x10a>
 8001516:	3201      	adds	r2, #1
 8001518:	60c2      	str	r2, [r0, #12]
 800151a:	2100      	movs	r1, #0
 800151c:	f001 f83a 	bl	8002594 <d_encoding>
 8001520:	68e3      	ldr	r3, [r4, #12]
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	2a45      	cmp	r2, #69	; 0x45
 8001526:	4606      	mov	r6, r0
 8001528:	d144      	bne.n	80015b4 <d_name+0x1fc>
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60e2      	str	r2, [r4, #12]
 800152e:	785a      	ldrb	r2, [r3, #1]
 8001530:	2a73      	cmp	r2, #115	; 0x73
 8001532:	f000 80b0 	beq.w	8001696 <d_name+0x2de>
 8001536:	2a64      	cmp	r2, #100	; 0x64
 8001538:	f000 8095 	beq.w	8001666 <d_name+0x2ae>
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff ff3b 	bl	80013b8 <d_name>
 8001542:	4605      	mov	r5, r0
 8001544:	b308      	cbz	r0, 800158a <d_name+0x1d2>
 8001546:	7803      	ldrb	r3, [r0, #0]
 8001548:	2b45      	cmp	r3, #69	; 0x45
 800154a:	d01e      	beq.n	800158a <d_name+0x1d2>
 800154c:	2b47      	cmp	r3, #71	; 0x47
 800154e:	d01c      	beq.n	800158a <d_name+0x1d2>
 8001550:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff f903 	bl	8000760 <d_discriminator>
 800155a:	b358      	cbz	r0, 80015b4 <d_name+0x1fc>
 800155c:	1c7b      	adds	r3, r7, #1
 800155e:	d014      	beq.n	800158a <d_name+0x1d2>
 8001560:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001564:	4293      	cmp	r3, r2
 8001566:	f280 8094 	bge.w	8001692 <d_name+0x2da>
 800156a:	6920      	ldr	r0, [r4, #16]
 800156c:	0119      	lsls	r1, r3, #4
 800156e:	1842      	adds	r2, r0, r1
 8001570:	3301      	adds	r3, #1
 8001572:	f04f 0e00 	mov.w	lr, #0
 8001576:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800157a:	f8c2 e004 	str.w	lr, [r2, #4]
 800157e:	6163      	str	r3, [r4, #20]
 8001580:	f800 c001 	strb.w	ip, [r0, r1]
 8001584:	e9c2 5702 	strd	r5, r7, [r2, #8]
 8001588:	4615      	mov	r5, r2
 800158a:	462b      	mov	r3, r5
 800158c:	4632      	mov	r2, r6
 800158e:	4620      	mov	r0, r4
 8001590:	2102      	movs	r1, #2
 8001592:	f7fe fe3d 	bl	8000210 <d_make_comp>
 8001596:	4605      	mov	r5, r0
 8001598:	4628      	mov	r0, r5
 800159a:	b003      	add	sp, #12
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	2100      	movs	r1, #0
 80015a2:	f7ff f825 	bl	80005f0 <d_substitution>
 80015a6:	68e3      	ldr	r3, [r4, #12]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b49      	cmp	r3, #73	; 0x49
 80015ac:	4605      	mov	r5, r0
 80015ae:	f47f af18 	bne.w	80013e2 <d_name+0x2a>
 80015b2:	e74f      	b.n	8001454 <d_name+0x9c>
 80015b4:	2500      	movs	r5, #0
 80015b6:	e714      	b.n	80013e2 <d_name+0x2a>
 80015b8:	fa26 f303 	lsr.w	r3, r6, r3
 80015bc:	07d9      	lsls	r1, r3, #31
 80015be:	d58b      	bpl.n	80014d8 <d_name+0x120>
 80015c0:	4620      	mov	r0, r4
 80015c2:	f000 fe4b 	bl	800225c <d_unqualified_name>
 80015c6:	b35f      	cbz	r7, 8001620 <d_name+0x268>
 80015c8:	2101      	movs	r1, #1
 80015ca:	4603      	mov	r3, r0
 80015cc:	463a      	mov	r2, r7
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7fe fe1e 	bl	8000210 <d_make_comp>
 80015d4:	4607      	mov	r7, r0
 80015d6:	68e2      	ldr	r2, [r4, #12]
 80015d8:	2d53      	cmp	r5, #83	; 0x53
 80015da:	7813      	ldrb	r3, [r2, #0]
 80015dc:	d01e      	beq.n	800161c <d_name+0x264>
 80015de:	2b45      	cmp	r3, #69	; 0x45
 80015e0:	d01a      	beq.n	8001618 <d_name+0x260>
 80015e2:	b327      	cbz	r7, 800162e <d_name+0x276>
 80015e4:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80015e8:	428b      	cmp	r3, r1
 80015ea:	da20      	bge.n	800162e <d_name+0x276>
 80015ec:	69e1      	ldr	r1, [r4, #28]
 80015ee:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015f2:	3301      	adds	r3, #1
 80015f4:	6223      	str	r3, [r4, #32]
 80015f6:	7815      	ldrb	r5, [r2, #0]
 80015f8:	e763      	b.n	80014c2 <d_name+0x10a>
 80015fa:	7853      	ldrb	r3, [r2, #1]
 80015fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001600:	2b54      	cmp	r3, #84	; 0x54
 8001602:	4620      	mov	r0, r4
 8001604:	d00e      	beq.n	8001624 <d_name+0x26c>
 8001606:	f000 fe29 	bl	800225c <d_unqualified_name>
 800160a:	2f00      	cmp	r7, #0
 800160c:	d1dc      	bne.n	80015c8 <d_name+0x210>
 800160e:	68e2      	ldr	r2, [r4, #12]
 8001610:	7813      	ldrb	r3, [r2, #0]
 8001612:	2b45      	cmp	r3, #69	; 0x45
 8001614:	4607      	mov	r7, r0
 8001616:	d1e4      	bne.n	80015e2 <d_name+0x22a>
 8001618:	461d      	mov	r5, r3
 800161a:	e758      	b.n	80014ce <d_name+0x116>
 800161c:	461d      	mov	r5, r3
 800161e:	e750      	b.n	80014c2 <d_name+0x10a>
 8001620:	4607      	mov	r7, r0
 8001622:	e7d8      	b.n	80015d6 <d_name+0x21e>
 8001624:	f000 f874 	bl	8001710 <d_type>
 8001628:	e7ef      	b.n	800160a <d_name+0x252>
 800162a:	4620      	mov	r0, r4
 800162c:	e7eb      	b.n	8001606 <d_name+0x24e>
 800162e:	2500      	movs	r5, #0
 8001630:	4628      	mov	r0, r5
 8001632:	f8c8 5000 	str.w	r5, [r8]
 8001636:	b003      	add	sp, #12
 8001638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800163c:	2f00      	cmp	r7, #0
 800163e:	d0f6      	beq.n	800162e <d_name+0x276>
 8001640:	3201      	adds	r2, #1
 8001642:	60e2      	str	r2, [r4, #12]
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fe4b 	bl	80012e0 <d_template_args_1>
 800164a:	2104      	movs	r1, #4
 800164c:	e7bd      	b.n	80015ca <d_name+0x212>
 800164e:	2500      	movs	r5, #0
 8001650:	e6e2      	b.n	8001418 <d_name+0x60>
 8001652:	2101      	movs	r1, #1
 8001654:	4620      	mov	r0, r4
 8001656:	f7fe ffcb 	bl	80005f0 <d_substitution>
 800165a:	2f00      	cmp	r7, #0
 800165c:	d1b4      	bne.n	80015c8 <d_name+0x210>
 800165e:	68e2      	ldr	r2, [r4, #12]
 8001660:	4607      	mov	r7, r0
 8001662:	7815      	ldrb	r5, [r2, #0]
 8001664:	e72d      	b.n	80014c2 <d_name+0x10a>
 8001666:	3302      	adds	r3, #2
 8001668:	60e3      	str	r3, [r4, #12]
 800166a:	4620      	mov	r0, r4
 800166c:	f7fe ff0e 	bl	800048c <d_compact_number>
 8001670:	1e07      	subs	r7, r0, #0
 8001672:	db9f      	blt.n	80015b4 <d_name+0x1fc>
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fe9f 	bl	80013b8 <d_name>
 800167a:	4605      	mov	r5, r0
 800167c:	2800      	cmp	r0, #0
 800167e:	f43f af6f 	beq.w	8001560 <d_name+0x1a8>
 8001682:	7803      	ldrb	r3, [r0, #0]
 8001684:	2b45      	cmp	r3, #69	; 0x45
 8001686:	f43f af69 	beq.w	800155c <d_name+0x1a4>
 800168a:	2b47      	cmp	r3, #71	; 0x47
 800168c:	f43f af66 	beq.w	800155c <d_name+0x1a4>
 8001690:	e760      	b.n	8001554 <d_name+0x19c>
 8001692:	2500      	movs	r5, #0
 8001694:	e779      	b.n	800158a <d_name+0x1d2>
 8001696:	3302      	adds	r3, #2
 8001698:	60e3      	str	r3, [r4, #12]
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff f860 	bl	8000760 <d_discriminator>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d087      	beq.n	80015b4 <d_name+0x1fc>
 80016a4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	da10      	bge.n	80016ce <d_name+0x316>
 80016ac:	6920      	ldr	r0, [r4, #16]
 80016ae:	4d17      	ldr	r5, [pc, #92]	; (800170c <d_name+0x354>)
 80016b0:	0111      	lsls	r1, r2, #4
 80016b2:	1843      	adds	r3, r0, r1
 80016b4:	3201      	adds	r2, #1
 80016b6:	6162      	str	r2, [r4, #20]
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	5442      	strb	r2, [r0, r1]
 80016be:	220e      	movs	r2, #14
 80016c0:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80016c4:	e762      	b.n	800158c <d_name+0x1d4>
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7fe fefa 	bl	80004c0 <d_template_param>
 80016cc:	e79d      	b.n	800160a <d_name+0x252>
 80016ce:	2300      	movs	r3, #0
 80016d0:	e75c      	b.n	800158c <d_name+0x1d4>
 80016d2:	f8c8 7000 	str.w	r7, [r8]
 80016d6:	2f00      	cmp	r7, #0
 80016d8:	f43f af6c 	beq.w	80015b4 <d_name+0x1fc>
 80016dc:	f1b9 0f00 	cmp.w	r9, #0
 80016e0:	d004      	beq.n	80016ec <d_name+0x334>
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	f8c9 3008 	str.w	r3, [r9, #8]
 80016e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016ec:	7813      	ldrb	r3, [r2, #0]
 80016ee:	2b45      	cmp	r3, #69	; 0x45
 80016f0:	f47f af60 	bne.w	80015b4 <d_name+0x1fc>
 80016f4:	9d01      	ldr	r5, [sp, #4]
 80016f6:	3201      	adds	r2, #1
 80016f8:	4628      	mov	r0, r5
 80016fa:	60e2      	str	r2, [r4, #12]
 80016fc:	b003      	add	sp, #12
 80016fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001702:	bf00      	nop
 8001704:	08094000 	.word	0x08094000
 8001708:	100803ff 	.word	0x100803ff
 800170c:	08093ff0 	.word	0x08093ff0

08001710 <d_type>:
 8001710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001714:	68c2      	ldr	r2, [r0, #12]
 8001716:	7813      	ldrb	r3, [r2, #0]
 8001718:	2b72      	cmp	r3, #114	; 0x72
 800171a:	b083      	sub	sp, #12
 800171c:	4604      	mov	r4, r0
 800171e:	d05f      	beq.n	80017e0 <d_type+0xd0>
 8001720:	2b56      	cmp	r3, #86	; 0x56
 8001722:	d05d      	beq.n	80017e0 <d_type+0xd0>
 8001724:	2b4b      	cmp	r3, #75	; 0x4b
 8001726:	d05b      	beq.n	80017e0 <d_type+0xd0>
 8001728:	2b44      	cmp	r3, #68	; 0x44
 800172a:	d051      	beq.n	80017d0 <d_type+0xc0>
 800172c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001730:	294a      	cmp	r1, #74	; 0x4a
 8001732:	f200 809e 	bhi.w	8001872 <d_type+0x162>
 8001736:	e8df f011 	tbh	[pc, r1, lsl #1]
 800173a:	0111      	.short	0x0111
 800173c:	01110111 	.word	0x01110111
 8001740:	01110111 	.word	0x01110111
 8001744:	01110111 	.word	0x01110111
 8001748:	01110111 	.word	0x01110111
 800174c:	009c0111 	.word	0x009c0111
 8001750:	009c009c 	.word	0x009c009c
 8001754:	009c009c 	.word	0x009c009c
 8001758:	009c009c 	.word	0x009c009c
 800175c:	009c021e 	.word	0x009c021e
 8001760:	009c013b 	.word	0x009c013b
 8001764:	0135009c 	.word	0x0135009c
 8001768:	009c0149 	.word	0x009c0149
 800176c:	009c009c 	.word	0x009c009c
 8001770:	009c009c 	.word	0x009c009c
 8001774:	01110206 	.word	0x01110206
 8001778:	01650157 	.word	0x01650157
 800177c:	0173009c 	.word	0x0173009c
 8001780:	01a50181 	.word	0x01a50181
 8001784:	009c01cc 	.word	0x009c01cc
 8001788:	009c009c 	.word	0x009c009c
 800178c:	0111009c 	.word	0x0111009c
 8001790:	009c009c 	.word	0x009c009c
 8001794:	009c009c 	.word	0x009c009c
 8001798:	009c009c 	.word	0x009c009c
 800179c:	01e401e4 	.word	0x01e401e4
 80017a0:	01e401e4 	.word	0x01e401e4
 80017a4:	01e401e4 	.word	0x01e401e4
 80017a8:	01e401e4 	.word	0x01e401e4
 80017ac:	01e401e4 	.word	0x01e401e4
 80017b0:	01e4009c 	.word	0x01e4009c
 80017b4:	01e401e4 	.word	0x01e401e4
 80017b8:	009c01e4 	.word	0x009c01e4
 80017bc:	009c009c 	.word	0x009c009c
 80017c0:	01e401e4 	.word	0x01e401e4
 80017c4:	01e40127 	.word	0x01e40127
 80017c8:	01e401e4 	.word	0x01e401e4
 80017cc:	01e401e4 	.word	0x01e401e4
 80017d0:	7853      	ldrb	r3, [r2, #1]
 80017d2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80017d6:	294f      	cmp	r1, #79	; 0x4f
 80017d8:	d002      	beq.n	80017e0 <d_type+0xd0>
 80017da:	3b77      	subs	r3, #119	; 0x77
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d84d      	bhi.n	800187c <d_type+0x16c>
 80017e0:	2200      	movs	r2, #0
 80017e2:	a901      	add	r1, sp, #4
 80017e4:	4620      	mov	r0, r4
 80017e6:	f000 fc45 	bl	8002074 <d_cv_qualifiers>
 80017ea:	4605      	mov	r5, r0
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d040      	beq.n	8001872 <d_type+0x162>
 80017f0:	68e3      	ldr	r3, [r4, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b46      	cmp	r3, #70	; 0x46
 80017f6:	4620      	mov	r0, r4
 80017f8:	d119      	bne.n	800182e <d_type+0x11e>
 80017fa:	f000 fd0f 	bl	800221c <d_function_type>
 80017fe:	6028      	str	r0, [r5, #0]
 8001800:	2800      	cmp	r0, #0
 8001802:	d036      	beq.n	8001872 <d_type+0x162>
 8001804:	7803      	ldrb	r3, [r0, #0]
 8001806:	9a01      	ldr	r2, [sp, #4]
 8001808:	3b1f      	subs	r3, #31
 800180a:	2b01      	cmp	r3, #1
 800180c:	d913      	bls.n	8001836 <d_type+0x126>
 800180e:	2a00      	cmp	r2, #0
 8001810:	d02f      	beq.n	8001872 <d_type+0x162>
 8001812:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001816:	428b      	cmp	r3, r1
 8001818:	da2b      	bge.n	8001872 <d_type+0x162>
 800181a:	69e0      	ldr	r0, [r4, #28]
 800181c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001820:	1c59      	adds	r1, r3, #1
 8001822:	9d01      	ldr	r5, [sp, #4]
 8001824:	6221      	str	r1, [r4, #32]
 8001826:	4628      	mov	r0, r5
 8001828:	b003      	add	sp, #12
 800182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800182e:	f7ff ff6f 	bl	8001710 <d_type>
 8001832:	6028      	str	r0, [r5, #0]
 8001834:	e7e4      	b.n	8001800 <d_type+0xf0>
 8001836:	6883      	ldr	r3, [r0, #8]
 8001838:	6082      	str	r2, [r0, #8]
 800183a:	682a      	ldr	r2, [r5, #0]
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	602b      	str	r3, [r5, #0]
 8001840:	9a01      	ldr	r2, [sp, #4]
 8001842:	e7e4      	b.n	800180e <d_type+0xfe>
 8001844:	2301      	movs	r3, #1
 8001846:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001848:	6343      	str	r3, [r0, #52]	; 0x34
 800184a:	f7ff fb37 	bl	8000ebc <d_expression_1>
 800184e:	6365      	str	r5, [r4, #52]	; 0x34
 8001850:	4602      	mov	r2, r0
 8001852:	2300      	movs	r3, #0
 8001854:	2142      	movs	r1, #66	; 0x42
 8001856:	4620      	mov	r0, r4
 8001858:	f7fe fcda 	bl	8000210 <d_make_comp>
 800185c:	4605      	mov	r5, r0
 800185e:	9001      	str	r0, [sp, #4]
 8001860:	b138      	cbz	r0, 8001872 <d_type+0x162>
 8001862:	68e3      	ldr	r3, [r4, #12]
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	b122      	cbz	r2, 8001872 <d_type+0x162>
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60e2      	str	r2, [r4, #12]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b45      	cmp	r3, #69	; 0x45
 8001870:	d07b      	beq.n	800196a <d_type+0x25a>
 8001872:	2500      	movs	r5, #0
 8001874:	4628      	mov	r0, r5
 8001876:	b003      	add	sp, #12
 8001878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800187c:	1c53      	adds	r3, r2, #1
 800187e:	60c3      	str	r3, [r0, #12]
 8001880:	7853      	ldrb	r3, [r2, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f5      	beq.n	8001872 <d_type+0x162>
 8001886:	1c93      	adds	r3, r2, #2
 8001888:	60c3      	str	r3, [r0, #12]
 800188a:	7853      	ldrb	r3, [r2, #1]
 800188c:	3b46      	subs	r3, #70	; 0x46
 800188e:	2b30      	cmp	r3, #48	; 0x30
 8001890:	d8ef      	bhi.n	8001872 <d_type+0x162>
 8001892:	a101      	add	r1, pc, #4	; (adr r1, 8001898 <d_type+0x188>)
 8001894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001898:	08001d55 	.word	0x08001d55
 800189c:	08001873 	.word	0x08001873
 80018a0:	08001873 	.word	0x08001873
 80018a4:	08001873 	.word	0x08001873
 80018a8:	08001873 	.word	0x08001873
 80018ac:	08001873 	.word	0x08001873
 80018b0:	08001873 	.word	0x08001873
 80018b4:	08001873 	.word	0x08001873
 80018b8:	08001873 	.word	0x08001873
 80018bc:	08001873 	.word	0x08001873
 80018c0:	08001873 	.word	0x08001873
 80018c4:	08001873 	.word	0x08001873
 80018c8:	08001873 	.word	0x08001873
 80018cc:	08001873 	.word	0x08001873
 80018d0:	08001845 	.word	0x08001845
 80018d4:	08001873 	.word	0x08001873
 80018d8:	08001873 	.word	0x08001873
 80018dc:	08001873 	.word	0x08001873
 80018e0:	08001873 	.word	0x08001873
 80018e4:	08001873 	.word	0x08001873
 80018e8:	08001873 	.word	0x08001873
 80018ec:	08001873 	.word	0x08001873
 80018f0:	08001873 	.word	0x08001873
 80018f4:	08001873 	.word	0x08001873
 80018f8:	08001873 	.word	0x08001873
 80018fc:	08001873 	.word	0x08001873
 8001900:	08001873 	.word	0x08001873
 8001904:	08001d31 	.word	0x08001d31
 8001908:	08001873 	.word	0x08001873
 800190c:	08001d0d 	.word	0x08001d0d
 8001910:	08001ce5 	.word	0x08001ce5
 8001914:	08001cbd 	.word	0x08001cbd
 8001918:	08001c95 	.word	0x08001c95
 800191c:	08001873 	.word	0x08001873
 8001920:	08001c6d 	.word	0x08001c6d
 8001924:	08001e09 	.word	0x08001e09
 8001928:	08001873 	.word	0x08001873
 800192c:	08001873 	.word	0x08001873
 8001930:	08001873 	.word	0x08001873
 8001934:	08001873 	.word	0x08001873
 8001938:	08001dbd 	.word	0x08001dbd
 800193c:	08001873 	.word	0x08001873
 8001940:	08001c57 	.word	0x08001c57
 8001944:	08001873 	.word	0x08001873
 8001948:	08001873 	.word	0x08001873
 800194c:	08001c2f 	.word	0x08001c2f
 8001950:	08001845 	.word	0x08001845
 8001954:	08001873 	.word	0x08001873
 8001958:	08001bf5 	.word	0x08001bf5
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fd2b 	bl	80013b8 <d_name>
 8001962:	4605      	mov	r5, r0
 8001964:	9001      	str	r0, [sp, #4]
 8001966:	2d00      	cmp	r5, #0
 8001968:	d083      	beq.n	8001872 <d_type+0x162>
 800196a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800196e:	4293      	cmp	r3, r2
 8001970:	f6bf af7f 	bge.w	8001872 <d_type+0x162>
 8001974:	69e1      	ldr	r1, [r4, #28]
 8001976:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800197a:	9d01      	ldr	r5, [sp, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	4628      	mov	r0, r5
 8001980:	6222      	str	r2, [r4, #32]
 8001982:	b003      	add	sp, #12
 8001984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001988:	3201      	adds	r2, #1
 800198a:	60e2      	str	r2, [r4, #12]
 800198c:	4620      	mov	r0, r4
 800198e:	f7fe fdb9 	bl	8000504 <d_source_name>
 8001992:	2300      	movs	r3, #0
 8001994:	4602      	mov	r2, r0
 8001996:	2128      	movs	r1, #40	; 0x28
 8001998:	4620      	mov	r0, r4
 800199a:	f7fe fc39 	bl	8000210 <d_make_comp>
 800199e:	4605      	mov	r5, r0
 80019a0:	9001      	str	r0, [sp, #4]
 80019a2:	e7e0      	b.n	8001966 <d_type+0x256>
 80019a4:	4620      	mov	r0, r4
 80019a6:	f000 fc39 	bl	800221c <d_function_type>
 80019aa:	4605      	mov	r5, r0
 80019ac:	9001      	str	r0, [sp, #4]
 80019ae:	e7da      	b.n	8001966 <d_type+0x256>
 80019b0:	3201      	adds	r2, #1
 80019b2:	60e2      	str	r2, [r4, #12]
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff feab 	bl	8001710 <d_type>
 80019ba:	2300      	movs	r3, #0
 80019bc:	4602      	mov	r2, r0
 80019be:	2125      	movs	r1, #37	; 0x25
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7fe fc25 	bl	8000210 <d_make_comp>
 80019c6:	4605      	mov	r5, r0
 80019c8:	9001      	str	r0, [sp, #4]
 80019ca:	e7cc      	b.n	8001966 <d_type+0x256>
 80019cc:	3201      	adds	r2, #1
 80019ce:	60e2      	str	r2, [r4, #12]
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff fe9d 	bl	8001710 <d_type>
 80019d6:	2300      	movs	r3, #0
 80019d8:	4602      	mov	r2, r0
 80019da:	2126      	movs	r1, #38	; 0x26
 80019dc:	4620      	mov	r0, r4
 80019de:	f7fe fc17 	bl	8000210 <d_make_comp>
 80019e2:	4605      	mov	r5, r0
 80019e4:	9001      	str	r0, [sp, #4]
 80019e6:	e7be      	b.n	8001966 <d_type+0x256>
 80019e8:	3201      	adds	r2, #1
 80019ea:	60e2      	str	r2, [r4, #12]
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fe8f 	bl	8001710 <d_type>
 80019f2:	2300      	movs	r3, #0
 80019f4:	4602      	mov	r2, r0
 80019f6:	2124      	movs	r1, #36	; 0x24
 80019f8:	4620      	mov	r0, r4
 80019fa:	f7fe fc09 	bl	8000210 <d_make_comp>
 80019fe:	4605      	mov	r5, r0
 8001a00:	9001      	str	r0, [sp, #4]
 8001a02:	e7b0      	b.n	8001966 <d_type+0x256>
 8001a04:	3201      	adds	r2, #1
 8001a06:	60e2      	str	r2, [r4, #12]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fe81 	bl	8001710 <d_type>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	4602      	mov	r2, r0
 8001a12:	2122      	movs	r1, #34	; 0x22
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7fe fbfb 	bl	8000210 <d_make_comp>
 8001a1a:	4605      	mov	r5, r0
 8001a1c:	9001      	str	r0, [sp, #4]
 8001a1e:	e7a2      	b.n	8001966 <d_type+0x256>
 8001a20:	3201      	adds	r2, #1
 8001a22:	60e2      	str	r2, [r4, #12]
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fe73 	bl	8001710 <d_type>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	2123      	movs	r1, #35	; 0x23
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fbed 	bl	8000210 <d_make_comp>
 8001a36:	4605      	mov	r5, r0
 8001a38:	9001      	str	r0, [sp, #4]
 8001a3a:	e794      	b.n	8001966 <d_type+0x256>
 8001a3c:	7853      	ldrb	r3, [r2, #1]
 8001a3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a42:	2a09      	cmp	r2, #9
 8001a44:	d905      	bls.n	8001a52 <d_type+0x342>
 8001a46:	2b5f      	cmp	r3, #95	; 0x5f
 8001a48:	d003      	beq.n	8001a52 <d_type+0x342>
 8001a4a:	3b41      	subs	r3, #65	; 0x41
 8001a4c:	2b19      	cmp	r3, #25
 8001a4e:	f200 820f 	bhi.w	8001e70 <d_type+0x760>
 8001a52:	2100      	movs	r1, #0
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7fe fdcb 	bl	80005f0 <d_substitution>
 8001a5a:	68e3      	ldr	r3, [r4, #12]
 8001a5c:	9001      	str	r0, [sp, #4]
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	2a49      	cmp	r2, #73	; 0x49
 8001a62:	4605      	mov	r5, r0
 8001a64:	f47f aedf 	bne.w	8001826 <d_type+0x116>
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60e3      	str	r3, [r4, #12]
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff fc37 	bl	80012e0 <d_template_args_1>
 8001a72:	4603      	mov	r3, r0
 8001a74:	462a      	mov	r2, r5
 8001a76:	2104      	movs	r1, #4
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fbc9 	bl	8000210 <d_make_comp>
 8001a7e:	4605      	mov	r5, r0
 8001a80:	9001      	str	r0, [sp, #4]
 8001a82:	e770      	b.n	8001966 <d_type+0x256>
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7fe fd1b 	bl	80004c0 <d_template_param>
 8001a8a:	68e6      	ldr	r6, [r4, #12]
 8001a8c:	9001      	str	r0, [sp, #4]
 8001a8e:	7833      	ldrb	r3, [r6, #0]
 8001a90:	2b49      	cmp	r3, #73	; 0x49
 8001a92:	4605      	mov	r5, r0
 8001a94:	f47f af67 	bne.w	8001966 <d_type+0x256>
 8001a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 81f5 	bne.w	8001e8a <d_type+0x77a>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	f43f aee6 	beq.w	8001872 <d_type+0x162>
 8001aa6:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001aaa:	428a      	cmp	r2, r1
 8001aac:	f6bf aee1 	bge.w	8001872 <d_type+0x162>
 8001ab0:	69e1      	ldr	r1, [r4, #28]
 8001ab2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	6222      	str	r2, [r4, #32]
 8001aba:	7831      	ldrb	r1, [r6, #0]
 8001abc:	9d01      	ldr	r5, [sp, #4]
 8001abe:	3949      	subs	r1, #73	; 0x49
 8001ac0:	2901      	cmp	r1, #1
 8001ac2:	d8d7      	bhi.n	8001a74 <d_type+0x364>
 8001ac4:	3601      	adds	r6, #1
 8001ac6:	60e6      	str	r6, [r4, #12]
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff fc09 	bl	80012e0 <d_template_args_1>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	e7d0      	b.n	8001a74 <d_type+0x364>
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	60e2      	str	r2, [r4, #12]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7fe fd14 	bl	8000504 <d_source_name>
 8001adc:	68e3      	ldr	r3, [r4, #12]
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	2a49      	cmp	r2, #73	; 0x49
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	f000 81a8 	beq.w	8001e3a <d_type+0x72a>
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fe10 	bl	8001710 <d_type>
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	4602      	mov	r2, r0
 8001af4:	2121      	movs	r1, #33	; 0x21
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7fe fb8a 	bl	8000210 <d_make_comp>
 8001afc:	4605      	mov	r5, r0
 8001afe:	9001      	str	r0, [sp, #4]
 8001b00:	e731      	b.n	8001966 <d_type+0x256>
 8001b02:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001b06:	3b61      	subs	r3, #97	; 0x61
 8001b08:	4db6      	ldr	r5, [pc, #728]	; (8001de4 <d_type+0x6d4>)
 8001b0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b0e:	4281      	cmp	r1, r0
 8001b10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001b14:	f280 818b 	bge.w	8001e2e <d_type+0x71e>
 8001b18:	6858      	ldr	r0, [r3, #4]
 8001b1a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001b1c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001b20:	010f      	lsls	r7, r1, #4
 8001b22:	eb0c 0507 	add.w	r5, ip, r7
 8001b26:	4406      	add	r6, r0
 8001b28:	4630      	mov	r0, r6
 8001b2a:	3201      	adds	r2, #1
 8001b2c:	3101      	adds	r1, #1
 8001b2e:	f04f 0e00 	mov.w	lr, #0
 8001b32:	2627      	movs	r6, #39	; 0x27
 8001b34:	f8c5 e004 	str.w	lr, [r5, #4]
 8001b38:	6161      	str	r1, [r4, #20]
 8001b3a:	f80c 6007 	strb.w	r6, [ip, r7]
 8001b3e:	60ab      	str	r3, [r5, #8]
 8001b40:	60e2      	str	r2, [r4, #12]
 8001b42:	6320      	str	r0, [r4, #48]	; 0x30
 8001b44:	e66f      	b.n	8001826 <d_type+0x116>
 8001b46:	3201      	adds	r2, #1
 8001b48:	60e2      	str	r2, [r4, #12]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff fde0 	bl	8001710 <d_type>
 8001b50:	4605      	mov	r5, r0
 8001b52:	2800      	cmp	r0, #0
 8001b54:	f43f ae8d 	beq.w	8001872 <d_type+0x162>
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff fdd9 	bl	8001710 <d_type>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f43f ae86 	beq.w	8001872 <d_type+0x162>
 8001b66:	462a      	mov	r2, r5
 8001b68:	212b      	movs	r1, #43	; 0x2b
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7fe fb50 	bl	8000210 <d_make_comp>
 8001b70:	4605      	mov	r5, r0
 8001b72:	9001      	str	r0, [sp, #4]
 8001b74:	e6f7      	b.n	8001966 <d_type+0x256>
 8001b76:	1c55      	adds	r5, r2, #1
 8001b78:	60e5      	str	r5, [r4, #12]
 8001b7a:	7853      	ldrb	r3, [r2, #1]
 8001b7c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b7e:	f000 815a 	beq.w	8001e36 <d_type+0x726>
 8001b82:	3b30      	subs	r3, #48	; 0x30
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	f200 8165 	bhi.w	8001e54 <d_type+0x744>
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	e000      	b.n	8001b90 <d_type+0x480>
 8001b8e:	4608      	mov	r0, r1
 8001b90:	1c41      	adds	r1, r0, #1
 8001b92:	60e1      	str	r1, [r4, #12]
 8001b94:	7843      	ldrb	r3, [r0, #1]
 8001b96:	3b30      	subs	r3, #48	; 0x30
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d9f8      	bls.n	8001b8e <d_type+0x47e>
 8001b9c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	eba1 0705 	sub.w	r7, r1, r5
 8001ba6:	f6bf ae64 	bge.w	8001872 <d_type+0x162>
 8001baa:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001bae:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001bb2:	eb0e 060c 	add.w	r6, lr, ip
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6072      	str	r2, [r6, #4]
 8001bbc:	6163      	str	r3, [r4, #20]
 8001bbe:	2f00      	cmp	r7, #0
 8001bc0:	f43f ae57 	beq.w	8001872 <d_type+0x162>
 8001bc4:	6072      	str	r2, [r6, #4]
 8001bc6:	f80e 200c 	strb.w	r2, [lr, ip]
 8001bca:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001bce:	7843      	ldrb	r3, [r0, #1]
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	2b5f      	cmp	r3, #95	; 0x5f
 8001bd4:	f47f ae4d 	bne.w	8001872 <d_type+0x162>
 8001bd8:	3501      	adds	r5, #1
 8001bda:	60e5      	str	r5, [r4, #12]
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7ff fd97 	bl	8001710 <d_type>
 8001be2:	4632      	mov	r2, r6
 8001be4:	4603      	mov	r3, r0
 8001be6:	212a      	movs	r1, #42	; 0x2a
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7fe fb11 	bl	8000210 <d_make_comp>
 8001bee:	4605      	mov	r5, r0
 8001bf0:	9001      	str	r0, [sp, #4]
 8001bf2:	e6b8      	b.n	8001966 <d_type+0x256>
 8001bf4:	7893      	ldrb	r3, [r2, #2]
 8001bf6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bf8:	f000 8178 	beq.w	8001eec <d_type+0x7dc>
 8001bfc:	f7fe fc2e 	bl	800045c <d_number_component>
 8001c00:	4605      	mov	r5, r0
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	f43f ae35 	beq.w	8001872 <d_type+0x162>
 8001c08:	68e3      	ldr	r3, [r4, #12]
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	2a5f      	cmp	r2, #95	; 0x5f
 8001c0e:	f47f ae30 	bne.w	8001872 <d_type+0x162>
 8001c12:	3301      	adds	r3, #1
 8001c14:	60e3      	str	r3, [r4, #12]
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff fd7a 	bl	8001710 <d_type>
 8001c1c:	462a      	mov	r2, r5
 8001c1e:	4603      	mov	r3, r0
 8001c20:	212d      	movs	r1, #45	; 0x2d
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7fe faf4 	bl	8000210 <d_make_comp>
 8001c28:	4605      	mov	r5, r0
 8001c2a:	9001      	str	r0, [sp, #4]
 8001c2c:	e69b      	b.n	8001966 <d_type+0x256>
 8001c2e:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f280 80fb 	bge.w	8001e2e <d_type+0x71e>
 8001c38:	6900      	ldr	r0, [r0, #16]
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	0119      	lsls	r1, r3, #4
 8001c3e:	1845      	adds	r5, r0, r1
 8001c40:	3301      	adds	r3, #1
 8001c42:	2600      	movs	r6, #0
 8001c44:	606e      	str	r6, [r5, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	6163      	str	r3, [r4, #20]
 8001c4a:	2627      	movs	r6, #39	; 0x27
 8001c4c:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <d_type+0x6d8>)
 8001c4e:	5446      	strb	r6, [r0, r1]
 8001c50:	60ab      	str	r3, [r5, #8]
 8001c52:	6322      	str	r2, [r4, #48]	; 0x30
 8001c54:	e5e7      	b.n	8001826 <d_type+0x116>
 8001c56:	f7ff fd5b 	bl	8001710 <d_type>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	214a      	movs	r1, #74	; 0x4a
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7fe fad5 	bl	8000210 <d_make_comp>
 8001c66:	4605      	mov	r5, r0
 8001c68:	9001      	str	r0, [sp, #4]
 8001c6a:	e67c      	b.n	8001966 <d_type+0x256>
 8001c6c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f280 80dc 	bge.w	8001e2e <d_type+0x71e>
 8001c76:	6900      	ldr	r0, [r0, #16]
 8001c78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c7a:	0119      	lsls	r1, r3, #4
 8001c7c:	1845      	adds	r5, r0, r1
 8001c7e:	3301      	adds	r3, #1
 8001c80:	2600      	movs	r6, #0
 8001c82:	606e      	str	r6, [r5, #4]
 8001c84:	3204      	adds	r2, #4
 8001c86:	6163      	str	r3, [r4, #20]
 8001c88:	2627      	movs	r6, #39	; 0x27
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <d_type+0x6dc>)
 8001c8c:	5446      	strb	r6, [r0, r1]
 8001c8e:	60ab      	str	r3, [r5, #8]
 8001c90:	6322      	str	r2, [r4, #48]	; 0x30
 8001c92:	e5c8      	b.n	8001826 <d_type+0x116>
 8001c94:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f280 80c8 	bge.w	8001e2e <d_type+0x71e>
 8001c9e:	6900      	ldr	r0, [r0, #16]
 8001ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ca2:	0119      	lsls	r1, r3, #4
 8001ca4:	1845      	adds	r5, r0, r1
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	2600      	movs	r6, #0
 8001caa:	606e      	str	r6, [r5, #4]
 8001cac:	3209      	adds	r2, #9
 8001cae:	6163      	str	r3, [r4, #20]
 8001cb0:	2627      	movs	r6, #39	; 0x27
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <d_type+0x6e0>)
 8001cb4:	5446      	strb	r6, [r0, r1]
 8001cb6:	60ab      	str	r3, [r5, #8]
 8001cb8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cba:	e5b4      	b.n	8001826 <d_type+0x116>
 8001cbc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	f280 80b4 	bge.w	8001e2e <d_type+0x71e>
 8001cc6:	6900      	ldr	r0, [r0, #16]
 8001cc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cca:	0119      	lsls	r1, r3, #4
 8001ccc:	1845      	adds	r5, r0, r1
 8001cce:	3301      	adds	r3, #1
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	606e      	str	r6, [r5, #4]
 8001cd4:	320a      	adds	r2, #10
 8001cd6:	6163      	str	r3, [r4, #20]
 8001cd8:	2627      	movs	r6, #39	; 0x27
 8001cda:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <d_type+0x6e4>)
 8001cdc:	5446      	strb	r6, [r0, r1]
 8001cde:	60ab      	str	r3, [r5, #8]
 8001ce0:	6322      	str	r2, [r4, #48]	; 0x30
 8001ce2:	e5a0      	b.n	8001826 <d_type+0x116>
 8001ce4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f280 80a0 	bge.w	8001e2e <d_type+0x71e>
 8001cee:	6900      	ldr	r0, [r0, #16]
 8001cf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cf2:	0119      	lsls	r1, r3, #4
 8001cf4:	1845      	adds	r5, r0, r1
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	606e      	str	r6, [r5, #4]
 8001cfc:	3209      	adds	r2, #9
 8001cfe:	6163      	str	r3, [r4, #20]
 8001d00:	2627      	movs	r6, #39	; 0x27
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <d_type+0x6e8>)
 8001d04:	5446      	strb	r6, [r0, r1]
 8001d06:	60ab      	str	r3, [r5, #8]
 8001d08:	6322      	str	r2, [r4, #48]	; 0x30
 8001d0a:	e58c      	b.n	8001826 <d_type+0x116>
 8001d0c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f6bf adae 	bge.w	8001872 <d_type+0x162>
 8001d16:	6901      	ldr	r1, [r0, #16]
 8001d18:	4e38      	ldr	r6, [pc, #224]	; (8001dfc <d_type+0x6ec>)
 8001d1a:	011a      	lsls	r2, r3, #4
 8001d1c:	188d      	adds	r5, r1, r2
 8001d1e:	3301      	adds	r3, #1
 8001d20:	6143      	str	r3, [r0, #20]
 8001d22:	2300      	movs	r3, #0
 8001d24:	200e      	movs	r0, #14
 8001d26:	606b      	str	r3, [r5, #4]
 8001d28:	548b      	strb	r3, [r1, r2]
 8001d2a:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d2e:	e57a      	b.n	8001826 <d_type+0x116>
 8001d30:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f6bf ad9c 	bge.w	8001872 <d_type+0x162>
 8001d3a:	6901      	ldr	r1, [r0, #16]
 8001d3c:	4e30      	ldr	r6, [pc, #192]	; (8001e00 <d_type+0x6f0>)
 8001d3e:	011a      	lsls	r2, r3, #4
 8001d40:	188d      	adds	r5, r1, r2
 8001d42:	3301      	adds	r3, #1
 8001d44:	6143      	str	r3, [r0, #20]
 8001d46:	2300      	movs	r3, #0
 8001d48:	2004      	movs	r0, #4
 8001d4a:	606b      	str	r3, [r5, #4]
 8001d4c:	548b      	strb	r3, [r1, r2]
 8001d4e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d52:	e568      	b.n	8001826 <d_type+0x116>
 8001d54:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	f280 80af 	bge.w	8001ebc <d_type+0x7ac>
 8001d5e:	6905      	ldr	r5, [r0, #16]
 8001d60:	0118      	lsls	r0, r3, #4
 8001d62:	1829      	adds	r1, r5, r0
 8001d64:	3301      	adds	r3, #1
 8001d66:	2700      	movs	r7, #0
 8001d68:	262c      	movs	r6, #44	; 0x2c
 8001d6a:	604f      	str	r7, [r1, #4]
 8001d6c:	9101      	str	r1, [sp, #4]
 8001d6e:	6163      	str	r3, [r4, #20]
 8001d70:	542e      	strb	r6, [r5, r0]
 8001d72:	7893      	ldrb	r3, [r2, #2]
 8001d74:	3b30      	subs	r3, #48	; 0x30
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	463b      	movhi	r3, r7
 8001d80:	818b      	strh	r3, [r1, #12]
 8001d82:	f240 80ae 	bls.w	8001ee2 <d_type+0x7d2>
 8001d86:	4620      	mov	r0, r4
 8001d88:	9d01      	ldr	r5, [sp, #4]
 8001d8a:	f7ff fcc1 	bl	8001710 <d_type>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	60a8      	str	r0, [r5, #8]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f ad6c 	beq.w	8001872 <d_type+0x162>
 8001d9a:	f104 000c 	add.w	r0, r4, #12
 8001d9e:	f7fe fb31 	bl	8000404 <d_number.isra.1>
 8001da2:	68e2      	ldr	r2, [r4, #12]
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	b113      	cbz	r3, 8001dae <d_type+0x69e>
 8001da8:	1c53      	adds	r3, r2, #1
 8001daa:	60e3      	str	r3, [r4, #12]
 8001dac:	7813      	ldrb	r3, [r2, #0]
 8001dae:	9d01      	ldr	r5, [sp, #4]
 8001db0:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001db4:	4253      	negs	r3, r2
 8001db6:	4153      	adcs	r3, r2
 8001db8:	81eb      	strh	r3, [r5, #14]
 8001dba:	e534      	b.n	8001826 <d_type+0x116>
 8001dbc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	da34      	bge.n	8001e2e <d_type+0x71e>
 8001dc4:	6900      	ldr	r0, [r0, #16]
 8001dc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dc8:	0119      	lsls	r1, r3, #4
 8001dca:	1845      	adds	r5, r0, r1
 8001dcc:	3301      	adds	r3, #1
 8001dce:	2600      	movs	r6, #0
 8001dd0:	606e      	str	r6, [r5, #4]
 8001dd2:	3211      	adds	r2, #17
 8001dd4:	6163      	str	r3, [r4, #20]
 8001dd6:	2627      	movs	r6, #39	; 0x27
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <d_type+0x6f4>)
 8001dda:	5446      	strb	r6, [r0, r1]
 8001ddc:	60ab      	str	r3, [r5, #8]
 8001dde:	6322      	str	r2, [r4, #48]	; 0x30
 8001de0:	e521      	b.n	8001826 <d_type+0x116>
 8001de2:	bf00      	nop
 8001de4:	0801c2d4 	.word	0x0801c2d4
 8001de8:	0801c52c 	.word	0x0801c52c
 8001dec:	0801c518 	.word	0x0801c518
 8001df0:	0801c4dc 	.word	0x0801c4dc
 8001df4:	0801c504 	.word	0x0801c504
 8001df8:	0801c4f0 	.word	0x0801c4f0
 8001dfc:	0809400c 	.word	0x0809400c
 8001e00:	08094004 	.word	0x08094004
 8001e04:	0801c554 	.word	0x0801c554
 8001e08:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	da0e      	bge.n	8001e2e <d_type+0x71e>
 8001e10:	6900      	ldr	r0, [r0, #16]
 8001e12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e14:	0119      	lsls	r1, r3, #4
 8001e16:	1845      	adds	r5, r0, r1
 8001e18:	3301      	adds	r3, #1
 8001e1a:	2600      	movs	r6, #0
 8001e1c:	606e      	str	r6, [r5, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	6163      	str	r3, [r4, #20]
 8001e22:	2627      	movs	r6, #39	; 0x27
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <d_type+0x7f0>)
 8001e26:	5446      	strb	r6, [r0, r1]
 8001e28:	60ab      	str	r3, [r5, #8]
 8001e2a:	6322      	str	r2, [r4, #48]	; 0x30
 8001e2c:	e4fb      	b.n	8001826 <d_type+0x116>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	deff      	udf	#255	; 0xff
 8001e36:	2600      	movs	r6, #0
 8001e38:	e6ce      	b.n	8001bd8 <d_type+0x4c8>
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60e3      	str	r3, [r4, #12]
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff fa4e 	bl	80012e0 <d_template_args_1>
 8001e44:	462a      	mov	r2, r5
 8001e46:	4603      	mov	r3, r0
 8001e48:	2104      	movs	r1, #4
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe f9e0 	bl	8000210 <d_make_comp>
 8001e50:	9001      	str	r0, [sp, #4]
 8001e52:	e64a      	b.n	8001aea <d_type+0x3da>
 8001e54:	2301      	movs	r3, #1
 8001e56:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e58:	6363      	str	r3, [r4, #52]	; 0x34
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff f82e 	bl	8000ebc <d_expression_1>
 8001e60:	6365      	str	r5, [r4, #52]	; 0x34
 8001e62:	4606      	mov	r6, r0
 8001e64:	2800      	cmp	r0, #0
 8001e66:	f43f ad04 	beq.w	8001872 <d_type+0x162>
 8001e6a:	68e5      	ldr	r5, [r4, #12]
 8001e6c:	782b      	ldrb	r3, [r5, #0]
 8001e6e:	e6b0      	b.n	8001bd2 <d_type+0x4c2>
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff faa1 	bl	80013b8 <d_name>
 8001e76:	4605      	mov	r5, r0
 8001e78:	9001      	str	r0, [sp, #4]
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	f43f acf9 	beq.w	8001872 <d_type+0x162>
 8001e80:	7803      	ldrb	r3, [r0, #0]
 8001e82:	2b18      	cmp	r3, #24
 8001e84:	f47f ad71 	bne.w	800196a <d_type+0x25a>
 8001e88:	e4cd      	b.n	8001826 <d_type+0x116>
 8001e8a:	1c73      	adds	r3, r6, #1
 8001e8c:	60e3      	str	r3, [r4, #12]
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e94:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e98:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e9c:	f7ff fa20 	bl	80012e0 <d_template_args_1>
 8001ea0:	68e2      	ldr	r2, [r4, #12]
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	2a49      	cmp	r2, #73	; 0x49
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	d00b      	beq.n	8001ec2 <d_type+0x7b2>
 8001eaa:	6325      	str	r5, [r4, #48]	; 0x30
 8001eac:	60e6      	str	r6, [r4, #12]
 8001eae:	f8c4 9014 	str.w	r9, [r4, #20]
 8001eb2:	f8c4 8020 	str.w	r8, [r4, #32]
 8001eb6:	62a7      	str	r7, [r4, #40]	; 0x28
 8001eb8:	9d01      	ldr	r5, [sp, #4]
 8001eba:	e554      	b.n	8001966 <d_type+0x256>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	701b      	strb	r3, [r3, #0]
 8001ec0:	deff      	udf	#255	; 0xff
 8001ec2:	9901      	ldr	r1, [sp, #4]
 8001ec4:	2900      	cmp	r1, #0
 8001ec6:	f43f acd4 	beq.w	8001872 <d_type+0x162>
 8001eca:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	f6bf accf 	bge.w	8001872 <d_type+0x162>
 8001ed4:	69e0      	ldr	r0, [r4, #28]
 8001ed6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001eda:	3201      	adds	r2, #1
 8001edc:	6222      	str	r2, [r4, #32]
 8001ede:	9a01      	ldr	r2, [sp, #4]
 8001ee0:	e5c9      	b.n	8001a76 <d_type+0x366>
 8001ee2:	f104 000c 	add.w	r0, r4, #12
 8001ee6:	f7fe fa8d 	bl	8000404 <d_number.isra.1>
 8001eea:	e74c      	b.n	8001d86 <d_type+0x676>
 8001eec:	3203      	adds	r2, #3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001ef2:	60c2      	str	r2, [r0, #12]
 8001ef4:	6343      	str	r3, [r0, #52]	; 0x34
 8001ef6:	f7fe ffe1 	bl	8000ebc <d_expression_1>
 8001efa:	6366      	str	r6, [r4, #52]	; 0x34
 8001efc:	4605      	mov	r5, r0
 8001efe:	e680      	b.n	8001c02 <d_type+0x4f2>
 8001f00:	0801c540 	.word	0x0801c540

08001f04 <d_operator_name>:
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f06:	68c3      	ldr	r3, [r0, #12]
 8001f08:	781e      	ldrb	r6, [r3, #0]
 8001f0a:	4686      	mov	lr, r0
 8001f0c:	b336      	cbz	r6, 8001f5c <d_operator_name+0x58>
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60c2      	str	r2, [r0, #12]
 8001f12:	785a      	ldrb	r2, [r3, #1]
 8001f14:	781e      	ldrb	r6, [r3, #0]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d04a      	beq.n	8001fb0 <d_operator_name+0xac>
 8001f1a:	1c9a      	adds	r2, r3, #2
 8001f1c:	60c2      	str	r2, [r0, #12]
 8001f1e:	2e76      	cmp	r6, #118	; 0x76
 8001f20:	4604      	mov	r4, r0
 8001f22:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001f26:	d145      	bne.n	8001fb4 <d_operator_name+0xb0>
 8001f28:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001f2c:	b2eb      	uxtb	r3, r5
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d815      	bhi.n	8001f5e <d_operator_name+0x5a>
 8001f32:	f7fe fae7 	bl	8000504 <d_source_name>
 8001f36:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001f3a:	428b      	cmp	r3, r1
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	da21      	bge.n	8001f84 <d_operator_name+0x80>
 8001f40:	6926      	ldr	r6, [r4, #16]
 8001f42:	0119      	lsls	r1, r3, #4
 8001f44:	1870      	adds	r0, r6, r1
 8001f46:	3301      	adds	r3, #1
 8001f48:	2700      	movs	r7, #0
 8001f4a:	6047      	str	r7, [r0, #4]
 8001f4c:	6163      	str	r3, [r4, #20]
 8001f4e:	b1ca      	cbz	r2, 8001f84 <d_operator_name+0x80>
 8001f50:	2332      	movs	r3, #50	; 0x32
 8001f52:	6047      	str	r7, [r0, #4]
 8001f54:	5473      	strb	r3, [r6, r1]
 8001f56:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f5c:	46b4      	mov	ip, r6
 8001f5e:	4c23      	ldr	r4, [pc, #140]	; (8001fec <d_operator_name+0xe8>)
 8001f60:	2043      	movs	r0, #67	; 0x43
 8001f62:	2200      	movs	r2, #0
 8001f64:	1a83      	subs	r3, r0, r2
 8001f66:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f6a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f6e:	0119      	lsls	r1, r3, #4
 8001f70:	1867      	adds	r7, r4, r1
 8001f72:	5861      	ldr	r1, [r4, r1]
 8001f74:	780d      	ldrb	r5, [r1, #0]
 8001f76:	42b5      	cmp	r5, r6
 8001f78:	d006      	beq.n	8001f88 <d_operator_name+0x84>
 8001f7a:	bf94      	ite	ls
 8001f7c:	1c5a      	addls	r2, r3, #1
 8001f7e:	4618      	movhi	r0, r3
 8001f80:	4282      	cmp	r2, r0
 8001f82:	d1ef      	bne.n	8001f64 <d_operator_name+0x60>
 8001f84:	2000      	movs	r0, #0
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f88:	7849      	ldrb	r1, [r1, #1]
 8001f8a:	4561      	cmp	r1, ip
 8001f8c:	d1f5      	bne.n	8001f7a <d_operator_name+0x76>
 8001f8e:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	daf6      	bge.n	8001f84 <d_operator_name+0x80>
 8001f96:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001f9a:	011a      	lsls	r2, r3, #4
 8001f9c:	1888      	adds	r0, r1, r2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	2431      	movs	r4, #49	; 0x31
 8001fa4:	6045      	str	r5, [r0, #4]
 8001fa6:	f8ce 3014 	str.w	r3, [lr, #20]
 8001faa:	548c      	strb	r4, [r1, r2]
 8001fac:	6087      	str	r7, [r0, #8]
 8001fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb0:	4694      	mov	ip, r2
 8001fb2:	e7d4      	b.n	8001f5e <d_operator_name+0x5a>
 8001fb4:	2e63      	cmp	r6, #99	; 0x63
 8001fb6:	d1d2      	bne.n	8001f5e <d_operator_name+0x5a>
 8001fb8:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001fbc:	d1cf      	bne.n	8001f5e <d_operator_name+0x5a>
 8001fbe:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	6383      	str	r3, [r0, #56]	; 0x38
 8001fca:	f7ff fba1 	bl	8001710 <d_type>
 8001fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	b92b      	cbnz	r3, 8001fe0 <d_operator_name+0xdc>
 8001fd4:	2133      	movs	r1, #51	; 0x33
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7fe f91a 	bl	8000210 <d_make_comp>
 8001fdc:	63a5      	str	r5, [r4, #56]	; 0x38
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2134      	movs	r1, #52	; 0x34
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7fe f913 	bl	8000210 <d_make_comp>
 8001fea:	e7f7      	b.n	8001fdc <d_operator_name+0xd8>
 8001fec:	0801c568 	.word	0x0801c568

08001ff0 <d_parmlist>:
 8001ff0:	b530      	push	{r4, r5, lr}
 8001ff2:	68c2      	ldr	r2, [r0, #12]
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d036      	beq.n	800206e <d_parmlist+0x7e>
 8002000:	2b45      	cmp	r3, #69	; 0x45
 8002002:	d034      	beq.n	800206e <d_parmlist+0x7e>
 8002004:	2b2e      	cmp	r3, #46	; 0x2e
 8002006:	d032      	beq.n	800206e <d_parmlist+0x7e>
 8002008:	4604      	mov	r4, r0
 800200a:	ad01      	add	r5, sp, #4
 800200c:	e015      	b.n	800203a <d_parmlist+0x4a>
 800200e:	2b4f      	cmp	r3, #79	; 0x4f
 8002010:	d016      	beq.n	8002040 <d_parmlist+0x50>
 8002012:	f7ff fb7d 	bl	8001710 <d_type>
 8002016:	2300      	movs	r3, #0
 8002018:	4602      	mov	r2, r0
 800201a:	212e      	movs	r1, #46	; 0x2e
 800201c:	b338      	cbz	r0, 800206e <d_parmlist+0x7e>
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe f8f6 	bl	8000210 <d_make_comp>
 8002024:	6028      	str	r0, [r5, #0]
 8002026:	b310      	cbz	r0, 800206e <d_parmlist+0x7e>
 8002028:	68e2      	ldr	r2, [r4, #12]
 800202a:	7813      	ldrb	r3, [r2, #0]
 800202c:	f100 050c 	add.w	r5, r0, #12
 8002030:	b14b      	cbz	r3, 8002046 <d_parmlist+0x56>
 8002032:	2b45      	cmp	r3, #69	; 0x45
 8002034:	d007      	beq.n	8002046 <d_parmlist+0x56>
 8002036:	2b2e      	cmp	r3, #46	; 0x2e
 8002038:	d005      	beq.n	8002046 <d_parmlist+0x56>
 800203a:	2b52      	cmp	r3, #82	; 0x52
 800203c:	4620      	mov	r0, r4
 800203e:	d1e6      	bne.n	800200e <d_parmlist+0x1e>
 8002040:	7853      	ldrb	r3, [r2, #1]
 8002042:	2b45      	cmp	r3, #69	; 0x45
 8002044:	d1e5      	bne.n	8002012 <d_parmlist+0x22>
 8002046:	9801      	ldr	r0, [sp, #4]
 8002048:	b188      	cbz	r0, 800206e <d_parmlist+0x7e>
 800204a:	68c3      	ldr	r3, [r0, #12]
 800204c:	b10b      	cbz	r3, 8002052 <d_parmlist+0x62>
 800204e:	b003      	add	sp, #12
 8002050:	bd30      	pop	{r4, r5, pc}
 8002052:	6882      	ldr	r2, [r0, #8]
 8002054:	7811      	ldrb	r1, [r2, #0]
 8002056:	2927      	cmp	r1, #39	; 0x27
 8002058:	d1f9      	bne.n	800204e <d_parmlist+0x5e>
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	7c11      	ldrb	r1, [r2, #16]
 800205e:	2909      	cmp	r1, #9
 8002060:	d1f5      	bne.n	800204e <d_parmlist+0x5e>
 8002062:	6851      	ldr	r1, [r2, #4]
 8002064:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002066:	1a52      	subs	r2, r2, r1
 8002068:	6322      	str	r2, [r4, #48]	; 0x30
 800206a:	6083      	str	r3, [r0, #8]
 800206c:	e7ef      	b.n	800204e <d_parmlist+0x5e>
 800206e:	2000      	movs	r0, #0
 8002070:	b003      	add	sp, #12
 8002072:	bd30      	pop	{r4, r5, pc}

08002074 <d_cv_qualifiers>:
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	4689      	mov	r9, r1
 800207a:	b083      	sub	sp, #12
 800207c:	68c1      	ldr	r1, [r0, #12]
 800207e:	1e13      	subs	r3, r2, #0
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	4604      	mov	r4, r0
 8002084:	780b      	ldrb	r3, [r1, #0]
 8002086:	bf15      	itete	ne
 8002088:	f04f 081e 	movne.w	r8, #30
 800208c:	f04f 081b 	moveq.w	r8, #27
 8002090:	271d      	movne	r7, #29
 8002092:	271a      	moveq	r7, #26
 8002094:	bf14      	ite	ne
 8002096:	261c      	movne	r6, #28
 8002098:	2619      	moveq	r6, #25
 800209a:	464d      	mov	r5, r9
 800209c:	f04f 0a01 	mov.w	sl, #1
 80020a0:	e01c      	b.n	80020dc <d_cv_qualifiers+0x68>
 80020a2:	2b56      	cmp	r3, #86	; 0x56
 80020a4:	d03f      	beq.n	8002126 <d_cv_qualifiers+0xb2>
 80020a6:	2b4b      	cmp	r3, #75	; 0x4b
 80020a8:	d043      	beq.n	8002132 <d_cv_qualifiers+0xbe>
 80020aa:	784b      	ldrb	r3, [r1, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d035      	beq.n	800211c <d_cv_qualifiers+0xa8>
 80020b0:	1c8b      	adds	r3, r1, #2
 80020b2:	60e3      	str	r3, [r4, #12]
 80020b4:	784b      	ldrb	r3, [r1, #1]
 80020b6:	2b78      	cmp	r3, #120	; 0x78
 80020b8:	d041      	beq.n	800213e <d_cv_qualifiers+0xca>
 80020ba:	2b6f      	cmp	r3, #111	; 0x6f
 80020bc:	d145      	bne.n	800214a <d_cv_qualifiers+0xd6>
 80020be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020c0:	3309      	adds	r3, #9
 80020c2:	6323      	str	r3, [r4, #48]	; 0x30
 80020c4:	214e      	movs	r1, #78	; 0x4e
 80020c6:	2300      	movs	r3, #0
 80020c8:	2200      	movs	r2, #0
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7fe f8a0 	bl	8000210 <d_make_comp>
 80020d0:	6028      	str	r0, [r5, #0]
 80020d2:	b318      	cbz	r0, 800211c <d_cv_qualifiers+0xa8>
 80020d4:	68e1      	ldr	r1, [r4, #12]
 80020d6:	780b      	ldrb	r3, [r1, #0]
 80020d8:	f100 0508 	add.w	r5, r0, #8
 80020dc:	2b72      	cmp	r3, #114	; 0x72
 80020de:	d00d      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e0:	2b56      	cmp	r3, #86	; 0x56
 80020e2:	d00b      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e4:	2b4b      	cmp	r3, #75	; 0x4b
 80020e6:	d009      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e8:	2b44      	cmp	r3, #68	; 0x44
 80020ea:	d146      	bne.n	800217a <d_cv_qualifiers+0x106>
 80020ec:	784a      	ldrb	r2, [r1, #1]
 80020ee:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 80020f2:	284f      	cmp	r0, #79	; 0x4f
 80020f4:	d002      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020f6:	3a77      	subs	r2, #119	; 0x77
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	d83e      	bhi.n	800217a <d_cv_qualifiers+0x106>
 80020fc:	1c4a      	adds	r2, r1, #1
 80020fe:	2b72      	cmp	r3, #114	; 0x72
 8002100:	60e2      	str	r2, [r4, #12]
 8002102:	d1ce      	bne.n	80020a2 <d_cv_qualifiers+0x2e>
 8002104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002106:	3309      	adds	r3, #9
 8002108:	6323      	str	r3, [r4, #48]	; 0x30
 800210a:	4631      	mov	r1, r6
 800210c:	2300      	movs	r3, #0
 800210e:	2200      	movs	r2, #0
 8002110:	4620      	mov	r0, r4
 8002112:	f7fe f87d 	bl	8000210 <d_make_comp>
 8002116:	6028      	str	r0, [r5, #0]
 8002118:	2800      	cmp	r0, #0
 800211a:	d1db      	bne.n	80020d4 <d_cv_qualifiers+0x60>
 800211c:	2500      	movs	r5, #0
 800211e:	4628      	mov	r0, r5
 8002120:	b003      	add	sp, #12
 8002122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002126:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002128:	3309      	adds	r3, #9
 800212a:	6323      	str	r3, [r4, #48]	; 0x30
 800212c:	4639      	mov	r1, r7
 800212e:	2300      	movs	r3, #0
 8002130:	e7ca      	b.n	80020c8 <d_cv_qualifiers+0x54>
 8002132:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002134:	3306      	adds	r3, #6
 8002136:	6323      	str	r3, [r4, #48]	; 0x30
 8002138:	4641      	mov	r1, r8
 800213a:	2300      	movs	r3, #0
 800213c:	e7c4      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800213e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002140:	3311      	adds	r3, #17
 8002142:	6323      	str	r3, [r4, #48]	; 0x30
 8002144:	214c      	movs	r1, #76	; 0x4c
 8002146:	2300      	movs	r3, #0
 8002148:	e7be      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800214a:	2b4f      	cmp	r3, #79	; 0x4f
 800214c:	d132      	bne.n	80021b4 <d_cv_qualifiers+0x140>
 800214e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002152:	3309      	adds	r3, #9
 8002154:	6323      	str	r3, [r4, #48]	; 0x30
 8002156:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800215a:	4620      	mov	r0, r4
 800215c:	f7fe feae 	bl	8000ebc <d_expression_1>
 8002160:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002164:	4603      	mov	r3, r0
 8002166:	2800      	cmp	r0, #0
 8002168:	d0d8      	beq.n	800211c <d_cv_qualifiers+0xa8>
 800216a:	68e2      	ldr	r2, [r4, #12]
 800216c:	7811      	ldrb	r1, [r2, #0]
 800216e:	2945      	cmp	r1, #69	; 0x45
 8002170:	d1d4      	bne.n	800211c <d_cv_qualifiers+0xa8>
 8002172:	3201      	adds	r2, #1
 8002174:	60e2      	str	r2, [r4, #12]
 8002176:	214e      	movs	r1, #78	; 0x4e
 8002178:	e7a6      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800217a:	9a01      	ldr	r2, [sp, #4]
 800217c:	2a00      	cmp	r2, #0
 800217e:	d1ce      	bne.n	800211e <d_cv_qualifiers+0xaa>
 8002180:	2b46      	cmp	r3, #70	; 0x46
 8002182:	d1cc      	bne.n	800211e <d_cv_qualifiers+0xaa>
 8002184:	454d      	cmp	r5, r9
 8002186:	d0ca      	beq.n	800211e <d_cv_qualifiers+0xaa>
 8002188:	241d      	movs	r4, #29
 800218a:	201e      	movs	r0, #30
 800218c:	211c      	movs	r1, #28
 800218e:	e008      	b.n	80021a2 <d_cv_qualifiers+0x12e>
 8002190:	2a1b      	cmp	r2, #27
 8002192:	d00d      	beq.n	80021b0 <d_cv_qualifiers+0x13c>
 8002194:	2a19      	cmp	r2, #25
 8002196:	d100      	bne.n	800219a <d_cv_qualifiers+0x126>
 8002198:	7019      	strb	r1, [r3, #0]
 800219a:	f103 0908 	add.w	r9, r3, #8
 800219e:	454d      	cmp	r5, r9
 80021a0:	d0bd      	beq.n	800211e <d_cv_qualifiers+0xaa>
 80021a2:	f8d9 3000 	ldr.w	r3, [r9]
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	2a1a      	cmp	r2, #26
 80021aa:	d1f1      	bne.n	8002190 <d_cv_qualifiers+0x11c>
 80021ac:	701c      	strb	r4, [r3, #0]
 80021ae:	e7f4      	b.n	800219a <d_cv_qualifiers+0x126>
 80021b0:	7018      	strb	r0, [r3, #0]
 80021b2:	e7f2      	b.n	800219a <d_cv_qualifiers+0x126>
 80021b4:	2b77      	cmp	r3, #119	; 0x77
 80021b6:	d1b1      	bne.n	800211c <d_cv_qualifiers+0xa8>
 80021b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ba:	3306      	adds	r3, #6
 80021bc:	6323      	str	r3, [r4, #48]	; 0x30
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff ff16 	bl	8001ff0 <d_parmlist>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d0a8      	beq.n	800211c <d_cv_qualifiers+0xa8>
 80021ca:	68e2      	ldr	r2, [r4, #12]
 80021cc:	7811      	ldrb	r1, [r2, #0]
 80021ce:	2945      	cmp	r1, #69	; 0x45
 80021d0:	d1a4      	bne.n	800211c <d_cv_qualifiers+0xa8>
 80021d2:	3201      	adds	r2, #1
 80021d4:	60e2      	str	r2, [r4, #12]
 80021d6:	214f      	movs	r1, #79	; 0x4f
 80021d8:	e776      	b.n	80020c8 <d_cv_qualifiers+0x54>
 80021da:	bf00      	nop

080021dc <d_bare_function_type>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	68c3      	ldr	r3, [r0, #12]
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	2a4a      	cmp	r2, #74	; 0x4a
 80021e4:	4604      	mov	r4, r0
 80021e6:	d013      	beq.n	8002210 <d_bare_function_type+0x34>
 80021e8:	b181      	cbz	r1, 800220c <d_bare_function_type+0x30>
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff fa90 	bl	8001710 <d_type>
 80021f0:	4605      	mov	r5, r0
 80021f2:	b180      	cbz	r0, 8002216 <d_bare_function_type+0x3a>
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff fefb 	bl	8001ff0 <d_parmlist>
 80021fa:	b160      	cbz	r0, 8002216 <d_bare_function_type+0x3a>
 80021fc:	4603      	mov	r3, r0
 80021fe:	462a      	mov	r2, r5
 8002200:	4620      	mov	r0, r4
 8002202:	2129      	movs	r1, #41	; 0x29
 8002204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002208:	f7fe b802 	b.w	8000210 <d_make_comp>
 800220c:	460d      	mov	r5, r1
 800220e:	e7f1      	b.n	80021f4 <d_bare_function_type+0x18>
 8002210:	3301      	adds	r3, #1
 8002212:	60c3      	str	r3, [r0, #12]
 8002214:	e7e9      	b.n	80021ea <d_bare_function_type+0xe>
 8002216:	2000      	movs	r0, #0
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	bf00      	nop

0800221c <d_function_type>:
 800221c:	68c3      	ldr	r3, [r0, #12]
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	2a46      	cmp	r2, #70	; 0x46
 8002222:	d118      	bne.n	8002256 <d_function_type+0x3a>
 8002224:	b510      	push	{r4, lr}
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60c2      	str	r2, [r0, #12]
 800222a:	785a      	ldrb	r2, [r3, #1]
 800222c:	2a59      	cmp	r2, #89	; 0x59
 800222e:	bf04      	itt	eq
 8002230:	3302      	addeq	r3, #2
 8002232:	60c3      	streq	r3, [r0, #12]
 8002234:	2101      	movs	r1, #1
 8002236:	4604      	mov	r4, r0
 8002238:	f7ff ffd0 	bl	80021dc <d_bare_function_type>
 800223c:	4601      	mov	r1, r0
 800223e:	4620      	mov	r0, r4
 8002240:	f7fe f82e 	bl	80002a0 <d_ref_qualifier>
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	2a45      	cmp	r2, #69	; 0x45
 800224a:	d102      	bne.n	8002252 <d_function_type+0x36>
 800224c:	3301      	adds	r3, #1
 800224e:	60e3      	str	r3, [r4, #12]
 8002250:	bd10      	pop	{r4, pc}
 8002252:	2000      	movs	r0, #0
 8002254:	bd10      	pop	{r4, pc}
 8002256:	2000      	movs	r0, #0
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <d_unqualified_name>:
 800225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002260:	68c1      	ldr	r1, [r0, #12]
 8002262:	780b      	ldrb	r3, [r1, #0]
 8002264:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002268:	2a09      	cmp	r2, #9
 800226a:	4604      	mov	r4, r0
 800226c:	d93c      	bls.n	80022e8 <d_unqualified_name+0x8c>
 800226e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002272:	2a19      	cmp	r2, #25
 8002274:	d922      	bls.n	80022bc <d_unqualified_name+0x60>
 8002276:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800227a:	2a01      	cmp	r2, #1
 800227c:	d969      	bls.n	8002352 <d_unqualified_name+0xf6>
 800227e:	2b4c      	cmp	r3, #76	; 0x4c
 8002280:	d056      	beq.n	8002330 <d_unqualified_name+0xd4>
 8002282:	2b55      	cmp	r3, #85	; 0x55
 8002284:	d15f      	bne.n	8002346 <d_unqualified_name+0xea>
 8002286:	784b      	ldrb	r3, [r1, #1]
 8002288:	2b6c      	cmp	r3, #108	; 0x6c
 800228a:	f000 80e5 	beq.w	8002458 <d_unqualified_name+0x1fc>
 800228e:	2b74      	cmp	r3, #116	; 0x74
 8002290:	d159      	bne.n	8002346 <d_unqualified_name+0xea>
 8002292:	1c4b      	adds	r3, r1, #1
 8002294:	60c3      	str	r3, [r0, #12]
 8002296:	784b      	ldrb	r3, [r1, #1]
 8002298:	2b74      	cmp	r3, #116	; 0x74
 800229a:	d158      	bne.n	800234e <d_unqualified_name+0xf2>
 800229c:	3102      	adds	r1, #2
 800229e:	60c1      	str	r1, [r0, #12]
 80022a0:	f7fe f8f4 	bl	800048c <d_compact_number>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f2c0 8155 	blt.w	8002554 <d_unqualified_name+0x2f8>
 80022aa:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	68e7      	ldr	r7, [r4, #12]
 80022b2:	f2c0 80f3 	blt.w	800249c <d_unqualified_name+0x240>
 80022b6:	783b      	ldrb	r3, [r7, #0]
 80022b8:	2500      	movs	r5, #0
 80022ba:	e010      	b.n	80022de <d_unqualified_name+0x82>
 80022bc:	2b6f      	cmp	r3, #111	; 0x6f
 80022be:	d104      	bne.n	80022ca <d_unqualified_name+0x6e>
 80022c0:	784b      	ldrb	r3, [r1, #1]
 80022c2:	2b6e      	cmp	r3, #110	; 0x6e
 80022c4:	bf04      	itt	eq
 80022c6:	3102      	addeq	r1, #2
 80022c8:	60c1      	streq	r1, [r0, #12]
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff fe1a 	bl	8001f04 <d_operator_name>
 80022d0:	4605      	mov	r5, r0
 80022d2:	b110      	cbz	r0, 80022da <d_unqualified_name+0x7e>
 80022d4:	7803      	ldrb	r3, [r0, #0]
 80022d6:	2b31      	cmp	r3, #49	; 0x31
 80022d8:	d013      	beq.n	8002302 <d_unqualified_name+0xa6>
 80022da:	68e3      	ldr	r3, [r4, #12]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b42      	cmp	r3, #66	; 0x42
 80022e0:	d009      	beq.n	80022f6 <d_unqualified_name+0x9a>
 80022e2:	4628      	mov	r0, r5
 80022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e8:	f7fe f90c 	bl	8000504 <d_source_name>
 80022ec:	68e3      	ldr	r3, [r4, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b42      	cmp	r3, #66	; 0x42
 80022f2:	4605      	mov	r5, r0
 80022f4:	d1f5      	bne.n	80022e2 <d_unqualified_name+0x86>
 80022f6:	4629      	mov	r1, r5
 80022f8:	4620      	mov	r0, r4
 80022fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022fe:	f7fe b95b 	b.w	80005b8 <d_abi_tags>
 8002302:	6882      	ldr	r2, [r0, #8]
 8002304:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002306:	6896      	ldr	r6, [r2, #8]
 8002308:	6810      	ldr	r0, [r2, #0]
 800230a:	49a1      	ldr	r1, [pc, #644]	; (8002590 <d_unqualified_name+0x334>)
 800230c:	3307      	adds	r3, #7
 800230e:	4433      	add	r3, r6
 8002310:	6323      	str	r3, [r4, #48]	; 0x30
 8002312:	f004 fd3d 	bl	8006d90 <strcmp>
 8002316:	2800      	cmp	r0, #0
 8002318:	d1df      	bne.n	80022da <d_unqualified_name+0x7e>
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe f8f2 	bl	8000504 <d_source_name>
 8002320:	462a      	mov	r2, r5
 8002322:	4603      	mov	r3, r0
 8002324:	2136      	movs	r1, #54	; 0x36
 8002326:	4620      	mov	r0, r4
 8002328:	f7fd ff72 	bl	8000210 <d_make_comp>
 800232c:	4605      	mov	r5, r0
 800232e:	e7d4      	b.n	80022da <d_unqualified_name+0x7e>
 8002330:	3101      	adds	r1, #1
 8002332:	60c1      	str	r1, [r0, #12]
 8002334:	f7fe f8e6 	bl	8000504 <d_source_name>
 8002338:	4605      	mov	r5, r0
 800233a:	b120      	cbz	r0, 8002346 <d_unqualified_name+0xea>
 800233c:	4620      	mov	r0, r4
 800233e:	f7fe fa0f 	bl	8000760 <d_discriminator>
 8002342:	2800      	cmp	r0, #0
 8002344:	d1c9      	bne.n	80022da <d_unqualified_name+0x7e>
 8002346:	2500      	movs	r5, #0
 8002348:	4628      	mov	r0, r5
 800234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800234e:	2500      	movs	r5, #0
 8002350:	e7c5      	b.n	80022de <d_unqualified_name+0x82>
 8002352:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002354:	b132      	cbz	r2, 8002364 <d_unqualified_name+0x108>
 8002356:	7810      	ldrb	r0, [r2, #0]
 8002358:	b9e0      	cbnz	r0, 8002394 <d_unqualified_name+0x138>
 800235a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800235c:	68d0      	ldr	r0, [r2, #12]
 800235e:	4403      	add	r3, r0
 8002360:	6323      	str	r3, [r4, #48]	; 0x30
 8002362:	780b      	ldrb	r3, [r1, #0]
 8002364:	2b43      	cmp	r3, #67	; 0x43
 8002366:	d018      	beq.n	800239a <d_unqualified_name+0x13e>
 8002368:	2b44      	cmp	r3, #68	; 0x44
 800236a:	d1f0      	bne.n	800234e <d_unqualified_name+0xf2>
 800236c:	784b      	ldrb	r3, [r1, #1]
 800236e:	3b30      	subs	r3, #48	; 0x30
 8002370:	2b05      	cmp	r3, #5
 8002372:	d8e8      	bhi.n	8002346 <d_unqualified_name+0xea>
 8002374:	a001      	add	r0, pc, #4	; (adr r0, 800237c <d_unqualified_name+0x120>)
 8002376:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023ed 	.word	0x080023ed
 8002380:	080023b7 	.word	0x080023b7
 8002384:	080023ff 	.word	0x080023ff
 8002388:	08002347 	.word	0x08002347
 800238c:	080023f9 	.word	0x080023f9
 8002390:	080023f3 	.word	0x080023f3
 8002394:	2818      	cmp	r0, #24
 8002396:	d1e5      	bne.n	8002364 <d_unqualified_name+0x108>
 8002398:	e7df      	b.n	800235a <d_unqualified_name+0xfe>
 800239a:	784b      	ldrb	r3, [r1, #1]
 800239c:	2b49      	cmp	r3, #73	; 0x49
 800239e:	f000 80b0 	beq.w	8002502 <d_unqualified_name+0x2a6>
 80023a2:	3b31      	subs	r3, #49	; 0x31
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d8ce      	bhi.n	8002346 <d_unqualified_name+0xea>
 80023a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023ac:	005100ed 	.word	0x005100ed
 80023b0:	0047004c 	.word	0x0047004c
 80023b4:	002c      	.short	0x002c
 80023b6:	f04f 0c02 	mov.w	ip, #2
 80023ba:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023be:	1c8d      	adds	r5, r1, #2
 80023c0:	4283      	cmp	r3, r0
 80023c2:	60e5      	str	r5, [r4, #12]
 80023c4:	f280 80d0 	bge.w	8002568 <d_unqualified_name+0x30c>
 80023c8:	6926      	ldr	r6, [r4, #16]
 80023ca:	0118      	lsls	r0, r3, #4
 80023cc:	1835      	adds	r5, r6, r0
 80023ce:	3301      	adds	r3, #1
 80023d0:	2700      	movs	r7, #0
 80023d2:	606f      	str	r7, [r5, #4]
 80023d4:	6163      	str	r3, [r4, #20]
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	f000 80cf 	beq.w	800257a <d_unqualified_name+0x31e>
 80023dc:	2308      	movs	r3, #8
 80023de:	606f      	str	r7, [r5, #4]
 80023e0:	5433      	strb	r3, [r6, r0]
 80023e2:	f885 c008 	strb.w	ip, [r5, #8]
 80023e6:	60ea      	str	r2, [r5, #12]
 80023e8:	788b      	ldrb	r3, [r1, #2]
 80023ea:	e778      	b.n	80022de <d_unqualified_name+0x82>
 80023ec:	f04f 0c01 	mov.w	ip, #1
 80023f0:	e7e3      	b.n	80023ba <d_unqualified_name+0x15e>
 80023f2:	f04f 0c05 	mov.w	ip, #5
 80023f6:	e7e0      	b.n	80023ba <d_unqualified_name+0x15e>
 80023f8:	f04f 0c04 	mov.w	ip, #4
 80023fc:	e7dd      	b.n	80023ba <d_unqualified_name+0x15e>
 80023fe:	f04f 0c03 	mov.w	ip, #3
 8002402:	e7da      	b.n	80023ba <d_unqualified_name+0x15e>
 8002404:	3102      	adds	r1, #2
 8002406:	60e1      	str	r1, [r4, #12]
 8002408:	f04f 0805 	mov.w	r8, #5
 800240c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002410:	4283      	cmp	r3, r0
 8002412:	f280 80ac 	bge.w	800256e <d_unqualified_name+0x312>
 8002416:	6926      	ldr	r6, [r4, #16]
 8002418:	0118      	lsls	r0, r3, #4
 800241a:	1835      	adds	r5, r6, r0
 800241c:	3301      	adds	r3, #1
 800241e:	2700      	movs	r7, #0
 8002420:	606f      	str	r7, [r5, #4]
 8002422:	6163      	str	r3, [r4, #20]
 8002424:	2a00      	cmp	r2, #0
 8002426:	f000 80ab 	beq.w	8002580 <d_unqualified_name+0x324>
 800242a:	2307      	movs	r3, #7
 800242c:	606f      	str	r7, [r5, #4]
 800242e:	5433      	strb	r3, [r6, r0]
 8002430:	f885 8008 	strb.w	r8, [r5, #8]
 8002434:	60ea      	str	r2, [r5, #12]
 8002436:	780b      	ldrb	r3, [r1, #0]
 8002438:	e751      	b.n	80022de <d_unqualified_name+0x82>
 800243a:	3102      	adds	r1, #2
 800243c:	60e1      	str	r1, [r4, #12]
 800243e:	f04f 0804 	mov.w	r8, #4
 8002442:	e7e3      	b.n	800240c <d_unqualified_name+0x1b0>
 8002444:	3102      	adds	r1, #2
 8002446:	60e1      	str	r1, [r4, #12]
 8002448:	f04f 0803 	mov.w	r8, #3
 800244c:	e7de      	b.n	800240c <d_unqualified_name+0x1b0>
 800244e:	3102      	adds	r1, #2
 8002450:	60e1      	str	r1, [r4, #12]
 8002452:	f04f 0802 	mov.w	r8, #2
 8002456:	e7d9      	b.n	800240c <d_unqualified_name+0x1b0>
 8002458:	1c4b      	adds	r3, r1, #1
 800245a:	60c3      	str	r3, [r0, #12]
 800245c:	784b      	ldrb	r3, [r1, #1]
 800245e:	2b6c      	cmp	r3, #108	; 0x6c
 8002460:	f47f af75 	bne.w	800234e <d_unqualified_name+0xf2>
 8002464:	3102      	adds	r1, #2
 8002466:	60c1      	str	r1, [r0, #12]
 8002468:	f7ff fdc2 	bl	8001ff0 <d_parmlist>
 800246c:	4606      	mov	r6, r0
 800246e:	2800      	cmp	r0, #0
 8002470:	d070      	beq.n	8002554 <d_unqualified_name+0x2f8>
 8002472:	68e2      	ldr	r2, [r4, #12]
 8002474:	7813      	ldrb	r3, [r2, #0]
 8002476:	2b45      	cmp	r3, #69	; 0x45
 8002478:	f47f af69 	bne.w	800234e <d_unqualified_name+0xf2>
 800247c:	3201      	adds	r2, #1
 800247e:	60e2      	str	r2, [r4, #12]
 8002480:	4620      	mov	r0, r4
 8002482:	f7fe f803 	bl	800048c <d_compact_number>
 8002486:	f1b0 0e00 	subs.w	lr, r0, #0
 800248a:	db63      	blt.n	8002554 <d_unqualified_name+0x2f8>
 800248c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002490:	4293      	cmp	r3, r2
 8002492:	68e0      	ldr	r0, [r4, #12]
 8002494:	db1b      	blt.n	80024ce <d_unqualified_name+0x272>
 8002496:	7803      	ldrb	r3, [r0, #0]
 8002498:	2500      	movs	r5, #0
 800249a:	e720      	b.n	80022de <d_unqualified_name+0x82>
 800249c:	6926      	ldr	r6, [r4, #16]
 800249e:	6a22      	ldr	r2, [r4, #32]
 80024a0:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 80024a4:	0119      	lsls	r1, r3, #4
 80024a6:	1875      	adds	r5, r6, r1
 80024a8:	3301      	adds	r3, #1
 80024aa:	f04f 0c00 	mov.w	ip, #0
 80024ae:	f8c5 c004 	str.w	ip, [r5, #4]
 80024b2:	4572      	cmp	r2, lr
 80024b4:	6163      	str	r3, [r4, #20]
 80024b6:	f04f 0347 	mov.w	r3, #71	; 0x47
 80024ba:	5473      	strb	r3, [r6, r1]
 80024bc:	60a8      	str	r0, [r5, #8]
 80024be:	da4d      	bge.n	800255c <d_unqualified_name+0x300>
 80024c0:	69e3      	ldr	r3, [r4, #28]
 80024c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024c6:	3201      	adds	r2, #1
 80024c8:	6222      	str	r2, [r4, #32]
 80024ca:	783b      	ldrb	r3, [r7, #0]
 80024cc:	e707      	b.n	80022de <d_unqualified_name+0x82>
 80024ce:	6927      	ldr	r7, [r4, #16]
 80024d0:	6a22      	ldr	r2, [r4, #32]
 80024d2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80024d6:	0119      	lsls	r1, r3, #4
 80024d8:	187d      	adds	r5, r7, r1
 80024da:	3301      	adds	r3, #1
 80024dc:	f04f 0c00 	mov.w	ip, #0
 80024e0:	f8c5 c004 	str.w	ip, [r5, #4]
 80024e4:	4542      	cmp	r2, r8
 80024e6:	6163      	str	r3, [r4, #20]
 80024e8:	f04f 0345 	mov.w	r3, #69	; 0x45
 80024ec:	547b      	strb	r3, [r7, r1]
 80024ee:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 80024f2:	da36      	bge.n	8002562 <d_unqualified_name+0x306>
 80024f4:	69e3      	ldr	r3, [r4, #28]
 80024f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024fa:	3201      	adds	r2, #1
 80024fc:	6222      	str	r2, [r4, #32]
 80024fe:	7803      	ldrb	r3, [r0, #0]
 8002500:	e6ed      	b.n	80022de <d_unqualified_name+0x82>
 8002502:	1c4b      	adds	r3, r1, #1
 8002504:	60e3      	str	r3, [r4, #12]
 8002506:	788b      	ldrb	r3, [r1, #2]
 8002508:	3b31      	subs	r3, #49	; 0x31
 800250a:	2b04      	cmp	r3, #4
 800250c:	d832      	bhi.n	8002574 <d_unqualified_name+0x318>
 800250e:	e8df f003 	tbb	[pc, r3]
 8002512:	1c03      	.short	0x1c03
 8002514:	1217      	.short	0x1217
 8002516:	0d          	.byte	0x0d
 8002517:	00          	.byte	0x00
 8002518:	3103      	adds	r1, #3
 800251a:	60e1      	str	r1, [r4, #12]
 800251c:	f04f 0801 	mov.w	r8, #1
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff f8f5 	bl	8001710 <d_type>
 8002526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002528:	68e1      	ldr	r1, [r4, #12]
 800252a:	e76f      	b.n	800240c <d_unqualified_name+0x1b0>
 800252c:	3103      	adds	r1, #3
 800252e:	60e1      	str	r1, [r4, #12]
 8002530:	f04f 0805 	mov.w	r8, #5
 8002534:	e7f4      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002536:	3103      	adds	r1, #3
 8002538:	60e1      	str	r1, [r4, #12]
 800253a:	f04f 0804 	mov.w	r8, #4
 800253e:	e7ef      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002540:	3103      	adds	r1, #3
 8002542:	60e1      	str	r1, [r4, #12]
 8002544:	f04f 0803 	mov.w	r8, #3
 8002548:	e7ea      	b.n	8002520 <d_unqualified_name+0x2c4>
 800254a:	3103      	adds	r1, #3
 800254c:	60e1      	str	r1, [r4, #12]
 800254e:	f04f 0802 	mov.w	r8, #2
 8002552:	e7e5      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002554:	68e3      	ldr	r3, [r4, #12]
 8002556:	2500      	movs	r5, #0
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	e6c0      	b.n	80022de <d_unqualified_name+0x82>
 800255c:	783b      	ldrb	r3, [r7, #0]
 800255e:	4665      	mov	r5, ip
 8002560:	e6bd      	b.n	80022de <d_unqualified_name+0x82>
 8002562:	7803      	ldrb	r3, [r0, #0]
 8002564:	4665      	mov	r5, ip
 8002566:	e6ba      	b.n	80022de <d_unqualified_name+0x82>
 8002568:	788b      	ldrb	r3, [r1, #2]
 800256a:	2500      	movs	r5, #0
 800256c:	e6b7      	b.n	80022de <d_unqualified_name+0x82>
 800256e:	780b      	ldrb	r3, [r1, #0]
 8002570:	2500      	movs	r5, #0
 8002572:	e6b4      	b.n	80022de <d_unqualified_name+0x82>
 8002574:	784b      	ldrb	r3, [r1, #1]
 8002576:	2500      	movs	r5, #0
 8002578:	e6b1      	b.n	80022de <d_unqualified_name+0x82>
 800257a:	788b      	ldrb	r3, [r1, #2]
 800257c:	4615      	mov	r5, r2
 800257e:	e6ae      	b.n	80022de <d_unqualified_name+0x82>
 8002580:	780b      	ldrb	r3, [r1, #0]
 8002582:	4615      	mov	r5, r2
 8002584:	e6ab      	b.n	80022de <d_unqualified_name+0x82>
 8002586:	3102      	adds	r1, #2
 8002588:	60e1      	str	r1, [r4, #12]
 800258a:	f04f 0801 	mov.w	r8, #1
 800258e:	e73d      	b.n	800240c <d_unqualified_name+0x1b0>
 8002590:	0809401c 	.word	0x0809401c

08002594 <d_encoding>:
 8002594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002598:	68c3      	ldr	r3, [r0, #12]
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	2a47      	cmp	r2, #71	; 0x47
 800259e:	4604      	mov	r4, r0
 80025a0:	d019      	beq.n	80025d6 <d_encoding+0x42>
 80025a2:	2a54      	cmp	r2, #84	; 0x54
 80025a4:	d017      	beq.n	80025d6 <d_encoding+0x42>
 80025a6:	460e      	mov	r6, r1
 80025a8:	f7fe ff06 	bl	80013b8 <d_name>
 80025ac:	4605      	mov	r5, r0
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d07d      	beq.n	80026ae <d_encoding+0x11a>
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	d057      	beq.n	8002666 <d_encoding+0xd2>
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	07db      	lsls	r3, r3, #31
 80025ba:	d454      	bmi.n	8002666 <d_encoding+0xd2>
 80025bc:	e000      	b.n	80025c0 <d_encoding+0x2c>
 80025be:	68ad      	ldr	r5, [r5, #8]
 80025c0:	782b      	ldrb	r3, [r5, #0]
 80025c2:	f1a3 021c 	sub.w	r2, r3, #28
 80025c6:	2a04      	cmp	r2, #4
 80025c8:	d9f9      	bls.n	80025be <d_encoding+0x2a>
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	f000 8186 	beq.w	80028dc <d_encoding+0x348>
 80025d0:	4628      	mov	r0, r5
 80025d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025d8:	f101 0214 	add.w	r2, r1, #20
 80025dc:	6322      	str	r2, [r4, #48]	; 0x30
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	2a54      	cmp	r2, #84	; 0x54
 80025e2:	d068      	beq.n	80026b6 <d_encoding+0x122>
 80025e4:	2a47      	cmp	r2, #71	; 0x47
 80025e6:	d162      	bne.n	80026ae <d_encoding+0x11a>
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	60e2      	str	r2, [r4, #12]
 80025ec:	785a      	ldrb	r2, [r3, #1]
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d05d      	beq.n	80026ae <d_encoding+0x11a>
 80025f2:	1c9a      	adds	r2, r3, #2
 80025f4:	60e2      	str	r2, [r4, #12]
 80025f6:	785a      	ldrb	r2, [r3, #1]
 80025f8:	3a41      	subs	r2, #65	; 0x41
 80025fa:	2a31      	cmp	r2, #49	; 0x31
 80025fc:	d857      	bhi.n	80026ae <d_encoding+0x11a>
 80025fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002602:	013e      	.short	0x013e
 8002604:	00560056 	.word	0x00560056
 8002608:	00560056 	.word	0x00560056
 800260c:	00560056 	.word	0x00560056
 8002610:	00560056 	.word	0x00560056
 8002614:	00560056 	.word	0x00560056
 8002618:	00560056 	.word	0x00560056
 800261c:	00560056 	.word	0x00560056
 8002620:	00560056 	.word	0x00560056
 8002624:	0056014a 	.word	0x0056014a
 8002628:	00560159 	.word	0x00560159
 800262c:	005600e0 	.word	0x005600e0
 8002630:	00560056 	.word	0x00560056
 8002634:	00560056 	.word	0x00560056
 8002638:	00560056 	.word	0x00560056
 800263c:	00560056 	.word	0x00560056
 8002640:	00560056 	.word	0x00560056
 8002644:	00560056 	.word	0x00560056
 8002648:	00560056 	.word	0x00560056
 800264c:	00560056 	.word	0x00560056
 8002650:	00560056 	.word	0x00560056
 8002654:	00560056 	.word	0x00560056
 8002658:	00560056 	.word	0x00560056
 800265c:	00560056 	.word	0x00560056
 8002660:	00560056 	.word	0x00560056
 8002664:	00eb      	.short	0x00eb
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0b0      	beq.n	80025d0 <d_encoding+0x3c>
 800266e:	2b45      	cmp	r3, #69	; 0x45
 8002670:	d0ae      	beq.n	80025d0 <d_encoding+0x3c>
 8002672:	4629      	mov	r1, r5
 8002674:	780b      	ldrb	r3, [r1, #0]
 8002676:	2b20      	cmp	r3, #32
 8002678:	f200 8218 	bhi.w	8002aac <d_encoding+0x518>
 800267c:	2b1c      	cmp	r3, #28
 800267e:	f080 821e 	bcs.w	8002abe <d_encoding+0x52a>
 8002682:	2b04      	cmp	r3, #4
 8002684:	f040 8091 	bne.w	80027aa <d_encoding+0x216>
 8002688:	688a      	ldr	r2, [r1, #8]
 800268a:	b16a      	cbz	r2, 80026a8 <d_encoding+0x114>
 800268c:	7813      	ldrb	r3, [r2, #0]
 800268e:	2b08      	cmp	r3, #8
 8002690:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8002694:	f200 8086 	bhi.w	80027a4 <d_encoding+0x210>
 8002698:	2b07      	cmp	r3, #7
 800269a:	f080 8086 	bcs.w	80027aa <d_encoding+0x216>
 800269e:	2901      	cmp	r1, #1
 80026a0:	d802      	bhi.n	80026a8 <d_encoding+0x114>
 80026a2:	68d2      	ldr	r2, [r2, #12]
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d1f1      	bne.n	800268c <d_encoding+0xf8>
 80026a8:	2101      	movs	r1, #1
 80026aa:	e07f      	b.n	80027ac <d_encoding+0x218>
 80026ac:	60e7      	str	r7, [r4, #12]
 80026ae:	2500      	movs	r5, #0
 80026b0:	4628      	mov	r0, r5
 80026b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60e2      	str	r2, [r4, #12]
 80026ba:	785a      	ldrb	r2, [r3, #1]
 80026bc:	2a00      	cmp	r2, #0
 80026be:	d0f6      	beq.n	80026ae <d_encoding+0x11a>
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	60e2      	str	r2, [r4, #12]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	3b43      	subs	r3, #67	; 0x43
 80026c8:	2b33      	cmp	r3, #51	; 0x33
 80026ca:	d8f0      	bhi.n	80026ae <d_encoding+0x11a>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <d_encoding+0x140>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	08002a29 	.word	0x08002a29
 80026d8:	080026af 	.word	0x080026af
 80026dc:	080026af 	.word	0x080026af
 80026e0:	08002a13 	.word	0x08002a13
 80026e4:	080026af 	.word	0x080026af
 80026e8:	080029fd 	.word	0x080029fd
 80026ec:	080029e7 	.word	0x080029e7
 80026f0:	080029d1 	.word	0x080029d1
 80026f4:	080026af 	.word	0x080026af
 80026f8:	080026af 	.word	0x080026af
 80026fc:	080026af 	.word	0x080026af
 8002700:	080026af 	.word	0x080026af
 8002704:	080026af 	.word	0x080026af
 8002708:	080026af 	.word	0x080026af
 800270c:	080026af 	.word	0x080026af
 8002710:	080026af 	.word	0x080026af
 8002714:	080029bb 	.word	0x080029bb
 8002718:	080029a1 	.word	0x080029a1
 800271c:	080026af 	.word	0x080026af
 8002720:	08002987 	.word	0x08002987
 8002724:	08002971 	.word	0x08002971
 8002728:	080026af 	.word	0x080026af
 800272c:	080026af 	.word	0x080026af
 8002730:	080026af 	.word	0x080026af
 8002734:	080026af 	.word	0x080026af
 8002738:	080026af 	.word	0x080026af
 800273c:	080026af 	.word	0x080026af
 8002740:	080026af 	.word	0x080026af
 8002744:	080026af 	.word	0x080026af
 8002748:	080026af 	.word	0x080026af
 800274c:	080026af 	.word	0x080026af
 8002750:	080026af 	.word	0x080026af
 8002754:	0800293d 	.word	0x0800293d
 8002758:	080026af 	.word	0x080026af
 800275c:	080026af 	.word	0x080026af
 8002760:	080026af 	.word	0x080026af
 8002764:	080026af 	.word	0x080026af
 8002768:	08002917 	.word	0x08002917
 800276c:	080026af 	.word	0x080026af
 8002770:	080026af 	.word	0x080026af
 8002774:	080026af 	.word	0x080026af
 8002778:	080026af 	.word	0x080026af
 800277c:	080026af 	.word	0x080026af
 8002780:	080026af 	.word	0x080026af
 8002784:	080026af 	.word	0x080026af
 8002788:	080026af 	.word	0x080026af
 800278c:	080026af 	.word	0x080026af
 8002790:	080026af 	.word	0x080026af
 8002794:	080026af 	.word	0x080026af
 8002798:	080026af 	.word	0x080026af
 800279c:	080026af 	.word	0x080026af
 80027a0:	080028f1 	.word	0x080028f1
 80027a4:	2b34      	cmp	r3, #52	; 0x34
 80027a6:	f47f af7f 	bne.w	80026a8 <d_encoding+0x114>
 80027aa:	2100      	movs	r1, #0
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff fd15 	bl	80021dc <d_bare_function_type>
 80027b2:	462a      	mov	r2, r5
 80027b4:	4603      	mov	r3, r0
 80027b6:	2103      	movs	r1, #3
 80027b8:	4620      	mov	r0, r4
 80027ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027be:	f7fd bd27 	b.w	8000210 <d_make_comp>
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7fe fdf8 	bl	80013b8 <d_name>
 80027c8:	2300      	movs	r3, #0
 80027ca:	4602      	mov	r2, r0
 80027cc:	2113      	movs	r1, #19
 80027ce:	4620      	mov	r0, r4
 80027d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d4:	f7fd bd1c 	b.w	8000210 <d_make_comp>
 80027d8:	f104 000c 	add.w	r0, r4, #12
 80027dc:	f7fd fe12 	bl	8000404 <d_number.isra.1>
 80027e0:	2801      	cmp	r0, #1
 80027e2:	f77f af64 	ble.w	80026ae <d_encoding+0x11a>
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	2a00      	cmp	r2, #0
 80027ec:	f43f af5f 	beq.w	80026ae <d_encoding+0x11a>
 80027f0:	1c5f      	adds	r7, r3, #1
 80027f2:	60e7      	str	r7, [r4, #12]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b5f      	cmp	r3, #95	; 0x5f
 80027f8:	f47f af59 	bne.w	80026ae <d_encoding+0x11a>
 80027fc:	2200      	movs	r2, #0
 80027fe:	1e45      	subs	r5, r0, #1
 8002800:	4690      	mov	r8, r2
 8002802:	f04f 0940 	mov.w	r9, #64	; 0x40
 8002806:	783b      	ldrb	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f43f af50 	beq.w	80026ae <d_encoding+0x11a>
 800280e:	2b24      	cmp	r3, #36	; 0x24
 8002810:	f040 812a 	bne.w	8002a68 <d_encoding+0x4d4>
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b53      	cmp	r3, #83	; 0x53
 8002818:	f000 8156 	beq.w	8002ac8 <d_encoding+0x534>
 800281c:	2b5f      	cmp	r3, #95	; 0x5f
 800281e:	f000 8155 	beq.w	8002acc <d_encoding+0x538>
 8002822:	2b24      	cmp	r3, #36	; 0x24
 8002824:	f47f af43 	bne.w	80026ae <d_encoding+0x11a>
 8002828:	4619      	mov	r1, r3
 800282a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800282e:	68e7      	ldr	r7, [r4, #12]
 8002830:	4298      	cmp	r0, r3
 8002832:	f107 0702 	add.w	r7, r7, #2
 8002836:	f6bf af39 	bge.w	80026ac <d_encoding+0x118>
 800283a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800283e:	0106      	lsls	r6, r0, #4
 8002840:	eb0c 0306 	add.w	r3, ip, r6
 8002844:	3001      	adds	r0, #1
 8002846:	f8c3 8004 	str.w	r8, [r3, #4]
 800284a:	3d02      	subs	r5, #2
 800284c:	6160      	str	r0, [r4, #20]
 800284e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002852:	6099      	str	r1, [r3, #8]
 8002854:	60e7      	str	r7, [r4, #12]
 8002856:	2a00      	cmp	r2, #0
 8002858:	f000 8126 	beq.w	8002aa8 <d_encoding+0x514>
 800285c:	213f      	movs	r1, #63	; 0x3f
 800285e:	4620      	mov	r0, r4
 8002860:	f7fd fcd6 	bl	8000210 <d_make_comp>
 8002864:	4602      	mov	r2, r0
 8002866:	2800      	cmp	r0, #0
 8002868:	f43f af21 	beq.w	80026ae <d_encoding+0x11a>
 800286c:	2d00      	cmp	r5, #0
 800286e:	dcca      	bgt.n	8002806 <d_encoding+0x272>
 8002870:	4620      	mov	r0, r4
 8002872:	2300      	movs	r3, #0
 8002874:	213e      	movs	r1, #62	; 0x3e
 8002876:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287a:	f7fd bcc9 	b.w	8000210 <d_make_comp>
 800287e:	2100      	movs	r1, #0
 8002880:	4620      	mov	r0, r4
 8002882:	f7ff fe87 	bl	8002594 <d_encoding>
 8002886:	2300      	movs	r3, #0
 8002888:	4602      	mov	r2, r0
 800288a:	2117      	movs	r1, #23
 800288c:	4620      	mov	r0, r4
 800288e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002892:	f7fd bcbd 	b.w	8000210 <d_make_comp>
 8002896:	4620      	mov	r0, r4
 8002898:	f7fe fd8e 	bl	80013b8 <d_name>
 800289c:	4605      	mov	r5, r0
 800289e:	4620      	mov	r0, r4
 80028a0:	f7fd fddc 	bl	800045c <d_number_component>
 80028a4:	462a      	mov	r2, r5
 80028a6:	4603      	mov	r3, r0
 80028a8:	2116      	movs	r1, #22
 80028aa:	4620      	mov	r0, r4
 80028ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	f7fd bcae 	b.w	8000210 <d_make_comp>
 80028b4:	789a      	ldrb	r2, [r3, #2]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4620      	mov	r0, r4
 80028ba:	b12a      	cbz	r2, 80028c8 <d_encoding+0x334>
 80028bc:	1cda      	adds	r2, r3, #3
 80028be:	60e2      	str	r2, [r4, #12]
 80028c0:	789b      	ldrb	r3, [r3, #2]
 80028c2:	2b6e      	cmp	r3, #110	; 0x6e
 80028c4:	f000 8109 	beq.w	8002ada <d_encoding+0x546>
 80028c8:	f7ff fe64 	bl	8002594 <d_encoding>
 80028cc:	2300      	movs	r3, #0
 80028ce:	4602      	mov	r2, r0
 80028d0:	2148      	movs	r1, #72	; 0x48
 80028d2:	4620      	mov	r0, r4
 80028d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d8:	f7fd bc9a 	b.w	8000210 <d_make_comp>
 80028dc:	68ea      	ldr	r2, [r5, #12]
 80028de:	e000      	b.n	80028e2 <d_encoding+0x34e>
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	7810      	ldrb	r0, [r2, #0]
 80028e4:	f7fd fd80 	bl	80003e8 <is_fnqual_component_type>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d1f9      	bne.n	80028e0 <d_encoding+0x34c>
 80028ec:	60ea      	str	r2, [r5, #12]
 80028ee:	e66f      	b.n	80025d0 <d_encoding+0x3c>
 80028f0:	2176      	movs	r1, #118	; 0x76
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7fe f80a 	bl	800090c <d_call_offset>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f43f aed8 	beq.w	80026ae <d_encoding+0x11a>
 80028fe:	2100      	movs	r1, #0
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff fe47 	bl	8002594 <d_encoding>
 8002906:	2300      	movs	r3, #0
 8002908:	4602      	mov	r2, r0
 800290a:	2110      	movs	r1, #16
 800290c:	4620      	mov	r0, r4
 800290e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002912:	f7fd bc7d 	b.w	8000210 <d_make_comp>
 8002916:	2168      	movs	r1, #104	; 0x68
 8002918:	4620      	mov	r0, r4
 800291a:	f7fd fff7 	bl	800090c <d_call_offset>
 800291e:	2800      	cmp	r0, #0
 8002920:	f43f aec5 	beq.w	80026ae <d_encoding+0x11a>
 8002924:	2100      	movs	r1, #0
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fe34 	bl	8002594 <d_encoding>
 800292c:	2300      	movs	r3, #0
 800292e:	4602      	mov	r2, r0
 8002930:	210f      	movs	r1, #15
 8002932:	4620      	mov	r0, r4
 8002934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	f7fd bc6a 	b.w	8000210 <d_make_comp>
 800293c:	2100      	movs	r1, #0
 800293e:	4620      	mov	r0, r4
 8002940:	f7fd ffe4 	bl	800090c <d_call_offset>
 8002944:	2800      	cmp	r0, #0
 8002946:	f43f aeb2 	beq.w	80026ae <d_encoding+0x11a>
 800294a:	2100      	movs	r1, #0
 800294c:	4620      	mov	r0, r4
 800294e:	f7fd ffdd 	bl	800090c <d_call_offset>
 8002952:	2800      	cmp	r0, #0
 8002954:	f43f aeab 	beq.w	80026ae <d_encoding+0x11a>
 8002958:	2100      	movs	r1, #0
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fe1a 	bl	8002594 <d_encoding>
 8002960:	2300      	movs	r3, #0
 8002962:	4602      	mov	r2, r0
 8002964:	2111      	movs	r1, #17
 8002966:	4620      	mov	r0, r4
 8002968:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800296c:	f7fd bc50 	b.w	8000210 <d_make_comp>
 8002970:	4620      	mov	r0, r4
 8002972:	f7fe fd21 	bl	80013b8 <d_name>
 8002976:	2300      	movs	r3, #0
 8002978:	4602      	mov	r2, r0
 800297a:	2115      	movs	r1, #21
 800297c:	4620      	mov	r0, r4
 800297e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002982:	f7fd bc45 	b.w	8000210 <d_make_comp>
 8002986:	310f      	adds	r1, #15
 8002988:	6321      	str	r1, [r4, #48]	; 0x30
 800298a:	4620      	mov	r0, r4
 800298c:	f7fe fec0 	bl	8001710 <d_type>
 8002990:	2300      	movs	r3, #0
 8002992:	4602      	mov	r2, r0
 8002994:	2109      	movs	r1, #9
 8002996:	4620      	mov	r0, r4
 8002998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	f7fd bc38 	b.w	8000210 <d_make_comp>
 80029a0:	310a      	adds	r1, #10
 80029a2:	6321      	str	r1, [r4, #48]	; 0x30
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7fe feb3 	bl	8001710 <d_type>
 80029aa:	2300      	movs	r3, #0
 80029ac:	4602      	mov	r2, r0
 80029ae:	210a      	movs	r1, #10
 80029b0:	4620      	mov	r0, r4
 80029b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b6:	f7fd bc2b 	b.w	8000210 <d_make_comp>
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7fe fea8 	bl	8001710 <d_type>
 80029c0:	2300      	movs	r3, #0
 80029c2:	4602      	mov	r2, r0
 80029c4:	210d      	movs	r1, #13
 80029c6:	4620      	mov	r0, r4
 80029c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	f7fd bc20 	b.w	8000210 <d_make_comp>
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe fe9d 	bl	8001710 <d_type>
 80029d6:	2300      	movs	r3, #0
 80029d8:	4602      	mov	r2, r0
 80029da:	2112      	movs	r1, #18
 80029dc:	4620      	mov	r0, r4
 80029de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e2:	f7fd bc15 	b.w	8000210 <d_make_comp>
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fe fe92 	bl	8001710 <d_type>
 80029ec:	2300      	movs	r3, #0
 80029ee:	4602      	mov	r2, r0
 80029f0:	210c      	movs	r1, #12
 80029f2:	4620      	mov	r0, r4
 80029f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f8:	f7fd bc0a 	b.w	8000210 <d_make_comp>
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fe fcdb 	bl	80013b8 <d_name>
 8002a02:	2300      	movs	r3, #0
 8002a04:	4602      	mov	r2, r0
 8002a06:	2114      	movs	r1, #20
 8002a08:	4620      	mov	r0, r4
 8002a0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0e:	f7fd bbff 	b.w	8000210 <d_make_comp>
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7fe fe7c 	bl	8001710 <d_type>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	210e      	movs	r1, #14
 8002a1e:	4620      	mov	r0, r4
 8002a20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	f7fd bbf4 	b.w	8000210 <d_make_comp>
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7fe fe71 	bl	8001710 <d_type>
 8002a2e:	4605      	mov	r5, r0
 8002a30:	f104 000c 	add.w	r0, r4, #12
 8002a34:	f7fd fce6 	bl	8000404 <d_number.isra.1>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	f6ff ae38 	blt.w	80026ae <d_encoding+0x11a>
 8002a3e:	68e3      	ldr	r3, [r4, #12]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	2a5f      	cmp	r2, #95	; 0x5f
 8002a44:	f47f ae33 	bne.w	80026ae <d_encoding+0x11a>
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60e3      	str	r3, [r4, #12]
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe fe5f 	bl	8001710 <d_type>
 8002a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a54:	1d59      	adds	r1, r3, #5
 8002a56:	6321      	str	r1, [r4, #48]	; 0x30
 8002a58:	4602      	mov	r2, r0
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	210b      	movs	r1, #11
 8002a60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	f7fd bbd4 	b.w	8000210 <d_make_comp>
 8002a68:	463e      	mov	r6, r7
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	e004      	b.n	8002a78 <d_encoding+0x4e4>
 8002a6e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a72:	b123      	cbz	r3, 8002a7e <d_encoding+0x4ea>
 8002a74:	2b24      	cmp	r3, #36	; 0x24
 8002a76:	d002      	beq.n	8002a7e <d_encoding+0x4ea>
 8002a78:	3101      	adds	r1, #1
 8002a7a:	42a9      	cmp	r1, r5
 8002a7c:	dbf7      	blt.n	8002a6e <d_encoding+0x4da>
 8002a7e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a82:	4283      	cmp	r3, r0
 8002a84:	da24      	bge.n	8002ad0 <d_encoding+0x53c>
 8002a86:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002a8a:	0118      	lsls	r0, r3, #4
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	6163      	str	r3, [r4, #20]
 8002a90:	1833      	adds	r3, r6, r0
 8002a92:	1a6d      	subs	r5, r5, r1
 8002a94:	f8c3 8004 	str.w	r8, [r3, #4]
 8002a98:	f806 8000 	strb.w	r8, [r6, r0]
 8002a9c:	609f      	str	r7, [r3, #8]
 8002a9e:	eb0c 0701 	add.w	r7, ip, r1
 8002aa2:	60d9      	str	r1, [r3, #12]
 8002aa4:	60e7      	str	r7, [r4, #12]
 8002aa6:	e6d6      	b.n	8002856 <d_encoding+0x2c2>
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	e6df      	b.n	800286c <d_encoding+0x2d8>
 8002aac:	2b4c      	cmp	r3, #76	; 0x4c
 8002aae:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002ab2:	d004      	beq.n	8002abe <d_encoding+0x52a>
 8002ab4:	f4ff ae79 	bcc.w	80027aa <d_encoding+0x216>
 8002ab8:	2a01      	cmp	r2, #1
 8002aba:	f63f ae76 	bhi.w	80027aa <d_encoding+0x216>
 8002abe:	6889      	ldr	r1, [r1, #8]
 8002ac0:	2900      	cmp	r1, #0
 8002ac2:	f47f add7 	bne.w	8002674 <d_encoding+0xe0>
 8002ac6:	e671      	b.n	80027ac <d_encoding+0x218>
 8002ac8:	212f      	movs	r1, #47	; 0x2f
 8002aca:	e6ae      	b.n	800282a <d_encoding+0x296>
 8002acc:	212e      	movs	r1, #46	; 0x2e
 8002ace:	e6ac      	b.n	800282a <d_encoding+0x296>
 8002ad0:	68e3      	ldr	r3, [r4, #12]
 8002ad2:	440b      	add	r3, r1
 8002ad4:	60e3      	str	r3, [r4, #12]
 8002ad6:	2500      	movs	r5, #0
 8002ad8:	e57a      	b.n	80025d0 <d_encoding+0x3c>
 8002ada:	f7ff fd5b 	bl	8002594 <d_encoding>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	2149      	movs	r1, #73	; 0x49
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aea:	f7fd bb91 	b.w	8000210 <d_make_comp>
 8002aee:	bf00      	nop

08002af0 <d_expr_primary>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	68c2      	ldr	r2, [r0, #12]
 8002af4:	7813      	ldrb	r3, [r2, #0]
 8002af6:	2b4c      	cmp	r3, #76	; 0x4c
 8002af8:	d144      	bne.n	8002b84 <d_expr_primary+0x94>
 8002afa:	1c53      	adds	r3, r2, #1
 8002afc:	60c3      	str	r3, [r0, #12]
 8002afe:	7851      	ldrb	r1, [r2, #1]
 8002b00:	295f      	cmp	r1, #95	; 0x5f
 8002b02:	4604      	mov	r4, r0
 8002b04:	d040      	beq.n	8002b88 <d_expr_primary+0x98>
 8002b06:	295a      	cmp	r1, #90	; 0x5a
 8002b08:	d10c      	bne.n	8002b24 <d_expr_primary+0x34>
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60e3      	str	r3, [r4, #12]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fd3f 	bl	8002594 <d_encoding>
 8002b16:	68e3      	ldr	r3, [r4, #12]
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	2a45      	cmp	r2, #69	; 0x45
 8002b1c:	d132      	bne.n	8002b84 <d_expr_primary+0x94>
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60e3      	str	r3, [r4, #12]
 8002b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b24:	f7fe fdf4 	bl	8001710 <d_type>
 8002b28:	b360      	cbz	r0, 8002b84 <d_expr_primary+0x94>
 8002b2a:	7803      	ldrb	r3, [r0, #0]
 8002b2c:	2b27      	cmp	r3, #39	; 0x27
 8002b2e:	d032      	beq.n	8002b96 <d_expr_primary+0xa6>
 8002b30:	68e6      	ldr	r6, [r4, #12]
 8002b32:	7833      	ldrb	r3, [r6, #0]
 8002b34:	2b6e      	cmp	r3, #110	; 0x6e
 8002b36:	d037      	beq.n	8002ba8 <d_expr_primary+0xb8>
 8002b38:	213c      	movs	r1, #60	; 0x3c
 8002b3a:	2b45      	cmp	r3, #69	; 0x45
 8002b3c:	d040      	beq.n	8002bc0 <d_expr_primary+0xd0>
 8002b3e:	b30b      	cbz	r3, 8002b84 <d_expr_primary+0x94>
 8002b40:	4633      	mov	r3, r6
 8002b42:	e000      	b.n	8002b46 <d_expr_primary+0x56>
 8002b44:	b1f5      	cbz	r5, 8002b84 <d_expr_primary+0x94>
 8002b46:	3301      	adds	r3, #1
 8002b48:	60e3      	str	r3, [r4, #12]
 8002b4a:	781d      	ldrb	r5, [r3, #0]
 8002b4c:	2d45      	cmp	r5, #69	; 0x45
 8002b4e:	d1f9      	bne.n	8002b44 <d_expr_primary+0x54>
 8002b50:	1b9d      	subs	r5, r3, r6
 8002b52:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	da0b      	bge.n	8002b72 <d_expr_primary+0x82>
 8002b5a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b5e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b62:	eb0e 030c 	add.w	r3, lr, ip
 8002b66:	3201      	adds	r2, #1
 8002b68:	2700      	movs	r7, #0
 8002b6a:	605f      	str	r7, [r3, #4]
 8002b6c:	6162      	str	r2, [r4, #20]
 8002b6e:	b106      	cbz	r6, 8002b72 <d_expr_primary+0x82>
 8002b70:	bb05      	cbnz	r5, 8002bb4 <d_expr_primary+0xc4>
 8002b72:	2300      	movs	r3, #0
 8002b74:	4602      	mov	r2, r0
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fd fb4a 	bl	8000210 <d_make_comp>
 8002b7c:	68e3      	ldr	r3, [r4, #12]
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	2a45      	cmp	r2, #69	; 0x45
 8002b82:	d0cc      	beq.n	8002b1e <d_expr_primary+0x2e>
 8002b84:	2000      	movs	r0, #0
 8002b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b88:	1c93      	adds	r3, r2, #2
 8002b8a:	60c3      	str	r3, [r0, #12]
 8002b8c:	7892      	ldrb	r2, [r2, #2]
 8002b8e:	2a5a      	cmp	r2, #90	; 0x5a
 8002b90:	d0bb      	beq.n	8002b0a <d_expr_primary+0x1a>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7c1      	b.n	8002b1a <d_expr_primary+0x2a>
 8002b96:	6883      	ldr	r3, [r0, #8]
 8002b98:	7c1a      	ldrb	r2, [r3, #16]
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d0c8      	beq.n	8002b30 <d_expr_primary+0x40>
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ba6:	e7c3      	b.n	8002b30 <d_expr_primary+0x40>
 8002ba8:	1c72      	adds	r2, r6, #1
 8002baa:	60e2      	str	r2, [r4, #12]
 8002bac:	7873      	ldrb	r3, [r6, #1]
 8002bae:	213d      	movs	r1, #61	; 0x3d
 8002bb0:	4616      	mov	r6, r2
 8002bb2:	e7c2      	b.n	8002b3a <d_expr_primary+0x4a>
 8002bb4:	605f      	str	r7, [r3, #4]
 8002bb6:	f80e 700c 	strb.w	r7, [lr, ip]
 8002bba:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002bbe:	e7d9      	b.n	8002b74 <d_expr_primary+0x84>
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	e7c6      	b.n	8002b52 <d_expr_primary+0x62>

08002bc4 <d_print_comp>:
 8002bc4:	b112      	cbz	r2, 8002bcc <d_print_comp+0x8>
 8002bc6:	6853      	ldr	r3, [r2, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	dd03      	ble.n	8002bd4 <d_print_comp+0x10>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002bd2:	4770      	bx	lr
 8002bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd8:	4615      	mov	r5, r2
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	606a      	str	r2, [r5, #4]
 8002bde:	b099      	sub	sp, #100	; 0x64
 8002be0:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002be4:	9504      	str	r5, [sp, #16]
 8002be6:	460e      	mov	r6, r1
 8002be8:	ab04      	add	r3, sp, #16
 8002bea:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002bee:	9105      	str	r1, [sp, #20]
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002bf6:	2f00      	cmp	r7, #0
 8002bf8:	f040 80d7 	bne.w	8002daa <d_print_comp+0x1e6>
 8002bfc:	7828      	ldrb	r0, [r5, #0]
 8002bfe:	284f      	cmp	r0, #79	; 0x4f
 8002c00:	f201 82ef 	bhi.w	80041e2 <d_print_comp+0x161e>
 8002c04:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002c08:	0ab80a87 	.word	0x0ab80a87
 8002c0c:	0a4f0ab8 	.word	0x0a4f0ab8
 8002c10:	079407c6 	.word	0x079407c6
 8002c14:	075e0767 	.word	0x075e0767
 8002c18:	070f0737 	.word	0x070f0737
 8002c1c:	06bf06e7 	.word	0x06bf06e7
 8002c20:	066f0697 	.word	0x066f0697
 8002c24:	061f0647 	.word	0x061f0647
 8002c28:	091f0947 	.word	0x091f0947
 8002c2c:	08cf08f7 	.word	0x08cf08f7
 8002c30:	087f08a7 	.word	0x087f08a7
 8002c34:	082f0857 	.word	0x082f0857
 8002c38:	09bf09d6 	.word	0x09bf09d6
 8002c3c:	09bf09bf 	.word	0x09bf09bf
 8002c40:	09990999 	.word	0x09990999
 8002c44:	09990999 	.word	0x09990999
 8002c48:	09990999 	.word	0x09990999
 8002c4c:	096f0999 	.word	0x096f0999
 8002c50:	0999096f 	.word	0x0999096f
 8002c54:	0a1d0999 	.word	0x0a1d0999
 8002c58:	06060a14 	.word	0x06060a14
 8002c5c:	05720592 	.word	0x05720592
 8002c60:	0572051b 	.word	0x0572051b
 8002c64:	04d304d3 	.word	0x04d304d3
 8002c68:	045c0488 	.word	0x045c0488
 8002c6c:	0aed0434 	.word	0x0aed0434
 8002c70:	0404040c 	.word	0x0404040c
 8002c74:	039c03b0 	.word	0x039c03b0
 8002c78:	038d0397 	.word	0x038d0397
 8002c7c:	03880388 	.word	0x03880388
 8002c80:	03330333 	.word	0x03330333
 8002c84:	02fe030b 	.word	0x02fe030b
 8002c88:	02aa02dc 	.word	0x02aa02dc
 8002c8c:	025a0282 	.word	0x025a0282
 8002c90:	01f80232 	.word	0x01f80232
 8002c94:	01d00aed 	.word	0x01d00aed
 8002c98:	015301a8 	.word	0x015301a8
 8002c9c:	017b0105 	.word	0x017b0105
 8002ca0:	00d80999 	.word	0x00d80999
 8002ca4:	09990999 	.word	0x09990999
 8002ca8:	68aa      	ldr	r2, [r5, #8]
 8002caa:	6893      	ldr	r3, [r2, #8]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	7859      	ldrb	r1, [r3, #1]
 8002cb0:	2963      	cmp	r1, #99	; 0x63
 8002cb2:	d109      	bne.n	8002cc8 <d_print_comp+0x104>
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002cba:	2901      	cmp	r1, #1
 8002cbc:	f242 8319 	bls.w	80052f2 <d_print_comp+0x272e>
 8002cc0:	3b72      	subs	r3, #114	; 0x72
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f242 8315 	bls.w	80052f2 <d_print_comp+0x272e>
 8002cc8:	f105 030c 	add.w	r3, r5, #12
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f003 fcd2 	bl	8006678 <d_maybe_print_fold_expression.isra.20>
 8002cd4:	4680      	mov	r8, r0
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	f042 8400 	bne.w	80054dc <d_print_comp+0x2918>
 8002cdc:	68ab      	ldr	r3, [r5, #8]
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	2a31      	cmp	r2, #49	; 0x31
 8002ce2:	f002 8592 	beq.w	800580a <d_print_comp+0x2c46>
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	49d7      	ldr	r1, [pc, #860]	; (8003048 <d_print_comp+0x484>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f004 f850 	bl	8006d90 <strcmp>
 8002cf0:	68eb      	ldr	r3, [r5, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	b918      	cbnz	r0, 8002cfe <d_print_comp+0x13a>
 8002cf6:	7813      	ldrb	r3, [r2, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	f002 85d4 	beq.w	80058a6 <d_print_comp+0x2ce2>
 8002cfe:	4631      	mov	r1, r6
 8002d00:	4620      	mov	r0, r4
 8002d02:	f003 fc67 	bl	80065d4 <d_print_subexpr>
 8002d06:	68af      	ldr	r7, [r5, #8]
 8002d08:	49d0      	ldr	r1, [pc, #832]	; (800304c <d_print_comp+0x488>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f8d3 8000 	ldr.w	r8, [r3]
 8002d10:	4640      	mov	r0, r8
 8002d12:	f004 f83d 	bl	8006d90 <strcmp>
 8002d16:	4681      	mov	r9, r0
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f042 83d0 	bne.w	80054be <d_print_comp+0x28fa>
 8002d1e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d22:	2fff      	cmp	r7, #255	; 0xff
 8002d24:	d110      	bne.n	8002d48 <d_print_comp+0x184>
 8002d26:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d34:	4620      	mov	r0, r4
 8002d36:	4798      	blx	r3
 8002d38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d3c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d40:	3301      	adds	r3, #1
 8002d42:	464f      	mov	r7, r9
 8002d44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d48:	1c7a      	adds	r2, r7, #1
 8002d4a:	235b      	movs	r3, #91	; 0x5b
 8002d4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d50:	55e3      	strb	r3, [r4, r7]
 8002d52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d56:	68eb      	ldr	r3, [r5, #12]
 8002d58:	4631      	mov	r1, r6
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ff31 	bl	8002bc4 <d_print_comp>
 8002d62:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d66:	2fff      	cmp	r7, #255	; 0xff
 8002d68:	d111      	bne.n	8002d8e <d_print_comp+0x1ca>
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d72:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4798      	blx	r3
 8002d7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d82:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002d86:	3301      	adds	r3, #1
 8002d88:	4637      	mov	r7, r6
 8002d8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d8e:	235d      	movs	r3, #93	; 0x5d
 8002d90:	1c7a      	adds	r2, r7, #1
 8002d92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d96:	55e3      	strb	r3, [r4, r7]
 8002d98:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d9c:	68ab      	ldr	r3, [r5, #8]
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	2a31      	cmp	r2, #49	; 0x31
 8002da2:	f002 83ad 	beq.w	8005500 <d_print_comp+0x293c>
 8002da6:	9905      	ldr	r1, [sp, #20]
 8002da8:	686a      	ldr	r2, [r5, #4]
 8002daa:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002dae:	3a01      	subs	r2, #1
 8002db0:	606a      	str	r2, [r5, #4]
 8002db2:	b019      	add	sp, #100	; 0x64
 8002db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db8:	4fa5      	ldr	r7, [pc, #660]	; (8003050 <d_print_comp+0x48c>)
 8002dba:	68aa      	ldr	r2, [r5, #8]
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ff00 	bl	8002bc4 <d_print_comp>
 8002dc4:	f107 0808 	add.w	r8, r7, #8
 8002dc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	e016      	b.n	8002e00 <d_print_comp+0x23c>
 8002dd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002dd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002dde:	4798      	blx	r3
 8002de0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002de4:	3301      	adds	r3, #1
 8002de6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dea:	2200      	movs	r2, #0
 8002dec:	2301      	movs	r3, #1
 8002dee:	45b8      	cmp	r8, r7
 8002df0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002df4:	f804 a002 	strb.w	sl, [r4, r2]
 8002df8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002dfc:	f001 82f9 	beq.w	80043f2 <d_print_comp+0x182e>
 8002e00:	2bff      	cmp	r3, #255	; 0xff
 8002e02:	4619      	mov	r1, r3
 8002e04:	4620      	mov	r0, r4
 8002e06:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002e0a:	d0e2      	beq.n	8002dd2 <d_print_comp+0x20e>
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	e7ed      	b.n	8002dee <d_print_comp+0x22a>
 8002e12:	68a9      	ldr	r1, [r5, #8]
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7fd fcef 	bl	80007f8 <d_find_pack>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	f002 81e1 	beq.w	80051e2 <d_print_comp+0x261e>
 8002e20:	2300      	movs	r3, #0
 8002e22:	7802      	ldrb	r2, [r0, #0]
 8002e24:	2a2f      	cmp	r2, #47	; 0x2f
 8002e26:	f041 85df 	bne.w	80049e8 <d_print_comp+0x1e24>
 8002e2a:	6882      	ldr	r2, [r0, #8]
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	f001 85db 	beq.w	80049e8 <d_print_comp+0x1e24>
 8002e32:	68c0      	ldr	r0, [r0, #12]
 8002e34:	3301      	adds	r3, #1
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d1f3      	bne.n	8002e22 <d_print_comp+0x25e>
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68ab      	ldr	r3, [r5, #8]
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	1e4a      	subs	r2, r1, #1
 8002e42:	9202      	str	r2, [sp, #8]
 8002e44:	f04f 0a00 	mov.w	sl, #0
 8002e48:	4689      	mov	r9, r1
 8002e4a:	9503      	str	r5, [sp, #12]
 8002e4c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e50:	9a01      	ldr	r2, [sp, #4]
 8002e52:	4631      	mov	r1, r6
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7ff feb5 	bl	8002bc4 <d_print_comp>
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	429f      	cmp	r7, r3
 8002e5e:	f281 81c6 	bge.w	80041ee <d_print_comp+0x162a>
 8002e62:	4d7c      	ldr	r5, [pc, #496]	; (8003054 <d_print_comp+0x490>)
 8002e64:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e68:	f105 0802 	add.w	r8, r5, #2
 8002e6c:	e016      	b.n	8002e9c <d_print_comp+0x2d8>
 8002e6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e76:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002e7a:	4798      	blx	r3
 8002e7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e80:	3301      	adds	r3, #1
 8002e82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e86:	2200      	movs	r2, #0
 8002e88:	2301      	movs	r3, #1
 8002e8a:	45a8      	cmp	r8, r5
 8002e8c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e90:	f804 b002 	strb.w	fp, [r4, r2]
 8002e94:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002e98:	f001 81a9 	beq.w	80041ee <d_print_comp+0x162a>
 8002e9c:	2bff      	cmp	r3, #255	; 0xff
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002ea6:	d0e2      	beq.n	8002e6e <d_print_comp+0x2aa>
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	e7ed      	b.n	8002e8a <d_print_comp+0x2c6>
 8002eae:	4f6a      	ldr	r7, [pc, #424]	; (8003058 <d_print_comp+0x494>)
 8002eb0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002eb4:	f107 081a 	add.w	r8, r7, #26
 8002eb8:	f04f 0900 	mov.w	r9, #0
 8002ebc:	e016      	b.n	8002eec <d_print_comp+0x328>
 8002ebe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ec6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eca:	4798      	blx	r3
 8002ecc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2301      	movs	r3, #1
 8002eda:	45b8      	cmp	r8, r7
 8002edc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ee0:	f804 a002 	strb.w	sl, [r4, r2]
 8002ee4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ee8:	f001 82f1 	beq.w	80044ce <d_print_comp+0x190a>
 8002eec:	2bff      	cmp	r3, #255	; 0xff
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002ef6:	d0e2      	beq.n	8002ebe <d_print_comp+0x2fa>
 8002ef8:	461a      	mov	r2, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	e7ed      	b.n	8002eda <d_print_comp+0x316>
 8002efe:	4f57      	ldr	r7, [pc, #348]	; (800305c <d_print_comp+0x498>)
 8002f00:	68aa      	ldr	r2, [r5, #8]
 8002f02:	4631      	mov	r1, r6
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff fe5d 	bl	8002bc4 <d_print_comp>
 8002f0a:	f107 0805 	add.w	r8, r7, #5
 8002f0e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f12:	f04f 0900 	mov.w	r9, #0
 8002f16:	e016      	b.n	8002f46 <d_print_comp+0x382>
 8002f18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f24:	4798      	blx	r3
 8002f26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f30:	2200      	movs	r2, #0
 8002f32:	2301      	movs	r3, #1
 8002f34:	45b8      	cmp	r8, r7
 8002f36:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f3a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f3e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f42:	f001 827c 	beq.w	800443e <d_print_comp+0x187a>
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f50:	d0e2      	beq.n	8002f18 <d_print_comp+0x354>
 8002f52:	461a      	mov	r2, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	e7ed      	b.n	8002f34 <d_print_comp+0x370>
 8002f58:	4f41      	ldr	r7, [pc, #260]	; (8003060 <d_print_comp+0x49c>)
 8002f5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f5e:	f107 0816 	add.w	r8, r7, #22
 8002f62:	f04f 0900 	mov.w	r9, #0
 8002f66:	e016      	b.n	8002f96 <d_print_comp+0x3d2>
 8002f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f70:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f74:	4798      	blx	r3
 8002f76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f80:	2200      	movs	r2, #0
 8002f82:	2301      	movs	r3, #1
 8002f84:	45b8      	cmp	r8, r7
 8002f86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f8a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f8e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f92:	f001 81f4 	beq.w	800437e <d_print_comp+0x17ba>
 8002f96:	2bff      	cmp	r3, #255	; 0xff
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002fa0:	d0e2      	beq.n	8002f68 <d_print_comp+0x3a4>
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	e7ed      	b.n	8002f84 <d_print_comp+0x3c0>
 8002fa8:	4e2e      	ldr	r6, [pc, #184]	; (8003064 <d_print_comp+0x4a0>)
 8002faa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fae:	f106 070e 	add.w	r7, r6, #14
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	e016      	b.n	8002fe6 <d_print_comp+0x422>
 8002fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fc0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002fc4:	4798      	blx	r3
 8002fc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	42b7      	cmp	r7, r6
 8002fd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002fda:	f804 9002 	strb.w	r9, [r4, r2]
 8002fde:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8002fe2:	f001 81d5 	beq.w	8004390 <d_print_comp+0x17cc>
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4620      	mov	r0, r4
 8002fec:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8002ff0:	d0e2      	beq.n	8002fb8 <d_print_comp+0x3f4>
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	e7ed      	b.n	8002fd4 <d_print_comp+0x410>
 8002ff8:	4f1b      	ldr	r7, [pc, #108]	; (8003068 <d_print_comp+0x4a4>)
 8002ffa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ffe:	f107 0808 	add.w	r8, r7, #8
 8003002:	f04f 0900 	mov.w	r9, #0
 8003006:	e016      	b.n	8003036 <d_print_comp+0x472>
 8003008:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800300c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003010:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003014:	4798      	blx	r3
 8003016:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800301a:	3301      	adds	r3, #1
 800301c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003020:	2200      	movs	r2, #0
 8003022:	2301      	movs	r3, #1
 8003024:	45b8      	cmp	r8, r7
 8003026:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800302a:	f804 a002 	strb.w	sl, [r4, r2]
 800302e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003032:	f001 8114 	beq.w	800425e <d_print_comp+0x169a>
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	4619      	mov	r1, r3
 800303a:	4620      	mov	r0, r4
 800303c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003040:	d0e2      	beq.n	8003008 <d_print_comp+0x444>
 8003042:	461a      	mov	r2, r3
 8003044:	3301      	adds	r3, #1
 8003046:	e7ed      	b.n	8003024 <d_print_comp+0x460>
 8003048:	08093fe0 	.word	0x08093fe0
 800304c:	080941e0 	.word	0x080941e0
 8003050:	0809429b 	.word	0x0809429b
 8003054:	080941b4 	.word	0x080941b4
 8003058:	0809417f 	.word	0x0809417f
 800305c:	08094020 	.word	0x08094020
 8003060:	08094183 	.word	0x08094183
 8003064:	0809428b 	.word	0x0809428b
 8003068:	0809427b 	.word	0x0809427b
 800306c:	4fb9      	ldr	r7, [pc, #740]	; (8003354 <d_print_comp+0x790>)
 800306e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003072:	f107 081c 	add.w	r8, r7, #28
 8003076:	f04f 0900 	mov.w	r9, #0
 800307a:	e016      	b.n	80030aa <d_print_comp+0x4e6>
 800307c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003080:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003084:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003088:	4798      	blx	r3
 800308a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800308e:	3301      	adds	r3, #1
 8003090:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003094:	2200      	movs	r2, #0
 8003096:	2301      	movs	r3, #1
 8003098:	45b8      	cmp	r8, r7
 800309a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800309e:	f804 a002 	strb.w	sl, [r4, r2]
 80030a2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030a6:	f001 810f 	beq.w	80042c8 <d_print_comp+0x1704>
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	4619      	mov	r1, r3
 80030ae:	4620      	mov	r0, r4
 80030b0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030b4:	d0e2      	beq.n	800307c <d_print_comp+0x4b8>
 80030b6:	461a      	mov	r2, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	e7ed      	b.n	8003098 <d_print_comp+0x4d4>
 80030bc:	4fa6      	ldr	r7, [pc, #664]	; (8003358 <d_print_comp+0x794>)
 80030be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030c2:	f107 081d 	add.w	r8, r7, #29
 80030c6:	f04f 0900 	mov.w	r9, #0
 80030ca:	e016      	b.n	80030fa <d_print_comp+0x536>
 80030cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030d4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030d8:	4798      	blx	r3
 80030da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030de:	3301      	adds	r3, #1
 80030e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030e4:	2200      	movs	r2, #0
 80030e6:	2301      	movs	r3, #1
 80030e8:	4547      	cmp	r7, r8
 80030ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030ee:	f804 a002 	strb.w	sl, [r4, r2]
 80030f2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030f6:	f001 8083 	beq.w	8004200 <d_print_comp+0x163c>
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	4619      	mov	r1, r3
 80030fe:	4620      	mov	r0, r4
 8003100:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003104:	d0e2      	beq.n	80030cc <d_print_comp+0x508>
 8003106:	461a      	mov	r2, r3
 8003108:	3301      	adds	r3, #1
 800310a:	e7ed      	b.n	80030e8 <d_print_comp+0x524>
 800310c:	4f93      	ldr	r7, [pc, #588]	; (800335c <d_print_comp+0x798>)
 800310e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003112:	f107 080a 	add.w	r8, r7, #10
 8003116:	f04f 0900 	mov.w	r9, #0
 800311a:	e016      	b.n	800314a <d_print_comp+0x586>
 800311c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003120:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003124:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003128:	4798      	blx	r3
 800312a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800312e:	3301      	adds	r3, #1
 8003130:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003134:	2200      	movs	r2, #0
 8003136:	2301      	movs	r3, #1
 8003138:	45b8      	cmp	r8, r7
 800313a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800313e:	f804 a002 	strb.w	sl, [r4, r2]
 8003142:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003146:	f001 8064 	beq.w	8004212 <d_print_comp+0x164e>
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	4619      	mov	r1, r3
 800314e:	4620      	mov	r0, r4
 8003150:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003154:	d0e2      	beq.n	800311c <d_print_comp+0x558>
 8003156:	461a      	mov	r2, r3
 8003158:	3301      	adds	r3, #1
 800315a:	e7ed      	b.n	8003138 <d_print_comp+0x574>
 800315c:	a808      	add	r0, sp, #32
 800315e:	68aa      	ldr	r2, [r5, #8]
 8003160:	497f      	ldr	r1, [pc, #508]	; (8003360 <d_print_comp+0x79c>)
 8003162:	f015 feef 	bl	8018f44 <sprintf>
 8003166:	a808      	add	r0, sp, #32
 8003168:	f003 fe1c 	bl	8006da4 <strlen>
 800316c:	2800      	cmp	r0, #0
 800316e:	f001 81b7 	beq.w	80044e0 <d_print_comp+0x191c>
 8003172:	ae08      	add	r6, sp, #32
 8003174:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003178:	1837      	adds	r7, r6, r0
 800317a:	f04f 0800 	mov.w	r8, #0
 800317e:	e016      	b.n	80031ae <d_print_comp+0x5ea>
 8003180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003184:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003188:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800318c:	4798      	blx	r3
 800318e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003192:	3301      	adds	r3, #1
 8003194:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003198:	2200      	movs	r2, #0
 800319a:	2301      	movs	r3, #1
 800319c:	42be      	cmp	r6, r7
 800319e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031a2:	f804 9002 	strb.w	r9, [r4, r2]
 80031a6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80031aa:	f001 8199 	beq.w	80044e0 <d_print_comp+0x191c>
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	4619      	mov	r1, r3
 80031b2:	4620      	mov	r0, r4
 80031b4:	f816 9b01 	ldrb.w	r9, [r6], #1
 80031b8:	d0e2      	beq.n	8003180 <d_print_comp+0x5bc>
 80031ba:	461a      	mov	r2, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	e7ed      	b.n	800319c <d_print_comp+0x5d8>
 80031c0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80031c4:	f895 8008 	ldrb.w	r8, [r5, #8]
 80031c8:	2fff      	cmp	r7, #255	; 0xff
 80031ca:	d111      	bne.n	80031f0 <d_print_comp+0x62c>
 80031cc:	2600      	movs	r6, #0
 80031ce:	4639      	mov	r1, r7
 80031d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031d4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80031d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031dc:	4620      	mov	r0, r4
 80031de:	4798      	blx	r3
 80031e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031e4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80031e8:	3301      	adds	r3, #1
 80031ea:	4637      	mov	r7, r6
 80031ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031f0:	1c7b      	adds	r3, r7, #1
 80031f2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031f6:	f804 8007 	strb.w	r8, [r4, r7]
 80031fa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80031fe:	686a      	ldr	r2, [r5, #4]
 8003200:	9905      	ldr	r1, [sp, #20]
 8003202:	e5d2      	b.n	8002daa <d_print_comp+0x1e6>
 8003204:	68aa      	ldr	r2, [r5, #8]
 8003206:	4631      	mov	r1, r6
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fcdb 	bl	8002bc4 <d_print_comp>
 800320e:	4631      	mov	r1, r6
 8003210:	68ea      	ldr	r2, [r5, #12]
 8003212:	4620      	mov	r0, r4
 8003214:	f7ff fcd6 	bl	8002bc4 <d_print_comp>
 8003218:	9905      	ldr	r1, [sp, #20]
 800321a:	686a      	ldr	r2, [r5, #4]
 800321c:	e5c5      	b.n	8002daa <d_print_comp+0x1e6>
 800321e:	4f51      	ldr	r7, [pc, #324]	; (8003364 <d_print_comp+0x7a0>)
 8003220:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003224:	f107 080e 	add.w	r8, r7, #14
 8003228:	f04f 0900 	mov.w	r9, #0
 800322c:	e016      	b.n	800325c <d_print_comp+0x698>
 800322e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003232:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003236:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800323a:	4798      	blx	r3
 800323c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003240:	3301      	adds	r3, #1
 8003242:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003246:	2200      	movs	r2, #0
 8003248:	2301      	movs	r3, #1
 800324a:	45b8      	cmp	r8, r7
 800324c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003250:	f804 a002 	strb.w	sl, [r4, r2]
 8003254:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003258:	f001 8146 	beq.w	80044e8 <d_print_comp+0x1924>
 800325c:	2bff      	cmp	r3, #255	; 0xff
 800325e:	4619      	mov	r1, r3
 8003260:	4620      	mov	r0, r4
 8003262:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003266:	d0e2      	beq.n	800322e <d_print_comp+0x66a>
 8003268:	461a      	mov	r2, r3
 800326a:	3301      	adds	r3, #1
 800326c:	e7ed      	b.n	800324a <d_print_comp+0x686>
 800326e:	68ab      	ldr	r3, [r5, #8]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	2a27      	cmp	r2, #39	; 0x27
 8003274:	f001 8572 	beq.w	8004d5c <d_print_comp+0x2198>
 8003278:	f04f 0800 	mov.w	r8, #0
 800327c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003280:	2fff      	cmp	r7, #255	; 0xff
 8003282:	d112      	bne.n	80032aa <d_print_comp+0x6e6>
 8003284:	f04f 0900 	mov.w	r9, #0
 8003288:	4639      	mov	r1, r7
 800328a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800328e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003292:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003296:	4620      	mov	r0, r4
 8003298:	4798      	blx	r3
 800329a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800329e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80032a2:	3301      	adds	r3, #1
 80032a4:	464f      	mov	r7, r9
 80032a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032aa:	2328      	movs	r3, #40	; 0x28
 80032ac:	1c7a      	adds	r2, r7, #1
 80032ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80032b2:	55e3      	strb	r3, [r4, r7]
 80032b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032b8:	68aa      	ldr	r2, [r5, #8]
 80032ba:	4631      	mov	r1, r6
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff fc81 	bl	8002bc4 <d_print_comp>
 80032c2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	f041 85b8 	bne.w	8004e3c <d_print_comp+0x2278>
 80032cc:	2200      	movs	r2, #0
 80032ce:	4619      	mov	r1, r3
 80032d0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80032d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032dc:	4620      	mov	r0, r4
 80032de:	4798      	blx	r3
 80032e0:	2329      	movs	r3, #41	; 0x29
 80032e2:	7023      	strb	r3, [r4, #0]
 80032e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032e8:	782a      	ldrb	r2, [r5, #0]
 80032ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ee:	2101      	movs	r1, #1
 80032f0:	3301      	adds	r3, #1
 80032f2:	2a3d      	cmp	r2, #61	; 0x3d
 80032f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032fc:	f001 85bb 	beq.w	8004e76 <d_print_comp+0x22b2>
 8003300:	f1b8 0f08 	cmp.w	r8, #8
 8003304:	f001 8556 	beq.w	8004db4 <d_print_comp+0x21f0>
 8003308:	4631      	mov	r1, r6
 800330a:	68ea      	ldr	r2, [r5, #12]
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fc59 	bl	8002bc4 <d_print_comp>
 8003312:	9905      	ldr	r1, [sp, #20]
 8003314:	686a      	ldr	r2, [r5, #4]
 8003316:	e548      	b.n	8002daa <d_print_comp+0x1e6>
 8003318:	2301      	movs	r3, #1
 800331a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800331e:	686a      	ldr	r2, [r5, #4]
 8003320:	e543      	b.n	8002daa <d_print_comp+0x1e6>
 8003322:	68eb      	ldr	r3, [r5, #12]
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	2a3a      	cmp	r2, #58	; 0x3a
 8003328:	f001 8405 	beq.w	8004b36 <d_print_comp+0x1f72>
 800332c:	2301      	movs	r3, #1
 800332e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003332:	686a      	ldr	r2, [r5, #4]
 8003334:	e539      	b.n	8002daa <d_print_comp+0x1e6>
 8003336:	2301      	movs	r3, #1
 8003338:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800333c:	686a      	ldr	r2, [r5, #4]
 800333e:	e534      	b.n	8002daa <d_print_comp+0x1e6>
 8003340:	68eb      	ldr	r3, [r5, #12]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b38      	cmp	r3, #56	; 0x38
 8003346:	f43f acaf 	beq.w	8002ca8 <d_print_comp+0xe4>
 800334a:	2301      	movs	r3, #1
 800334c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003350:	686a      	ldr	r2, [r5, #4]
 8003352:	e52a      	b.n	8002daa <d_print_comp+0x1e6>
 8003354:	0809425b 	.word	0x0809425b
 8003358:	0809423b 	.word	0x0809423b
 800335c:	0809421c 	.word	0x0809421c
 8003360:	08093fd8 	.word	0x08093fd8
 8003364:	0809420b 	.word	0x0809420b
 8003368:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800336c:	f899 3000 	ldrb.w	r3, [r9]
 8003370:	2b31      	cmp	r3, #49	; 0x31
 8003372:	f001 843a 	beq.w	8004bea <d_print_comp+0x2026>
 8003376:	2b33      	cmp	r3, #51	; 0x33
 8003378:	f042 8192 	bne.w	80056a0 <d_print_comp+0x2adc>
 800337c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003380:	2fff      	cmp	r7, #255	; 0xff
 8003382:	d112      	bne.n	80033aa <d_print_comp+0x7e6>
 8003384:	f04f 0a00 	mov.w	sl, #0
 8003388:	4639      	mov	r1, r7
 800338a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800338e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003392:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003396:	4620      	mov	r0, r4
 8003398:	4798      	blx	r3
 800339a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800339e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 80033a2:	3301      	adds	r3, #1
 80033a4:	4657      	mov	r7, sl
 80033a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033aa:	1c7a      	adds	r2, r7, #1
 80033ac:	2328      	movs	r3, #40	; 0x28
 80033ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033b2:	55e3      	strb	r3, [r4, r7]
 80033b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033b8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80033bc:	4631      	mov	r1, r6
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff fc00 	bl	8002bc4 <d_print_comp>
 80033c4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80033c8:	2fff      	cmp	r7, #255	; 0xff
 80033ca:	d112      	bne.n	80033f2 <d_print_comp+0x82e>
 80033cc:	f04f 0900 	mov.w	r9, #0
 80033d0:	4639      	mov	r1, r7
 80033d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033de:	4620      	mov	r0, r4
 80033e0:	4798      	blx	r3
 80033e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033e6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80033ea:	3301      	adds	r3, #1
 80033ec:	464f      	mov	r7, r9
 80033ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033f2:	2329      	movs	r3, #41	; 0x29
 80033f4:	1c7a      	adds	r2, r7, #1
 80033f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033fa:	55e3      	strb	r3, [r4, r7]
 80033fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003400:	4642      	mov	r2, r8
 8003402:	4631      	mov	r1, r6
 8003404:	4620      	mov	r0, r4
 8003406:	f003 f8e5 	bl	80065d4 <d_print_subexpr>
 800340a:	9905      	ldr	r1, [sp, #20]
 800340c:	686a      	ldr	r2, [r5, #4]
 800340e:	e4cc      	b.n	8002daa <d_print_comp+0x1e6>
 8003410:	4631      	mov	r1, r6
 8003412:	68aa      	ldr	r2, [r5, #8]
 8003414:	4620      	mov	r0, r4
 8003416:	f003 f89d 	bl	8006554 <d_print_expr_op>
 800341a:	9905      	ldr	r1, [sp, #20]
 800341c:	686a      	ldr	r2, [r5, #4]
 800341e:	e4c4      	b.n	8002daa <d_print_comp+0x1e6>
 8003420:	4fd2      	ldr	r7, [pc, #840]	; (800376c <d_print_comp+0xba8>)
 8003422:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003426:	f107 0809 	add.w	r8, r7, #9
 800342a:	f04f 0900 	mov.w	r9, #0
 800342e:	e016      	b.n	800345e <d_print_comp+0x89a>
 8003430:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003434:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003438:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800343c:	4798      	blx	r3
 800343e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003442:	3301      	adds	r3, #1
 8003444:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003448:	2200      	movs	r2, #0
 800344a:	2301      	movs	r3, #1
 800344c:	45b8      	cmp	r8, r7
 800344e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003452:	f804 a002 	strb.w	sl, [r4, r2]
 8003456:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800345a:	f001 8057 	beq.w	800450c <d_print_comp+0x1948>
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	4619      	mov	r1, r3
 8003462:	4620      	mov	r0, r4
 8003464:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003468:	d0e2      	beq.n	8003430 <d_print_comp+0x86c>
 800346a:	461a      	mov	r2, r3
 800346c:	3301      	adds	r3, #1
 800346e:	e7ed      	b.n	800344c <d_print_comp+0x888>
 8003470:	4fbe      	ldr	r7, [pc, #760]	; (800376c <d_print_comp+0xba8>)
 8003472:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003476:	f107 0809 	add.w	r8, r7, #9
 800347a:	f04f 0900 	mov.w	r9, #0
 800347e:	e016      	b.n	80034ae <d_print_comp+0x8ea>
 8003480:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003488:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800348c:	4798      	blx	r3
 800348e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003492:	3301      	adds	r3, #1
 8003494:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003498:	2200      	movs	r2, #0
 800349a:	2301      	movs	r3, #1
 800349c:	45b8      	cmp	r8, r7
 800349e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034a2:	f804 a002 	strb.w	sl, [r4, r2]
 80034a6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80034aa:	f001 8026 	beq.w	80044fa <d_print_comp+0x1936>
 80034ae:	2bff      	cmp	r3, #255	; 0xff
 80034b0:	4619      	mov	r1, r3
 80034b2:	4620      	mov	r0, r4
 80034b4:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80034b8:	d0e2      	beq.n	8003480 <d_print_comp+0x8bc>
 80034ba:	461a      	mov	r2, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	e7ed      	b.n	800349c <d_print_comp+0x8d8>
 80034c0:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80034c4:	4eaa      	ldr	r6, [pc, #680]	; (8003770 <d_print_comp+0xbac>)
 80034c6:	f8da 7008 	ldr.w	r7, [sl, #8]
 80034ca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80034ce:	f106 0808 	add.w	r8, r6, #8
 80034d2:	f04f 0900 	mov.w	r9, #0
 80034d6:	e016      	b.n	8003506 <d_print_comp+0x942>
 80034d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034e4:	4798      	blx	r3
 80034e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ea:	3301      	adds	r3, #1
 80034ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034f0:	2200      	movs	r2, #0
 80034f2:	2301      	movs	r3, #1
 80034f4:	4546      	cmp	r6, r8
 80034f6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034fa:	f804 b002 	strb.w	fp, [r4, r2]
 80034fe:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8003502:	f001 8021 	beq.w	8004548 <d_print_comp+0x1984>
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	4619      	mov	r1, r3
 800350a:	4620      	mov	r0, r4
 800350c:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 8003510:	d0e2      	beq.n	80034d8 <d_print_comp+0x914>
 8003512:	461a      	mov	r2, r3
 8003514:	3301      	adds	r3, #1
 8003516:	e7ed      	b.n	80034f4 <d_print_comp+0x930>
 8003518:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 800351c:	b11a      	cbz	r2, 8003526 <d_print_comp+0x962>
 800351e:	4631      	mov	r1, r6
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff fb4f 	bl	8002bc4 <d_print_comp>
 8003526:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800352a:	2fff      	cmp	r7, #255	; 0xff
 800352c:	d112      	bne.n	8003554 <d_print_comp+0x990>
 800352e:	f04f 0900 	mov.w	r9, #0
 8003532:	4639      	mov	r1, r7
 8003534:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003538:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800353c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003540:	4620      	mov	r0, r4
 8003542:	4798      	blx	r3
 8003544:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003548:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800354c:	3301      	adds	r3, #1
 800354e:	464f      	mov	r7, r9
 8003550:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003554:	1c78      	adds	r0, r7, #1
 8003556:	237b      	movs	r3, #123	; 0x7b
 8003558:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800355c:	4642      	mov	r2, r8
 800355e:	55e3      	strb	r3, [r4, r7]
 8003560:	4631      	mov	r1, r6
 8003562:	4620      	mov	r0, r4
 8003564:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003568:	f7ff fb2c 	bl	8002bc4 <d_print_comp>
 800356c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003570:	2fff      	cmp	r7, #255	; 0xff
 8003572:	d111      	bne.n	8003598 <d_print_comp+0x9d4>
 8003574:	2600      	movs	r6, #0
 8003576:	4639      	mov	r1, r7
 8003578:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800357c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003580:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003584:	4620      	mov	r0, r4
 8003586:	4798      	blx	r3
 8003588:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800358c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003590:	3301      	adds	r3, #1
 8003592:	4637      	mov	r7, r6
 8003594:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003598:	1c7a      	adds	r2, r7, #1
 800359a:	237d      	movs	r3, #125	; 0x7d
 800359c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80035a0:	55e3      	strb	r3, [r4, r7]
 80035a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80035a6:	686a      	ldr	r2, [r5, #4]
 80035a8:	9905      	ldr	r1, [sp, #20]
 80035aa:	f7ff bbfe 	b.w	8002daa <d_print_comp+0x1e6>
 80035ae:	68aa      	ldr	r2, [r5, #8]
 80035b0:	b11a      	cbz	r2, 80035ba <d_print_comp+0x9f6>
 80035b2:	4631      	mov	r1, r6
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff fb05 	bl	8002bc4 <d_print_comp>
 80035ba:	68eb      	ldr	r3, [r5, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f001 853d 	beq.w	800503c <d_print_comp+0x2478>
 80035c2:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80035c6:	2ffd      	cmp	r7, #253	; 0xfd
 80035c8:	d912      	bls.n	80035f0 <d_print_comp+0xa2c>
 80035ca:	f04f 0800 	mov.w	r8, #0
 80035ce:	f804 8007 	strb.w	r8, [r4, r7]
 80035d2:	4639      	mov	r1, r7
 80035d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035dc:	4620      	mov	r0, r4
 80035de:	4798      	blx	r3
 80035e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035e4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80035e8:	3301      	adds	r3, #1
 80035ea:	4647      	mov	r7, r8
 80035ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035f0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800377c <d_print_comp+0xbb8>
 80035f4:	f04f 0a00 	mov.w	sl, #0
 80035f8:	f108 0b02 	add.w	fp, r8, #2
 80035fc:	e016      	b.n	800362c <d_print_comp+0xa68>
 80035fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003602:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003606:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800360a:	4798      	blx	r3
 800360c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003610:	3301      	adds	r3, #1
 8003612:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003616:	2701      	movs	r7, #1
 8003618:	2300      	movs	r3, #0
 800361a:	45c3      	cmp	fp, r8
 800361c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8003620:	f804 9003 	strb.w	r9, [r4, r3]
 8003624:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003628:	f001 80cf 	beq.w	80047ca <d_print_comp+0x1c06>
 800362c:	2fff      	cmp	r7, #255	; 0xff
 800362e:	4639      	mov	r1, r7
 8003630:	4620      	mov	r0, r4
 8003632:	f818 9b01 	ldrb.w	r9, [r8], #1
 8003636:	d0e2      	beq.n	80035fe <d_print_comp+0xa3a>
 8003638:	463b      	mov	r3, r7
 800363a:	3701      	adds	r7, #1
 800363c:	e7ed      	b.n	800361a <d_print_comp+0xa56>
 800363e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f041 84a0 	bne.w	8004f88 <d_print_comp+0x23c4>
 8003648:	68aa      	ldr	r2, [r5, #8]
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <d_print_comp+0xbb0>)
 800364c:	6891      	ldr	r1, [r2, #8]
 800364e:	4299      	cmp	r1, r3
 8003650:	d020      	beq.n	8003694 <d_print_comp+0xad0>
 8003652:	4631      	mov	r1, r6
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff fab5 	bl	8002bc4 <d_print_comp>
 800365a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800365e:	2fff      	cmp	r7, #255	; 0xff
 8003660:	d111      	bne.n	8003686 <d_print_comp+0xac2>
 8003662:	2600      	movs	r6, #0
 8003664:	4639      	mov	r1, r7
 8003666:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800366a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800366e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003672:	4620      	mov	r0, r4
 8003674:	4798      	blx	r3
 8003676:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800367a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800367e:	3301      	adds	r3, #1
 8003680:	4637      	mov	r7, r6
 8003682:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003686:	2320      	movs	r3, #32
 8003688:	1c7a      	adds	r2, r7, #1
 800368a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800368e:	55e3      	strb	r3, [r4, r7]
 8003690:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003694:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8003698:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800369c:	2a00      	cmp	r2, #0
 800369e:	f001 80a6 	beq.w	80047ee <d_print_comp+0x1c2a>
 80036a2:	4e35      	ldr	r6, [pc, #212]	; (8003778 <d_print_comp+0xbb4>)
 80036a4:	f04f 0800 	mov.w	r8, #0
 80036a8:	f106 0906 	add.w	r9, r6, #6
 80036ac:	e015      	b.n	80036da <d_print_comp+0xb16>
 80036ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80036b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80036ba:	4798      	blx	r3
 80036bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036c0:	3301      	adds	r3, #1
 80036c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036c6:	2200      	movs	r2, #0
 80036c8:	2301      	movs	r3, #1
 80036ca:	45b1      	cmp	r9, r6
 80036cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80036d0:	54a7      	strb	r7, [r4, r2]
 80036d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80036d6:	f001 8183 	beq.w	80049e0 <d_print_comp+0x1e1c>
 80036da:	2bff      	cmp	r3, #255	; 0xff
 80036dc:	4619      	mov	r1, r3
 80036de:	4620      	mov	r0, r4
 80036e0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80036e4:	d0e3      	beq.n	80036ae <d_print_comp+0xaea>
 80036e6:	461a      	mov	r2, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	e7ee      	b.n	80036ca <d_print_comp+0xb06>
 80036ec:	ab18      	add	r3, sp, #96	; 0x60
 80036ee:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80036f2:	f843 2d40 	str.w	r2, [r3, #-64]!
 80036f6:	2000      	movs	r0, #0
 80036f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036fc:	900a      	str	r0, [sp, #40]	; 0x28
 80036fe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003702:	68ea      	ldr	r2, [r5, #12]
 8003704:	930b      	str	r3, [sp, #44]	; 0x2c
 8003706:	4631      	mov	r1, r6
 8003708:	4620      	mov	r0, r4
 800370a:	9509      	str	r5, [sp, #36]	; 0x24
 800370c:	f7ff fa5a 	bl	8002bc4 <d_print_comp>
 8003710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003712:	b923      	cbnz	r3, 800371e <d_print_comp+0xb5a>
 8003714:	4631      	mov	r1, r6
 8003716:	462a      	mov	r2, r5
 8003718:	4620      	mov	r0, r4
 800371a:	f002 f8e9 	bl	80058f0 <d_print_mod>
 800371e:	9b08      	ldr	r3, [sp, #32]
 8003720:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003724:	9905      	ldr	r1, [sp, #20]
 8003726:	686a      	ldr	r2, [r5, #4]
 8003728:	f7ff bb3f 	b.w	8002daa <d_print_comp+0x1e6>
 800372c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8003730:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003734:	f849 cd40 	str.w	ip, [r9, #-64]!
 8003738:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800373c:	f8cd c004 	str.w	ip, [sp, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	4667      	mov	r7, ip
 8003744:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003748:	9509      	str	r5, [sp, #36]	; 0x24
 800374a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800374e:	2f00      	cmp	r7, #0
 8003750:	f001 852f 	beq.w	80051b2 <d_print_comp+0x25ee>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	3b19      	subs	r3, #25
 800375a:	2b02      	cmp	r3, #2
 800375c:	f201 8529 	bhi.w	80051b2 <d_print_comp+0x25ee>
 8003760:	4623      	mov	r3, r4
 8003762:	f04f 0801 	mov.w	r8, #1
 8003766:	464c      	mov	r4, r9
 8003768:	469c      	mov	ip, r3
 800376a:	e00e      	b.n	800378a <d_print_comp+0xbc6>
 800376c:	080941c3 	.word	0x080941c3
 8003770:	080941b7 	.word	0x080941b7
 8003774:	0801c374 	.word	0x0801c374
 8003778:	080941a4 	.word	0x080941a4
 800377c:	080941b4 	.word	0x080941b4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	3b19      	subs	r3, #25
 8003786:	2b02      	cmp	r3, #2
 8003788:	d81d      	bhi.n	80037c6 <d_print_comp+0xc02>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 8003790:	aa18      	add	r2, sp, #96	; 0x60
 8003792:	eb02 0b0e 	add.w	fp, r2, lr
 8003796:	b99b      	cbnz	r3, 80037c0 <d_print_comp+0xbfc>
 8003798:	f1b8 0f03 	cmp.w	r8, #3
 800379c:	f201 8517 	bhi.w	80051ce <d_print_comp+0x260a>
 80037a0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80037a4:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 80037a8:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80037ac:	f84b 4c40 	str.w	r4, [fp, #-64]
 80037b0:	2301      	movs	r3, #1
 80037b2:	eb09 040e 	add.w	r4, r9, lr
 80037b6:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 80037ba:	f108 0801 	add.w	r8, r8, #1
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	683f      	ldr	r7, [r7, #0]
 80037c2:	2f00      	cmp	r7, #0
 80037c4:	d1dc      	bne.n	8003780 <d_print_comp+0xbbc>
 80037c6:	68ea      	ldr	r2, [r5, #12]
 80037c8:	4631      	mov	r1, r6
 80037ca:	4660      	mov	r0, ip
 80037cc:	4664      	mov	r4, ip
 80037ce:	f7ff f9f9 	bl	8002bc4 <d_print_comp>
 80037d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d4:	9a01      	ldr	r2, [sp, #4]
 80037d6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80037da:	b9bb      	cbnz	r3, 800380c <d_print_comp+0xc48>
 80037dc:	f1b8 0f01 	cmp.w	r8, #1
 80037e0:	d00c      	beq.n	80037fc <d_print_comp+0xc38>
 80037e2:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 80037e6:	af0c      	add	r7, sp, #48	; 0x30
 80037e8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80037ec:	4631      	mov	r1, r6
 80037ee:	f1a8 0810 	sub.w	r8, r8, #16
 80037f2:	4620      	mov	r0, r4
 80037f4:	f002 f87c 	bl	80058f0 <d_print_mod>
 80037f8:	4547      	cmp	r7, r8
 80037fa:	d1f5      	bne.n	80037e8 <d_print_comp+0xc24>
 80037fc:	4631      	mov	r1, r6
 80037fe:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003802:	f105 0208 	add.w	r2, r5, #8
 8003806:	4620      	mov	r0, r4
 8003808:	f002 fdca 	bl	80063a0 <d_print_array_type.isra.14>
 800380c:	9905      	ldr	r1, [sp, #20]
 800380e:	686a      	ldr	r2, [r5, #4]
 8003810:	f7ff bacb 	b.w	8002daa <d_print_comp+0x1e6>
 8003814:	06b2      	lsls	r2, r6, #26
 8003816:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 800381a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800381e:	f101 825a 	bmi.w	8004cd6 <d_print_comp+0x2112>
 8003822:	68aa      	ldr	r2, [r5, #8]
 8003824:	b11a      	cbz	r2, 800382e <d_print_comp+0xc6a>
 8003826:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 800382a:	f001 85c3 	beq.w	80053b4 <d_print_comp+0x27f0>
 800382e:	4641      	mov	r1, r8
 8003830:	f105 020c 	add.w	r2, r5, #12
 8003834:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003838:	4620      	mov	r0, r4
 800383a:	f002 fb87 	bl	8005f4c <d_print_function_type.isra.15>
 800383e:	9905      	ldr	r1, [sp, #20]
 8003840:	686a      	ldr	r2, [r5, #4]
 8003842:	f7ff bab2 	b.w	8002daa <d_print_comp+0x1e6>
 8003846:	4fcb      	ldr	r7, [pc, #812]	; (8003b74 <d_print_comp+0xfb0>)
 8003848:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800384c:	f107 0815 	add.w	r8, r7, #21
 8003850:	f04f 0900 	mov.w	r9, #0
 8003854:	e016      	b.n	8003884 <d_print_comp+0xcc0>
 8003856:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800385a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800385e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003862:	4798      	blx	r3
 8003864:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003868:	3301      	adds	r3, #1
 800386a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800386e:	2200      	movs	r2, #0
 8003870:	2301      	movs	r3, #1
 8003872:	45b8      	cmp	r8, r7
 8003874:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003878:	f804 a002 	strb.w	sl, [r4, r2]
 800387c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003880:	f000 8789 	beq.w	8004796 <d_print_comp+0x1bd2>
 8003884:	2bff      	cmp	r3, #255	; 0xff
 8003886:	4619      	mov	r1, r3
 8003888:	4620      	mov	r0, r4
 800388a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800388e:	d0e2      	beq.n	8003856 <d_print_comp+0xc92>
 8003890:	461a      	mov	r2, r3
 8003892:	3301      	adds	r3, #1
 8003894:	e7ed      	b.n	8003872 <d_print_comp+0xcae>
 8003896:	4fb8      	ldr	r7, [pc, #736]	; (8003b78 <d_print_comp+0xfb4>)
 8003898:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800389c:	f107 0810 	add.w	r8, r7, #16
 80038a0:	f04f 0900 	mov.w	r9, #0
 80038a4:	e016      	b.n	80038d4 <d_print_comp+0xd10>
 80038a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038b2:	4798      	blx	r3
 80038b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038b8:	3301      	adds	r3, #1
 80038ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038be:	2200      	movs	r2, #0
 80038c0:	2301      	movs	r3, #1
 80038c2:	45b8      	cmp	r8, r7
 80038c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038c8:	f804 a002 	strb.w	sl, [r4, r2]
 80038cc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038d0:	f000 876a 	beq.w	80047a8 <d_print_comp+0x1be4>
 80038d4:	2bff      	cmp	r3, #255	; 0xff
 80038d6:	4619      	mov	r1, r3
 80038d8:	4620      	mov	r0, r4
 80038da:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038de:	d0e2      	beq.n	80038a6 <d_print_comp+0xce2>
 80038e0:	461a      	mov	r2, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	e7ed      	b.n	80038c2 <d_print_comp+0xcfe>
 80038e6:	4fa5      	ldr	r7, [pc, #660]	; (8003b7c <d_print_comp+0xfb8>)
 80038e8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038ec:	f107 0812 	add.w	r8, r7, #18
 80038f0:	f04f 0900 	mov.w	r9, #0
 80038f4:	e016      	b.n	8003924 <d_print_comp+0xd60>
 80038f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038fe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003902:	4798      	blx	r3
 8003904:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003908:	3301      	adds	r3, #1
 800390a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800390e:	2200      	movs	r2, #0
 8003910:	2301      	movs	r3, #1
 8003912:	45b8      	cmp	r8, r7
 8003914:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003918:	f804 a002 	strb.w	sl, [r4, r2]
 800391c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003920:	f000 8727 	beq.w	8004772 <d_print_comp+0x1bae>
 8003924:	2bff      	cmp	r3, #255	; 0xff
 8003926:	4619      	mov	r1, r3
 8003928:	4620      	mov	r0, r4
 800392a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800392e:	d0e2      	beq.n	80038f6 <d_print_comp+0xd32>
 8003930:	461a      	mov	r2, r3
 8003932:	3301      	adds	r3, #1
 8003934:	e7ed      	b.n	8003912 <d_print_comp+0xd4e>
 8003936:	4f92      	ldr	r7, [pc, #584]	; (8003b80 <d_print_comp+0xfbc>)
 8003938:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800393c:	f107 080d 	add.w	r8, r7, #13
 8003940:	f04f 0900 	mov.w	r9, #0
 8003944:	e016      	b.n	8003974 <d_print_comp+0xdb0>
 8003946:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800394a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800394e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003952:	4798      	blx	r3
 8003954:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003958:	3301      	adds	r3, #1
 800395a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800395e:	2200      	movs	r2, #0
 8003960:	2301      	movs	r3, #1
 8003962:	45b8      	cmp	r8, r7
 8003964:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003968:	f804 a002 	strb.w	sl, [r4, r2]
 800396c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003970:	f000 8708 	beq.w	8004784 <d_print_comp+0x1bc0>
 8003974:	2bff      	cmp	r3, #255	; 0xff
 8003976:	4619      	mov	r1, r3
 8003978:	4620      	mov	r0, r4
 800397a:	f817 ab01 	ldrb.w	sl, [r7], #1
 800397e:	d0e2      	beq.n	8003946 <d_print_comp+0xd82>
 8003980:	461a      	mov	r2, r3
 8003982:	3301      	adds	r3, #1
 8003984:	e7ed      	b.n	8003962 <d_print_comp+0xd9e>
 8003986:	4f7f      	ldr	r7, [pc, #508]	; (8003b84 <d_print_comp+0xfc0>)
 8003988:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800398c:	f107 0818 	add.w	r8, r7, #24
 8003990:	f04f 0900 	mov.w	r9, #0
 8003994:	e016      	b.n	80039c4 <d_print_comp+0xe00>
 8003996:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800399a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800399e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039a2:	4798      	blx	r3
 80039a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039a8:	3301      	adds	r3, #1
 80039aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039ae:	2200      	movs	r2, #0
 80039b0:	2301      	movs	r3, #1
 80039b2:	45b8      	cmp	r8, r7
 80039b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039b8:	f804 a002 	strb.w	sl, [r4, r2]
 80039bc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039c0:	f000 8699 	beq.w	80046f6 <d_print_comp+0x1b32>
 80039c4:	2bff      	cmp	r3, #255	; 0xff
 80039c6:	4619      	mov	r1, r3
 80039c8:	4620      	mov	r0, r4
 80039ca:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039ce:	d0e2      	beq.n	8003996 <d_print_comp+0xdd2>
 80039d0:	461a      	mov	r2, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	e7ed      	b.n	80039b2 <d_print_comp+0xdee>
 80039d6:	4f6c      	ldr	r7, [pc, #432]	; (8003b88 <d_print_comp+0xfc4>)
 80039d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039dc:	f107 0808 	add.w	r8, r7, #8
 80039e0:	f04f 0900 	mov.w	r9, #0
 80039e4:	e016      	b.n	8003a14 <d_print_comp+0xe50>
 80039e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039f2:	4798      	blx	r3
 80039f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039f8:	3301      	adds	r3, #1
 80039fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039fe:	2200      	movs	r2, #0
 8003a00:	2301      	movs	r3, #1
 8003a02:	45b8      	cmp	r8, r7
 8003a04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a08:	f804 a002 	strb.w	sl, [r4, r2]
 8003a0c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a10:	f000 86a6 	beq.w	8004760 <d_print_comp+0x1b9c>
 8003a14:	2bff      	cmp	r3, #255	; 0xff
 8003a16:	4619      	mov	r1, r3
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003a1e:	d0e2      	beq.n	80039e6 <d_print_comp+0xe22>
 8003a20:	461a      	mov	r2, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	e7ed      	b.n	8003a02 <d_print_comp+0xe3e>
 8003a26:	4f59      	ldr	r7, [pc, #356]	; (8003b8c <d_print_comp+0xfc8>)
 8003a28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a2c:	f107 080b 	add.w	r8, r7, #11
 8003a30:	f04f 0900 	mov.w	r9, #0
 8003a34:	e016      	b.n	8003a64 <d_print_comp+0xea0>
 8003a36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a42:	4798      	blx	r3
 8003a44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2301      	movs	r3, #1
 8003a52:	45b8      	cmp	r8, r7
 8003a54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a58:	f804 a002 	strb.w	sl, [r4, r2]
 8003a5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a60:	f000 85cc 	beq.w	80045fc <d_print_comp+0x1a38>
 8003a64:	2bff      	cmp	r3, #255	; 0xff
 8003a66:	4619      	mov	r1, r3
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a6e:	d0e2      	beq.n	8003a36 <d_print_comp+0xe72>
 8003a70:	461a      	mov	r2, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	e7ed      	b.n	8003a52 <d_print_comp+0xe8e>
 8003a76:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003a7a:	2fff      	cmp	r7, #255	; 0xff
 8003a7c:	d112      	bne.n	8003aa4 <d_print_comp+0xee0>
 8003a7e:	f04f 0800 	mov.w	r8, #0
 8003a82:	4639      	mov	r1, r7
 8003a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a90:	4620      	mov	r0, r4
 8003a92:	4798      	blx	r3
 8003a94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a98:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4647      	mov	r7, r8
 8003aa0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aa4:	237e      	movs	r3, #126	; 0x7e
 8003aa6:	1c7a      	adds	r2, r7, #1
 8003aa8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003aac:	55e3      	strb	r3, [r4, r7]
 8003aae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	68ea      	ldr	r2, [r5, #12]
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff f884 	bl	8002bc4 <d_print_comp>
 8003abc:	9905      	ldr	r1, [sp, #20]
 8003abe:	686a      	ldr	r2, [r5, #4]
 8003ac0:	f7ff b973 	b.w	8002daa <d_print_comp+0x1e6>
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	68ea      	ldr	r2, [r5, #12]
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff f87b 	bl	8002bc4 <d_print_comp>
 8003ace:	9905      	ldr	r1, [sp, #20]
 8003ad0:	686a      	ldr	r2, [r5, #4]
 8003ad2:	f7ff b96a 	b.w	8002daa <d_print_comp+0x1e6>
 8003ad6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003ada:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ade:	f1b8 0f00 	cmp.w	r8, #0
 8003ae2:	f000 878b 	beq.w	80049fc <d_print_comp+0x1e38>
 8003ae6:	4e2a      	ldr	r6, [pc, #168]	; (8003b90 <d_print_comp+0xfcc>)
 8003ae8:	f04f 0900 	mov.w	r9, #0
 8003aec:	f106 0a06 	add.w	sl, r6, #6
 8003af0:	e015      	b.n	8003b1e <d_print_comp+0xf5a>
 8003af2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003af6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003afa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003afe:	4798      	blx	r3
 8003b00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b04:	3301      	adds	r3, #1
 8003b06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	45b2      	cmp	sl, r6
 8003b10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003b14:	54a7      	strb	r7, [r4, r2]
 8003b16:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b1a:	f000 868f 	beq.w	800483c <d_print_comp+0x1c78>
 8003b1e:	2bff      	cmp	r3, #255	; 0xff
 8003b20:	4619      	mov	r1, r3
 8003b22:	4620      	mov	r0, r4
 8003b24:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003b28:	d0e3      	beq.n	8003af2 <d_print_comp+0xf2e>
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	e7ee      	b.n	8003b0e <d_print_comp+0xf4a>
 8003b30:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 86d1 	bne.w	80048dc <d_print_comp+0x1d18>
 8003b3a:	f105 0108 	add.w	r1, r5, #8
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7fc fe4a 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8003b44:	4602      	mov	r2, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f001 8271 	beq.w	800502e <d_print_comp+0x246a>
 8003b4c:	7803      	ldrb	r3, [r0, #0]
 8003b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b50:	f001 8262 	beq.w	8005018 <d_print_comp+0x2454>
 8003b54:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff f82f 	bl	8002bc4 <d_print_comp>
 8003b66:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b6a:	9905      	ldr	r1, [sp, #20]
 8003b6c:	686a      	ldr	r2, [r5, #4]
 8003b6e:	f7ff b91c 	b.w	8002daa <d_print_comp+0x1e6>
 8003b72:	bf00      	nop
 8003b74:	080940c7 	.word	0x080940c7
 8003b78:	080940b3 	.word	0x080940b3
 8003b7c:	0809409f 	.word	0x0809409f
 8003b80:	08094090 	.word	0x08094090
 8003b84:	0809406b 	.word	0x0809406b
 8003b88:	0809405f 	.word	0x0809405f
 8003b8c:	08094054 	.word	0x08094054
 8003b90:	08094234 	.word	0x08094234
 8003b94:	2300      	movs	r3, #0
 8003b96:	0771      	lsls	r1, r6, #29
 8003b98:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003b9c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003ba0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003ba4:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003ba8:	68af      	ldr	r7, [r5, #8]
 8003baa:	d505      	bpl.n	8003bb8 <d_print_comp+0xff4>
 8003bac:	783b      	ldrb	r3, [r7, #0]
 8003bae:	b91b      	cbnz	r3, 8003bb8 <d_print_comp+0xff4>
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	2a06      	cmp	r2, #6
 8003bb4:	f001 8433 	beq.w	800541e <d_print_comp+0x285a>
 8003bb8:	463a      	mov	r2, r7
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff f801 	bl	8002bc4 <d_print_comp>
 8003bc2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8003bc8:	f001 8206 	beq.w	8004fd8 <d_print_comp+0x2414>
 8003bcc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003bd0:	2fff      	cmp	r7, #255	; 0xff
 8003bd2:	d112      	bne.n	8003bfa <d_print_comp+0x1036>
 8003bd4:	f04f 0a00 	mov.w	sl, #0
 8003bd8:	4639      	mov	r1, r7
 8003bda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bde:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003be6:	4620      	mov	r0, r4
 8003be8:	4798      	blx	r3
 8003bea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bee:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	4657      	mov	r7, sl
 8003bf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003bfa:	233c      	movs	r3, #60	; 0x3c
 8003bfc:	1c7a      	adds	r2, r7, #1
 8003bfe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c02:	55e3      	strb	r3, [r4, r7]
 8003c04:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c08:	4631      	mov	r1, r6
 8003c0a:	68ea      	ldr	r2, [r5, #12]
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7fe ffd9 	bl	8002bc4 <d_print_comp>
 8003c12:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003c16:	2b3e      	cmp	r3, #62	; 0x3e
 8003c18:	f001 806f 	beq.w	8004cfa <d_print_comp+0x2136>
 8003c1c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003c20:	2fff      	cmp	r7, #255	; 0xff
 8003c22:	d111      	bne.n	8003c48 <d_print_comp+0x1084>
 8003c24:	2600      	movs	r6, #0
 8003c26:	4639      	mov	r1, r7
 8003c28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c2c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003c30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c34:	4620      	mov	r0, r4
 8003c36:	4798      	blx	r3
 8003c38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c3c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c40:	3301      	adds	r3, #1
 8003c42:	4637      	mov	r7, r6
 8003c44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c48:	233e      	movs	r3, #62	; 0x3e
 8003c4a:	1c7a      	adds	r2, r7, #1
 8003c4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c50:	55e3      	strb	r3, [r4, r7]
 8003c52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c56:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c5a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c5e:	9905      	ldr	r1, [sp, #20]
 8003c60:	686a      	ldr	r2, [r5, #4]
 8003c62:	f7ff b8a2 	b.w	8002daa <d_print_comp+0x1e6>
 8003c66:	4fda      	ldr	r7, [pc, #872]	; (8003fd0 <d_print_comp+0x140c>)
 8003c68:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c6c:	f107 0811 	add.w	r8, r7, #17
 8003c70:	f04f 0900 	mov.w	r9, #0
 8003c74:	e016      	b.n	8003ca4 <d_print_comp+0x10e0>
 8003c76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c7e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c82:	4798      	blx	r3
 8003c84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2301      	movs	r3, #1
 8003c92:	45b8      	cmp	r8, r7
 8003c94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003c98:	f804 a002 	strb.w	sl, [r4, r2]
 8003c9c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003ca0:	f000 84eb 	beq.w	800467a <d_print_comp+0x1ab6>
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cae:	d0e2      	beq.n	8003c76 <d_print_comp+0x10b2>
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	e7ed      	b.n	8003c92 <d_print_comp+0x10ce>
 8003cb6:	4fc7      	ldr	r7, [pc, #796]	; (8003fd4 <d_print_comp+0x1410>)
 8003cb8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cbc:	f107 0815 	add.w	r8, r7, #21
 8003cc0:	f04f 0900 	mov.w	r9, #0
 8003cc4:	e016      	b.n	8003cf4 <d_print_comp+0x1130>
 8003cc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cd2:	4798      	blx	r3
 8003cd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	45b8      	cmp	r8, r7
 8003ce4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ce8:	f804 a002 	strb.w	sl, [r4, r2]
 8003cec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cf0:	f000 84cc 	beq.w	800468c <d_print_comp+0x1ac8>
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cfe:	d0e2      	beq.n	8003cc6 <d_print_comp+0x1102>
 8003d00:	461a      	mov	r2, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	e7ed      	b.n	8003ce2 <d_print_comp+0x111e>
 8003d06:	4fb4      	ldr	r7, [pc, #720]	; (8003fd8 <d_print_comp+0x1414>)
 8003d08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d0c:	f107 0819 	add.w	r8, r7, #25
 8003d10:	f04f 0900 	mov.w	r9, #0
 8003d14:	e016      	b.n	8003d44 <d_print_comp+0x1180>
 8003d16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d22:	4798      	blx	r3
 8003d24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2301      	movs	r3, #1
 8003d32:	45b8      	cmp	r8, r7
 8003d34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d38:	f804 a002 	strb.w	sl, [r4, r2]
 8003d3c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d40:	f000 8489 	beq.w	8004656 <d_print_comp+0x1a92>
 8003d44:	2bff      	cmp	r3, #255	; 0xff
 8003d46:	4619      	mov	r1, r3
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d4e:	d0e2      	beq.n	8003d16 <d_print_comp+0x1152>
 8003d50:	461a      	mov	r2, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	e7ed      	b.n	8003d32 <d_print_comp+0x116e>
 8003d56:	4fa1      	ldr	r7, [pc, #644]	; (8003fdc <d_print_comp+0x1418>)
 8003d58:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d5c:	f107 0816 	add.w	r8, r7, #22
 8003d60:	f04f 0900 	mov.w	r9, #0
 8003d64:	e016      	b.n	8003d94 <d_print_comp+0x11d0>
 8003d66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d72:	4798      	blx	r3
 8003d74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2301      	movs	r3, #1
 8003d82:	45b8      	cmp	r8, r7
 8003d84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d88:	f804 a002 	strb.w	sl, [r4, r2]
 8003d8c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d90:	f000 846a 	beq.w	8004668 <d_print_comp+0x1aa4>
 8003d94:	2bff      	cmp	r3, #255	; 0xff
 8003d96:	4619      	mov	r1, r3
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d9e:	d0e2      	beq.n	8003d66 <d_print_comp+0x11a2>
 8003da0:	461a      	mov	r2, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	e7ed      	b.n	8003d82 <d_print_comp+0x11be>
 8003da6:	4f8e      	ldr	r7, [pc, #568]	; (8003fe0 <d_print_comp+0x141c>)
 8003da8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dac:	f107 0813 	add.w	r8, r7, #19
 8003db0:	f04f 0900 	mov.w	r9, #0
 8003db4:	e016      	b.n	8003de4 <d_print_comp+0x1220>
 8003db6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dbe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003dc2:	4798      	blx	r3
 8003dc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	45b8      	cmp	r8, r7
 8003dd4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003dd8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ddc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003de0:	f000 8427 	beq.w	8004632 <d_print_comp+0x1a6e>
 8003de4:	2bff      	cmp	r3, #255	; 0xff
 8003de6:	4619      	mov	r1, r3
 8003de8:	4620      	mov	r0, r4
 8003dea:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dee:	d0e2      	beq.n	8003db6 <d_print_comp+0x11f2>
 8003df0:	461a      	mov	r2, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	e7ed      	b.n	8003dd2 <d_print_comp+0x120e>
 8003df6:	4f7b      	ldr	r7, [pc, #492]	; (8003fe4 <d_print_comp+0x1420>)
 8003df8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dfc:	f107 080f 	add.w	r8, r7, #15
 8003e00:	f04f 0900 	mov.w	r9, #0
 8003e04:	e016      	b.n	8003e34 <d_print_comp+0x1270>
 8003e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e0e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e12:	4798      	blx	r3
 8003e14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2301      	movs	r3, #1
 8003e22:	45b8      	cmp	r8, r7
 8003e24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e28:	f804 a002 	strb.w	sl, [r4, r2]
 8003e2c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e30:	f000 8408 	beq.w	8004644 <d_print_comp+0x1a80>
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	4619      	mov	r1, r3
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e3e:	d0e2      	beq.n	8003e06 <d_print_comp+0x1242>
 8003e40:	461a      	mov	r2, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	e7ed      	b.n	8003e22 <d_print_comp+0x125e>
 8003e46:	4f68      	ldr	r7, [pc, #416]	; (8003fe8 <d_print_comp+0x1424>)
 8003e48:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e4c:	f107 081a 	add.w	r8, r7, #26
 8003e50:	f04f 0900 	mov.w	r9, #0
 8003e54:	e016      	b.n	8003e84 <d_print_comp+0x12c0>
 8003e56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e62:	4798      	blx	r3
 8003e64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2301      	movs	r3, #1
 8003e72:	45b8      	cmp	r8, r7
 8003e74:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e78:	f804 a002 	strb.w	sl, [r4, r2]
 8003e7c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e80:	f000 83c5 	beq.w	800460e <d_print_comp+0x1a4a>
 8003e84:	2bff      	cmp	r3, #255	; 0xff
 8003e86:	4619      	mov	r1, r3
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e8e:	d0e2      	beq.n	8003e56 <d_print_comp+0x1292>
 8003e90:	461a      	mov	r2, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	e7ed      	b.n	8003e72 <d_print_comp+0x12ae>
 8003e96:	4f55      	ldr	r7, [pc, #340]	; (8003fec <d_print_comp+0x1428>)
 8003e98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e9c:	f107 0811 	add.w	r8, r7, #17
 8003ea0:	f04f 0900 	mov.w	r9, #0
 8003ea4:	e016      	b.n	8003ed4 <d_print_comp+0x1310>
 8003ea6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003eae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003eb2:	4798      	blx	r3
 8003eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	45b8      	cmp	r8, r7
 8003ec4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ec8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ecc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003ed0:	f000 83a6 	beq.w	8004620 <d_print_comp+0x1a5c>
 8003ed4:	2bff      	cmp	r3, #255	; 0xff
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003ede:	d0e2      	beq.n	8003ea6 <d_print_comp+0x12e2>
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	e7ed      	b.n	8003ec2 <d_print_comp+0x12fe>
 8003ee6:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003eea:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003eee:	2f00      	cmp	r7, #0
 8003ef0:	f040 85ae 	bne.w	8004a50 <d_print_comp+0x1e8c>
 8003ef4:	f899 2000 	ldrb.w	r2, [r9]
 8003ef8:	2a05      	cmp	r2, #5
 8003efa:	f001 8180 	beq.w	80051fe <d_print_comp+0x263a>
 8003efe:	f899 3000 	ldrb.w	r3, [r9]
 8003f02:	2b23      	cmp	r3, #35	; 0x23
 8003f04:	f000 85a0 	beq.w	8004a48 <d_print_comp+0x1e84>
 8003f08:	782a      	ldrb	r2, [r5, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	f000 859c 	beq.w	8004a48 <d_print_comp+0x1e84>
 8003f10:	2b24      	cmp	r3, #36	; 0x24
 8003f12:	f001 8162 	beq.w	80051da <d_print_comp+0x2616>
 8003f16:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f1a:	46a9      	mov	r9, r5
 8003f1c:	ab18      	add	r3, sp, #96	; 0x60
 8003f1e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003f22:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003f26:	2100      	movs	r1, #0
 8003f28:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003f2c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f30:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f34:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003f38:	e010      	b.n	8003f5c <d_print_comp+0x1398>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	ab18      	add	r3, sp, #96	; 0x60
 8003f3e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f42:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f46:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f4a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f56:	46a9      	mov	r9, r5
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	d0eb      	beq.n	8003f34 <d_print_comp+0x1370>
 8003f5c:	4631      	mov	r1, r6
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f7fe fe30 	bl	8002bc4 <d_print_comp>
 8003f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f66:	b923      	cbnz	r3, 8003f72 <d_print_comp+0x13ae>
 8003f68:	464a      	mov	r2, r9
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f001 fcbf 	bl	80058f0 <d_print_mod>
 8003f72:	9b08      	ldr	r3, [sp, #32]
 8003f74:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f78:	b10f      	cbz	r7, 8003f7e <d_print_comp+0x13ba>
 8003f7a:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003f7e:	9905      	ldr	r1, [sp, #20]
 8003f80:	686a      	ldr	r2, [r5, #4]
 8003f82:	f7fe bf12 	b.w	8002daa <d_print_comp+0x1e6>
 8003f86:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f8a:	4663      	mov	r3, ip
 8003f8c:	f1bc 0f00 	cmp.w	ip, #0
 8003f90:	d0c3      	beq.n	8003f1a <d_print_comp+0x1356>
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	b951      	cbnz	r1, 8003fac <d_print_comp+0x13e8>
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	f1a2 0e19 	sub.w	lr, r2, #25
 8003f9e:	f1be 0f02 	cmp.w	lr, #2
 8003fa2:	f201 80fc 	bhi.w	800519e <d_print_comp+0x25da>
 8003fa6:	4290      	cmp	r0, r2
 8003fa8:	f001 80f0 	beq.w	800518c <d_print_comp+0x25c8>
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ef      	bne.n	8003f92 <d_print_comp+0x13ce>
 8003fb2:	e7b2      	b.n	8003f1a <d_print_comp+0x1356>
 8003fb4:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003fb8:	2f00      	cmp	r7, #0
 8003fba:	f43e aef6 	beq.w	8002daa <d_print_comp+0x1e6>
 8003fbe:	4437      	add	r7, r6
 8003fc0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003fc4:	3f01      	subs	r7, #1
 8003fc6:	3e01      	subs	r6, #1
 8003fc8:	f04f 0800 	mov.w	r8, #0
 8003fcc:	e027      	b.n	800401e <d_print_comp+0x145a>
 8003fce:	bf00      	nop
 8003fd0:	0809416b 	.word	0x0809416b
 8003fd4:	08094153 	.word	0x08094153
 8003fd8:	08094137 	.word	0x08094137
 8003fdc:	0809411f 	.word	0x0809411f
 8003fe0:	0809410b 	.word	0x0809410b
 8003fe4:	080940fb 	.word	0x080940fb
 8003fe8:	080940df 	.word	0x080940df
 8003fec:	080940cb 	.word	0x080940cb
 8003ff0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ff8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003ffc:	4798      	blx	r3
 8003ffe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004002:	3301      	adds	r3, #1
 8004004:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004008:	2200      	movs	r2, #0
 800400a:	2301      	movs	r3, #1
 800400c:	42b7      	cmp	r7, r6
 800400e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004012:	f804 9002 	strb.w	r9, [r4, r2]
 8004016:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800401a:	f000 83ce 	beq.w	80047ba <d_print_comp+0x1bf6>
 800401e:	2bff      	cmp	r3, #255	; 0xff
 8004020:	4619      	mov	r1, r3
 8004022:	4620      	mov	r0, r4
 8004024:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8004028:	d0e2      	beq.n	8003ff0 <d_print_comp+0x142c>
 800402a:	461a      	mov	r2, r3
 800402c:	3301      	adds	r3, #1
 800402e:	e7ed      	b.n	800400c <d_print_comp+0x1448>
 8004030:	4631      	mov	r1, r6
 8004032:	68aa      	ldr	r2, [r5, #8]
 8004034:	4620      	mov	r0, r4
 8004036:	f7fe fdc5 	bl	8002bc4 <d_print_comp>
 800403a:	9905      	ldr	r1, [sp, #20]
 800403c:	686a      	ldr	r2, [r5, #4]
 800403e:	f7fe beb4 	b.w	8002daa <d_print_comp+0x1e6>
 8004042:	f016 0604 	ands.w	r6, r6, #4
 8004046:	68a8      	ldr	r0, [r5, #8]
 8004048:	f040 8505 	bne.w	8004a56 <d_print_comp+0x1e92>
 800404c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f43e aeaa 	beq.w	8002daa <d_print_comp+0x1e6>
 8004056:	eb07 0803 	add.w	r8, r7, r3
 800405a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800405e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004062:	3f01      	subs	r7, #1
 8004064:	46b1      	mov	r9, r6
 8004066:	e015      	b.n	8004094 <d_print_comp+0x14d0>
 8004068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800406c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004070:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004074:	4798      	blx	r3
 8004076:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800407a:	3301      	adds	r3, #1
 800407c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004080:	2200      	movs	r2, #0
 8004082:	2301      	movs	r3, #1
 8004084:	45b8      	cmp	r8, r7
 8004086:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800408a:	54a6      	strb	r6, [r4, r2]
 800408c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004090:	f000 8545 	beq.w	8004b1e <d_print_comp+0x1f5a>
 8004094:	2bff      	cmp	r3, #255	; 0xff
 8004096:	4619      	mov	r1, r3
 8004098:	4620      	mov	r0, r4
 800409a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800409e:	d0e3      	beq.n	8004068 <d_print_comp+0x14a4>
 80040a0:	461a      	mov	r2, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	e7ee      	b.n	8004084 <d_print_comp+0x14c0>
 80040a6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80040aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80040b6:	f1b8 0f00 	cmp.w	r8, #0
 80040ba:	d025      	beq.n	8004108 <d_print_comp+0x1544>
 80040bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	f10d 0920 	add.w	r9, sp, #32
 80040c6:	4623      	mov	r3, r4
 80040c8:	4617      	mov	r7, r2
 80040ca:	4644      	mov	r4, r8
 80040cc:	4692      	mov	sl, r2
 80040ce:	4649      	mov	r1, r9
 80040d0:	46ab      	mov	fp, r5
 80040d2:	4698      	mov	r8, r3
 80040d4:	7825      	ldrb	r5, [r4, #0]
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	600a      	str	r2, [r1, #0]
 80040da:	4628      	mov	r0, r5
 80040dc:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 80040e0:	60cb      	str	r3, [r1, #12]
 80040e2:	3701      	adds	r7, #1
 80040e4:	460a      	mov	r2, r1
 80040e6:	f7fc f97f 	bl	80003e8 <is_fnqual_component_type>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	f000 87c8 	beq.w	8005080 <d_print_comp+0x24bc>
 80040f0:	68a4      	ldr	r4, [r4, #8]
 80040f2:	2c00      	cmp	r4, #0
 80040f4:	f001 8057 	beq.w	80051a6 <d_print_comp+0x25e2>
 80040f8:	2f04      	cmp	r7, #4
 80040fa:	f101 0110 	add.w	r1, r1, #16
 80040fe:	d1e9      	bne.n	80040d4 <d_print_comp+0x1510>
 8004100:	4644      	mov	r4, r8
 8004102:	465d      	mov	r5, fp
 8004104:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 8004108:	2301      	movs	r3, #1
 800410a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800410e:	9905      	ldr	r1, [sp, #20]
 8004110:	686a      	ldr	r2, [r5, #4]
 8004112:	f7fe be4a 	b.w	8002daa <d_print_comp+0x1e6>
 8004116:	f016 0604 	ands.w	r6, r6, #4
 800411a:	68af      	ldr	r7, [r5, #8]
 800411c:	f040 8405 	bne.w	800492a <d_print_comp+0x1d66>
 8004120:	68eb      	ldr	r3, [r5, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f43e ae41 	beq.w	8002daa <d_print_comp+0x1e6>
 8004128:	eb07 0803 	add.w	r8, r7, r3
 800412c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004130:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004134:	3f01      	subs	r7, #1
 8004136:	46b1      	mov	r9, r6
 8004138:	e015      	b.n	8004166 <d_print_comp+0x15a2>
 800413a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800413e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004142:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004146:	4798      	blx	r3
 8004148:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800414c:	3301      	adds	r3, #1
 800414e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004152:	2200      	movs	r2, #0
 8004154:	2301      	movs	r3, #1
 8004156:	45b8      	cmp	r8, r7
 8004158:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800415c:	54a6      	strb	r6, [r4, r2]
 800415e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004162:	f000 84e0 	beq.w	8004b26 <d_print_comp+0x1f62>
 8004166:	2bff      	cmp	r3, #255	; 0xff
 8004168:	4619      	mov	r1, r3
 800416a:	4620      	mov	r0, r4
 800416c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004170:	d0e3      	beq.n	800413a <d_print_comp+0x1576>
 8004172:	461a      	mov	r2, r3
 8004174:	3301      	adds	r3, #1
 8004176:	e7ee      	b.n	8004156 <d_print_comp+0x1592>
 8004178:	68aa      	ldr	r2, [r5, #8]
 800417a:	4631      	mov	r1, r6
 800417c:	4620      	mov	r0, r4
 800417e:	f7fe fd21 	bl	8002bc4 <d_print_comp>
 8004182:	f016 0904 	ands.w	r9, r6, #4
 8004186:	f000 8681 	beq.w	8004e8c <d_print_comp+0x22c8>
 800418a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800418e:	2fff      	cmp	r7, #255	; 0xff
 8004190:	d112      	bne.n	80041b8 <d_print_comp+0x15f4>
 8004192:	f04f 0800 	mov.w	r8, #0
 8004196:	4639      	mov	r1, r7
 8004198:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800419c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80041a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041a4:	4620      	mov	r0, r4
 80041a6:	4798      	blx	r3
 80041a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041ac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80041b0:	3301      	adds	r3, #1
 80041b2:	4647      	mov	r7, r8
 80041b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041b8:	232e      	movs	r3, #46	; 0x2e
 80041ba:	1c7a      	adds	r2, r7, #1
 80041bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041c0:	55e3      	strb	r3, [r4, r7]
 80041c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041c6:	68ef      	ldr	r7, [r5, #12]
 80041c8:	783b      	ldrb	r3, [r7, #0]
 80041ca:	2b46      	cmp	r3, #70	; 0x46
 80041cc:	f000 873a 	beq.w	8005044 <d_print_comp+0x2480>
 80041d0:	463a      	mov	r2, r7
 80041d2:	4631      	mov	r1, r6
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fe fcf5 	bl	8002bc4 <d_print_comp>
 80041da:	9905      	ldr	r1, [sp, #20]
 80041dc:	686a      	ldr	r2, [r5, #4]
 80041de:	f7fe bde4 	b.w	8002daa <d_print_comp+0x1e6>
 80041e2:	2301      	movs	r3, #1
 80041e4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80041e8:	686a      	ldr	r2, [r5, #4]
 80041ea:	f7fe bdde 	b.w	8002daa <d_print_comp+0x1e6>
 80041ee:	3701      	adds	r7, #1
 80041f0:	454f      	cmp	r7, r9
 80041f2:	f47e ae2b 	bne.w	8002e4c <d_print_comp+0x288>
 80041f6:	9d03      	ldr	r5, [sp, #12]
 80041f8:	9905      	ldr	r1, [sp, #20]
 80041fa:	686a      	ldr	r2, [r5, #4]
 80041fc:	f7fe bdd5 	b.w	8002daa <d_print_comp+0x1e6>
 8004200:	4631      	mov	r1, r6
 8004202:	68aa      	ldr	r2, [r5, #8]
 8004204:	4620      	mov	r0, r4
 8004206:	f7fe fcdd 	bl	8002bc4 <d_print_comp>
 800420a:	9905      	ldr	r1, [sp, #20]
 800420c:	686a      	ldr	r2, [r5, #4]
 800420e:	f7fe bdcc 	b.w	8002daa <d_print_comp+0x1e6>
 8004212:	4631      	mov	r1, r6
 8004214:	68aa      	ldr	r2, [r5, #8]
 8004216:	4620      	mov	r0, r4
 8004218:	f7fe fcd4 	bl	8002bc4 <d_print_comp>
 800421c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004220:	2fff      	cmp	r7, #255	; 0xff
 8004222:	d111      	bne.n	8004248 <d_print_comp+0x1684>
 8004224:	2600      	movs	r6, #0
 8004226:	4639      	mov	r1, r7
 8004228:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800422c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004230:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004234:	4620      	mov	r0, r4
 8004236:	4798      	blx	r3
 8004238:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800423c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004240:	3301      	adds	r3, #1
 8004242:	4637      	mov	r7, r6
 8004244:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004248:	1c7a      	adds	r2, r7, #1
 800424a:	2329      	movs	r3, #41	; 0x29
 800424c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004250:	55e3      	strb	r3, [r4, r7]
 8004252:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004256:	686a      	ldr	r2, [r5, #4]
 8004258:	9905      	ldr	r1, [sp, #20]
 800425a:	f7fe bda6 	b.w	8002daa <d_print_comp+0x1e6>
 800425e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004262:	68aa      	ldr	r2, [r5, #8]
 8004264:	4fd3      	ldr	r7, [pc, #844]	; (80045b4 <d_print_comp+0x19f0>)
 8004266:	3301      	adds	r3, #1
 8004268:	4631      	mov	r1, r6
 800426a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800426e:	4620      	mov	r0, r4
 8004270:	f7fe fca8 	bl	8002bc4 <d_print_comp>
 8004274:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8004278:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800427c:	3a01      	subs	r2, #1
 800427e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8004282:	1cbe      	adds	r6, r7, #2
 8004284:	f04f 0800 	mov.w	r8, #0
 8004288:	e015      	b.n	80042b6 <d_print_comp+0x16f2>
 800428a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800428e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004292:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004296:	4798      	blx	r3
 8004298:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800429c:	3301      	adds	r3, #1
 800429e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042a2:	2200      	movs	r2, #0
 80042a4:	2301      	movs	r3, #1
 80042a6:	42b7      	cmp	r7, r6
 80042a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042ac:	f804 9002 	strb.w	r9, [r4, r2]
 80042b0:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80042b4:	d011      	beq.n	80042da <d_print_comp+0x1716>
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	4619      	mov	r1, r3
 80042ba:	4620      	mov	r0, r4
 80042bc:	f817 9b01 	ldrb.w	r9, [r7], #1
 80042c0:	d0e3      	beq.n	800428a <d_print_comp+0x16c6>
 80042c2:	461a      	mov	r2, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	e7ee      	b.n	80042a6 <d_print_comp+0x16e2>
 80042c8:	4631      	mov	r1, r6
 80042ca:	68aa      	ldr	r2, [r5, #8]
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fe fc79 	bl	8002bc4 <d_print_comp>
 80042d2:	9905      	ldr	r1, [sp, #20]
 80042d4:	686a      	ldr	r2, [r5, #4]
 80042d6:	f7fe bd68 	b.w	8002daa <d_print_comp+0x1e6>
 80042da:	68ea      	ldr	r2, [r5, #12]
 80042dc:	49b6      	ldr	r1, [pc, #728]	; (80045b8 <d_print_comp+0x19f4>)
 80042de:	3201      	adds	r2, #1
 80042e0:	a808      	add	r0, sp, #32
 80042e2:	f014 fe2f 	bl	8018f44 <sprintf>
 80042e6:	a808      	add	r0, sp, #32
 80042e8:	f002 fd5c 	bl	8006da4 <strlen>
 80042ec:	b328      	cbz	r0, 800433a <d_print_comp+0x1776>
 80042ee:	ae08      	add	r6, sp, #32
 80042f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042f4:	1837      	adds	r7, r6, r0
 80042f6:	f04f 0800 	mov.w	r8, #0
 80042fa:	e015      	b.n	8004328 <d_print_comp+0x1764>
 80042fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004300:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004304:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004308:	4798      	blx	r3
 800430a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800430e:	3301      	adds	r3, #1
 8004310:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004314:	2200      	movs	r2, #0
 8004316:	2301      	movs	r3, #1
 8004318:	42be      	cmp	r6, r7
 800431a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800431e:	f804 9002 	strb.w	r9, [r4, r2]
 8004322:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004326:	d00a      	beq.n	800433e <d_print_comp+0x177a>
 8004328:	2bff      	cmp	r3, #255	; 0xff
 800432a:	4619      	mov	r1, r3
 800432c:	4620      	mov	r0, r4
 800432e:	f816 9b01 	ldrb.w	r9, [r6], #1
 8004332:	d0e3      	beq.n	80042fc <d_print_comp+0x1738>
 8004334:	461a      	mov	r2, r3
 8004336:	3301      	adds	r3, #1
 8004338:	e7ee      	b.n	8004318 <d_print_comp+0x1754>
 800433a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800433e:	2bff      	cmp	r3, #255	; 0xff
 8004340:	d110      	bne.n	8004364 <d_print_comp+0x17a0>
 8004342:	2600      	movs	r6, #0
 8004344:	4619      	mov	r1, r3
 8004346:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800434a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800434e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004352:	4620      	mov	r0, r4
 8004354:	4798      	blx	r3
 8004356:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800435a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800435e:	3301      	adds	r3, #1
 8004360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004364:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004368:	9905      	ldr	r1, [sp, #20]
 800436a:	1c50      	adds	r0, r2, #1
 800436c:	237d      	movs	r3, #125	; 0x7d
 800436e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004372:	54a3      	strb	r3, [r4, r2]
 8004374:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004378:	686a      	ldr	r2, [r5, #4]
 800437a:	f7fe bd16 	b.w	8002daa <d_print_comp+0x1e6>
 800437e:	4631      	mov	r1, r6
 8004380:	68aa      	ldr	r2, [r5, #8]
 8004382:	4620      	mov	r0, r4
 8004384:	f7fe fc1e 	bl	8002bc4 <d_print_comp>
 8004388:	9905      	ldr	r1, [sp, #20]
 800438a:	686a      	ldr	r2, [r5, #4]
 800438c:	f7fe bd0d 	b.w	8002daa <d_print_comp+0x1e6>
 8004390:	68aa      	ldr	r2, [r5, #8]
 8004392:	4989      	ldr	r1, [pc, #548]	; (80045b8 <d_print_comp+0x19f4>)
 8004394:	3201      	adds	r2, #1
 8004396:	a808      	add	r0, sp, #32
 8004398:	f014 fdd4 	bl	8018f44 <sprintf>
 800439c:	a808      	add	r0, sp, #32
 800439e:	f002 fd01 	bl	8006da4 <strlen>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d071      	beq.n	800448a <d_print_comp+0x18c6>
 80043a6:	ae08      	add	r6, sp, #32
 80043a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80043ac:	1837      	adds	r7, r6, r0
 80043ae:	f04f 0800 	mov.w	r8, #0
 80043b2:	e015      	b.n	80043e0 <d_print_comp+0x181c>
 80043b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043c0:	4798      	blx	r3
 80043c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043c6:	3301      	adds	r3, #1
 80043c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043cc:	2200      	movs	r2, #0
 80043ce:	2301      	movs	r3, #1
 80043d0:	42b7      	cmp	r7, r6
 80043d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043d6:	f804 9002 	strb.w	r9, [r4, r2]
 80043da:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80043de:	d056      	beq.n	800448e <d_print_comp+0x18ca>
 80043e0:	2bff      	cmp	r3, #255	; 0xff
 80043e2:	4619      	mov	r1, r3
 80043e4:	4620      	mov	r0, r4
 80043e6:	f816 9b01 	ldrb.w	r9, [r6], #1
 80043ea:	d0e3      	beq.n	80043b4 <d_print_comp+0x17f0>
 80043ec:	461a      	mov	r2, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	e7ee      	b.n	80043d0 <d_print_comp+0x180c>
 80043f2:	4631      	mov	r1, r6
 80043f4:	68ea      	ldr	r2, [r5, #12]
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fe fbe4 	bl	8002bc4 <d_print_comp>
 80043fc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004400:	2fff      	cmp	r7, #255	; 0xff
 8004402:	d111      	bne.n	8004428 <d_print_comp+0x1864>
 8004404:	2600      	movs	r6, #0
 8004406:	4639      	mov	r1, r7
 8004408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800440c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004414:	4620      	mov	r0, r4
 8004416:	4798      	blx	r3
 8004418:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800441c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004420:	3301      	adds	r3, #1
 8004422:	4637      	mov	r7, r6
 8004424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004428:	1c7a      	adds	r2, r7, #1
 800442a:	235d      	movs	r3, #93	; 0x5d
 800442c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004430:	55e3      	strb	r3, [r4, r7]
 8004432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004436:	686a      	ldr	r2, [r5, #4]
 8004438:	9905      	ldr	r1, [sp, #20]
 800443a:	f7fe bcb6 	b.w	8002daa <d_print_comp+0x1e6>
 800443e:	4631      	mov	r1, r6
 8004440:	68ea      	ldr	r2, [r5, #12]
 8004442:	4620      	mov	r0, r4
 8004444:	f7fe fbbe 	bl	8002bc4 <d_print_comp>
 8004448:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800444c:	2fff      	cmp	r7, #255	; 0xff
 800444e:	d111      	bne.n	8004474 <d_print_comp+0x18b0>
 8004450:	2600      	movs	r6, #0
 8004452:	4639      	mov	r1, r7
 8004454:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004458:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800445c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004460:	4620      	mov	r0, r4
 8004462:	4798      	blx	r3
 8004464:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004468:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800446c:	3301      	adds	r3, #1
 800446e:	4637      	mov	r7, r6
 8004470:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004474:	1c7a      	adds	r2, r7, #1
 8004476:	235d      	movs	r3, #93	; 0x5d
 8004478:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800447c:	55e3      	strb	r3, [r4, r7]
 800447e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004482:	686a      	ldr	r2, [r5, #4]
 8004484:	9905      	ldr	r1, [sp, #20]
 8004486:	f7fe bc90 	b.w	8002daa <d_print_comp+0x1e6>
 800448a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d110      	bne.n	80044b4 <d_print_comp+0x18f0>
 8004492:	2600      	movs	r6, #0
 8004494:	4619      	mov	r1, r3
 8004496:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800449a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800449e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044a2:	4620      	mov	r0, r4
 80044a4:	4798      	blx	r3
 80044a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044aa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80044ae:	3301      	adds	r3, #1
 80044b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044b4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80044b8:	9905      	ldr	r1, [sp, #20]
 80044ba:	1c50      	adds	r0, r2, #1
 80044bc:	237d      	movs	r3, #125	; 0x7d
 80044be:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80044c2:	54a3      	strb	r3, [r4, r2]
 80044c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80044c8:	686a      	ldr	r2, [r5, #4]
 80044ca:	f7fe bc6e 	b.w	8002daa <d_print_comp+0x1e6>
 80044ce:	4631      	mov	r1, r6
 80044d0:	68aa      	ldr	r2, [r5, #8]
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7fe fb76 	bl	8002bc4 <d_print_comp>
 80044d8:	9905      	ldr	r1, [sp, #20]
 80044da:	686a      	ldr	r2, [r5, #4]
 80044dc:	f7fe bc65 	b.w	8002daa <d_print_comp+0x1e6>
 80044e0:	9905      	ldr	r1, [sp, #20]
 80044e2:	686a      	ldr	r2, [r5, #4]
 80044e4:	f7fe bc61 	b.w	8002daa <d_print_comp+0x1e6>
 80044e8:	4631      	mov	r1, r6
 80044ea:	68aa      	ldr	r2, [r5, #8]
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fe fb69 	bl	8002bc4 <d_print_comp>
 80044f2:	9905      	ldr	r1, [sp, #20]
 80044f4:	686a      	ldr	r2, [r5, #4]
 80044f6:	f7fe bc58 	b.w	8002daa <d_print_comp+0x1e6>
 80044fa:	4631      	mov	r1, r6
 80044fc:	68ea      	ldr	r2, [r5, #12]
 80044fe:	4620      	mov	r0, r4
 8004500:	f7fe fb60 	bl	8002bc4 <d_print_comp>
 8004504:	9905      	ldr	r1, [sp, #20]
 8004506:	686a      	ldr	r2, [r5, #4]
 8004508:	f7fe bc4f 	b.w	8002daa <d_print_comp+0x1e6>
 800450c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8004510:	b13a      	cbz	r2, 8004522 <d_print_comp+0x195e>
 8004512:	ab18      	add	r3, sp, #96	; 0x60
 8004514:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8004518:	f843 1d40 	str.w	r1, [r3, #-64]!
 800451c:	9209      	str	r2, [sp, #36]	; 0x24
 800451e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004522:	68aa      	ldr	r2, [r5, #8]
 8004524:	7813      	ldrb	r3, [r2, #0]
 8004526:	2b04      	cmp	r3, #4
 8004528:	f000 84d6 	beq.w	8004ed8 <d_print_comp+0x2314>
 800452c:	4631      	mov	r1, r6
 800452e:	4620      	mov	r0, r4
 8004530:	f7fe fb48 	bl	8002bc4 <d_print_comp>
 8004534:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004538:	b113      	cbz	r3, 8004540 <d_print_comp+0x197c>
 800453a:	9b08      	ldr	r3, [sp, #32]
 800453c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004540:	9905      	ldr	r1, [sp, #20]
 8004542:	686a      	ldr	r2, [r5, #4]
 8004544:	f7fe bc31 	b.w	8002daa <d_print_comp+0x1e6>
 8004548:	f8da 6004 	ldr.w	r6, [sl, #4]
 800454c:	7832      	ldrb	r2, [r6, #0]
 800454e:	3a61      	subs	r2, #97	; 0x61
 8004550:	2a19      	cmp	r2, #25
 8004552:	d81d      	bhi.n	8004590 <d_print_comp+0x19cc>
 8004554:	2bff      	cmp	r3, #255	; 0xff
 8004556:	d110      	bne.n	800457a <d_print_comp+0x19b6>
 8004558:	2600      	movs	r6, #0
 800455a:	4619      	mov	r1, r3
 800455c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004560:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004564:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004568:	4620      	mov	r0, r4
 800456a:	4798      	blx	r3
 800456c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004570:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004574:	3301      	adds	r3, #1
 8004576:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800457a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800457e:	2320      	movs	r3, #32
 8004580:	1c51      	adds	r1, r2, #1
 8004582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004586:	54a3      	strb	r3, [r4, r2]
 8004588:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800458c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004590:	19f3      	adds	r3, r6, r7
 8004592:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004596:	2b20      	cmp	r3, #32
 8004598:	bf08      	it	eq
 800459a:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 800459e:	2f00      	cmp	r7, #0
 80045a0:	f000 86fb 	beq.w	800539a <d_print_comp+0x27d6>
 80045a4:	3e01      	subs	r6, #1
 80045a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80045aa:	4437      	add	r7, r6
 80045ac:	f04f 0800 	mov.w	r8, #0
 80045b0:	e01b      	b.n	80045ea <d_print_comp+0x1a26>
 80045b2:	bf00      	nop
 80045b4:	08094288 	.word	0x08094288
 80045b8:	08093fd8 	.word	0x08093fd8
 80045bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045c8:	4798      	blx	r3
 80045ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045d4:	2200      	movs	r2, #0
 80045d6:	2301      	movs	r3, #1
 80045d8:	42be      	cmp	r6, r7
 80045da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80045de:	f804 9002 	strb.w	r9, [r4, r2]
 80045e2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80045e6:	f000 80ec 	beq.w	80047c2 <d_print_comp+0x1bfe>
 80045ea:	2bff      	cmp	r3, #255	; 0xff
 80045ec:	4619      	mov	r1, r3
 80045ee:	4620      	mov	r0, r4
 80045f0:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 80045f4:	d0e2      	beq.n	80045bc <d_print_comp+0x19f8>
 80045f6:	461a      	mov	r2, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	e7ed      	b.n	80045d8 <d_print_comp+0x1a14>
 80045fc:	4631      	mov	r1, r6
 80045fe:	68aa      	ldr	r2, [r5, #8]
 8004600:	4620      	mov	r0, r4
 8004602:	f7fe fadf 	bl	8002bc4 <d_print_comp>
 8004606:	9905      	ldr	r1, [sp, #20]
 8004608:	686a      	ldr	r2, [r5, #4]
 800460a:	f7fe bbce 	b.w	8002daa <d_print_comp+0x1e6>
 800460e:	4631      	mov	r1, r6
 8004610:	68aa      	ldr	r2, [r5, #8]
 8004612:	4620      	mov	r0, r4
 8004614:	f7fe fad6 	bl	8002bc4 <d_print_comp>
 8004618:	9905      	ldr	r1, [sp, #20]
 800461a:	686a      	ldr	r2, [r5, #4]
 800461c:	f7fe bbc5 	b.w	8002daa <d_print_comp+0x1e6>
 8004620:	4631      	mov	r1, r6
 8004622:	68aa      	ldr	r2, [r5, #8]
 8004624:	4620      	mov	r0, r4
 8004626:	f7fe facd 	bl	8002bc4 <d_print_comp>
 800462a:	9905      	ldr	r1, [sp, #20]
 800462c:	686a      	ldr	r2, [r5, #4]
 800462e:	f7fe bbbc 	b.w	8002daa <d_print_comp+0x1e6>
 8004632:	4631      	mov	r1, r6
 8004634:	68aa      	ldr	r2, [r5, #8]
 8004636:	4620      	mov	r0, r4
 8004638:	f7fe fac4 	bl	8002bc4 <d_print_comp>
 800463c:	9905      	ldr	r1, [sp, #20]
 800463e:	686a      	ldr	r2, [r5, #4]
 8004640:	f7fe bbb3 	b.w	8002daa <d_print_comp+0x1e6>
 8004644:	4631      	mov	r1, r6
 8004646:	68aa      	ldr	r2, [r5, #8]
 8004648:	4620      	mov	r0, r4
 800464a:	f7fe fabb 	bl	8002bc4 <d_print_comp>
 800464e:	9905      	ldr	r1, [sp, #20]
 8004650:	686a      	ldr	r2, [r5, #4]
 8004652:	f7fe bbaa 	b.w	8002daa <d_print_comp+0x1e6>
 8004656:	4631      	mov	r1, r6
 8004658:	68aa      	ldr	r2, [r5, #8]
 800465a:	4620      	mov	r0, r4
 800465c:	f7fe fab2 	bl	8002bc4 <d_print_comp>
 8004660:	9905      	ldr	r1, [sp, #20]
 8004662:	686a      	ldr	r2, [r5, #4]
 8004664:	f7fe bba1 	b.w	8002daa <d_print_comp+0x1e6>
 8004668:	4631      	mov	r1, r6
 800466a:	68aa      	ldr	r2, [r5, #8]
 800466c:	4620      	mov	r0, r4
 800466e:	f7fe faa9 	bl	8002bc4 <d_print_comp>
 8004672:	9905      	ldr	r1, [sp, #20]
 8004674:	686a      	ldr	r2, [r5, #4]
 8004676:	f7fe bb98 	b.w	8002daa <d_print_comp+0x1e6>
 800467a:	4631      	mov	r1, r6
 800467c:	68aa      	ldr	r2, [r5, #8]
 800467e:	4620      	mov	r0, r4
 8004680:	f7fe faa0 	bl	8002bc4 <d_print_comp>
 8004684:	9905      	ldr	r1, [sp, #20]
 8004686:	686a      	ldr	r2, [r5, #4]
 8004688:	f7fe bb8f 	b.w	8002daa <d_print_comp+0x1e6>
 800468c:	4fcf      	ldr	r7, [pc, #828]	; (80049cc <d_print_comp+0x1e08>)
 800468e:	68ea      	ldr	r2, [r5, #12]
 8004690:	4631      	mov	r1, r6
 8004692:	4620      	mov	r0, r4
 8004694:	f7fe fa96 	bl	8002bc4 <d_print_comp>
 8004698:	f107 0805 	add.w	r8, r7, #5
 800469c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046a0:	f04f 0900 	mov.w	r9, #0
 80046a4:	e015      	b.n	80046d2 <d_print_comp+0x1b0e>
 80046a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046b2:	4798      	blx	r3
 80046b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80046b8:	3301      	adds	r3, #1
 80046ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80046be:	2200      	movs	r2, #0
 80046c0:	2301      	movs	r3, #1
 80046c2:	4547      	cmp	r7, r8
 80046c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046c8:	f804 a002 	strb.w	sl, [r4, r2]
 80046cc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80046d0:	d008      	beq.n	80046e4 <d_print_comp+0x1b20>
 80046d2:	2bff      	cmp	r3, #255	; 0xff
 80046d4:	4619      	mov	r1, r3
 80046d6:	4620      	mov	r0, r4
 80046d8:	f817 ab01 	ldrb.w	sl, [r7], #1
 80046dc:	d0e3      	beq.n	80046a6 <d_print_comp+0x1ae2>
 80046de:	461a      	mov	r2, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	e7ee      	b.n	80046c2 <d_print_comp+0x1afe>
 80046e4:	4631      	mov	r1, r6
 80046e6:	68aa      	ldr	r2, [r5, #8]
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7fe fa6b 	bl	8002bc4 <d_print_comp>
 80046ee:	9905      	ldr	r1, [sp, #20]
 80046f0:	686a      	ldr	r2, [r5, #4]
 80046f2:	f7fe bb5a 	b.w	8002daa <d_print_comp+0x1e6>
 80046f6:	4fb6      	ldr	r7, [pc, #728]	; (80049d0 <d_print_comp+0x1e0c>)
 80046f8:	68aa      	ldr	r2, [r5, #8]
 80046fa:	4631      	mov	r1, r6
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7fe fa61 	bl	8002bc4 <d_print_comp>
 8004702:	f107 0804 	add.w	r8, r7, #4
 8004706:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800470a:	f04f 0900 	mov.w	r9, #0
 800470e:	e015      	b.n	800473c <d_print_comp+0x1b78>
 8004710:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004714:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004718:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800471c:	4798      	blx	r3
 800471e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004722:	3301      	adds	r3, #1
 8004724:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004728:	2200      	movs	r2, #0
 800472a:	2301      	movs	r3, #1
 800472c:	45b8      	cmp	r8, r7
 800472e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004732:	f804 a002 	strb.w	sl, [r4, r2]
 8004736:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800473a:	d008      	beq.n	800474e <d_print_comp+0x1b8a>
 800473c:	2bff      	cmp	r3, #255	; 0xff
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004746:	d0e3      	beq.n	8004710 <d_print_comp+0x1b4c>
 8004748:	461a      	mov	r2, r3
 800474a:	3301      	adds	r3, #1
 800474c:	e7ee      	b.n	800472c <d_print_comp+0x1b68>
 800474e:	4631      	mov	r1, r6
 8004750:	68ea      	ldr	r2, [r5, #12]
 8004752:	4620      	mov	r0, r4
 8004754:	f7fe fa36 	bl	8002bc4 <d_print_comp>
 8004758:	9905      	ldr	r1, [sp, #20]
 800475a:	686a      	ldr	r2, [r5, #4]
 800475c:	f7fe bb25 	b.w	8002daa <d_print_comp+0x1e6>
 8004760:	4631      	mov	r1, r6
 8004762:	68aa      	ldr	r2, [r5, #8]
 8004764:	4620      	mov	r0, r4
 8004766:	f7fe fa2d 	bl	8002bc4 <d_print_comp>
 800476a:	9905      	ldr	r1, [sp, #20]
 800476c:	686a      	ldr	r2, [r5, #4]
 800476e:	f7fe bb1c 	b.w	8002daa <d_print_comp+0x1e6>
 8004772:	4631      	mov	r1, r6
 8004774:	68aa      	ldr	r2, [r5, #8]
 8004776:	4620      	mov	r0, r4
 8004778:	f7fe fa24 	bl	8002bc4 <d_print_comp>
 800477c:	9905      	ldr	r1, [sp, #20]
 800477e:	686a      	ldr	r2, [r5, #4]
 8004780:	f7fe bb13 	b.w	8002daa <d_print_comp+0x1e6>
 8004784:	4631      	mov	r1, r6
 8004786:	68aa      	ldr	r2, [r5, #8]
 8004788:	4620      	mov	r0, r4
 800478a:	f7fe fa1b 	bl	8002bc4 <d_print_comp>
 800478e:	9905      	ldr	r1, [sp, #20]
 8004790:	686a      	ldr	r2, [r5, #4]
 8004792:	f7fe bb0a 	b.w	8002daa <d_print_comp+0x1e6>
 8004796:	4631      	mov	r1, r6
 8004798:	68aa      	ldr	r2, [r5, #8]
 800479a:	4620      	mov	r0, r4
 800479c:	f7fe fa12 	bl	8002bc4 <d_print_comp>
 80047a0:	9905      	ldr	r1, [sp, #20]
 80047a2:	686a      	ldr	r2, [r5, #4]
 80047a4:	f7fe bb01 	b.w	8002daa <d_print_comp+0x1e6>
 80047a8:	4631      	mov	r1, r6
 80047aa:	68aa      	ldr	r2, [r5, #8]
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7fe fa09 	bl	8002bc4 <d_print_comp>
 80047b2:	9905      	ldr	r1, [sp, #20]
 80047b4:	686a      	ldr	r2, [r5, #4]
 80047b6:	f7fe baf8 	b.w	8002daa <d_print_comp+0x1e6>
 80047ba:	9905      	ldr	r1, [sp, #20]
 80047bc:	686a      	ldr	r2, [r5, #4]
 80047be:	f7fe baf4 	b.w	8002daa <d_print_comp+0x1e6>
 80047c2:	9905      	ldr	r1, [sp, #20]
 80047c4:	686a      	ldr	r2, [r5, #4]
 80047c6:	f7fe baf0 	b.w	8002daa <d_print_comp+0x1e6>
 80047ca:	4631      	mov	r1, r6
 80047cc:	68ea      	ldr	r2, [r5, #12]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	4620      	mov	r0, r4
 80047d2:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 80047d6:	f7fe f9f5 	bl	8002bc4 <d_print_comp>
 80047da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	4296      	cmp	r6, r2
 80047e2:	f000 8441 	beq.w	8005068 <d_print_comp+0x24a4>
 80047e6:	9905      	ldr	r1, [sp, #20]
 80047e8:	686a      	ldr	r2, [r5, #4]
 80047ea:	f7fe bade 	b.w	8002daa <d_print_comp+0x1e6>
 80047ee:	4e79      	ldr	r6, [pc, #484]	; (80049d4 <d_print_comp+0x1e10>)
 80047f0:	4690      	mov	r8, r2
 80047f2:	f106 0906 	add.w	r9, r6, #6
 80047f6:	e014      	b.n	8004822 <d_print_comp+0x1c5e>
 80047f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004800:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004804:	4798      	blx	r3
 8004806:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800480a:	3301      	adds	r3, #1
 800480c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004810:	2200      	movs	r2, #0
 8004812:	2301      	movs	r3, #1
 8004814:	45b1      	cmp	r9, r6
 8004816:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800481a:	54a7      	strb	r7, [r4, r2]
 800481c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004820:	d008      	beq.n	8004834 <d_print_comp+0x1c70>
 8004822:	2bff      	cmp	r3, #255	; 0xff
 8004824:	4619      	mov	r1, r3
 8004826:	4620      	mov	r0, r4
 8004828:	f816 7b01 	ldrb.w	r7, [r6], #1
 800482c:	d0e4      	beq.n	80047f8 <d_print_comp+0x1c34>
 800482e:	461a      	mov	r2, r3
 8004830:	3301      	adds	r3, #1
 8004832:	e7ef      	b.n	8004814 <d_print_comp+0x1c50>
 8004834:	9905      	ldr	r1, [sp, #20]
 8004836:	686a      	ldr	r2, [r5, #4]
 8004838:	f7fe bab7 	b.w	8002daa <d_print_comp+0x1e6>
 800483c:	4642      	mov	r2, r8
 800483e:	a808      	add	r0, sp, #32
 8004840:	4965      	ldr	r1, [pc, #404]	; (80049d8 <d_print_comp+0x1e14>)
 8004842:	f014 fb7f 	bl	8018f44 <sprintf>
 8004846:	a808      	add	r0, sp, #32
 8004848:	f002 faac 	bl	8006da4 <strlen>
 800484c:	b328      	cbz	r0, 800489a <d_print_comp+0x1cd6>
 800484e:	ae08      	add	r6, sp, #32
 8004850:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004854:	eb06 0900 	add.w	r9, r6, r0
 8004858:	f04f 0800 	mov.w	r8, #0
 800485c:	e014      	b.n	8004888 <d_print_comp+0x1cc4>
 800485e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004862:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004866:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800486a:	4798      	blx	r3
 800486c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004870:	3301      	adds	r3, #1
 8004872:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004876:	2200      	movs	r2, #0
 8004878:	2301      	movs	r3, #1
 800487a:	45b1      	cmp	r9, r6
 800487c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004880:	54a7      	strb	r7, [r4, r2]
 8004882:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004886:	d008      	beq.n	800489a <d_print_comp+0x1cd6>
 8004888:	2bff      	cmp	r3, #255	; 0xff
 800488a:	4619      	mov	r1, r3
 800488c:	4620      	mov	r0, r4
 800488e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004892:	d0e4      	beq.n	800485e <d_print_comp+0x1c9a>
 8004894:	461a      	mov	r2, r3
 8004896:	3301      	adds	r3, #1
 8004898:	e7ef      	b.n	800487a <d_print_comp+0x1cb6>
 800489a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800489e:	2fff      	cmp	r7, #255	; 0xff
 80048a0:	d111      	bne.n	80048c6 <d_print_comp+0x1d02>
 80048a2:	2600      	movs	r6, #0
 80048a4:	4639      	mov	r1, r7
 80048a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048aa:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80048ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048b2:	4620      	mov	r0, r4
 80048b4:	4798      	blx	r3
 80048b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048ba:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80048be:	3301      	adds	r3, #1
 80048c0:	4637      	mov	r7, r6
 80048c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048c6:	1c7a      	adds	r2, r7, #1
 80048c8:	237d      	movs	r3, #125	; 0x7d
 80048ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048ce:	55e3      	strb	r3, [r4, r7]
 80048d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048d4:	686a      	ldr	r2, [r5, #4]
 80048d6:	9905      	ldr	r1, [sp, #20]
 80048d8:	f7fe ba67 	b.w	8002daa <d_print_comp+0x1e6>
 80048dc:	4e3f      	ldr	r6, [pc, #252]	; (80049dc <d_print_comp+0x1e18>)
 80048de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048e2:	f106 0905 	add.w	r9, r6, #5
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	e015      	b.n	8004918 <d_print_comp+0x1d54>
 80048ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80048f8:	4798      	blx	r3
 80048fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048fe:	3301      	adds	r3, #1
 8004900:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004904:	2200      	movs	r2, #0
 8004906:	2301      	movs	r3, #1
 8004908:	45b1      	cmp	r9, r6
 800490a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800490e:	54a7      	strb	r7, [r4, r2]
 8004910:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004914:	f000 80cf 	beq.w	8004ab6 <d_print_comp+0x1ef2>
 8004918:	2bff      	cmp	r3, #255	; 0xff
 800491a:	4619      	mov	r1, r3
 800491c:	4620      	mov	r0, r4
 800491e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004922:	d0e3      	beq.n	80048ec <d_print_comp+0x1d28>
 8004924:	461a      	mov	r2, r3
 8004926:	3301      	adds	r3, #1
 8004928:	e7ee      	b.n	8004908 <d_print_comp+0x1d44>
 800492a:	68ee      	ldr	r6, [r5, #12]
 800492c:	443e      	add	r6, r7
 800492e:	42be      	cmp	r6, r7
 8004930:	f67e aa3b 	bls.w	8002daa <d_print_comp+0x1e6>
 8004934:	f04f 0800 	mov.w	r8, #0
 8004938:	e018      	b.n	800496c <d_print_comp+0x1da8>
 800493a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800493e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004942:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004946:	4620      	mov	r0, r4
 8004948:	4798      	blx	r3
 800494a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800494e:	3301      	adds	r3, #1
 8004950:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004954:	2100      	movs	r1, #0
 8004956:	2301      	movs	r3, #1
 8004958:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800495c:	f804 9001 	strb.w	r9, [r4, r1]
 8004960:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004964:	3701      	adds	r7, #1
 8004966:	42be      	cmp	r6, r7
 8004968:	f240 80e1 	bls.w	8004b2e <d_print_comp+0x1f6a>
 800496c:	1bf3      	subs	r3, r6, r7
 800496e:	2b03      	cmp	r3, #3
 8004970:	f897 9000 	ldrb.w	r9, [r7]
 8004974:	dd02      	ble.n	800497c <d_print_comp+0x1db8>
 8004976:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800497a:	d005      	beq.n	8004988 <d_print_comp+0x1dc4>
 800497c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004980:	29ff      	cmp	r1, #255	; 0xff
 8004982:	d0da      	beq.n	800493a <d_print_comp+0x1d76>
 8004984:	1c4b      	adds	r3, r1, #1
 8004986:	e7e7      	b.n	8004958 <d_print_comp+0x1d94>
 8004988:	787b      	ldrb	r3, [r7, #1]
 800498a:	2b5f      	cmp	r3, #95	; 0x5f
 800498c:	d1f6      	bne.n	800497c <d_print_comp+0x1db8>
 800498e:	78bb      	ldrb	r3, [r7, #2]
 8004990:	2b55      	cmp	r3, #85	; 0x55
 8004992:	d1f3      	bne.n	800497c <d_print_comp+0x1db8>
 8004994:	1cf9      	adds	r1, r7, #3
 8004996:	2000      	movs	r0, #0
 8004998:	e002      	b.n	80049a0 <d_print_comp+0x1ddc>
 800499a:	4613      	mov	r3, r2
 800499c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80049a0:	428e      	cmp	r6, r1
 80049a2:	468a      	mov	sl, r1
 80049a4:	d9ea      	bls.n	800497c <d_print_comp+0x1db8>
 80049a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80049ae:	fa5f fe82 	uxtb.w	lr, r2
 80049b2:	f1be 0f09 	cmp.w	lr, #9
 80049b6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80049ba:	d9ee      	bls.n	800499a <d_print_comp+0x1dd6>
 80049bc:	f1bc 0f05 	cmp.w	ip, #5
 80049c0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049c4:	f200 85c7 	bhi.w	8005556 <d_print_comp+0x2992>
 80049c8:	3b37      	subs	r3, #55	; 0x37
 80049ca:	e7e7      	b.n	800499c <d_print_comp+0x1dd8>
 80049cc:	0809414c 	.word	0x0809414c
 80049d0:	08094088 	.word	0x08094088
 80049d4:	080941ac 	.word	0x080941ac
 80049d8:	08093fd8 	.word	0x08093fd8
 80049dc:	0809404c 	.word	0x0809404c
 80049e0:	9905      	ldr	r1, [sp, #20]
 80049e2:	686a      	ldr	r2, [r5, #4]
 80049e4:	f7fe b9e1 	b.w	8002daa <d_print_comp+0x1e6>
 80049e8:	68aa      	ldr	r2, [r5, #8]
 80049ea:	9201      	str	r2, [sp, #4]
 80049ec:	4619      	mov	r1, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f47e aa26 	bne.w	8002e40 <d_print_comp+0x27c>
 80049f4:	9905      	ldr	r1, [sp, #20]
 80049f6:	686a      	ldr	r2, [r5, #4]
 80049f8:	f7fe b9d7 	b.w	8002daa <d_print_comp+0x1e6>
 80049fc:	4ece      	ldr	r6, [pc, #824]	; (8004d38 <d_print_comp+0x2174>)
 80049fe:	f106 0904 	add.w	r9, r6, #4
 8004a02:	e014      	b.n	8004a2e <d_print_comp+0x1e6a>
 8004a04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004a10:	4798      	blx	r3
 8004a12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a16:	3301      	adds	r3, #1
 8004a18:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2301      	movs	r3, #1
 8004a20:	45b1      	cmp	r9, r6
 8004a22:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a26:	54a7      	strb	r7, [r4, r2]
 8004a28:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004a2c:	d008      	beq.n	8004a40 <d_print_comp+0x1e7c>
 8004a2e:	2bff      	cmp	r3, #255	; 0xff
 8004a30:	4619      	mov	r1, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004a38:	d0e4      	beq.n	8004a04 <d_print_comp+0x1e40>
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	e7ef      	b.n	8004a20 <d_print_comp+0x1e5c>
 8004a40:	9905      	ldr	r1, [sp, #20]
 8004a42:	686a      	ldr	r2, [r5, #4]
 8004a44:	f7fe b9b1 	b.w	8002daa <d_print_comp+0x1e6>
 8004a48:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a4c:	f7ff ba66 	b.w	8003f1c <d_print_comp+0x1358>
 8004a50:	2700      	movs	r7, #0
 8004a52:	f7ff ba54 	b.w	8003efe <d_print_comp+0x133a>
 8004a56:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	f43e a9a5 	beq.w	8002daa <d_print_comp+0x1e6>
 8004a60:	4437      	add	r7, r6
 8004a62:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a66:	3f01      	subs	r7, #1
 8004a68:	3e01      	subs	r6, #1
 8004a6a:	f04f 0900 	mov.w	r9, #0
 8004a6e:	e015      	b.n	8004a9c <d_print_comp+0x1ed8>
 8004a70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004a7c:	4798      	blx	r3
 8004a7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a82:	3301      	adds	r3, #1
 8004a84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	42b7      	cmp	r7, r6
 8004a8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a92:	f804 8002 	strb.w	r8, [r4, r2]
 8004a96:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004a9a:	d008      	beq.n	8004aae <d_print_comp+0x1eea>
 8004a9c:	2bff      	cmp	r3, #255	; 0xff
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004aa6:	d0e3      	beq.n	8004a70 <d_print_comp+0x1eac>
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	e7ee      	b.n	8004a8c <d_print_comp+0x1ec8>
 8004aae:	9905      	ldr	r1, [sp, #20]
 8004ab0:	686a      	ldr	r2, [r5, #4]
 8004ab2:	f7fe b97a 	b.w	8002daa <d_print_comp+0x1e6>
 8004ab6:	68aa      	ldr	r2, [r5, #8]
 8004ab8:	49a0      	ldr	r1, [pc, #640]	; (8004d3c <d_print_comp+0x2178>)
 8004aba:	3201      	adds	r2, #1
 8004abc:	a808      	add	r0, sp, #32
 8004abe:	f014 fa41 	bl	8018f44 <sprintf>
 8004ac2:	a808      	add	r0, sp, #32
 8004ac4:	f002 f96e 	bl	8006da4 <strlen>
 8004ac8:	b328      	cbz	r0, 8004b16 <d_print_comp+0x1f52>
 8004aca:	ae08      	add	r6, sp, #32
 8004acc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004ad0:	eb06 0900 	add.w	r9, r6, r0
 8004ad4:	f04f 0800 	mov.w	r8, #0
 8004ad8:	e014      	b.n	8004b04 <d_print_comp+0x1f40>
 8004ada:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ade:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ae2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ae6:	4798      	blx	r3
 8004ae8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aec:	3301      	adds	r3, #1
 8004aee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004af2:	2200      	movs	r2, #0
 8004af4:	2301      	movs	r3, #1
 8004af6:	45b1      	cmp	r9, r6
 8004af8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004afc:	54a7      	strb	r7, [r4, r2]
 8004afe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004b02:	d008      	beq.n	8004b16 <d_print_comp+0x1f52>
 8004b04:	2bff      	cmp	r3, #255	; 0xff
 8004b06:	4619      	mov	r1, r3
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004b0e:	d0e4      	beq.n	8004ada <d_print_comp+0x1f16>
 8004b10:	461a      	mov	r2, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	e7ef      	b.n	8004af6 <d_print_comp+0x1f32>
 8004b16:	9905      	ldr	r1, [sp, #20]
 8004b18:	686a      	ldr	r2, [r5, #4]
 8004b1a:	f7fe b946 	b.w	8002daa <d_print_comp+0x1e6>
 8004b1e:	9905      	ldr	r1, [sp, #20]
 8004b20:	686a      	ldr	r2, [r5, #4]
 8004b22:	f7fe b942 	b.w	8002daa <d_print_comp+0x1e6>
 8004b26:	9905      	ldr	r1, [sp, #20]
 8004b28:	686a      	ldr	r2, [r5, #4]
 8004b2a:	f7fe b93e 	b.w	8002daa <d_print_comp+0x1e6>
 8004b2e:	9905      	ldr	r1, [sp, #20]
 8004b30:	686a      	ldr	r2, [r5, #4]
 8004b32:	f7fe b93a 	b.w	8002daa <d_print_comp+0x1e6>
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b3c:	f47e abf6 	bne.w	800332c <d_print_comp+0x768>
 8004b40:	f105 030c 	add.w	r3, r5, #12
 8004b44:	68aa      	ldr	r2, [r5, #8]
 8004b46:	4631      	mov	r1, r6
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f001 fd95 	bl	8006678 <d_maybe_print_fold_expression.isra.20>
 8004b4e:	4680      	mov	r8, r0
 8004b50:	2800      	cmp	r0, #0
 8004b52:	f040 86a0 	bne.w	8005896 <d_print_comp+0x2cd2>
 8004b56:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	68d3      	ldr	r3, [r2, #12]
 8004b5e:	6808      	ldr	r0, [r1, #0]
 8004b60:	4977      	ldr	r1, [pc, #476]	; (8004d40 <d_print_comp+0x217c>)
 8004b62:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b66:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b6a:	f002 f911 	bl	8006d90 <strcmp>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f000 8674 	beq.w	800585c <d_print_comp+0x2c98>
 8004b74:	2204      	movs	r2, #4
 8004b76:	4973      	ldr	r1, [pc, #460]	; (8004d44 <d_print_comp+0x2180>)
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7fb fbff 	bl	800037c <d_append_buffer>
 8004b7e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b82:	b303      	cbz	r3, 8004bc6 <d_print_comp+0x2002>
 8004b84:	465a      	mov	r2, fp
 8004b86:	4631      	mov	r1, r6
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f001 fd23 	bl	80065d4 <d_print_subexpr>
 8004b8e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004b92:	2fff      	cmp	r7, #255	; 0xff
 8004b94:	d110      	bne.n	8004bb8 <d_print_comp+0x1ff4>
 8004b96:	4639      	mov	r1, r7
 8004b98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b9c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ba0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4798      	blx	r3
 8004ba8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004bac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	4647      	mov	r7, r8
 8004bb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004bb8:	2320      	movs	r3, #32
 8004bba:	1c7a      	adds	r2, r7, #1
 8004bbc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004bc0:	55e3      	strb	r3, [r4, r7]
 8004bc2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7fd fffa 	bl	8002bc4 <d_print_comp>
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	f000 8663 	beq.w	800589e <d_print_comp+0x2cda>
 8004bd8:	464a      	mov	r2, r9
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f001 fcf9 	bl	80065d4 <d_print_subexpr>
 8004be2:	9905      	ldr	r1, [sp, #20]
 8004be4:	686a      	ldr	r2, [r5, #4]
 8004be6:	f7fe b8e0 	b.w	8002daa <d_print_comp+0x1e6>
 8004bea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bee:	4956      	ldr	r1, [pc, #344]	; (8004d48 <d_print_comp+0x2184>)
 8004bf0:	f8d3 a000 	ldr.w	sl, [r3]
 8004bf4:	4650      	mov	r0, sl
 8004bf6:	f002 f8cb 	bl	8006d90 <strcmp>
 8004bfa:	f898 3000 	ldrb.w	r3, [r8]
 8004bfe:	b910      	cbnz	r0, 8004c06 <d_print_comp+0x2042>
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	f000 852b 	beq.w	800565c <d_print_comp+0x2a98>
 8004c06:	2b38      	cmp	r3, #56	; 0x38
 8004c08:	f000 850c 	beq.w	8005624 <d_print_comp+0x2a60>
 8004c0c:	494f      	ldr	r1, [pc, #316]	; (8004d4c <d_print_comp+0x2188>)
 8004c0e:	4650      	mov	r0, sl
 8004c10:	f002 f8be 	bl	8006d90 <strcmp>
 8004c14:	4607      	mov	r7, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f000 8513 	beq.w	8005642 <d_print_comp+0x2a7e>
 8004c1c:	494c      	ldr	r1, [pc, #304]	; (8004d50 <d_print_comp+0x218c>)
 8004c1e:	4650      	mov	r0, sl
 8004c20:	f002 f8b6 	bl	8006d90 <strcmp>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f000 8333 	beq.w	8005290 <d_print_comp+0x26cc>
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	464a      	mov	r2, r9
 8004c30:	f001 fc90 	bl	8006554 <d_print_expr_op>
 8004c34:	4947      	ldr	r1, [pc, #284]	; (8004d54 <d_print_comp+0x2190>)
 8004c36:	4650      	mov	r0, sl
 8004c38:	f002 f8aa 	bl	8006d90 <strcmp>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f000 83b0 	beq.w	80053a2 <d_print_comp+0x27de>
 8004c42:	4650      	mov	r0, sl
 8004c44:	4944      	ldr	r1, [pc, #272]	; (8004d58 <d_print_comp+0x2194>)
 8004c46:	f002 f8a3 	bl	8006d90 <strcmp>
 8004c4a:	4681      	mov	r9, r0
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f47e abd7 	bne.w	8003400 <d_print_comp+0x83c>
 8004c52:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c56:	2fff      	cmp	r7, #255	; 0xff
 8004c58:	d110      	bne.n	8004c7c <d_print_comp+0x20b8>
 8004c5a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4798      	blx	r3
 8004c6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c70:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004c74:	3301      	adds	r3, #1
 8004c76:	464f      	mov	r7, r9
 8004c78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c7c:	1c78      	adds	r0, r7, #1
 8004c7e:	2328      	movs	r3, #40	; 0x28
 8004c80:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004c84:	4642      	mov	r2, r8
 8004c86:	55e3      	strb	r3, [r4, r7]
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c90:	f7fd ff98 	bl	8002bc4 <d_print_comp>
 8004c94:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c98:	2fff      	cmp	r7, #255	; 0xff
 8004c9a:	d111      	bne.n	8004cc0 <d_print_comp+0x20fc>
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ca4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004ca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cac:	4620      	mov	r0, r4
 8004cae:	4798      	blx	r3
 8004cb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cb4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004cb8:	3301      	adds	r3, #1
 8004cba:	4637      	mov	r7, r6
 8004cbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cc0:	1c7a      	adds	r2, r7, #1
 8004cc2:	2329      	movs	r3, #41	; 0x29
 8004cc4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cc8:	55e3      	strb	r3, [r4, r7]
 8004cca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cce:	686a      	ldr	r2, [r5, #4]
 8004cd0:	9905      	ldr	r1, [sp, #20]
 8004cd2:	f7fe b86a 	b.w	8002daa <d_print_comp+0x1e6>
 8004cd6:	f105 020c 	add.w	r2, r5, #12
 8004cda:	4641      	mov	r1, r8
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f001 f935 	bl	8005f4c <d_print_function_type.isra.15>
 8004ce2:	68aa      	ldr	r2, [r5, #8]
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	f000 83fd 	beq.w	80054e4 <d_print_comp+0x2920>
 8004cea:	4641      	mov	r1, r8
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7fd ff69 	bl	8002bc4 <d_print_comp>
 8004cf2:	9905      	ldr	r1, [sp, #20]
 8004cf4:	686a      	ldr	r2, [r5, #4]
 8004cf6:	f7fe b858 	b.w	8002daa <d_print_comp+0x1e6>
 8004cfa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cfe:	2fff      	cmp	r7, #255	; 0xff
 8004d00:	d111      	bne.n	8004d26 <d_print_comp+0x2162>
 8004d02:	2600      	movs	r6, #0
 8004d04:	4639      	mov	r1, r7
 8004d06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004d0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d12:	4620      	mov	r0, r4
 8004d14:	4798      	blx	r3
 8004d16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d1a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004d1e:	3301      	adds	r3, #1
 8004d20:	4637      	mov	r7, r6
 8004d22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d26:	2320      	movs	r3, #32
 8004d28:	1c7a      	adds	r2, r7, #1
 8004d2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d2e:	55e3      	strb	r3, [r4, r7]
 8004d30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d34:	f7fe bf72 	b.w	8003c1c <d_print_comp+0x1058>
 8004d38:	0809422c 	.word	0x0809422c
 8004d3c:	08093fd8 	.word	0x08093fd8
 8004d40:	08093fec 	.word	0x08093fec
 8004d44:	080941e8 	.word	0x080941e8
 8004d48:	080941d0 	.word	0x080941d0
 8004d4c:	080941d4 	.word	0x080941d4
 8004d50:	08093fdc 	.word	0x08093fdc
 8004d54:	080941d8 	.word	0x080941d8
 8004d58:	080944f8 	.word	0x080944f8
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d62:	f1b8 0f00 	cmp.w	r8, #0
 8004d66:	f43e aa89 	beq.w	800327c <d_print_comp+0x6b8>
 8004d6a:	f1b8 0f06 	cmp.w	r8, #6
 8004d6e:	f240 843f 	bls.w	80055f0 <d_print_comp+0x2a2c>
 8004d72:	f1b8 0f07 	cmp.w	r8, #7
 8004d76:	f47e aa81 	bne.w	800327c <d_print_comp+0x6b8>
 8004d7a:	68eb      	ldr	r3, [r5, #12]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	f47e aa7c 	bne.w	800327c <d_print_comp+0x6b8>
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	2a01      	cmp	r2, #1
 8004d88:	f47e aa78 	bne.w	800327c <d_print_comp+0x6b8>
 8004d8c:	283c      	cmp	r0, #60	; 0x3c
 8004d8e:	f47e aa75 	bne.w	800327c <d_print_comp+0x6b8>
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	f000 84b6 	beq.w	8005708 <d_print_comp+0x2b44>
 8004d9c:	2b31      	cmp	r3, #49	; 0x31
 8004d9e:	f47e aa6d 	bne.w	800327c <d_print_comp+0x6b8>
 8004da2:	2204      	movs	r2, #4
 8004da4:	49c3      	ldr	r1, [pc, #780]	; (80050b4 <d_print_comp+0x24f0>)
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7fb fae8 	bl	800037c <d_append_buffer>
 8004dac:	9905      	ldr	r1, [sp, #20]
 8004dae:	686a      	ldr	r2, [r5, #4]
 8004db0:	f7fd bffb 	b.w	8002daa <d_print_comp+0x1e6>
 8004db4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004db8:	2fff      	cmp	r7, #255	; 0xff
 8004dba:	d112      	bne.n	8004de2 <d_print_comp+0x221e>
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dc6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004dca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4798      	blx	r3
 8004dd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dd6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004dda:	3301      	adds	r3, #1
 8004ddc:	4647      	mov	r7, r8
 8004dde:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004de2:	1c7a      	adds	r2, r7, #1
 8004de4:	235b      	movs	r3, #91	; 0x5b
 8004de6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dea:	55e3      	strb	r3, [r4, r7]
 8004dec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004df0:	4631      	mov	r1, r6
 8004df2:	68ea      	ldr	r2, [r5, #12]
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7fd fee5 	bl	8002bc4 <d_print_comp>
 8004dfa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004dfe:	2fff      	cmp	r7, #255	; 0xff
 8004e00:	d111      	bne.n	8004e26 <d_print_comp+0x2262>
 8004e02:	2600      	movs	r6, #0
 8004e04:	4639      	mov	r1, r7
 8004e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e12:	4620      	mov	r0, r4
 8004e14:	4798      	blx	r3
 8004e16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e1a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004e1e:	3301      	adds	r3, #1
 8004e20:	4637      	mov	r7, r6
 8004e22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e26:	1c7a      	adds	r2, r7, #1
 8004e28:	235d      	movs	r3, #93	; 0x5d
 8004e2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e2e:	55e3      	strb	r3, [r4, r7]
 8004e30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e34:	686a      	ldr	r2, [r5, #4]
 8004e36:	9905      	ldr	r1, [sp, #20]
 8004e38:	f7fd bfb7 	b.w	8002daa <d_print_comp+0x1e6>
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	2229      	movs	r2, #41	; 0x29
 8004e40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e44:	54e2      	strb	r2, [r4, r3]
 8004e46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e4a:	782b      	ldrb	r3, [r5, #0]
 8004e4c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e4e:	f47e aa57 	bne.w	8003300 <d_print_comp+0x73c>
 8004e52:	29ff      	cmp	r1, #255	; 0xff
 8004e54:	d10f      	bne.n	8004e76 <d_print_comp+0x22b2>
 8004e56:	2700      	movs	r7, #0
 8004e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e64:	4620      	mov	r0, r4
 8004e66:	4798      	blx	r3
 8004e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e6c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004e70:	3301      	adds	r3, #1
 8004e72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e76:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004e7a:	232d      	movs	r3, #45	; 0x2d
 8004e7c:	1c51      	adds	r1, r2, #1
 8004e7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e82:	54a3      	strb	r3, [r4, r2]
 8004e84:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e88:	f7fe ba3a 	b.w	8003300 <d_print_comp+0x73c>
 8004e8c:	4f8a      	ldr	r7, [pc, #552]	; (80050b8 <d_print_comp+0x24f4>)
 8004e8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e92:	f107 0a02 	add.w	sl, r7, #2
 8004e96:	e016      	b.n	8004ec6 <d_print_comp+0x2302>
 8004e98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ea0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004ea4:	4798      	blx	r3
 8004ea6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	45ba      	cmp	sl, r7
 8004eb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004eba:	f804 8002 	strb.w	r8, [r4, r2]
 8004ebe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004ec2:	f43f a980 	beq.w	80041c6 <d_print_comp+0x1602>
 8004ec6:	2bff      	cmp	r3, #255	; 0xff
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004ed0:	d0e2      	beq.n	8004e98 <d_print_comp+0x22d4>
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	e7ed      	b.n	8004eb4 <d_print_comp+0x22f0>
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	4631      	mov	r1, r6
 8004edc:	4620      	mov	r0, r4
 8004ede:	f7fd fe71 	bl	8002bc4 <d_print_comp>
 8004ee2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004ee6:	b113      	cbz	r3, 8004eee <d_print_comp+0x232a>
 8004ee8:	9b08      	ldr	r3, [sp, #32]
 8004eea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004eee:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004ef2:	2b3c      	cmp	r3, #60	; 0x3c
 8004ef4:	f000 82c4 	beq.w	8005480 <d_print_comp+0x28bc>
 8004ef8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004efc:	2fff      	cmp	r7, #255	; 0xff
 8004efe:	d112      	bne.n	8004f26 <d_print_comp+0x2362>
 8004f00:	f04f 0800 	mov.w	r8, #0
 8004f04:	4639      	mov	r1, r7
 8004f06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f0a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f12:	4620      	mov	r0, r4
 8004f14:	4798      	blx	r3
 8004f16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f1a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004f1e:	3301      	adds	r3, #1
 8004f20:	4647      	mov	r7, r8
 8004f22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f26:	233c      	movs	r3, #60	; 0x3c
 8004f28:	1c7a      	adds	r2, r7, #1
 8004f2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f2e:	55e3      	strb	r3, [r4, r7]
 8004f30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f34:	68ab      	ldr	r3, [r5, #8]
 8004f36:	4631      	mov	r1, r6
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7fd fe42 	bl	8002bc4 <d_print_comp>
 8004f40:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f44:	2b3e      	cmp	r3, #62	; 0x3e
 8004f46:	f000 827d 	beq.w	8005444 <d_print_comp+0x2880>
 8004f4a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f4e:	2fff      	cmp	r7, #255	; 0xff
 8004f50:	d111      	bne.n	8004f76 <d_print_comp+0x23b2>
 8004f52:	2600      	movs	r6, #0
 8004f54:	4639      	mov	r1, r7
 8004f56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f5a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f62:	4620      	mov	r0, r4
 8004f64:	4798      	blx	r3
 8004f66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f6a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4637      	mov	r7, r6
 8004f72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f76:	233e      	movs	r3, #62	; 0x3e
 8004f78:	1c7a      	adds	r2, r7, #1
 8004f7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f7e:	55e3      	strb	r3, [r4, r7]
 8004f80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f84:	f7ff badc 	b.w	8004540 <d_print_comp+0x197c>
 8004f88:	4f4c      	ldr	r7, [pc, #304]	; (80050bc <d_print_comp+0x24f8>)
 8004f8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f8e:	f107 0905 	add.w	r9, r7, #5
 8004f92:	f04f 0a00 	mov.w	sl, #0
 8004f96:	e016      	b.n	8004fc6 <d_print_comp+0x2402>
 8004f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fa0:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fa4:	4798      	blx	r3
 8004fa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004faa:	3301      	adds	r3, #1
 8004fac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	45b9      	cmp	r9, r7
 8004fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004fba:	f804 8002 	strb.w	r8, [r4, r2]
 8004fbe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004fc2:	f43e ab41 	beq.w	8003648 <d_print_comp+0xa84>
 8004fc6:	2bff      	cmp	r3, #255	; 0xff
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004fd0:	d0e2      	beq.n	8004f98 <d_print_comp+0x23d4>
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	e7ed      	b.n	8004fb4 <d_print_comp+0x23f0>
 8004fd8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004fdc:	2fff      	cmp	r7, #255	; 0xff
 8004fde:	d112      	bne.n	8005006 <d_print_comp+0x2442>
 8004fe0:	f04f 0a00 	mov.w	sl, #0
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fea:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4798      	blx	r3
 8004ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ffa:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8004ffe:	3301      	adds	r3, #1
 8005000:	4657      	mov	r7, sl
 8005002:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005006:	2320      	movs	r3, #32
 8005008:	1c7a      	adds	r2, r7, #1
 800500a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800500e:	55e3      	strb	r3, [r4, r7]
 8005010:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005014:	f7fe bdda 	b.w	8003bcc <d_print_comp+0x1008>
 8005018:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800501c:	2900      	cmp	r1, #0
 800501e:	f6fe ad99 	blt.w	8003b54 <d_print_comp+0xf90>
 8005022:	f7fb fbc3 	bl	80007ac <d_index_template_argument.part.9>
 8005026:	4602      	mov	r2, r0
 8005028:	2800      	cmp	r0, #0
 800502a:	f47e ad93 	bne.w	8003b54 <d_print_comp+0xf90>
 800502e:	2301      	movs	r3, #1
 8005030:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005034:	686a      	ldr	r2, [r5, #4]
 8005036:	9905      	ldr	r1, [sp, #20]
 8005038:	f7fd beb7 	b.w	8002daa <d_print_comp+0x1e6>
 800503c:	9905      	ldr	r1, [sp, #20]
 800503e:	686a      	ldr	r2, [r5, #4]
 8005040:	f7fd beb3 	b.w	8002daa <d_print_comp+0x1e6>
 8005044:	220d      	movs	r2, #13
 8005046:	491e      	ldr	r1, [pc, #120]	; (80050c0 <d_print_comp+0x24fc>)
 8005048:	4620      	mov	r0, r4
 800504a:	f7fb f997 	bl	800037c <d_append_buffer>
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	4620      	mov	r0, r4
 8005052:	3101      	adds	r1, #1
 8005054:	f7fb fc84 	bl	8000960 <d_append_num>
 8005058:	2203      	movs	r2, #3
 800505a:	491a      	ldr	r1, [pc, #104]	; (80050c4 <d_print_comp+0x2500>)
 800505c:	4620      	mov	r0, r4
 800505e:	f7fb f98d 	bl	800037c <d_append_buffer>
 8005062:	68bf      	ldr	r7, [r7, #8]
 8005064:	f7ff b8b4 	b.w	80041d0 <d_print_comp+0x160c>
 8005068:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800506c:	9905      	ldr	r1, [sp, #20]
 800506e:	686a      	ldr	r2, [r5, #4]
 8005070:	42b8      	cmp	r0, r7
 8005072:	f47d ae9a 	bne.w	8002daa <d_print_comp+0x1e6>
 8005076:	3b01      	subs	r3, #1
 8005078:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800507c:	f7fd be95 	b.w	8002daa <d_print_comp+0x1e6>
 8005080:	4642      	mov	r2, r8
 8005082:	465b      	mov	r3, fp
 8005084:	46ab      	mov	fp, r5
 8005086:	f1bb 0f04 	cmp.w	fp, #4
 800508a:	46a0      	mov	r8, r4
 800508c:	461d      	mov	r5, r3
 800508e:	4614      	mov	r4, r2
 8005090:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 8005094:	f000 82a3 	beq.w	80055de <d_print_comp+0x2a1a>
 8005098:	f1bb 0f02 	cmp.w	fp, #2
 800509c:	d137      	bne.n	800510e <d_print_comp+0x254a>
 800509e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80050a2:	f89a 3000 	ldrb.w	r3, [sl]
 80050a6:	2b46      	cmp	r3, #70	; 0x46
 80050a8:	f000 8327 	beq.w	80056fa <d_print_comp+0x2b36>
 80050ac:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 80050b0:	3a0c      	subs	r2, #12
 80050b2:	e020      	b.n	80050f6 <d_print_comp+0x2532>
 80050b4:	08094204 	.word	0x08094204
 80050b8:	08094028 	.word	0x08094028
 80050bc:	0809419c 	.word	0x0809419c
 80050c0:	0809402c 	.word	0x0809402c
 80050c4:	0809403c 	.word	0x0809403c
 80050c8:	2f04      	cmp	r7, #4
 80050ca:	f43f a81d 	beq.w	8004108 <d_print_comp+0x1544>
 80050ce:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80050d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80050d6:	2300      	movs	r3, #0
 80050d8:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80050dc:	f84e ac10 	str.w	sl, [lr, #-16]
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	f8da a008 	ldr.w	sl, [sl, #8]
 80050e6:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 80050ea:	3701      	adds	r7, #1
 80050ec:	f84e bc04 	str.w	fp, [lr, #-4]
 80050f0:	f84e 3c08 	str.w	r3, [lr, #-8]
 80050f4:	4672      	mov	r2, lr
 80050f6:	f89a 0000 	ldrb.w	r0, [sl]
 80050fa:	f7fb f975 	bl	80003e8 <is_fnqual_component_type>
 80050fe:	f1a2 0b04 	sub.w	fp, r2, #4
 8005102:	f102 0e10 	add.w	lr, r2, #16
 8005106:	f102 0c0c 	add.w	ip, r2, #12
 800510a:	2800      	cmp	r0, #0
 800510c:	d1dc      	bne.n	80050c8 <d_print_comp+0x2504>
 800510e:	68ea      	ldr	r2, [r5, #12]
 8005110:	4631      	mov	r1, r6
 8005112:	4620      	mov	r0, r4
 8005114:	f7fd fd56 	bl	8002bc4 <d_print_comp>
 8005118:	f898 3000 	ldrb.w	r3, [r8]
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf04      	itt	eq
 8005120:	9b06      	ldreq	r3, [sp, #24]
 8005122:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8005126:	013f      	lsls	r7, r7, #4
 8005128:	f04f 0a20 	mov.w	sl, #32
 800512c:	46a8      	mov	r8, r5
 800512e:	eb09 0b07 	add.w	fp, r9, r7
 8005132:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 8005136:	bb0d      	cbnz	r5, 800517c <d_print_comp+0x25b8>
 8005138:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800513c:	2bff      	cmp	r3, #255	; 0xff
 800513e:	4620      	mov	r0, r4
 8005140:	4619      	mov	r1, r3
 8005142:	d10e      	bne.n	8005162 <d_print_comp+0x259e>
 8005144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005148:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800514c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005150:	4798      	blx	r3
 8005152:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005156:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005160:	462b      	mov	r3, r5
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005168:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800516c:	f804 a003 	strb.w	sl, [r4, r3]
 8005170:	4631      	mov	r1, r6
 8005172:	4620      	mov	r0, r4
 8005174:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005178:	f000 fbba 	bl	80058f0 <d_print_mod>
 800517c:	3f10      	subs	r7, #16
 800517e:	d1d6      	bne.n	800512e <d_print_comp+0x256a>
 8005180:	9b02      	ldr	r3, [sp, #8]
 8005182:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005186:	4645      	mov	r5, r8
 8005188:	f7fe bfc1 	b.w	800410e <d_print_comp+0x154a>
 800518c:	4631      	mov	r1, r6
 800518e:	68aa      	ldr	r2, [r5, #8]
 8005190:	4620      	mov	r0, r4
 8005192:	f7fd fd17 	bl	8002bc4 <d_print_comp>
 8005196:	9905      	ldr	r1, [sp, #20]
 8005198:	686a      	ldr	r2, [r5, #4]
 800519a:	f7fd be06 	b.w	8002daa <d_print_comp+0x1e6>
 800519e:	460f      	mov	r7, r1
 80051a0:	46a9      	mov	r9, r5
 80051a2:	f7fe bebb 	b.w	8003f1c <d_print_comp+0x1358>
 80051a6:	4644      	mov	r4, r8
 80051a8:	465d      	mov	r5, fp
 80051aa:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 80051ae:	f7fe bfab 	b.w	8004108 <d_print_comp+0x1544>
 80051b2:	68ea      	ldr	r2, [r5, #12]
 80051b4:	4631      	mov	r1, r6
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7fd fd04 	bl	8002bc4 <d_print_comp>
 80051bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051be:	9a01      	ldr	r2, [sp, #4]
 80051c0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f43e ab19 	beq.w	80037fc <d_print_comp+0xc38>
 80051ca:	f7fe bb1f 	b.w	800380c <d_print_comp+0xc48>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4664      	mov	r4, ip
 80051d2:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 80051d6:	f7fe bb19 	b.w	800380c <d_print_comp+0xc48>
 80051da:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80051de:	f7fe bead 	b.w	8003f3c <d_print_comp+0x1378>
 80051e2:	4631      	mov	r1, r6
 80051e4:	68aa      	ldr	r2, [r5, #8]
 80051e6:	4620      	mov	r0, r4
 80051e8:	f001 f9f4 	bl	80065d4 <d_print_subexpr>
 80051ec:	2203      	movs	r2, #3
 80051ee:	49bf      	ldr	r1, [pc, #764]	; (80054ec <d_print_comp+0x2928>)
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fb f8c3 	bl	800037c <d_append_buffer>
 80051f6:	9905      	ldr	r1, [sp, #20]
 80051f8:	686a      	ldr	r2, [r5, #4]
 80051fa:	f7fd bdd6 	b.w	8002daa <d_print_comp+0x1e6>
 80051fe:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 8005202:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8005206:	f1be 0f00 	cmp.w	lr, #0
 800520a:	dd17      	ble.n	800523c <d_print_comp+0x2678>
 800520c:	6810      	ldr	r0, [r2, #0]
 800520e:	4581      	cmp	r9, r0
 8005210:	f000 81a7 	beq.w	8005562 <d_print_comp+0x299e>
 8005214:	f102 0b08 	add.w	fp, r2, #8
 8005218:	46bc      	mov	ip, r7
 800521a:	9101      	str	r1, [sp, #4]
 800521c:	4670      	mov	r0, lr
 800521e:	e004      	b.n	800522a <d_print_comp+0x2666>
 8005220:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 8005224:	4589      	cmp	r9, r1
 8005226:	f000 819d 	beq.w	8005564 <d_print_comp+0x29a0>
 800522a:	f10c 0c01 	add.w	ip, ip, #1
 800522e:	4560      	cmp	r0, ip
 8005230:	46da      	mov	sl, fp
 8005232:	f10b 0b08 	add.w	fp, fp, #8
 8005236:	d1f3      	bne.n	8005220 <d_print_comp+0x265c>
 8005238:	9901      	ldr	r1, [sp, #4]
 800523a:	4686      	mov	lr, r0
 800523c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005240:	459e      	cmp	lr, r3
 8005242:	f280 8344 	bge.w	80058ce <d_print_comp+0x2d0a>
 8005246:	f10e 0301 	add.w	r3, lr, #1
 800524a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800524e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005252:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005256:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800525a:	f10c 0c04 	add.w	ip, ip, #4
 800525e:	2800      	cmp	r0, #0
 8005260:	f000 825b 	beq.w	800571a <d_print_comp+0x2b56>
 8005264:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005268:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800526c:	429a      	cmp	r2, r3
 800526e:	f102 0e01 	add.w	lr, r2, #1
 8005272:	f280 832c 	bge.w	80058ce <d_print_comp+0x2d0a>
 8005276:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800527a:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 800527e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005282:	6842      	ldr	r2, [r0, #4]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	f8cc 3000 	str.w	r3, [ip]
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	469c      	mov	ip, r3
 800528e:	e7e6      	b.n	800525e <d_print_comp+0x269a>
 8005290:	4606      	mov	r6, r0
 8005292:	4647      	mov	r7, r8
 8005294:	e001      	b.n	800529a <d_print_comp+0x26d6>
 8005296:	68ff      	ldr	r7, [r7, #12]
 8005298:	b31f      	cbz	r7, 80052e2 <d_print_comp+0x271e>
 800529a:	783b      	ldrb	r3, [r7, #0]
 800529c:	2b2f      	cmp	r3, #47	; 0x2f
 800529e:	d120      	bne.n	80052e2 <d_print_comp+0x271e>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	b1f3      	cbz	r3, 80052e2 <d_print_comp+0x271e>
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	2a4a      	cmp	r2, #74	; 0x4a
 80052a8:	bf18      	it	ne
 80052aa:	3601      	addne	r6, #1
 80052ac:	d1f3      	bne.n	8005296 <d_print_comp+0x26d2>
 80052ae:	6899      	ldr	r1, [r3, #8]
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7fb faa1 	bl	80007f8 <d_find_pack>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f000 81ef 	beq.w	800569a <d_print_comp+0x2ad6>
 80052bc:	7803      	ldrb	r3, [r0, #0]
 80052be:	2b2f      	cmp	r3, #47	; 0x2f
 80052c0:	f040 81eb 	bne.w	800569a <d_print_comp+0x2ad6>
 80052c4:	6883      	ldr	r3, [r0, #8]
 80052c6:	b153      	cbz	r3, 80052de <d_print_comp+0x271a>
 80052c8:	2300      	movs	r3, #0
 80052ca:	e004      	b.n	80052d6 <d_print_comp+0x2712>
 80052cc:	7802      	ldrb	r2, [r0, #0]
 80052ce:	2a2f      	cmp	r2, #47	; 0x2f
 80052d0:	d105      	bne.n	80052de <d_print_comp+0x271a>
 80052d2:	6882      	ldr	r2, [r0, #8]
 80052d4:	b11a      	cbz	r2, 80052de <d_print_comp+0x271a>
 80052d6:	68c0      	ldr	r0, [r0, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	2800      	cmp	r0, #0
 80052dc:	d1f6      	bne.n	80052cc <d_print_comp+0x2708>
 80052de:	441e      	add	r6, r3
 80052e0:	e7d9      	b.n	8005296 <d_print_comp+0x26d2>
 80052e2:	4631      	mov	r1, r6
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fb fb3b 	bl	8000960 <d_append_num>
 80052ea:	9905      	ldr	r1, [sp, #20]
 80052ec:	686a      	ldr	r2, [r5, #4]
 80052ee:	f7fd bd5c 	b.w	8002daa <d_print_comp+0x1e6>
 80052f2:	4631      	mov	r1, r6
 80052f4:	4620      	mov	r0, r4
 80052f6:	f001 f92d 	bl	8006554 <d_print_expr_op>
 80052fa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80052fe:	2fff      	cmp	r7, #255	; 0xff
 8005300:	d112      	bne.n	8005328 <d_print_comp+0x2764>
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	4639      	mov	r1, r7
 8005308:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800530c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005310:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005314:	4620      	mov	r0, r4
 8005316:	4798      	blx	r3
 8005318:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800531c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005320:	3301      	adds	r3, #1
 8005322:	4647      	mov	r7, r8
 8005324:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005328:	1c7a      	adds	r2, r7, #1
 800532a:	233c      	movs	r3, #60	; 0x3c
 800532c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005330:	55e3      	strb	r3, [r4, r7]
 8005332:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005336:	68eb      	ldr	r3, [r5, #12]
 8005338:	4631      	mov	r1, r6
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	4620      	mov	r0, r4
 800533e:	f7fd fc41 	bl	8002bc4 <d_print_comp>
 8005342:	2202      	movs	r2, #2
 8005344:	496a      	ldr	r1, [pc, #424]	; (80054f0 <d_print_comp+0x292c>)
 8005346:	4620      	mov	r0, r4
 8005348:	f7fb f818 	bl	800037c <d_append_buffer>
 800534c:	68eb      	ldr	r3, [r5, #12]
 800534e:	4631      	mov	r1, r6
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	4620      	mov	r0, r4
 8005354:	f7fd fc36 	bl	8002bc4 <d_print_comp>
 8005358:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800535c:	2fff      	cmp	r7, #255	; 0xff
 800535e:	d111      	bne.n	8005384 <d_print_comp+0x27c0>
 8005360:	2600      	movs	r6, #0
 8005362:	4639      	mov	r1, r7
 8005364:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005368:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800536c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005370:	4620      	mov	r0, r4
 8005372:	4798      	blx	r3
 8005374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005378:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800537c:	3301      	adds	r3, #1
 800537e:	4637      	mov	r7, r6
 8005380:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005384:	1c7a      	adds	r2, r7, #1
 8005386:	2329      	movs	r3, #41	; 0x29
 8005388:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800538c:	55e3      	strb	r3, [r4, r7]
 800538e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005392:	686a      	ldr	r2, [r5, #4]
 8005394:	9905      	ldr	r1, [sp, #20]
 8005396:	f7fd bd08 	b.w	8002daa <d_print_comp+0x1e6>
 800539a:	9905      	ldr	r1, [sp, #20]
 800539c:	686a      	ldr	r2, [r5, #4]
 800539e:	f7fd bd04 	b.w	8002daa <d_print_comp+0x1e6>
 80053a2:	4642      	mov	r2, r8
 80053a4:	4631      	mov	r1, r6
 80053a6:	4620      	mov	r0, r4
 80053a8:	f7fd fc0c 	bl	8002bc4 <d_print_comp>
 80053ac:	9905      	ldr	r1, [sp, #20]
 80053ae:	686a      	ldr	r2, [r5, #4]
 80053b0:	f7fd bcfb 	b.w	8002daa <d_print_comp+0x1e6>
 80053b4:	a918      	add	r1, sp, #96	; 0x60
 80053b6:	4620      	mov	r0, r4
 80053b8:	f841 3d40 	str.w	r3, [r1, #-64]!
 80053bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80053c0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 80053c4:	4641      	mov	r1, r8
 80053c6:	960a      	str	r6, [sp, #40]	; 0x28
 80053c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ca:	9509      	str	r5, [sp, #36]	; 0x24
 80053cc:	f7fd fbfa 	bl	8002bc4 <d_print_comp>
 80053d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80053d8:	b9ee      	cbnz	r6, 8005416 <d_print_comp+0x2852>
 80053da:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80053de:	2fff      	cmp	r7, #255	; 0xff
 80053e0:	d110      	bne.n	8005404 <d_print_comp+0x2840>
 80053e2:	4639      	mov	r1, r7
 80053e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053e8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053f0:	4620      	mov	r0, r4
 80053f2:	4798      	blx	r3
 80053f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053f8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053fc:	3301      	adds	r3, #1
 80053fe:	4637      	mov	r7, r6
 8005400:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005404:	2320      	movs	r3, #32
 8005406:	1c7a      	adds	r2, r7, #1
 8005408:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800540c:	55e3      	strb	r3, [r4, r7]
 800540e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005412:	f7fe ba0c 	b.w	800382e <d_print_comp+0xc6a>
 8005416:	9905      	ldr	r1, [sp, #20]
 8005418:	686a      	ldr	r2, [r5, #4]
 800541a:	f7fd bcc6 	b.w	8002daa <d_print_comp+0x1e6>
 800541e:	4935      	ldr	r1, [pc, #212]	; (80054f4 <d_print_comp+0x2930>)
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	f013 fdaf 	bl	8018f84 <strncmp>
 8005426:	2800      	cmp	r0, #0
 8005428:	f47e abc6 	bne.w	8003bb8 <d_print_comp+0xff4>
 800542c:	4631      	mov	r1, r6
 800542e:	68ea      	ldr	r2, [r5, #12]
 8005430:	4620      	mov	r0, r4
 8005432:	f7fd fbc7 	bl	8002bc4 <d_print_comp>
 8005436:	2202      	movs	r2, #2
 8005438:	492f      	ldr	r1, [pc, #188]	; (80054f8 <d_print_comp+0x2934>)
 800543a:	4620      	mov	r0, r4
 800543c:	f7fa ff9e 	bl	800037c <d_append_buffer>
 8005440:	f7fe bc09 	b.w	8003c56 <d_print_comp+0x1092>
 8005444:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005448:	2fff      	cmp	r7, #255	; 0xff
 800544a:	d111      	bne.n	8005470 <d_print_comp+0x28ac>
 800544c:	2600      	movs	r6, #0
 800544e:	4639      	mov	r1, r7
 8005450:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005454:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005458:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800545c:	4620      	mov	r0, r4
 800545e:	4798      	blx	r3
 8005460:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005464:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005468:	3301      	adds	r3, #1
 800546a:	4637      	mov	r7, r6
 800546c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005470:	2320      	movs	r3, #32
 8005472:	1c7a      	adds	r2, r7, #1
 8005474:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005478:	55e3      	strb	r3, [r4, r7]
 800547a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800547e:	e564      	b.n	8004f4a <d_print_comp+0x2386>
 8005480:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005484:	2fff      	cmp	r7, #255	; 0xff
 8005486:	d112      	bne.n	80054ae <d_print_comp+0x28ea>
 8005488:	f04f 0800 	mov.w	r8, #0
 800548c:	4639      	mov	r1, r7
 800548e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005492:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005496:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800549a:	4620      	mov	r0, r4
 800549c:	4798      	blx	r3
 800549e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054a2:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80054a6:	3301      	adds	r3, #1
 80054a8:	4647      	mov	r7, r8
 80054aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054ae:	2320      	movs	r3, #32
 80054b0:	1c7a      	adds	r2, r7, #1
 80054b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80054b6:	55e3      	strb	r3, [r4, r7]
 80054b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80054bc:	e51c      	b.n	8004ef8 <d_print_comp+0x2334>
 80054be:	4640      	mov	r0, r8
 80054c0:	490e      	ldr	r1, [pc, #56]	; (80054fc <d_print_comp+0x2938>)
 80054c2:	f001 fc65 	bl	8006d90 <strcmp>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f040 81fb 	bne.w	80058c2 <d_print_comp+0x2cfe>
 80054cc:	68eb      	ldr	r3, [r5, #12]
 80054ce:	4631      	mov	r1, r6
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	4620      	mov	r0, r4
 80054d4:	f001 f87e 	bl	80065d4 <d_print_subexpr>
 80054d8:	f7fd bc60 	b.w	8002d9c <d_print_comp+0x1d8>
 80054dc:	9905      	ldr	r1, [sp, #20]
 80054de:	686a      	ldr	r2, [r5, #4]
 80054e0:	f7fd bc63 	b.w	8002daa <d_print_comp+0x1e6>
 80054e4:	9905      	ldr	r1, [sp, #20]
 80054e6:	686a      	ldr	r2, [r5, #4]
 80054e8:	f7fd bc5f 	b.w	8002daa <d_print_comp+0x1e6>
 80054ec:	08094228 	.word	0x08094228
 80054f0:	080941dc 	.word	0x080941dc
 80054f4:	08094040 	.word	0x08094040
 80054f8:	08094048 	.word	0x08094048
 80054fc:	08093fe0 	.word	0x08093fe0
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	2a01      	cmp	r2, #1
 8005506:	f47d ac4e 	bne.w	8002da6 <d_print_comp+0x1e2>
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b3e      	cmp	r3, #62	; 0x3e
 8005510:	f47d ac49 	bne.w	8002da6 <d_print_comp+0x1e2>
 8005514:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005518:	2fff      	cmp	r7, #255	; 0xff
 800551a:	d111      	bne.n	8005540 <d_print_comp+0x297c>
 800551c:	2600      	movs	r6, #0
 800551e:	4639      	mov	r1, r7
 8005520:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005524:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005528:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800552c:	4620      	mov	r0, r4
 800552e:	4798      	blx	r3
 8005530:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005534:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005538:	3301      	adds	r3, #1
 800553a:	4637      	mov	r7, r6
 800553c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005540:	1c7a      	adds	r2, r7, #1
 8005542:	2329      	movs	r3, #41	; 0x29
 8005544:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005548:	55e3      	strb	r3, [r4, r7]
 800554a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800554e:	686a      	ldr	r2, [r5, #4]
 8005550:	9905      	ldr	r1, [sp, #20]
 8005552:	f7fd bc2a 	b.w	8002daa <d_print_comp+0x1e6>
 8005556:	2a05      	cmp	r2, #5
 8005558:	f200 80a9 	bhi.w	80056ae <d_print_comp+0x2aea>
 800555c:	3b57      	subs	r3, #87	; 0x57
 800555e:	f7ff ba1d 	b.w	800499c <d_print_comp+0x1dd8>
 8005562:	4692      	mov	sl, r2
 8005564:	461a      	mov	r2, r3
 8005566:	e001      	b.n	800556c <d_print_comp+0x29a8>
 8005568:	6852      	ldr	r2, [r2, #4]
 800556a:	b342      	cbz	r2, 80055be <d_print_comp+0x29fa>
 800556c:	6811      	ldr	r1, [r2, #0]
 800556e:	4589      	cmp	r9, r1
 8005570:	d003      	beq.n	800557a <d_print_comp+0x29b6>
 8005572:	428d      	cmp	r5, r1
 8005574:	d1f8      	bne.n	8005568 <d_print_comp+0x29a4>
 8005576:	429a      	cmp	r2, r3
 8005578:	d0f6      	beq.n	8005568 <d_print_comp+0x29a4>
 800557a:	f109 0108 	add.w	r1, r9, #8
 800557e:	4620      	mov	r0, r4
 8005580:	f7fb f92a 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8005584:	4681      	mov	r9, r0
 8005586:	b198      	cbz	r0, 80055b0 <d_print_comp+0x29ec>
 8005588:	f899 3000 	ldrb.w	r3, [r9]
 800558c:	2b2f      	cmp	r3, #47	; 0x2f
 800558e:	f47e acb6 	bne.w	8003efe <d_print_comp+0x133a>
 8005592:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8005596:	2900      	cmp	r1, #0
 8005598:	f6fe acb6 	blt.w	8003f08 <d_print_comp+0x1344>
 800559c:	4648      	mov	r0, r9
 800559e:	f7fb f905 	bl	80007ac <d_index_template_argument.part.9>
 80055a2:	4681      	mov	r9, r0
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f47e acaa 	bne.w	8003efe <d_print_comp+0x133a>
 80055aa:	b10f      	cbz	r7, 80055b0 <d_print_comp+0x29ec>
 80055ac:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 80055b0:	2301      	movs	r3, #1
 80055b2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80055b6:	686a      	ldr	r2, [r5, #4]
 80055b8:	9905      	ldr	r1, [sp, #20]
 80055ba:	f7fd bbf6 	b.w	8002daa <d_print_comp+0x1e6>
 80055be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055c2:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 80055c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ca:	f109 0108 	add.w	r1, r9, #8
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7fb f902 	bl	80007d8 <d_lookup_template_argument.isra.10>
 80055d4:	2701      	movs	r7, #1
 80055d6:	4681      	mov	r9, r0
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1d5      	bne.n	8005588 <d_print_comp+0x29c4>
 80055dc:	e7e6      	b.n	80055ac <d_print_comp+0x29e8>
 80055de:	ab18      	add	r3, sp, #96	; 0x60
 80055e0:	9a01      	ldr	r2, [sp, #4]
 80055e2:	f843 2d48 	str.w	r2, [r3, #-72]!
 80055e6:	f8cd 801c 	str.w	r8, [sp, #28]
 80055ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ee:	e58e      	b.n	800510e <d_print_comp+0x254a>
 80055f0:	68eb      	ldr	r3, [r5, #12]
 80055f2:	f893 9000 	ldrb.w	r9, [r3]
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	f47d ae3f 	bne.w	800327c <d_print_comp+0x6b8>
 80055fe:	283d      	cmp	r0, #61	; 0x3d
 8005600:	f000 80e6 	beq.w	80057d0 <d_print_comp+0x2c0c>
 8005604:	4631      	mov	r1, r6
 8005606:	68ea      	ldr	r2, [r5, #12]
 8005608:	4620      	mov	r0, r4
 800560a:	f1a8 0802 	sub.w	r8, r8, #2
 800560e:	f7fd fad9 	bl	8002bc4 <d_print_comp>
 8005612:	f1b8 0f04 	cmp.w	r8, #4
 8005616:	f200 80d7 	bhi.w	80057c8 <d_print_comp+0x2c04>
 800561a:	e8df f008 	tbb	[pc, r8]
 800561e:	93b4      	.short	0x93b4
 8005620:	818a      	.short	0x818a
 8005622:	35          	.byte	0x35
 8005623:	00          	.byte	0x00
 8005624:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005628:	4631      	mov	r1, r6
 800562a:	4620      	mov	r0, r4
 800562c:	f000 ffd2 	bl	80065d4 <d_print_subexpr>
 8005630:	464a      	mov	r2, r9
 8005632:	4631      	mov	r1, r6
 8005634:	4620      	mov	r0, r4
 8005636:	f000 ff8d 	bl	8006554 <d_print_expr_op>
 800563a:	9905      	ldr	r1, [sp, #20]
 800563c:	686a      	ldr	r2, [r5, #4]
 800563e:	f7fd bbb4 	b.w	8002daa <d_print_comp+0x1e6>
 8005642:	4641      	mov	r1, r8
 8005644:	4620      	mov	r0, r4
 8005646:	f7fb f8d7 	bl	80007f8 <d_find_pack>
 800564a:	b1a8      	cbz	r0, 8005678 <d_print_comp+0x2ab4>
 800564c:	7803      	ldrb	r3, [r0, #0]
 800564e:	2b2f      	cmp	r3, #47	; 0x2f
 8005650:	d112      	bne.n	8005678 <d_print_comp+0x2ab4>
 8005652:	6883      	ldr	r3, [r0, #8]
 8005654:	b183      	cbz	r3, 8005678 <d_print_comp+0x2ab4>
 8005656:	68c0      	ldr	r0, [r0, #12]
 8005658:	3701      	adds	r7, #1
 800565a:	e7f6      	b.n	800564a <d_print_comp+0x2a86>
 800565c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	2a01      	cmp	r2, #1
 8005664:	f47f aad2 	bne.w	8004c0c <d_print_comp+0x2048>
 8005668:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	2a29      	cmp	r2, #41	; 0x29
 8005670:	bf08      	it	eq
 8005672:	4698      	moveq	r8, r3
 8005674:	f7ff baca 	b.w	8004c0c <d_print_comp+0x2048>
 8005678:	4639      	mov	r1, r7
 800567a:	4620      	mov	r0, r4
 800567c:	f7fb f970 	bl	8000960 <d_append_num>
 8005680:	9905      	ldr	r1, [sp, #20]
 8005682:	686a      	ldr	r2, [r5, #4]
 8005684:	f7fd bb91 	b.w	8002daa <d_print_comp+0x1e6>
 8005688:	2203      	movs	r2, #3
 800568a:	4994      	ldr	r1, [pc, #592]	; (80058dc <d_print_comp+0x2d18>)
 800568c:	4620      	mov	r0, r4
 800568e:	f7fa fe75 	bl	800037c <d_append_buffer>
 8005692:	9905      	ldr	r1, [sp, #20]
 8005694:	686a      	ldr	r2, [r5, #4]
 8005696:	f7fd bb88 	b.w	8002daa <d_print_comp+0x1e6>
 800569a:	2300      	movs	r3, #0
 800569c:	441e      	add	r6, r3
 800569e:	e5fa      	b.n	8005296 <d_print_comp+0x26d2>
 80056a0:	464a      	mov	r2, r9
 80056a2:	4631      	mov	r1, r6
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 ff55 	bl	8006554 <d_print_expr_op>
 80056aa:	f7fd bea9 	b.w	8003400 <d_print_comp+0x83c>
 80056ae:	2b5f      	cmp	r3, #95	; 0x5f
 80056b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056b4:	f47f a964 	bne.w	8004980 <d_print_comp+0x1dbc>
 80056b8:	28ff      	cmp	r0, #255	; 0xff
 80056ba:	f63f a961 	bhi.w	8004980 <d_print_comp+0x1dbc>
 80056be:	29ff      	cmp	r1, #255	; 0xff
 80056c0:	fa5f f980 	uxtb.w	r9, r0
 80056c4:	d10f      	bne.n	80056e6 <d_print_comp+0x2b22>
 80056c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056d2:	4620      	mov	r0, r4
 80056d4:	4798      	blx	r3
 80056d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056da:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80056de:	3301      	adds	r3, #1
 80056e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056e4:	2100      	movs	r1, #0
 80056e6:	1c4b      	adds	r3, r1, #1
 80056e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056ec:	4657      	mov	r7, sl
 80056ee:	f804 9001 	strb.w	r9, [r4, r1]
 80056f2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056f6:	f7ff b935 	b.w	8004964 <d_print_comp+0x1da0>
 80056fa:	f8da a008 	ldr.w	sl, [sl, #8]
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	f43e ad01 	beq.w	8004108 <d_print_comp+0x1544>
 8005706:	e4d1      	b.n	80050ac <d_print_comp+0x24e8>
 8005708:	2205      	movs	r2, #5
 800570a:	4975      	ldr	r1, [pc, #468]	; (80058e0 <d_print_comp+0x2d1c>)
 800570c:	4620      	mov	r0, r4
 800570e:	f7fa fe35 	bl	800037c <d_append_buffer>
 8005712:	9905      	ldr	r1, [sp, #20]
 8005714:	686a      	ldr	r2, [r5, #4]
 8005716:	f7fd bb48 	b.w	8002daa <d_print_comp+0x1e6>
 800571a:	f8cc 0000 	str.w	r0, [ip]
 800571e:	e72c      	b.n	800557a <d_print_comp+0x29b6>
 8005720:	2202      	movs	r2, #2
 8005722:	4970      	ldr	r1, [pc, #448]	; (80058e4 <d_print_comp+0x2d20>)
 8005724:	4620      	mov	r0, r4
 8005726:	f7fa fe29 	bl	800037c <d_append_buffer>
 800572a:	9905      	ldr	r1, [sp, #20]
 800572c:	686a      	ldr	r2, [r5, #4]
 800572e:	f7fd bb3c 	b.w	8002daa <d_print_comp+0x1e6>
 8005732:	2202      	movs	r2, #2
 8005734:	496c      	ldr	r1, [pc, #432]	; (80058e8 <d_print_comp+0x2d24>)
 8005736:	4620      	mov	r0, r4
 8005738:	f7fa fe20 	bl	800037c <d_append_buffer>
 800573c:	9905      	ldr	r1, [sp, #20]
 800573e:	686a      	ldr	r2, [r5, #4]
 8005740:	f7fd bb33 	b.w	8002daa <d_print_comp+0x1e6>
 8005744:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005748:	2fff      	cmp	r7, #255	; 0xff
 800574a:	d111      	bne.n	8005770 <d_print_comp+0x2bac>
 800574c:	2600      	movs	r6, #0
 800574e:	4639      	mov	r1, r7
 8005750:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005754:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005758:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800575c:	4620      	mov	r0, r4
 800575e:	4798      	blx	r3
 8005760:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005764:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005768:	3301      	adds	r3, #1
 800576a:	4637      	mov	r7, r6
 800576c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005770:	1c7a      	adds	r2, r7, #1
 8005772:	236c      	movs	r3, #108	; 0x6c
 8005774:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005778:	55e3      	strb	r3, [r4, r7]
 800577a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800577e:	686a      	ldr	r2, [r5, #4]
 8005780:	9905      	ldr	r1, [sp, #20]
 8005782:	f7fd bb12 	b.w	8002daa <d_print_comp+0x1e6>
 8005786:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800578a:	2fff      	cmp	r7, #255	; 0xff
 800578c:	d111      	bne.n	80057b2 <d_print_comp+0x2bee>
 800578e:	2600      	movs	r6, #0
 8005790:	4639      	mov	r1, r7
 8005792:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005796:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800579a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800579e:	4620      	mov	r0, r4
 80057a0:	4798      	blx	r3
 80057a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057a6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80057aa:	3301      	adds	r3, #1
 80057ac:	4637      	mov	r7, r6
 80057ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057b2:	1c7a      	adds	r2, r7, #1
 80057b4:	2375      	movs	r3, #117	; 0x75
 80057b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057ba:	55e3      	strb	r3, [r4, r7]
 80057bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057c0:	686a      	ldr	r2, [r5, #4]
 80057c2:	9905      	ldr	r1, [sp, #20]
 80057c4:	f7fd baf1 	b.w	8002daa <d_print_comp+0x1e6>
 80057c8:	9905      	ldr	r1, [sp, #20]
 80057ca:	686a      	ldr	r2, [r5, #4]
 80057cc:	f7fd baed 	b.w	8002daa <d_print_comp+0x1e6>
 80057d0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057d4:	2fff      	cmp	r7, #255	; 0xff
 80057d6:	d110      	bne.n	80057fa <d_print_comp+0x2c36>
 80057d8:	4639      	mov	r1, r7
 80057da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057e6:	4620      	mov	r0, r4
 80057e8:	4798      	blx	r3
 80057ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057ee:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80057f2:	3301      	adds	r3, #1
 80057f4:	464f      	mov	r7, r9
 80057f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	1c7a      	adds	r2, r7, #1
 80057fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005802:	55e3      	strb	r3, [r4, r7]
 8005804:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005808:	e6fc      	b.n	8005604 <d_print_comp+0x2a40>
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	6891      	ldr	r1, [r2, #8]
 800580e:	2901      	cmp	r1, #1
 8005810:	f47d aa69 	bne.w	8002ce6 <d_print_comp+0x122>
 8005814:	6852      	ldr	r2, [r2, #4]
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	2a3e      	cmp	r2, #62	; 0x3e
 800581a:	f47d aa64 	bne.w	8002ce6 <d_print_comp+0x122>
 800581e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005822:	2fff      	cmp	r7, #255	; 0xff
 8005824:	d110      	bne.n	8005848 <d_print_comp+0x2c84>
 8005826:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800582a:	4639      	mov	r1, r7
 800582c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005830:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005834:	4620      	mov	r0, r4
 8005836:	4798      	blx	r3
 8005838:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800583c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005840:	3301      	adds	r3, #1
 8005842:	4647      	mov	r7, r8
 8005844:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005848:	2328      	movs	r3, #40	; 0x28
 800584a:	1c7a      	adds	r2, r7, #1
 800584c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005850:	55e3      	strb	r3, [r4, r7]
 8005852:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005856:	68ab      	ldr	r3, [r5, #8]
 8005858:	f7fd ba45 	b.w	8002ce6 <d_print_comp+0x122>
 800585c:	465a      	mov	r2, fp
 800585e:	4631      	mov	r1, r6
 8005860:	4620      	mov	r0, r4
 8005862:	f000 feb7 	bl	80065d4 <d_print_subexpr>
 8005866:	463a      	mov	r2, r7
 8005868:	4631      	mov	r1, r6
 800586a:	4620      	mov	r0, r4
 800586c:	f000 fe72 	bl	8006554 <d_print_expr_op>
 8005870:	4652      	mov	r2, sl
 8005872:	4631      	mov	r1, r6
 8005874:	4620      	mov	r0, r4
 8005876:	f000 fead 	bl	80065d4 <d_print_subexpr>
 800587a:	2203      	movs	r2, #3
 800587c:	491b      	ldr	r1, [pc, #108]	; (80058ec <d_print_comp+0x2d28>)
 800587e:	4620      	mov	r0, r4
 8005880:	f7fa fd7c 	bl	800037c <d_append_buffer>
 8005884:	464a      	mov	r2, r9
 8005886:	4631      	mov	r1, r6
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fea3 	bl	80065d4 <d_print_subexpr>
 800588e:	9905      	ldr	r1, [sp, #20]
 8005890:	686a      	ldr	r2, [r5, #4]
 8005892:	f7fd ba8a 	b.w	8002daa <d_print_comp+0x1e6>
 8005896:	9905      	ldr	r1, [sp, #20]
 8005898:	686a      	ldr	r2, [r5, #4]
 800589a:	f7fd ba86 	b.w	8002daa <d_print_comp+0x1e6>
 800589e:	9905      	ldr	r1, [sp, #20]
 80058a0:	686a      	ldr	r2, [r5, #4]
 80058a2:	f7fd ba82 	b.w	8002daa <d_print_comp+0x1e6>
 80058a6:	68d3      	ldr	r3, [r2, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b29      	cmp	r3, #41	; 0x29
 80058ac:	bf1c      	itt	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	4631      	mov	r1, r6
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fe8b 	bl	80065d4 <d_print_subexpr>
 80058be:	f7fd ba22 	b.w	8002d06 <d_print_comp+0x142>
 80058c2:	463a      	mov	r2, r7
 80058c4:	4631      	mov	r1, r6
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 fe44 	bl	8006554 <d_print_expr_op>
 80058cc:	e5fe      	b.n	80054cc <d_print_comp+0x2908>
 80058ce:	2301      	movs	r3, #1
 80058d0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80058d4:	686a      	ldr	r2, [r5, #4]
 80058d6:	f7fd ba68 	b.w	8002daa <d_print_comp+0x1e6>
 80058da:	bf00      	nop
 80058dc:	080941f8 	.word	0x080941f8
 80058e0:	080941fc 	.word	0x080941fc
 80058e4:	080941f4 	.word	0x080941f4
 80058e8:	080941f0 	.word	0x080941f0
 80058ec:	080941e4 	.word	0x080941e4

080058f0 <d_print_mod>:
 80058f0:	7813      	ldrb	r3, [r2, #0]
 80058f2:	3b03      	subs	r3, #3
 80058f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	4615      	mov	r5, r2
 80058fa:	4604      	mov	r4, r0
 80058fc:	460e      	mov	r6, r1
 80058fe:	2b4c      	cmp	r3, #76	; 0x4c
 8005900:	f200 82c8 	bhi.w	8005e94 <d_print_mod+0x5a4>
 8005904:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005908:	02c60075 	.word	0x02c60075
 800590c:	02c602c6 	.word	0x02c602c6
 8005910:	02c602c6 	.word	0x02c602c6
 8005914:	02c602c6 	.word	0x02c602c6
 8005918:	02c602c6 	.word	0x02c602c6
 800591c:	02c602c6 	.word	0x02c602c6
 8005920:	02c602c6 	.word	0x02c602c6
 8005924:	02c602c6 	.word	0x02c602c6
 8005928:	02c602c6 	.word	0x02c602c6
 800592c:	02c602c6 	.word	0x02c602c6
 8005930:	02c602c6 	.word	0x02c602c6
 8005934:	00a1007a 	.word	0x00a1007a
 8005938:	007a00c8 	.word	0x007a00c8
 800593c:	00c800a1 	.word	0x00c800a1
 8005940:	010a00ee 	.word	0x010a00ee
 8005944:	01480126 	.word	0x01480126
 8005948:	02790166 	.word	0x02790166
 800594c:	029f0252 	.word	0x029f0252
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	02c60184 	.word	0x02c60184
 800595c:	02c601cc 	.word	0x02c601cc
 8005960:	02c602c6 	.word	0x02c602c6
 8005964:	02c602c6 	.word	0x02c602c6
 8005968:	02c602c6 	.word	0x02c602c6
 800596c:	02c602c6 	.word	0x02c602c6
 8005970:	02c602c6 	.word	0x02c602c6
 8005974:	02c602c6 	.word	0x02c602c6
 8005978:	02c602c6 	.word	0x02c602c6
 800597c:	02c602c6 	.word	0x02c602c6
 8005980:	02c602c6 	.word	0x02c602c6
 8005984:	02c602c6 	.word	0x02c602c6
 8005988:	02c602c6 	.word	0x02c602c6
 800598c:	02c602c6 	.word	0x02c602c6
 8005990:	02c602c6 	.word	0x02c602c6
 8005994:	02c602c6 	.word	0x02c602c6
 8005998:	01f402c6 	.word	0x01f402c6
 800599c:	022a02c6 	.word	0x022a02c6
 80059a0:	004d      	.short	0x004d
 80059a2:	4fd7      	ldr	r7, [pc, #860]	; (8005d00 <d_print_mod+0x410>)
 80059a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059a8:	f107 0806 	add.w	r8, r7, #6
 80059ac:	f04f 0900 	mov.w	r9, #0
 80059b0:	e016      	b.n	80059e0 <d_print_mod+0xf0>
 80059b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80059be:	4798      	blx	r3
 80059c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059ca:	2200      	movs	r2, #0
 80059cc:	2301      	movs	r3, #1
 80059ce:	4547      	cmp	r7, r8
 80059d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059d4:	f804 a002 	strb.w	sl, [r4, r2]
 80059d8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80059dc:	f000 825f 	beq.w	8005e9e <d_print_mod+0x5ae>
 80059e0:	2bff      	cmp	r3, #255	; 0xff
 80059e2:	4619      	mov	r1, r3
 80059e4:	4620      	mov	r0, r4
 80059e6:	f817 ab01 	ldrb.w	sl, [r7], #1
 80059ea:	d0e2      	beq.n	80059b2 <d_print_mod+0xc2>
 80059ec:	461a      	mov	r2, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	e7ed      	b.n	80059ce <d_print_mod+0xde>
 80059f2:	68aa      	ldr	r2, [r5, #8]
 80059f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	f7fd b8e4 	b.w	8002bc4 <d_print_comp>
 80059fc:	4dc1      	ldr	r5, [pc, #772]	; (8005d04 <d_print_mod+0x414>)
 80059fe:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a02:	f105 0609 	add.w	r6, r5, #9
 8005a06:	2700      	movs	r7, #0
 8005a08:	e016      	b.n	8005a38 <d_print_mod+0x148>
 8005a0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a12:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a16:	4798      	blx	r3
 8005a18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a22:	2200      	movs	r2, #0
 8005a24:	2301      	movs	r3, #1
 8005a26:	42ae      	cmp	r6, r5
 8005a28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a2c:	f804 8002 	strb.w	r8, [r4, r2]
 8005a30:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a34:	f000 80ea 	beq.w	8005c0c <d_print_mod+0x31c>
 8005a38:	2bff      	cmp	r3, #255	; 0xff
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a42:	d0e2      	beq.n	8005a0a <d_print_mod+0x11a>
 8005a44:	461a      	mov	r2, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	e7ed      	b.n	8005a26 <d_print_mod+0x136>
 8005a4a:	4daf      	ldr	r5, [pc, #700]	; (8005d08 <d_print_mod+0x418>)
 8005a4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a50:	f105 0609 	add.w	r6, r5, #9
 8005a54:	2700      	movs	r7, #0
 8005a56:	e016      	b.n	8005a86 <d_print_mod+0x196>
 8005a58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a60:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a64:	4798      	blx	r3
 8005a66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a70:	2200      	movs	r2, #0
 8005a72:	2301      	movs	r3, #1
 8005a74:	42ae      	cmp	r6, r5
 8005a76:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a7a:	f804 8002 	strb.w	r8, [r4, r2]
 8005a7e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a82:	f000 80c3 	beq.w	8005c0c <d_print_mod+0x31c>
 8005a86:	2bff      	cmp	r3, #255	; 0xff
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a90:	d0e2      	beq.n	8005a58 <d_print_mod+0x168>
 8005a92:	461a      	mov	r2, r3
 8005a94:	3301      	adds	r3, #1
 8005a96:	e7ed      	b.n	8005a74 <d_print_mod+0x184>
 8005a98:	4d9c      	ldr	r5, [pc, #624]	; (8005d0c <d_print_mod+0x41c>)
 8005a9a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a9e:	1dae      	adds	r6, r5, #6
 8005aa0:	2700      	movs	r7, #0
 8005aa2:	e016      	b.n	8005ad2 <d_print_mod+0x1e2>
 8005aa4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005aa8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005aac:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005ab0:	4798      	blx	r3
 8005ab2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005abc:	2200      	movs	r2, #0
 8005abe:	2301      	movs	r3, #1
 8005ac0:	42b5      	cmp	r5, r6
 8005ac2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ac6:	f804 8002 	strb.w	r8, [r4, r2]
 8005aca:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005ace:	f000 809d 	beq.w	8005c0c <d_print_mod+0x31c>
 8005ad2:	2bff      	cmp	r3, #255	; 0xff
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005adc:	d0e2      	beq.n	8005aa4 <d_print_mod+0x1b4>
 8005ade:	461a      	mov	r2, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	e7ed      	b.n	8005ac0 <d_print_mod+0x1d0>
 8005ae4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ae8:	29ff      	cmp	r1, #255	; 0xff
 8005aea:	d10f      	bne.n	8005b0c <d_print_mod+0x21c>
 8005aec:	2500      	movs	r5, #0
 8005aee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005af2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005af6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005afa:	4798      	blx	r3
 8005afc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b00:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b04:	3301      	adds	r3, #1
 8005b06:	4629      	mov	r1, r5
 8005b08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	1c4b      	adds	r3, r1, #1
 8005b10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b14:	5462      	strb	r2, [r4, r1]
 8005b16:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b1a:	e05d      	b.n	8005bd8 <d_print_mod+0x2e8>
 8005b1c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b20:	29ff      	cmp	r1, #255	; 0xff
 8005b22:	d10f      	bne.n	8005b44 <d_print_mod+0x254>
 8005b24:	2500      	movs	r5, #0
 8005b26:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b2a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b2e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b32:	4798      	blx	r3
 8005b34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b38:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b44:	2220      	movs	r2, #32
 8005b46:	1c4b      	adds	r3, r1, #1
 8005b48:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b4c:	5462      	strb	r2, [r4, r1]
 8005b4e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b52:	e154      	b.n	8005dfe <d_print_mod+0x50e>
 8005b54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b58:	29ff      	cmp	r1, #255	; 0xff
 8005b5a:	d10f      	bne.n	8005b7c <d_print_mod+0x28c>
 8005b5c:	2700      	movs	r7, #0
 8005b5e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b62:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b66:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b6a:	4798      	blx	r3
 8005b6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b70:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005b74:	3301      	adds	r3, #1
 8005b76:	4639      	mov	r1, r7
 8005b78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b7c:	1c4a      	adds	r2, r1, #1
 8005b7e:	2320      	movs	r3, #32
 8005b80:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b84:	5463      	strb	r3, [r4, r1]
 8005b86:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	68ea      	ldr	r2, [r5, #12]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	f7fd b816 	b.w	8002bc4 <d_print_comp>
 8005b98:	f011 0604 	ands.w	r6, r1, #4
 8005b9c:	d136      	bne.n	8005c0c <d_print_mod+0x31c>
 8005b9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ba2:	29ff      	cmp	r1, #255	; 0xff
 8005ba4:	d10e      	bne.n	8005bc4 <d_print_mod+0x2d4>
 8005ba6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005baa:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005bae:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005bb2:	4798      	blx	r3
 8005bb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bb8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005bc4:	232a      	movs	r3, #42	; 0x2a
 8005bc6:	1c4a      	adds	r2, r1, #1
 8005bc8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005bcc:	5463      	strb	r3, [r4, r1]
 8005bce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005bd2:	e01b      	b.n	8005c0c <d_print_mod+0x31c>
 8005bd4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005bd8:	2bff      	cmp	r3, #255	; 0xff
 8005bda:	f040 81a9 	bne.w	8005f30 <d_print_mod+0x640>
 8005bde:	2500      	movs	r5, #0
 8005be0:	4619      	mov	r1, r3
 8005be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005be6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005bea:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4798      	blx	r3
 8005bf2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2226      	movs	r2, #38	; 0x26
 8005c02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005c06:	54e2      	strb	r2, [r4, r3]
 8005c08:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005c14:	2b28      	cmp	r3, #40	; 0x28
 8005c16:	d019      	beq.n	8005c4c <d_print_mod+0x35c>
 8005c18:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c1c:	29ff      	cmp	r1, #255	; 0xff
 8005c1e:	f040 818b 	bne.w	8005f38 <d_print_mod+0x648>
 8005c22:	2700      	movs	r7, #0
 8005c24:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005c28:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005c2c:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005c30:	4798      	blx	r3
 8005c32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c36:	3301      	adds	r3, #1
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c3e:	2201      	movs	r2, #1
 8005c40:	2320      	movs	r3, #32
 8005c42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c46:	5463      	strb	r3, [r4, r1]
 8005c48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c4c:	68aa      	ldr	r2, [r5, #8]
 8005c4e:	4d30      	ldr	r5, [pc, #192]	; (8005d10 <d_print_mod+0x420>)
 8005c50:	4631      	mov	r1, r6
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7fc ffb6 	bl	8002bc4 <d_print_comp>
 8005c58:	1cee      	adds	r6, r5, #3
 8005c5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c5e:	2700      	movs	r7, #0
 8005c60:	e015      	b.n	8005c8e <d_print_mod+0x39e>
 8005c62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c6a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c6e:	4798      	blx	r3
 8005c70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c74:	3301      	adds	r3, #1
 8005c76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	42ae      	cmp	r6, r5
 8005c80:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c84:	f804 8002 	strb.w	r8, [r4, r2]
 8005c88:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c8c:	d0be      	beq.n	8005c0c <d_print_mod+0x31c>
 8005c8e:	2bff      	cmp	r3, #255	; 0xff
 8005c90:	4619      	mov	r1, r3
 8005c92:	4620      	mov	r0, r4
 8005c94:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005c98:	d0e3      	beq.n	8005c62 <d_print_mod+0x372>
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	e7ee      	b.n	8005c7e <d_print_mod+0x38e>
 8005ca0:	4f1c      	ldr	r7, [pc, #112]	; (8005d14 <d_print_mod+0x424>)
 8005ca2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005ca6:	f107 080a 	add.w	r8, r7, #10
 8005caa:	f04f 0900 	mov.w	r9, #0
 8005cae:	e016      	b.n	8005cde <d_print_mod+0x3ee>
 8005cb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005cb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005cb8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005cbc:	4798      	blx	r3
 8005cbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2301      	movs	r3, #1
 8005ccc:	45b8      	cmp	r8, r7
 8005cce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cd2:	f804 a002 	strb.w	sl, [r4, r2]
 8005cd6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005cda:	f000 811e 	beq.w	8005f1a <d_print_mod+0x62a>
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005ce8:	d0e2      	beq.n	8005cb0 <d_print_mod+0x3c0>
 8005cea:	461a      	mov	r2, r3
 8005cec:	3301      	adds	r3, #1
 8005cee:	e7ed      	b.n	8005ccc <d_print_mod+0x3dc>
 8005cf0:	4d09      	ldr	r5, [pc, #36]	; (8005d18 <d_print_mod+0x428>)
 8005cf2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cf6:	f105 0611 	add.w	r6, r5, #17
 8005cfa:	2700      	movs	r7, #0
 8005cfc:	e025      	b.n	8005d4a <d_print_mod+0x45a>
 8005cfe:	bf00      	nop
 8005d00:	080942e8 	.word	0x080942e8
 8005d04:	080942a7 	.word	0x080942a7
 8005d08:	080942b3 	.word	0x080942b3
 8005d0c:	080942c0 	.word	0x080942c0
 8005d10:	0809430c 	.word	0x0809430c
 8005d14:	08094310 	.word	0x08094310
 8005d18:	080942c7 	.word	0x080942c7
 8005d1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d24:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d28:	4798      	blx	r3
 8005d2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d2e:	3301      	adds	r3, #1
 8005d30:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d34:	2200      	movs	r2, #0
 8005d36:	2301      	movs	r3, #1
 8005d38:	42ae      	cmp	r6, r5
 8005d3a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d3e:	f804 8002 	strb.w	r8, [r4, r2]
 8005d42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d46:	f43f af61 	beq.w	8005c0c <d_print_mod+0x31c>
 8005d4a:	2bff      	cmp	r3, #255	; 0xff
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d54:	d0e2      	beq.n	8005d1c <d_print_mod+0x42c>
 8005d56:	461a      	mov	r2, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	e7ed      	b.n	8005d38 <d_print_mod+0x448>
 8005d5c:	4f77      	ldr	r7, [pc, #476]	; (8005f3c <d_print_mod+0x64c>)
 8005d5e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d62:	f107 0809 	add.w	r8, r7, #9
 8005d66:	f04f 0900 	mov.w	r9, #0
 8005d6a:	e016      	b.n	8005d9a <d_print_mod+0x4aa>
 8005d6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d78:	4798      	blx	r3
 8005d7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d84:	2200      	movs	r2, #0
 8005d86:	2301      	movs	r3, #1
 8005d88:	4547      	cmp	r7, r8
 8005d8a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d8e:	f804 a002 	strb.w	sl, [r4, r2]
 8005d92:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d96:	f000 8082 	beq.w	8005e9e <d_print_mod+0x5ae>
 8005d9a:	2bff      	cmp	r3, #255	; 0xff
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005da4:	d0e2      	beq.n	8005d6c <d_print_mod+0x47c>
 8005da6:	461a      	mov	r2, r3
 8005da8:	3301      	adds	r3, #1
 8005daa:	e7ed      	b.n	8005d88 <d_print_mod+0x498>
 8005dac:	4d64      	ldr	r5, [pc, #400]	; (8005f40 <d_print_mod+0x650>)
 8005dae:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005db2:	f105 0608 	add.w	r6, r5, #8
 8005db6:	2700      	movs	r7, #0
 8005db8:	e016      	b.n	8005de8 <d_print_mod+0x4f8>
 8005dba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dc2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005dc6:	4798      	blx	r3
 8005dc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	42ae      	cmp	r6, r5
 8005dd8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ddc:	f804 8002 	strb.w	r8, [r4, r2]
 8005de0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005de4:	f43f af12 	beq.w	8005c0c <d_print_mod+0x31c>
 8005de8:	2bff      	cmp	r3, #255	; 0xff
 8005dea:	4619      	mov	r1, r3
 8005dec:	4620      	mov	r0, r4
 8005dee:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005df2:	d0e2      	beq.n	8005dba <d_print_mod+0x4ca>
 8005df4:	461a      	mov	r2, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	e7ed      	b.n	8005dd6 <d_print_mod+0x4e6>
 8005dfa:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005dfe:	4d51      	ldr	r5, [pc, #324]	; (8005f44 <d_print_mod+0x654>)
 8005e00:	2700      	movs	r7, #0
 8005e02:	1cae      	adds	r6, r5, #2
 8005e04:	e016      	b.n	8005e34 <d_print_mod+0x544>
 8005e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e0e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e12:	4798      	blx	r3
 8005e14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2301      	movs	r3, #1
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e28:	f804 8002 	strb.w	r8, [r4, r2]
 8005e2c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e30:	f43f aeec 	beq.w	8005c0c <d_print_mod+0x31c>
 8005e34:	2bff      	cmp	r3, #255	; 0xff
 8005e36:	4619      	mov	r1, r3
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e3e:	d0e2      	beq.n	8005e06 <d_print_mod+0x516>
 8005e40:	461a      	mov	r2, r3
 8005e42:	3301      	adds	r3, #1
 8005e44:	e7ed      	b.n	8005e22 <d_print_mod+0x532>
 8005e46:	4d40      	ldr	r5, [pc, #256]	; (8005f48 <d_print_mod+0x658>)
 8005e48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e4c:	f105 060a 	add.w	r6, r5, #10
 8005e50:	2700      	movs	r7, #0
 8005e52:	e016      	b.n	8005e82 <d_print_mod+0x592>
 8005e54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e5c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e60:	4798      	blx	r3
 8005e62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e66:	3301      	adds	r3, #1
 8005e68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2301      	movs	r3, #1
 8005e70:	42b5      	cmp	r5, r6
 8005e72:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e76:	f804 8002 	strb.w	r8, [r4, r2]
 8005e7a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e7e:	f43f aec5 	beq.w	8005c0c <d_print_mod+0x31c>
 8005e82:	2bff      	cmp	r3, #255	; 0xff
 8005e84:	4619      	mov	r1, r3
 8005e86:	4620      	mov	r0, r4
 8005e88:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e8c:	d0e2      	beq.n	8005e54 <d_print_mod+0x564>
 8005e8e:	461a      	mov	r2, r3
 8005e90:	3301      	adds	r3, #1
 8005e92:	e7ed      	b.n	8005e70 <d_print_mod+0x580>
 8005e94:	462a      	mov	r2, r5
 8005e96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9a:	f7fc be93 	b.w	8002bc4 <d_print_comp>
 8005e9e:	68ea      	ldr	r2, [r5, #12]
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	f43f aeb3 	beq.w	8005c0c <d_print_mod+0x31c>
 8005ea6:	2bff      	cmp	r3, #255	; 0xff
 8005ea8:	d144      	bne.n	8005f34 <d_print_mod+0x644>
 8005eaa:	2700      	movs	r7, #0
 8005eac:	4619      	mov	r1, r3
 8005eae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005eb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005eb6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4798      	blx	r3
 8005ebe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ec2:	68ea      	ldr	r2, [r5, #12]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005eca:	463b      	mov	r3, r7
 8005ecc:	2101      	movs	r1, #1
 8005ece:	2528      	movs	r5, #40	; 0x28
 8005ed0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	54e5      	strb	r5, [r4, r3]
 8005eda:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005ede:	f7fc fe71 	bl	8002bc4 <d_print_comp>
 8005ee2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ee6:	29ff      	cmp	r1, #255	; 0xff
 8005ee8:	d120      	bne.n	8005f2c <d_print_mod+0x63c>
 8005eea:	2500      	movs	r5, #0
 8005eec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ef0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ef4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ef8:	4620      	mov	r0, r4
 8005efa:	4798      	blx	r3
 8005efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f00:	3301      	adds	r3, #1
 8005f02:	4629      	mov	r1, r5
 8005f04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2329      	movs	r3, #41	; 0x29
 8005f0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f10:	5463      	strb	r3, [r4, r1]
 8005f12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	68aa      	ldr	r2, [r5, #8]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7fc fe50 	bl	8002bc4 <d_print_comp>
 8005f24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f28:	29ff      	cmp	r1, #255	; 0xff
 8005f2a:	d0de      	beq.n	8005eea <d_print_mod+0x5fa>
 8005f2c:	1c4a      	adds	r2, r1, #1
 8005f2e:	e7ec      	b.n	8005f0a <d_print_mod+0x61a>
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	e665      	b.n	8005c00 <d_print_mod+0x310>
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	e7ca      	b.n	8005ece <d_print_mod+0x5de>
 8005f38:	1c4a      	adds	r2, r1, #1
 8005f3a:	e681      	b.n	8005c40 <d_print_mod+0x350>
 8005f3c:	080942db 	.word	0x080942db
 8005f40:	080942f3 	.word	0x080942f3
 8005f44:	080942f0 	.word	0x080942f0
 8005f48:	08094300 	.word	0x08094300

08005f4c <d_print_function_type.isra.15>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4604      	mov	r4, r0
 8005f52:	460e      	mov	r6, r1
 8005f54:	4617      	mov	r7, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	b1d3      	cbz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	b9c3      	cbnz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f5e:	462a      	mov	r2, r5
 8005f60:	2001      	movs	r0, #1
 8005f62:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 800612c <d_print_function_type.isra.15+0x1e0>
 8005f66:	e001      	b.n	8005f6c <d_print_function_type.isra.15+0x20>
 8005f68:	6893      	ldr	r3, [r2, #8]
 8005f6a:	b98b      	cbnz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f6c:	6853      	ldr	r3, [r2, #4]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	3b19      	subs	r3, #25
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b12      	cmp	r3, #18
 8005f76:	fa00 f103 	lsl.w	r1, r0, r3
 8005f7a:	d806      	bhi.n	8005f8a <d_print_function_type.isra.15+0x3e>
 8005f7c:	ea11 0f0c 	tst.w	r1, ip
 8005f80:	f040 80c7 	bne.w	8006112 <d_print_function_type.isra.15+0x1c6>
 8005f84:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f88:	d154      	bne.n	8006034 <d_print_function_type.isra.15+0xe8>
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	d1eb      	bne.n	8005f68 <d_print_function_type.isra.15+0x1c>
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f96:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f8c6 	bl	8006130 <d_print_mod_list>
 8005fa4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fa8:	29ff      	cmp	r1, #255	; 0xff
 8005faa:	f040 80a4 	bne.w	80060f6 <d_print_function_type.isra.15+0x1aa>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005fb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4798      	blx	r3
 8005fc0:	2328      	movs	r3, #40	; 0x28
 8005fc2:	7023      	strb	r3, [r4, #0]
 8005fc4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005fd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	f000 8097 	beq.w	800610e <d_print_function_type.isra.15+0x1c2>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7fc fdee 	bl	8002bc4 <d_print_comp>
 8005fe8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fec:	2bff      	cmp	r3, #255	; 0xff
 8005fee:	f040 808e 	bne.w	800610e <d_print_function_type.isra.15+0x1c2>
 8005ff2:	2700      	movs	r7, #0
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ffa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ffe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006002:	4620      	mov	r0, r4
 8006004:	4798      	blx	r3
 8006006:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006010:	463b      	mov	r3, r7
 8006012:	2201      	movs	r2, #1
 8006014:	2029      	movs	r0, #41	; 0x29
 8006016:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800601a:	4631      	mov	r1, r6
 800601c:	54e0      	strb	r0, [r4, r3]
 800601e:	462a      	mov	r2, r5
 8006020:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006024:	2301      	movs	r3, #1
 8006026:	4620      	mov	r0, r4
 8006028:	f000 f882 	bl	8006130 <d_print_mod_list>
 800602c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006034:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006038:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800603c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006040:	2a28      	cmp	r2, #40	; 0x28
 8006042:	d01e      	beq.n	8006082 <d_print_function_type.isra.15+0x136>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d01c      	beq.n	8006082 <d_print_function_type.isra.15+0x136>
 8006048:	29ff      	cmp	r1, #255	; 0xff
 800604a:	d112      	bne.n	8006072 <d_print_function_type.isra.15+0x126>
 800604c:	2300      	movs	r3, #0
 800604e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006052:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006056:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800605a:	4620      	mov	r0, r4
 800605c:	4798      	blx	r3
 800605e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006062:	2220      	movs	r2, #32
 8006064:	3301      	adds	r3, #1
 8006066:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800606a:	7022      	strb	r2, [r4, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	1c4a      	adds	r2, r1, #1
 8006070:	e01a      	b.n	80060a8 <d_print_function_type.isra.15+0x15c>
 8006072:	1c4b      	adds	r3, r1, #1
 8006074:	2220      	movs	r2, #32
 8006076:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800607a:	5462      	strb	r2, [r4, r1]
 800607c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006080:	4619      	mov	r1, r3
 8006082:	29ff      	cmp	r1, #255	; 0xff
 8006084:	d1f3      	bne.n	800606e <d_print_function_type.isra.15+0x122>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800608e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006092:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006096:	4620      	mov	r0, r4
 8006098:	4798      	blx	r3
 800609a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800609e:	3301      	adds	r3, #1
 80060a0:	4641      	mov	r1, r8
 80060a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060a6:	2201      	movs	r2, #1
 80060a8:	2328      	movs	r3, #40	; 0x28
 80060aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80060ae:	5463      	strb	r3, [r4, r1]
 80060b0:	f04f 0900 	mov.w	r9, #0
 80060b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80060b8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 80060bc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80060c0:	464b      	mov	r3, r9
 80060c2:	462a      	mov	r2, r5
 80060c4:	4631      	mov	r1, r6
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f832 	bl	8006130 <d_print_mod_list>
 80060cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80060d0:	2bff      	cmp	r3, #255	; 0xff
 80060d2:	d123      	bne.n	800611c <d_print_function_type.isra.15+0x1d0>
 80060d4:	4619      	mov	r1, r3
 80060d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060e2:	4620      	mov	r0, r4
 80060e4:	4798      	blx	r3
 80060e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ea:	2229      	movs	r2, #41	; 0x29
 80060ec:	3301      	adds	r3, #1
 80060ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060f2:	7022      	strb	r2, [r4, #0]
 80060f4:	2101      	movs	r1, #1
 80060f6:	2228      	movs	r2, #40	; 0x28
 80060f8:	1c4b      	adds	r3, r1, #1
 80060fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060fe:	5462      	strb	r2, [r4, r1]
 8006100:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	2a00      	cmp	r2, #0
 8006108:	f43f af70 	beq.w	8005fec <d_print_function_type.isra.15+0xa0>
 800610c:	e768      	b.n	8005fe0 <d_print_function_type.isra.15+0x94>
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	e780      	b.n	8006014 <d_print_function_type.isra.15+0xc8>
 8006112:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800611a:	e793      	b.n	8006044 <d_print_function_type.isra.15+0xf8>
 800611c:	2229      	movs	r2, #41	; 0x29
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006124:	54e2      	strb	r2, [r4, r3]
 8006126:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800612a:	e73d      	b.n	8005fa8 <d_print_function_type.isra.15+0x5c>
 800612c:	00043107 	.word	0x00043107

08006130 <d_print_mod_list>:
 8006130:	2a00      	cmp	r2, #0
 8006132:	f000 80ac 	beq.w	800628e <d_print_mod_list+0x15e>
 8006136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	461f      	mov	r7, r3
 800613c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006140:	b089      	sub	sp, #36	; 0x24
 8006142:	4605      	mov	r5, r0
 8006144:	bb4b      	cbnz	r3, 800619a <d_print_mod_list+0x6a>
 8006146:	4688      	mov	r8, r1
 8006148:	4614      	mov	r4, r2
 800614a:	f04f 0901 	mov.w	r9, #1
 800614e:	e002      	b.n	8006156 <d_print_mod_list+0x26>
 8006150:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006154:	bb0b      	cbnz	r3, 800619a <d_print_mod_list+0x6a>
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	b9e3      	cbnz	r3, 8006194 <d_print_mod_list+0x64>
 800615a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800615e:	f89a 6000 	ldrb.w	r6, [sl]
 8006162:	4630      	mov	r0, r6
 8006164:	b917      	cbnz	r7, 800616c <d_print_mod_list+0x3c>
 8006166:	f7fa f93f 	bl	80003e8 <is_fnqual_component_type>
 800616a:	b998      	cbnz	r0, 8006194 <d_print_mod_list+0x64>
 800616c:	68e3      	ldr	r3, [r4, #12]
 800616e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006172:	2e29      	cmp	r6, #41	; 0x29
 8006174:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 8006178:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800617c:	4652      	mov	r2, sl
 800617e:	4641      	mov	r1, r8
 8006180:	4628      	mov	r0, r5
 8006182:	d00d      	beq.n	80061a0 <d_print_mod_list+0x70>
 8006184:	2e2a      	cmp	r6, #42	; 0x2a
 8006186:	d015      	beq.n	80061b4 <d_print_mod_list+0x84>
 8006188:	2e02      	cmp	r6, #2
 800618a:	d01d      	beq.n	80061c8 <d_print_mod_list+0x98>
 800618c:	f7ff fbb0 	bl	80058f0 <d_print_mod>
 8006190:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006194:	6824      	ldr	r4, [r4, #0]
 8006196:	2c00      	cmp	r4, #0
 8006198:	d1da      	bne.n	8006150 <d_print_mod_list+0x20>
 800619a:	b009      	add	sp, #36	; 0x24
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	f10a 020c 	add.w	r2, sl, #12
 80061a6:	f7ff fed1 	bl	8005f4c <d_print_function_type.isra.15>
 80061aa:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061ae:	b009      	add	sp, #36	; 0x24
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	f10a 0208 	add.w	r2, sl, #8
 80061ba:	f000 f8f1 	bl	80063a0 <d_print_array_type.isra.14>
 80061be:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061c2:	b009      	add	sp, #36	; 0x24
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	2600      	movs	r6, #0
 80061ca:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 80061ce:	f8da 2008 	ldr.w	r2, [sl, #8]
 80061d2:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80061d6:	f7fc fcf5 	bl	8002bc4 <d_print_comp>
 80061da:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 80061de:	f018 0704 	ands.w	r7, r8, #4
 80061e2:	d02f      	beq.n	8006244 <d_print_mod_list+0x114>
 80061e4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80061e8:	29ff      	cmp	r1, #255	; 0xff
 80061ea:	f040 80cf 	bne.w	800638c <d_print_mod_list+0x25c>
 80061ee:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80061f2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80061f6:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 80061fa:	4628      	mov	r0, r5
 80061fc:	4798      	blx	r3
 80061fe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006202:	3301      	adds	r3, #1
 8006204:	4631      	mov	r1, r6
 8006206:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 800620a:	2201      	movs	r2, #1
 800620c:	232e      	movs	r3, #46	; 0x2e
 800620e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8006212:	546b      	strb	r3, [r5, r1]
 8006214:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8006218:	6863      	ldr	r3, [r4, #4]
 800621a:	68dc      	ldr	r4, [r3, #12]
 800621c:	7820      	ldrb	r0, [r4, #0]
 800621e:	2846      	cmp	r0, #70	; 0x46
 8006220:	d102      	bne.n	8006228 <d_print_mod_list+0xf8>
 8006222:	e035      	b.n	8006290 <d_print_mod_list+0x160>
 8006224:	68a4      	ldr	r4, [r4, #8]
 8006226:	7820      	ldrb	r0, [r4, #0]
 8006228:	f7fa f8de 	bl	80003e8 <is_fnqual_component_type>
 800622c:	2800      	cmp	r0, #0
 800622e:	d1f9      	bne.n	8006224 <d_print_mod_list+0xf4>
 8006230:	4622      	mov	r2, r4
 8006232:	4641      	mov	r1, r8
 8006234:	4628      	mov	r0, r5
 8006236:	f7fc fcc5 	bl	8002bc4 <d_print_comp>
 800623a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800623e:	b009      	add	sp, #36	; 0x24
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	4e52      	ldr	r6, [pc, #328]	; (8006390 <d_print_mod_list+0x260>)
 8006246:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800624a:	f106 0902 	add.w	r9, r6, #2
 800624e:	e015      	b.n	800627c <d_print_mod_list+0x14c>
 8006250:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006254:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006258:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800625c:	4798      	blx	r3
 800625e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006262:	3301      	adds	r3, #1
 8006264:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006268:	2200      	movs	r2, #0
 800626a:	2301      	movs	r3, #1
 800626c:	45b1      	cmp	r9, r6
 800626e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006272:	f805 a002 	strb.w	sl, [r5, r2]
 8006276:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800627a:	d0cd      	beq.n	8006218 <d_print_mod_list+0xe8>
 800627c:	2bff      	cmp	r3, #255	; 0xff
 800627e:	4619      	mov	r1, r3
 8006280:	4628      	mov	r0, r5
 8006282:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006286:	d0e3      	beq.n	8006250 <d_print_mod_list+0x120>
 8006288:	461a      	mov	r2, r3
 800628a:	3301      	adds	r3, #1
 800628c:	e7ee      	b.n	800626c <d_print_mod_list+0x13c>
 800628e:	4770      	bx	lr
 8006290:	4e40      	ldr	r6, [pc, #256]	; (8006394 <d_print_mod_list+0x264>)
 8006292:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006296:	f106 070d 	add.w	r7, r6, #13
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	e015      	b.n	80062cc <d_print_mod_list+0x19c>
 80062a0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062a4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062a8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062ac:	4798      	blx	r3
 80062ae:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062b2:	3301      	adds	r3, #1
 80062b4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062b8:	2200      	movs	r2, #0
 80062ba:	2301      	movs	r3, #1
 80062bc:	42b7      	cmp	r7, r6
 80062be:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062c2:	f805 a002 	strb.w	sl, [r5, r2]
 80062c6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062ca:	d008      	beq.n	80062de <d_print_mod_list+0x1ae>
 80062cc:	2bff      	cmp	r3, #255	; 0xff
 80062ce:	4619      	mov	r1, r3
 80062d0:	4628      	mov	r0, r5
 80062d2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062d6:	d0e3      	beq.n	80062a0 <d_print_mod_list+0x170>
 80062d8:	461a      	mov	r2, r3
 80062da:	3301      	adds	r3, #1
 80062dc:	e7ee      	b.n	80062bc <d_print_mod_list+0x18c>
 80062de:	68e2      	ldr	r2, [r4, #12]
 80062e0:	492d      	ldr	r1, [pc, #180]	; (8006398 <d_print_mod_list+0x268>)
 80062e2:	3201      	adds	r2, #1
 80062e4:	a801      	add	r0, sp, #4
 80062e6:	f012 fe2d 	bl	8018f44 <sprintf>
 80062ea:	a801      	add	r0, sp, #4
 80062ec:	f000 fd5a 	bl	8006da4 <strlen>
 80062f0:	b328      	cbz	r0, 800633e <d_print_mod_list+0x20e>
 80062f2:	ae01      	add	r6, sp, #4
 80062f4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062f8:	1837      	adds	r7, r6, r0
 80062fa:	f04f 0900 	mov.w	r9, #0
 80062fe:	e015      	b.n	800632c <d_print_mod_list+0x1fc>
 8006300:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006304:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006308:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800630c:	4798      	blx	r3
 800630e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006312:	3301      	adds	r3, #1
 8006314:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006318:	2200      	movs	r2, #0
 800631a:	2301      	movs	r3, #1
 800631c:	42be      	cmp	r6, r7
 800631e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006322:	f805 a002 	strb.w	sl, [r5, r2]
 8006326:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800632a:	d00a      	beq.n	8006342 <d_print_mod_list+0x212>
 800632c:	2bff      	cmp	r3, #255	; 0xff
 800632e:	4619      	mov	r1, r3
 8006330:	4628      	mov	r0, r5
 8006332:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006336:	d0e3      	beq.n	8006300 <d_print_mod_list+0x1d0>
 8006338:	461a      	mov	r2, r3
 800633a:	3301      	adds	r3, #1
 800633c:	e7ee      	b.n	800631c <d_print_mod_list+0x1ec>
 800633e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006342:	4e16      	ldr	r6, [pc, #88]	; (800639c <d_print_mod_list+0x26c>)
 8006344:	f04f 0900 	mov.w	r9, #0
 8006348:	1cf7      	adds	r7, r6, #3
 800634a:	e016      	b.n	800637a <d_print_mod_list+0x24a>
 800634c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006350:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006354:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006358:	4798      	blx	r3
 800635a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800635e:	3301      	adds	r3, #1
 8006360:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006364:	2200      	movs	r2, #0
 8006366:	2301      	movs	r3, #1
 8006368:	42b7      	cmp	r7, r6
 800636a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800636e:	f805 a002 	strb.w	sl, [r5, r2]
 8006372:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006376:	f43f af55 	beq.w	8006224 <d_print_mod_list+0xf4>
 800637a:	2bff      	cmp	r3, #255	; 0xff
 800637c:	4619      	mov	r1, r3
 800637e:	4628      	mov	r0, r5
 8006380:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006384:	d0e2      	beq.n	800634c <d_print_mod_list+0x21c>
 8006386:	461a      	mov	r2, r3
 8006388:	3301      	adds	r3, #1
 800638a:	e7ed      	b.n	8006368 <d_print_mod_list+0x238>
 800638c:	1c4a      	adds	r2, r1, #1
 800638e:	e73d      	b.n	800620c <d_print_mod_list+0xdc>
 8006390:	08094028 	.word	0x08094028
 8006394:	0809402c 	.word	0x0809402c
 8006398:	08093fd8 	.word	0x08093fd8
 800639c:	0809403c 	.word	0x0809403c

080063a0 <d_print_array_type.isra.14>:
 80063a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	4690      	mov	r8, r2
 80063aa:	b15b      	cbz	r3, 80063c4 <d_print_array_type.isra.14+0x24>
 80063ac:	461e      	mov	r6, r3
 80063ae:	689d      	ldr	r5, [r3, #8]
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	d042      	beq.n	800643a <d_print_array_type.isra.14+0x9a>
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f9      	bne.n	80063ae <d_print_array_type.isra.14+0xe>
 80063ba:	4632      	mov	r2, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff feb6 	bl	8006130 <d_print_mod_list>
 80063c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063c8:	29ff      	cmp	r1, #255	; 0xff
 80063ca:	f040 80b1 	bne.w	8006530 <d_print_array_type.isra.14+0x190>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063dc:	4620      	mov	r0, r4
 80063de:	4798      	blx	r3
 80063e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063e4:	2220      	movs	r2, #32
 80063e6:	3301      	adds	r3, #1
 80063e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063ec:	7022      	strb	r2, [r4, #0]
 80063ee:	2301      	movs	r3, #1
 80063f0:	225b      	movs	r2, #91	; 0x5b
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063f8:	54e2      	strb	r2, [r4, r3]
 80063fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80063fe:	f8d8 2000 	ldr.w	r2, [r8]
 8006402:	2a00      	cmp	r2, #0
 8006404:	d140      	bne.n	8006488 <d_print_array_type.isra.14+0xe8>
 8006406:	29ff      	cmp	r1, #255	; 0xff
 8006408:	d145      	bne.n	8006496 <d_print_array_type.isra.14+0xf6>
 800640a:	2500      	movs	r5, #0
 800640c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006414:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006418:	4620      	mov	r0, r4
 800641a:	4798      	blx	r3
 800641c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006420:	3301      	adds	r3, #1
 8006422:	4629      	mov	r1, r5
 8006424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006428:	2201      	movs	r2, #1
 800642a:	235d      	movs	r3, #93	; 0x5d
 800642c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006430:	5463      	strb	r3, [r4, r1]
 8006432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b2a      	cmp	r3, #42	; 0x2a
 8006440:	d12b      	bne.n	800649a <d_print_array_type.isra.14+0xfa>
 8006442:	462b      	mov	r3, r5
 8006444:	4632      	mov	r2, r6
 8006446:	4639      	mov	r1, r7
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fe71 	bl	8006130 <d_print_mod_list>
 800644e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d1cc      	bne.n	80063f0 <d_print_array_type.isra.14+0x50>
 8006456:	2200      	movs	r2, #0
 8006458:	4619      	mov	r1, r3
 800645a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800645e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006462:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006466:	4620      	mov	r0, r4
 8006468:	4798      	blx	r3
 800646a:	235b      	movs	r3, #91	; 0x5b
 800646c:	7023      	strb	r3, [r4, #0]
 800646e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006472:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006476:	f8d8 2000 	ldr.w	r2, [r8]
 800647a:	3301      	adds	r3, #1
 800647c:	2101      	movs	r1, #1
 800647e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006482:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006486:	b132      	cbz	r2, 8006496 <d_print_array_type.isra.14+0xf6>
 8006488:	4639      	mov	r1, r7
 800648a:	4620      	mov	r0, r4
 800648c:	f7fc fb9a 	bl	8002bc4 <d_print_comp>
 8006490:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006494:	e7b7      	b.n	8006406 <d_print_array_type.isra.14+0x66>
 8006496:	1c4a      	adds	r2, r1, #1
 8006498:	e7c7      	b.n	800642a <d_print_array_type.isra.14+0x8a>
 800649a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006550 <d_print_array_type.isra.14+0x1b0>
 800649e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064a2:	f109 0a02 	add.w	sl, r9, #2
 80064a6:	e016      	b.n	80064d6 <d_print_array_type.isra.14+0x136>
 80064a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80064b4:	4798      	blx	r3
 80064b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064ba:	2200      	movs	r2, #0
 80064bc:	3301      	adds	r3, #1
 80064be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064c2:	45ca      	cmp	sl, r9
 80064c4:	f04f 0301 	mov.w	r3, #1
 80064c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064cc:	f804 b002 	strb.w	fp, [r4, r2]
 80064d0:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064d4:	d010      	beq.n	80064f8 <d_print_array_type.isra.14+0x158>
 80064d6:	2bff      	cmp	r3, #255	; 0xff
 80064d8:	4619      	mov	r1, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	f819 bb01 	ldrb.w	fp, [r9], #1
 80064e0:	d0e2      	beq.n	80064a8 <d_print_array_type.isra.14+0x108>
 80064e2:	461a      	mov	r2, r3
 80064e4:	45ca      	cmp	sl, r9
 80064e6:	f103 0301 	add.w	r3, r3, #1
 80064ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ee:	f804 b002 	strb.w	fp, [r4, r2]
 80064f2:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064f6:	d1ee      	bne.n	80064d6 <d_print_array_type.isra.14+0x136>
 80064f8:	2300      	movs	r3, #0
 80064fa:	4632      	mov	r2, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	4620      	mov	r0, r4
 8006500:	f7ff fe16 	bl	8006130 <d_print_mod_list>
 8006504:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006508:	2bff      	cmp	r3, #255	; 0xff
 800650a:	d119      	bne.n	8006540 <d_print_array_type.isra.14+0x1a0>
 800650c:	2200      	movs	r2, #0
 800650e:	4619      	mov	r1, r3
 8006510:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8006514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006518:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800651c:	4620      	mov	r0, r4
 800651e:	4798      	blx	r3
 8006520:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006524:	2229      	movs	r2, #41	; 0x29
 8006526:	3301      	adds	r3, #1
 8006528:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800652c:	7022      	strb	r2, [r4, #0]
 800652e:	2101      	movs	r1, #1
 8006530:	2220      	movs	r2, #32
 8006532:	1c4b      	adds	r3, r1, #1
 8006534:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006538:	5462      	strb	r2, [r4, r1]
 800653a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800653e:	e788      	b.n	8006452 <d_print_array_type.isra.14+0xb2>
 8006540:	2229      	movs	r2, #41	; 0x29
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006548:	54e2      	strb	r2, [r4, r3]
 800654a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800654e:	e73b      	b.n	80063c8 <d_print_array_type.isra.14+0x28>
 8006550:	08094224 	.word	0x08094224

08006554 <d_print_expr_op>:
 8006554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006558:	7815      	ldrb	r5, [r2, #0]
 800655a:	2d31      	cmp	r5, #49	; 0x31
 800655c:	d003      	beq.n	8006566 <d_print_expr_op+0x12>
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f7fc bb2f 	b.w	8002bc4 <d_print_comp>
 8006566:	6893      	ldr	r3, [r2, #8]
 8006568:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800656c:	b37e      	cbz	r6, 80065ce <d_print_expr_op+0x7a>
 800656e:	442e      	add	r6, r5
 8006570:	4604      	mov	r4, r0
 8006572:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006576:	3e01      	subs	r6, #1
 8006578:	3d01      	subs	r5, #1
 800657a:	2700      	movs	r7, #0
 800657c:	e016      	b.n	80065ac <d_print_expr_op+0x58>
 800657e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006582:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006586:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800658a:	4798      	blx	r3
 800658c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006590:	2200      	movs	r2, #0
 8006592:	3301      	adds	r3, #1
 8006594:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006598:	42b5      	cmp	r5, r6
 800659a:	f04f 0301 	mov.w	r3, #1
 800659e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065a2:	f804 8002 	strb.w	r8, [r4, r2]
 80065a6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065aa:	d010      	beq.n	80065ce <d_print_expr_op+0x7a>
 80065ac:	2bff      	cmp	r3, #255	; 0xff
 80065ae:	4619      	mov	r1, r3
 80065b0:	4620      	mov	r0, r4
 80065b2:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80065b6:	d0e2      	beq.n	800657e <d_print_expr_op+0x2a>
 80065b8:	461a      	mov	r2, r3
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	f103 0301 	add.w	r3, r3, #1
 80065c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065c4:	f804 8002 	strb.w	r8, [r4, r2]
 80065c8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065cc:	d1ee      	bne.n	80065ac <d_print_expr_op+0x58>
 80065ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d2:	bf00      	nop

080065d4 <d_print_subexpr>:
 80065d4:	7813      	ldrb	r3, [r2, #0]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065dc:	4604      	mov	r4, r0
 80065de:	d941      	bls.n	8006664 <d_print_subexpr+0x90>
 80065e0:	2b30      	cmp	r3, #48	; 0x30
 80065e2:	d03f      	beq.n	8006664 <d_print_subexpr+0x90>
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d03d      	beq.n	8006664 <d_print_subexpr+0x90>
 80065e8:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80065ec:	2fff      	cmp	r7, #255	; 0xff
 80065ee:	460e      	mov	r6, r1
 80065f0:	4615      	mov	r5, r2
 80065f2:	d13e      	bne.n	8006672 <d_print_subexpr+0x9e>
 80065f4:	f04f 0800 	mov.w	r8, #0
 80065f8:	4639      	mov	r1, r7
 80065fa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80065fe:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006602:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8006606:	4798      	blx	r3
 8006608:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800660c:	3301      	adds	r3, #1
 800660e:	4647      	mov	r7, r8
 8006610:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006614:	2201      	movs	r2, #1
 8006616:	2328      	movs	r3, #40	; 0x28
 8006618:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800661c:	4631      	mov	r1, r6
 800661e:	55e3      	strb	r3, [r4, r7]
 8006620:	462a      	mov	r2, r5
 8006622:	4620      	mov	r0, r4
 8006624:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006628:	f7fc facc 	bl	8002bc4 <d_print_comp>
 800662c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006630:	29ff      	cmp	r1, #255	; 0xff
 8006632:	d11c      	bne.n	800666e <d_print_subexpr+0x9a>
 8006634:	2500      	movs	r5, #0
 8006636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800663a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800663e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006642:	4620      	mov	r0, r4
 8006644:	4798      	blx	r3
 8006646:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800664a:	3301      	adds	r3, #1
 800664c:	4629      	mov	r1, r5
 800664e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006652:	2201      	movs	r2, #1
 8006654:	2329      	movs	r3, #41	; 0x29
 8006656:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800665a:	5463      	strb	r3, [r4, r1]
 800665c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006664:	4620      	mov	r0, r4
 8006666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800666a:	f7fc baab 	b.w	8002bc4 <d_print_comp>
 800666e:	1c4a      	adds	r2, r1, #1
 8006670:	e7f0      	b.n	8006654 <d_print_subexpr+0x80>
 8006672:	1c7a      	adds	r2, r7, #1
 8006674:	e7cf      	b.n	8006616 <d_print_subexpr+0x42>
 8006676:	bf00      	nop

08006678 <d_maybe_print_fold_expression.isra.20>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	6892      	ldr	r2, [r2, #8]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	7816      	ldrb	r6, [r2, #0]
 8006682:	2e66      	cmp	r6, #102	; 0x66
 8006684:	b083      	sub	sp, #12
 8006686:	d003      	beq.n	8006690 <d_maybe_print_fold_expression.isra.20+0x18>
 8006688:	2000      	movs	r0, #0
 800668a:	b003      	add	sp, #12
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006696:	f899 3000 	ldrb.w	r3, [r9]
 800669a:	2b3b      	cmp	r3, #59	; 0x3b
 800669c:	f000 8110 	beq.w	80068c0 <d_maybe_print_fold_expression.isra.20+0x248>
 80066a0:	2300      	movs	r3, #0
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a8:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 80066ac:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80066b0:	7853      	ldrb	r3, [r2, #1]
 80066b2:	3b4c      	subs	r3, #76	; 0x4c
 80066b4:	460d      	mov	r5, r1
 80066b6:	4604      	mov	r4, r0
 80066b8:	2b26      	cmp	r3, #38	; 0x26
 80066ba:	d83a      	bhi.n	8006732 <d_maybe_print_fold_expression.isra.20+0xba>
 80066bc:	e8df f003 	tbb	[pc, r3]
 80066c0:	393939b0 	.word	0x393939b0
 80066c4:	39b03939 	.word	0x39b03939
 80066c8:	39393939 	.word	0x39393939
 80066cc:	39393939 	.word	0x39393939
 80066d0:	39393939 	.word	0x39393939
 80066d4:	39393939 	.word	0x39393939
 80066d8:	39393939 	.word	0x39393939
 80066dc:	39393939 	.word	0x39393939
 80066e0:	39393989 	.word	0x39393989
 80066e4:	3939      	.short	0x3939
 80066e6:	3f          	.byte	0x3f
 80066e7:	00          	.byte	0x00
 80066e8:	4642      	mov	r2, r8
 80066ea:	4629      	mov	r1, r5
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff ff31 	bl	8006554 <d_print_expr_op>
 80066f2:	9a01      	ldr	r2, [sp, #4]
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7ff ff6c 	bl	80065d4 <d_print_subexpr>
 80066fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006700:	29ff      	cmp	r1, #255	; 0xff
 8006702:	f040 80ea 	bne.w	80068da <d_maybe_print_fold_expression.isra.20+0x262>
 8006706:	2500      	movs	r5, #0
 8006708:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800670c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006710:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006714:	4620      	mov	r0, r4
 8006716:	4798      	blx	r3
 8006718:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800671c:	3301      	adds	r3, #1
 800671e:	4629      	mov	r1, r5
 8006720:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006724:	2201      	movs	r2, #1
 8006726:	2329      	movs	r3, #41	; 0x29
 8006728:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800672c:	5463      	strb	r3, [r4, r1]
 800672e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006732:	2001      	movs	r0, #1
 8006734:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8006738:	b003      	add	sp, #12
 800673a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006742:	29ff      	cmp	r1, #255	; 0xff
 8006744:	f040 80cb 	bne.w	80068de <d_maybe_print_fold_expression.isra.20+0x266>
 8006748:	2600      	movs	r6, #0
 800674a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800674e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006752:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006756:	4798      	blx	r3
 8006758:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800675c:	3301      	adds	r3, #1
 800675e:	4631      	mov	r1, r6
 8006760:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006764:	2201      	movs	r2, #1
 8006766:	2328      	movs	r3, #40	; 0x28
 8006768:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800676c:	4620      	mov	r0, r4
 800676e:	5463      	strb	r3, [r4, r1]
 8006770:	464a      	mov	r2, r9
 8006772:	4629      	mov	r1, r5
 8006774:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006778:	f7ff ff2c 	bl	80065d4 <d_print_subexpr>
 800677c:	4629      	mov	r1, r5
 800677e:	4d59      	ldr	r5, [pc, #356]	; (80068e4 <d_maybe_print_fold_expression.isra.20+0x26c>)
 8006780:	4642      	mov	r2, r8
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff fee6 	bl	8006554 <d_print_expr_op>
 8006788:	1d2e      	adds	r6, r5, #4
 800678a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800678e:	f04f 0800 	mov.w	r8, #0
 8006792:	e015      	b.n	80067c0 <d_maybe_print_fold_expression.isra.20+0x148>
 8006794:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006798:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800679c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80067a0:	4798      	blx	r3
 80067a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067a6:	3301      	adds	r3, #1
 80067a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067ac:	2200      	movs	r2, #0
 80067ae:	2301      	movs	r3, #1
 80067b0:	42ae      	cmp	r6, r5
 80067b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067b6:	f804 9002 	strb.w	r9, [r4, r2]
 80067ba:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80067be:	d0b8      	beq.n	8006732 <d_maybe_print_fold_expression.isra.20+0xba>
 80067c0:	2bff      	cmp	r3, #255	; 0xff
 80067c2:	4619      	mov	r1, r3
 80067c4:	4620      	mov	r0, r4
 80067c6:	f815 9b01 	ldrb.w	r9, [r5], #1
 80067ca:	d0e3      	beq.n	8006794 <d_maybe_print_fold_expression.isra.20+0x11c>
 80067cc:	461a      	mov	r2, r3
 80067ce:	3301      	adds	r3, #1
 80067d0:	e7ee      	b.n	80067b0 <d_maybe_print_fold_expression.isra.20+0x138>
 80067d2:	4e45      	ldr	r6, [pc, #276]	; (80068e8 <d_maybe_print_fold_expression.isra.20+0x270>)
 80067d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067d8:	f106 0a04 	add.w	sl, r6, #4
 80067dc:	e017      	b.n	800680e <d_maybe_print_fold_expression.isra.20+0x196>
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80067e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067ee:	4798      	blx	r3
 80067f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067fa:	2200      	movs	r2, #0
 80067fc:	2301      	movs	r3, #1
 80067fe:	45b2      	cmp	sl, r6
 8006800:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006804:	f804 b002 	strb.w	fp, [r4, r2]
 8006808:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800680c:	d05e      	beq.n	80068cc <d_maybe_print_fold_expression.isra.20+0x254>
 800680e:	2bff      	cmp	r3, #255	; 0xff
 8006810:	4619      	mov	r1, r3
 8006812:	4620      	mov	r0, r4
 8006814:	f816 bb01 	ldrb.w	fp, [r6], #1
 8006818:	d0e1      	beq.n	80067de <d_maybe_print_fold_expression.isra.20+0x166>
 800681a:	461a      	mov	r2, r3
 800681c:	3301      	adds	r3, #1
 800681e:	e7ee      	b.n	80067fe <d_maybe_print_fold_expression.isra.20+0x186>
 8006820:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006824:	2bff      	cmp	r3, #255	; 0xff
 8006826:	d110      	bne.n	800684a <d_maybe_print_fold_expression.isra.20+0x1d2>
 8006828:	2600      	movs	r6, #0
 800682a:	4619      	mov	r1, r3
 800682c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006830:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006834:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006838:	4798      	blx	r3
 800683a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800683e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006848:	4633      	mov	r3, r6
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006850:	464a      	mov	r2, r9
 8006852:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006856:	4620      	mov	r0, r4
 8006858:	f804 c003 	strb.w	ip, [r4, r3]
 800685c:	4629      	mov	r1, r5
 800685e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006862:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80068ec <d_maybe_print_fold_expression.isra.20+0x274>
 8006866:	f7ff feb5 	bl	80065d4 <d_print_subexpr>
 800686a:	4642      	mov	r2, r8
 800686c:	4629      	mov	r1, r5
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fe70 	bl	8006554 <d_print_expr_op>
 8006874:	f109 0a03 	add.w	sl, r9, #3
 8006878:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800687c:	2600      	movs	r6, #0
 800687e:	e016      	b.n	80068ae <d_maybe_print_fold_expression.isra.20+0x236>
 8006880:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006884:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006888:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800688c:	4798      	blx	r3
 800688e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006892:	3301      	adds	r3, #1
 8006894:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006898:	2200      	movs	r2, #0
 800689a:	2301      	movs	r3, #1
 800689c:	45d1      	cmp	r9, sl
 800689e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80068a2:	f804 b002 	strb.w	fp, [r4, r2]
 80068a6:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80068aa:	f43f af1d 	beq.w	80066e8 <d_maybe_print_fold_expression.isra.20+0x70>
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	4619      	mov	r1, r3
 80068b2:	4620      	mov	r0, r4
 80068b4:	f819 bb01 	ldrb.w	fp, [r9], #1
 80068b8:	d0e2      	beq.n	8006880 <d_maybe_print_fold_expression.isra.20+0x208>
 80068ba:	461a      	mov	r2, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	e7ed      	b.n	800689c <d_maybe_print_fold_expression.isra.20+0x224>
 80068c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80068ca:	e6eb      	b.n	80066a4 <d_maybe_print_fold_expression.isra.20+0x2c>
 80068cc:	4642      	mov	r2, r8
 80068ce:	4629      	mov	r1, r5
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff fe3f 	bl	8006554 <d_print_expr_op>
 80068d6:	464a      	mov	r2, r9
 80068d8:	e70c      	b.n	80066f4 <d_maybe_print_fold_expression.isra.20+0x7c>
 80068da:	1c4a      	adds	r2, r1, #1
 80068dc:	e723      	b.n	8006726 <d_maybe_print_fold_expression.isra.20+0xae>
 80068de:	1c4a      	adds	r2, r1, #1
 80068e0:	e741      	b.n	8006766 <d_maybe_print_fold_expression.isra.20+0xee>
 80068e2:	bf00      	nop
 80068e4:	08094324 	.word	0x08094324
 80068e8:	0809431c 	.word	0x0809431c
 80068ec:	08094228 	.word	0x08094228

080068f0 <d_demangle_callback.constprop.22>:
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	b0e5      	sub	sp, #404	; 0x194
 80068f6:	f890 a000 	ldrb.w	sl, [r0]
 80068fa:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 80068fe:	af00      	add	r7, sp, #0
 8006900:	4605      	mov	r5, r0
 8006902:	4688      	mov	r8, r1
 8006904:	4616      	mov	r6, r2
 8006906:	f000 80f3 	beq.w	8006af0 <d_demangle_callback.constprop.22+0x200>
 800690a:	2208      	movs	r2, #8
 800690c:	49bb      	ldr	r1, [pc, #748]	; (8006bfc <d_demangle_callback.constprop.22+0x30c>)
 800690e:	4628      	mov	r0, r5
 8006910:	f012 fb38 	bl	8018f84 <strncmp>
 8006914:	b948      	cbnz	r0, 800692a <d_demangle_callback.constprop.22+0x3a>
 8006916:	7a2b      	ldrb	r3, [r5, #8]
 8006918:	2b2e      	cmp	r3, #46	; 0x2e
 800691a:	f000 80d8 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 800691e:	2b5f      	cmp	r3, #95	; 0x5f
 8006920:	f000 80d5 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 8006924:	2b24      	cmp	r3, #36	; 0x24
 8006926:	f000 80d2 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fa38 	bl	8006da4 <strlen>
 8006934:	0142      	lsls	r2, r0, #5
 8006936:	0083      	lsls	r3, r0, #2
 8006938:	3208      	adds	r2, #8
 800693a:	330a      	adds	r3, #10
 800693c:	ebad 0d02 	sub.w	sp, sp, r2
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	2400      	movs	r4, #0
 8006946:	46eb      	mov	fp, sp
 8006948:	1829      	adds	r1, r5, r0
 800694a:	ebad 0d03 	sub.w	sp, sp, r3
 800694e:	2211      	movs	r2, #17
 8006950:	0043      	lsls	r3, r0, #1
 8006952:	f1b9 0f01 	cmp.w	r9, #1
 8006956:	f8c7 b01c 	str.w	fp, [r7, #28]
 800695a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800695e:	60fd      	str	r5, [r7, #12]
 8006960:	61bd      	str	r5, [r7, #24]
 8006962:	6338      	str	r0, [r7, #48]	; 0x30
 8006964:	6139      	str	r1, [r7, #16]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	617a      	str	r2, [r7, #20]
 800696a:	623c      	str	r4, [r7, #32]
 800696c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800696e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 8006972:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 8006976:	647c      	str	r4, [r7, #68]	; 0x44
 8006978:	f000 80a0 	beq.w	8006abc <d_demangle_callback.constprop.22+0x1cc>
 800697c:	f0c0 80bf 	bcc.w	8006afe <d_demangle_callback.constprop.22+0x20e>
 8006980:	7aea      	ldrb	r2, [r5, #11]
 8006982:	f1b9 0f02 	cmp.w	r9, #2
 8006986:	f105 0a0b 	add.w	sl, r5, #11
 800698a:	bf14      	ite	ne
 800698c:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006990:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006994:	2a5f      	cmp	r2, #95	; 0x5f
 8006996:	f8c7 a018 	str.w	sl, [r7, #24]
 800699a:	f000 80b9 	beq.w	8006b10 <d_demangle_callback.constprop.22+0x220>
 800699e:	4650      	mov	r0, sl
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	f000 f9ff 	bl	8006da4 <strlen>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f340 8123 	ble.w	8006bf4 <d_demangle_callback.constprop.22+0x304>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2201      	movs	r2, #1
 80069b2:	f8cb 3004 	str.w	r3, [fp, #4]
 80069b6:	623a      	str	r2, [r7, #32]
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f000 811b 	beq.w	8006bf4 <d_demangle_callback.constprop.22+0x304>
 80069be:	e9cb a002 	strd	sl, r0, [fp, #8]
 80069c2:	f88b 3000 	strb.w	r3, [fp]
 80069c6:	4649      	mov	r1, r9
 80069c8:	2300      	movs	r3, #0
 80069ca:	465a      	mov	r2, fp
 80069cc:	f107 000c 	add.w	r0, r7, #12
 80069d0:	f7f9 fc1e 	bl	8000210 <d_make_comp>
 80069d4:	69bc      	ldr	r4, [r7, #24]
 80069d6:	4605      	mov	r5, r0
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f9e3 	bl	8006da4 <strlen>
 80069de:	1823      	adds	r3, r4, r0
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	f814 9000 	ldrb.w	r9, [r4, r0]
 80069e6:	f1b9 0f00 	cmp.w	r9, #0
 80069ea:	d16a      	bne.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	d068      	beq.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 80069f0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80069f4:	462a      	mov	r2, r5
 80069f6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80069fa:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80069fe:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8006a02:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8006a06:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8006a0a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8006a0e:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 8006a12:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006a16:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8006a1a:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 8006a1e:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 8006a22:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006a26:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006a2a:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006a2e:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006a32:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006a36:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006a3a:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006a3e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a42:	f7f9 fc49 	bl	80002d8 <d_count_templates_scopes>
 8006a46:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a4a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a4e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	fb06 f603 	mul.w	r6, r6, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	bfb8      	it	lt
 8006a5c:	2201      	movlt	r2, #1
 8006a5e:	00d2      	lsls	r2, r2, #3
 8006a60:	2e01      	cmp	r6, #1
 8006a62:	4633      	mov	r3, r6
 8006a64:	f102 0208 	add.w	r2, r2, #8
 8006a68:	bfb8      	it	lt
 8006a6a:	2301      	movlt	r3, #1
 8006a6c:	46e8      	mov	r8, sp
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	ebad 0d02 	sub.w	sp, sp, r2
 8006a74:	3308      	adds	r3, #8
 8006a76:	4669      	mov	r1, sp
 8006a78:	462a      	mov	r2, r5
 8006a7a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006a84:	2111      	movs	r1, #17
 8006a86:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006a8a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006a8e:	f7fc f899 	bl	8002bc4 <d_print_comp>
 8006a92:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006a96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a9a:	f804 9001 	strb.w	r9, [r4, r1]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	46c5      	mov	sp, r8
 8006aa2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006aa6:	4798      	blx	r3
 8006aa8:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006aac:	fab0 f080 	clz	r0, r0
 8006ab0:	0940      	lsrs	r0, r0, #5
 8006ab2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006ac0:	d033      	beq.n	8006b2a <d_demangle_callback.constprop.22+0x23a>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	7a6b      	ldrb	r3, [r5, #9]
 8006ad0:	2b44      	cmp	r3, #68	; 0x44
 8006ad2:	d002      	beq.n	8006ada <d_demangle_callback.constprop.22+0x1ea>
 8006ad4:	2b49      	cmp	r3, #73	; 0x49
 8006ad6:	f47f af28 	bne.w	800692a <d_demangle_callback.constprop.22+0x3a>
 8006ada:	7aaa      	ldrb	r2, [r5, #10]
 8006adc:	2a5f      	cmp	r2, #95	; 0x5f
 8006ade:	f47f af24 	bne.w	800692a <d_demangle_callback.constprop.22+0x3a>
 8006ae2:	2b49      	cmp	r3, #73	; 0x49
 8006ae4:	bf14      	ite	ne
 8006ae6:	f04f 0903 	movne.w	r9, #3
 8006aea:	f04f 0902 	moveq.w	r9, #2
 8006aee:	e71e      	b.n	800692e <d_demangle_callback.constprop.22+0x3e>
 8006af0:	7843      	ldrb	r3, [r0, #1]
 8006af2:	2b5a      	cmp	r3, #90	; 0x5a
 8006af4:	f47f af09 	bne.w	800690a <d_demangle_callback.constprop.22+0x1a>
 8006af8:	f04f 0901 	mov.w	r9, #1
 8006afc:	e717      	b.n	800692e <d_demangle_callback.constprop.22+0x3e>
 8006afe:	f107 000c 	add.w	r0, r7, #12
 8006b02:	f7fa fe05 	bl	8001710 <d_type>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	f893 9000 	ldrb.w	r9, [r3]
 8006b0e:	e76a      	b.n	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006b10:	7b2a      	ldrb	r2, [r5, #12]
 8006b12:	2a5a      	cmp	r2, #90	; 0x5a
 8006b14:	f47f af43 	bne.w	800699e <d_demangle_callback.constprop.22+0xae>
 8006b18:	350d      	adds	r5, #13
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	f107 000c 	add.w	r0, r7, #12
 8006b20:	61bd      	str	r5, [r7, #24]
 8006b22:	f7fb fd37 	bl	8002594 <d_encoding>
 8006b26:	4683      	mov	fp, r0
 8006b28:	e74d      	b.n	80069c6 <d_demangle_callback.constprop.22+0xd6>
 8006b2a:	786b      	ldrb	r3, [r5, #1]
 8006b2c:	2b5a      	cmp	r3, #90	; 0x5a
 8006b2e:	d1c8      	bne.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 8006b30:	3502      	adds	r5, #2
 8006b32:	4649      	mov	r1, r9
 8006b34:	f107 000c 	add.w	r0, r7, #12
 8006b38:	61bd      	str	r5, [r7, #24]
 8006b3a:	f7fb fd2b 	bl	8002594 <d_encoding>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	07db      	lsls	r3, r3, #31
 8006b42:	4605      	mov	r5, r0
 8006b44:	d552      	bpl.n	8006bec <d_demangle_callback.constprop.22+0x2fc>
 8006b46:	69b8      	ldr	r0, [r7, #24]
 8006b48:	f890 9000 	ldrb.w	r9, [r0]
 8006b4c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b50:	f47f af49 	bne.w	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006b54:	7843      	ldrb	r3, [r0, #1]
 8006b56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b5a:	2a19      	cmp	r2, #25
 8006b5c:	d93a      	bls.n	8006bd4 <d_demangle_callback.constprop.22+0x2e4>
 8006b5e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b60:	d038      	beq.n	8006bd4 <d_demangle_callback.constprop.22+0x2e4>
 8006b62:	3b30      	subs	r3, #48	; 0x30
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	d841      	bhi.n	8006bec <d_demangle_callback.constprop.22+0x2fc>
 8006b68:	7803      	ldrb	r3, [r0, #0]
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6e:	d112      	bne.n	8006b96 <d_demangle_callback.constprop.22+0x2a6>
 8006b70:	7853      	ldrb	r3, [r2, #1]
 8006b72:	3b30      	subs	r3, #48	; 0x30
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d80e      	bhi.n	8006b96 <d_demangle_callback.constprop.22+0x2a6>
 8006b78:	7893      	ldrb	r3, [r2, #2]
 8006b7a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b7e:	2909      	cmp	r1, #9
 8006b80:	f102 0202 	add.w	r2, r2, #2
 8006b84:	d8f2      	bhi.n	8006b6c <d_demangle_callback.constprop.22+0x27c>
 8006b86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006b8a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b8e:	2909      	cmp	r1, #9
 8006b90:	d9f9      	bls.n	8006b86 <d_demangle_callback.constprop.22+0x296>
 8006b92:	2b2e      	cmp	r3, #46	; 0x2e
 8006b94:	d0ec      	beq.n	8006b70 <d_demangle_callback.constprop.22+0x280>
 8006b96:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	61ba      	str	r2, [r7, #24]
 8006b9e:	da17      	bge.n	8006bd0 <d_demangle_callback.constprop.22+0x2e0>
 8006ba0:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006ba4:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006ba8:	eb0e 030c 	add.w	r3, lr, ip
 8006bac:	3101      	adds	r1, #1
 8006bae:	1a12      	subs	r2, r2, r0
 8006bb0:	605c      	str	r4, [r3, #4]
 8006bb2:	6239      	str	r1, [r7, #32]
 8006bb4:	d00c      	beq.n	8006bd0 <d_demangle_callback.constprop.22+0x2e0>
 8006bb6:	605c      	str	r4, [r3, #4]
 8006bb8:	f80e 400c 	strb.w	r4, [lr, ip]
 8006bbc:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	214d      	movs	r1, #77	; 0x4d
 8006bc4:	f107 000c 	add.w	r0, r7, #12
 8006bc8:	f7f9 fb22 	bl	8000210 <d_make_comp>
 8006bcc:	4605      	mov	r5, r0
 8006bce:	e7ba      	b.n	8006b46 <d_demangle_callback.constprop.22+0x256>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e7f5      	b.n	8006bc0 <d_demangle_callback.constprop.22+0x2d0>
 8006bd4:	1c81      	adds	r1, r0, #2
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bdc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006be0:	f1bc 0f19 	cmp.w	ip, #25
 8006be4:	d9f7      	bls.n	8006bd6 <d_demangle_callback.constprop.22+0x2e6>
 8006be6:	2b5f      	cmp	r3, #95	; 0x5f
 8006be8:	d0f5      	beq.n	8006bd6 <d_demangle_callback.constprop.22+0x2e6>
 8006bea:	e7bf      	b.n	8006b6c <d_demangle_callback.constprop.22+0x27c>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f893 9000 	ldrb.w	r9, [r3]
 8006bf2:	e6f8      	b.n	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006bf4:	f04f 0b00 	mov.w	fp, #0
 8006bf8:	e6e5      	b.n	80069c6 <d_demangle_callback.constprop.22+0xd6>
 8006bfa:	bf00      	nop
 8006bfc:	08093fb4 	.word	0x08093fb4

08006c00 <__cxa_demangle>:
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	b380      	cbz	r0, 8006c6a <__cxa_demangle+0x6a>
 8006c08:	b101      	cbz	r1, 8006c0c <__cxa_demangle+0xc>
 8006c0a:	b372      	cbz	r2, 8006c6a <__cxa_demangle+0x6a>
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	4617      	mov	r7, r2
 8006c10:	460e      	mov	r6, r1
 8006c12:	466a      	mov	r2, sp
 8006c14:	492b      	ldr	r1, [pc, #172]	; (8006cc4 <__cxa_demangle+0xc4>)
 8006c16:	461d      	mov	r5, r3
 8006c18:	e9cd 4400 	strd	r4, r4, [sp]
 8006c1c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c20:	f7ff fe66 	bl	80068f0 <d_demangle_callback.constprop.22>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d047      	beq.n	8006cb8 <__cxa_demangle+0xb8>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	9c00      	ldr	r4, [sp, #0]
 8006c2c:	b9ab      	cbnz	r3, 8006c5a <__cxa_demangle+0x5a>
 8006c2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c32:	b36c      	cbz	r4, 8006c90 <__cxa_demangle+0x90>
 8006c34:	b1b6      	cbz	r6, 8006c64 <__cxa_demangle+0x64>
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 f8b4 	bl	8006da4 <strlen>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	d31c      	bcc.n	8006c7c <__cxa_demangle+0x7c>
 8006c42:	4630      	mov	r0, r6
 8006c44:	f011 fcbe 	bl	80185c4 <free>
 8006c48:	f8c7 8000 	str.w	r8, [r7]
 8006c4c:	b195      	cbz	r5, 8006c74 <__cxa_demangle+0x74>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4620      	mov	r0, r4
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	b004      	add	sp, #16
 8006c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5a:	b334      	cbz	r4, 8006caa <__cxa_demangle+0xaa>
 8006c5c:	f04f 0801 	mov.w	r8, #1
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	d1e8      	bne.n	8006c36 <__cxa_demangle+0x36>
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	d1ef      	bne.n	8006c48 <__cxa_demangle+0x48>
 8006c68:	e7f0      	b.n	8006c4c <__cxa_demangle+0x4c>
 8006c6a:	b113      	cbz	r3, 8006c72 <__cxa_demangle+0x72>
 8006c6c:	f06f 0202 	mvn.w	r2, #2
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	2400      	movs	r4, #0
 8006c74:	4620      	mov	r0, r4
 8006c76:	b004      	add	sp, #16
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	1c42      	adds	r2, r0, #1
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4630      	mov	r0, r6
 8006c82:	f011 feec 	bl	8018a5e <memcpy>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f011 fc9c 	bl	80185c4 <free>
 8006c8c:	4634      	mov	r4, r6
 8006c8e:	e7dd      	b.n	8006c4c <__cxa_demangle+0x4c>
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	d0ee      	beq.n	8006c72 <__cxa_demangle+0x72>
 8006c94:	f1b8 0f01 	cmp.w	r8, #1
 8006c98:	d009      	beq.n	8006cae <__cxa_demangle+0xae>
 8006c9a:	2400      	movs	r4, #0
 8006c9c:	f06f 0301 	mvn.w	r3, #1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	b004      	add	sp, #16
 8006ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	d0e1      	beq.n	8006c72 <__cxa_demangle+0x72>
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	e7dd      	b.n	8006c74 <__cxa_demangle+0x74>
 8006cb8:	9800      	ldr	r0, [sp, #0]
 8006cba:	f011 fc83 	bl	80185c4 <free>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	d1eb      	bne.n	8006c9a <__cxa_demangle+0x9a>
 8006cc2:	e7d6      	b.n	8006c72 <__cxa_demangle+0x72>
 8006cc4:	08000889 	.word	0x08000889

08006cc8 <__gcclibcxx_demangle_callback>:
 8006cc8:	b160      	cbz	r0, 8006ce4 <__gcclibcxx_demangle_callback+0x1c>
 8006cca:	b508      	push	{r3, lr}
 8006ccc:	b139      	cbz	r1, 8006cde <__gcclibcxx_demangle_callback+0x16>
 8006cce:	f7ff fe0f 	bl	80068f0 <d_demangle_callback.constprop.22>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	bf0c      	ite	eq
 8006cd6:	f06f 0001 	mvneq.w	r0, #1
 8006cda:	2000      	movne	r0, #0
 8006cdc:	bd08      	pop	{r3, pc}
 8006cde:	f06f 0002 	mvn.w	r0, #2
 8006ce2:	bd08      	pop	{r3, pc}
 8006ce4:	f06f 0002 	mvn.w	r0, #2
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	0000      	movs	r0, r0
	...

08006cf0 <memchr>:
 8006cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006cf4:	2a10      	cmp	r2, #16
 8006cf6:	db2b      	blt.n	8006d50 <memchr+0x60>
 8006cf8:	f010 0f07 	tst.w	r0, #7
 8006cfc:	d008      	beq.n	8006d10 <memchr+0x20>
 8006cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d02:	3a01      	subs	r2, #1
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d02d      	beq.n	8006d64 <memchr+0x74>
 8006d08:	f010 0f07 	tst.w	r0, #7
 8006d0c:	b342      	cbz	r2, 8006d60 <memchr+0x70>
 8006d0e:	d1f6      	bne.n	8006cfe <memchr+0xe>
 8006d10:	b4f0      	push	{r4, r5, r6, r7}
 8006d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006d1a:	f022 0407 	bic.w	r4, r2, #7
 8006d1e:	f07f 0700 	mvns.w	r7, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006d28:	3c08      	subs	r4, #8
 8006d2a:	ea85 0501 	eor.w	r5, r5, r1
 8006d2e:	ea86 0601 	eor.w	r6, r6, r1
 8006d32:	fa85 f547 	uadd8	r5, r5, r7
 8006d36:	faa3 f587 	sel	r5, r3, r7
 8006d3a:	fa86 f647 	uadd8	r6, r6, r7
 8006d3e:	faa5 f687 	sel	r6, r5, r7
 8006d42:	b98e      	cbnz	r6, 8006d68 <memchr+0x78>
 8006d44:	d1ee      	bne.n	8006d24 <memchr+0x34>
 8006d46:	bcf0      	pop	{r4, r5, r6, r7}
 8006d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d4c:	f002 0207 	and.w	r2, r2, #7
 8006d50:	b132      	cbz	r2, 8006d60 <memchr+0x70>
 8006d52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d56:	3a01      	subs	r2, #1
 8006d58:	ea83 0301 	eor.w	r3, r3, r1
 8006d5c:	b113      	cbz	r3, 8006d64 <memchr+0x74>
 8006d5e:	d1f8      	bne.n	8006d52 <memchr+0x62>
 8006d60:	2000      	movs	r0, #0
 8006d62:	4770      	bx	lr
 8006d64:	3801      	subs	r0, #1
 8006d66:	4770      	bx	lr
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	bf06      	itte	eq
 8006d6c:	4635      	moveq	r5, r6
 8006d6e:	3803      	subeq	r0, #3
 8006d70:	3807      	subne	r0, #7
 8006d72:	f015 0f01 	tst.w	r5, #1
 8006d76:	d107      	bne.n	8006d88 <memchr+0x98>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d7e:	bf02      	ittt	eq
 8006d80:	3001      	addeq	r0, #1
 8006d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006d86:	3001      	addeq	r0, #1
 8006d88:	bcf0      	pop	{r4, r5, r6, r7}
 8006d8a:	3801      	subs	r0, #1
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <strcmp>:
 8006d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d98:	2a01      	cmp	r2, #1
 8006d9a:	bf28      	it	cs
 8006d9c:	429a      	cmpcs	r2, r3
 8006d9e:	d0f7      	beq.n	8006d90 <strcmp>
 8006da0:	1ad0      	subs	r0, r2, r3
 8006da2:	4770      	bx	lr

08006da4 <strlen>:
 8006da4:	4603      	mov	r3, r0
 8006da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d1fb      	bne.n	8006da6 <strlen+0x2>
 8006dae:	1a18      	subs	r0, r3, r0
 8006db0:	3801      	subs	r0, #1
 8006db2:	4770      	bx	lr

08006db4 <__aeabi_drsub>:
 8006db4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006db8:	e002      	b.n	8006dc0 <__adddf3>
 8006dba:	bf00      	nop

08006dbc <__aeabi_dsub>:
 8006dbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006dc0 <__adddf3>:
 8006dc0:	b530      	push	{r4, r5, lr}
 8006dc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006dc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006dca:	ea94 0f05 	teq	r4, r5
 8006dce:	bf08      	it	eq
 8006dd0:	ea90 0f02 	teqeq	r0, r2
 8006dd4:	bf1f      	itttt	ne
 8006dd6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006dda:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006dde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006de2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006de6:	f000 80e2 	beq.w	8006fae <__adddf3+0x1ee>
 8006dea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006dee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006df2:	bfb8      	it	lt
 8006df4:	426d      	neglt	r5, r5
 8006df6:	dd0c      	ble.n	8006e12 <__adddf3+0x52>
 8006df8:	442c      	add	r4, r5
 8006dfa:	ea80 0202 	eor.w	r2, r0, r2
 8006dfe:	ea81 0303 	eor.w	r3, r1, r3
 8006e02:	ea82 0000 	eor.w	r0, r2, r0
 8006e06:	ea83 0101 	eor.w	r1, r3, r1
 8006e0a:	ea80 0202 	eor.w	r2, r0, r2
 8006e0e:	ea81 0303 	eor.w	r3, r1, r3
 8006e12:	2d36      	cmp	r5, #54	; 0x36
 8006e14:	bf88      	it	hi
 8006e16:	bd30      	pophi	{r4, r5, pc}
 8006e18:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006e1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006e20:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006e24:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006e28:	d002      	beq.n	8006e30 <__adddf3+0x70>
 8006e2a:	4240      	negs	r0, r0
 8006e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006e30:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006e34:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006e38:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006e3c:	d002      	beq.n	8006e44 <__adddf3+0x84>
 8006e3e:	4252      	negs	r2, r2
 8006e40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006e44:	ea94 0f05 	teq	r4, r5
 8006e48:	f000 80a7 	beq.w	8006f9a <__adddf3+0x1da>
 8006e4c:	f1a4 0401 	sub.w	r4, r4, #1
 8006e50:	f1d5 0e20 	rsbs	lr, r5, #32
 8006e54:	db0d      	blt.n	8006e72 <__adddf3+0xb2>
 8006e56:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006e5a:	fa22 f205 	lsr.w	r2, r2, r5
 8006e5e:	1880      	adds	r0, r0, r2
 8006e60:	f141 0100 	adc.w	r1, r1, #0
 8006e64:	fa03 f20e 	lsl.w	r2, r3, lr
 8006e68:	1880      	adds	r0, r0, r2
 8006e6a:	fa43 f305 	asr.w	r3, r3, r5
 8006e6e:	4159      	adcs	r1, r3
 8006e70:	e00e      	b.n	8006e90 <__adddf3+0xd0>
 8006e72:	f1a5 0520 	sub.w	r5, r5, #32
 8006e76:	f10e 0e20 	add.w	lr, lr, #32
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006e80:	bf28      	it	cs
 8006e82:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006e86:	fa43 f305 	asr.w	r3, r3, r5
 8006e8a:	18c0      	adds	r0, r0, r3
 8006e8c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e94:	d507      	bpl.n	8006ea6 <__adddf3+0xe6>
 8006e96:	f04f 0e00 	mov.w	lr, #0
 8006e9a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e9e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006ea2:	eb6e 0101 	sbc.w	r1, lr, r1
 8006ea6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006eaa:	d31b      	bcc.n	8006ee4 <__adddf3+0x124>
 8006eac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006eb0:	d30c      	bcc.n	8006ecc <__adddf3+0x10c>
 8006eb2:	0849      	lsrs	r1, r1, #1
 8006eb4:	ea5f 0030 	movs.w	r0, r0, rrx
 8006eb8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006ebc:	f104 0401 	add.w	r4, r4, #1
 8006ec0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006ec4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006ec8:	f080 809a 	bcs.w	8007000 <__adddf3+0x240>
 8006ecc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006ed0:	bf08      	it	eq
 8006ed2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006ed6:	f150 0000 	adcs.w	r0, r0, #0
 8006eda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006ede:	ea41 0105 	orr.w	r1, r1, r5
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ee8:	4140      	adcs	r0, r0
 8006eea:	eb41 0101 	adc.w	r1, r1, r1
 8006eee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ef2:	f1a4 0401 	sub.w	r4, r4, #1
 8006ef6:	d1e9      	bne.n	8006ecc <__adddf3+0x10c>
 8006ef8:	f091 0f00 	teq	r1, #0
 8006efc:	bf04      	itt	eq
 8006efe:	4601      	moveq	r1, r0
 8006f00:	2000      	moveq	r0, #0
 8006f02:	fab1 f381 	clz	r3, r1
 8006f06:	bf08      	it	eq
 8006f08:	3320      	addeq	r3, #32
 8006f0a:	f1a3 030b 	sub.w	r3, r3, #11
 8006f0e:	f1b3 0220 	subs.w	r2, r3, #32
 8006f12:	da0c      	bge.n	8006f2e <__adddf3+0x16e>
 8006f14:	320c      	adds	r2, #12
 8006f16:	dd08      	ble.n	8006f2a <__adddf3+0x16a>
 8006f18:	f102 0c14 	add.w	ip, r2, #20
 8006f1c:	f1c2 020c 	rsb	r2, r2, #12
 8006f20:	fa01 f00c 	lsl.w	r0, r1, ip
 8006f24:	fa21 f102 	lsr.w	r1, r1, r2
 8006f28:	e00c      	b.n	8006f44 <__adddf3+0x184>
 8006f2a:	f102 0214 	add.w	r2, r2, #20
 8006f2e:	bfd8      	it	le
 8006f30:	f1c2 0c20 	rsble	ip, r2, #32
 8006f34:	fa01 f102 	lsl.w	r1, r1, r2
 8006f38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006f3c:	bfdc      	itt	le
 8006f3e:	ea41 010c 	orrle.w	r1, r1, ip
 8006f42:	4090      	lslle	r0, r2
 8006f44:	1ae4      	subs	r4, r4, r3
 8006f46:	bfa2      	ittt	ge
 8006f48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006f4c:	4329      	orrge	r1, r5
 8006f4e:	bd30      	popge	{r4, r5, pc}
 8006f50:	ea6f 0404 	mvn.w	r4, r4
 8006f54:	3c1f      	subs	r4, #31
 8006f56:	da1c      	bge.n	8006f92 <__adddf3+0x1d2>
 8006f58:	340c      	adds	r4, #12
 8006f5a:	dc0e      	bgt.n	8006f7a <__adddf3+0x1ba>
 8006f5c:	f104 0414 	add.w	r4, r4, #20
 8006f60:	f1c4 0220 	rsb	r2, r4, #32
 8006f64:	fa20 f004 	lsr.w	r0, r0, r4
 8006f68:	fa01 f302 	lsl.w	r3, r1, r2
 8006f6c:	ea40 0003 	orr.w	r0, r0, r3
 8006f70:	fa21 f304 	lsr.w	r3, r1, r4
 8006f74:	ea45 0103 	orr.w	r1, r5, r3
 8006f78:	bd30      	pop	{r4, r5, pc}
 8006f7a:	f1c4 040c 	rsb	r4, r4, #12
 8006f7e:	f1c4 0220 	rsb	r2, r4, #32
 8006f82:	fa20 f002 	lsr.w	r0, r0, r2
 8006f86:	fa01 f304 	lsl.w	r3, r1, r4
 8006f8a:	ea40 0003 	orr.w	r0, r0, r3
 8006f8e:	4629      	mov	r1, r5
 8006f90:	bd30      	pop	{r4, r5, pc}
 8006f92:	fa21 f004 	lsr.w	r0, r1, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	bd30      	pop	{r4, r5, pc}
 8006f9a:	f094 0f00 	teq	r4, #0
 8006f9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006fa2:	bf06      	itte	eq
 8006fa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006fa8:	3401      	addeq	r4, #1
 8006faa:	3d01      	subne	r5, #1
 8006fac:	e74e      	b.n	8006e4c <__adddf3+0x8c>
 8006fae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006fb2:	bf18      	it	ne
 8006fb4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006fb8:	d029      	beq.n	800700e <__adddf3+0x24e>
 8006fba:	ea94 0f05 	teq	r4, r5
 8006fbe:	bf08      	it	eq
 8006fc0:	ea90 0f02 	teqeq	r0, r2
 8006fc4:	d005      	beq.n	8006fd2 <__adddf3+0x212>
 8006fc6:	ea54 0c00 	orrs.w	ip, r4, r0
 8006fca:	bf04      	itt	eq
 8006fcc:	4619      	moveq	r1, r3
 8006fce:	4610      	moveq	r0, r2
 8006fd0:	bd30      	pop	{r4, r5, pc}
 8006fd2:	ea91 0f03 	teq	r1, r3
 8006fd6:	bf1e      	ittt	ne
 8006fd8:	2100      	movne	r1, #0
 8006fda:	2000      	movne	r0, #0
 8006fdc:	bd30      	popne	{r4, r5, pc}
 8006fde:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006fe2:	d105      	bne.n	8006ff0 <__adddf3+0x230>
 8006fe4:	0040      	lsls	r0, r0, #1
 8006fe6:	4149      	adcs	r1, r1
 8006fe8:	bf28      	it	cs
 8006fea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006fee:	bd30      	pop	{r4, r5, pc}
 8006ff0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006ff4:	bf3c      	itt	cc
 8006ff6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006ffa:	bd30      	popcc	{r4, r5, pc}
 8006ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007000:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007004:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007008:	f04f 0000 	mov.w	r0, #0
 800700c:	bd30      	pop	{r4, r5, pc}
 800700e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007012:	bf1a      	itte	ne
 8007014:	4619      	movne	r1, r3
 8007016:	4610      	movne	r0, r2
 8007018:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800701c:	bf1c      	itt	ne
 800701e:	460b      	movne	r3, r1
 8007020:	4602      	movne	r2, r0
 8007022:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007026:	bf06      	itte	eq
 8007028:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800702c:	ea91 0f03 	teqeq	r1, r3
 8007030:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007034:	bd30      	pop	{r4, r5, pc}
 8007036:	bf00      	nop

08007038 <__aeabi_ui2d>:
 8007038:	f090 0f00 	teq	r0, #0
 800703c:	bf04      	itt	eq
 800703e:	2100      	moveq	r1, #0
 8007040:	4770      	bxeq	lr
 8007042:	b530      	push	{r4, r5, lr}
 8007044:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007048:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800704c:	f04f 0500 	mov.w	r5, #0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	e750      	b.n	8006ef8 <__adddf3+0x138>
 8007056:	bf00      	nop

08007058 <__aeabi_i2d>:
 8007058:	f090 0f00 	teq	r0, #0
 800705c:	bf04      	itt	eq
 800705e:	2100      	moveq	r1, #0
 8007060:	4770      	bxeq	lr
 8007062:	b530      	push	{r4, r5, lr}
 8007064:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007068:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800706c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007070:	bf48      	it	mi
 8007072:	4240      	negmi	r0, r0
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	e73e      	b.n	8006ef8 <__adddf3+0x138>
 800707a:	bf00      	nop

0800707c <__aeabi_f2d>:
 800707c:	0042      	lsls	r2, r0, #1
 800707e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007082:	ea4f 0131 	mov.w	r1, r1, rrx
 8007086:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800708a:	bf1f      	itttt	ne
 800708c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007090:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007094:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007098:	4770      	bxne	lr
 800709a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800709e:	bf08      	it	eq
 80070a0:	4770      	bxeq	lr
 80070a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80070a6:	bf04      	itt	eq
 80070a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80070ac:	4770      	bxeq	lr
 80070ae:	b530      	push	{r4, r5, lr}
 80070b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80070b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80070b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80070bc:	e71c      	b.n	8006ef8 <__adddf3+0x138>
 80070be:	bf00      	nop

080070c0 <__aeabi_ul2d>:
 80070c0:	ea50 0201 	orrs.w	r2, r0, r1
 80070c4:	bf08      	it	eq
 80070c6:	4770      	bxeq	lr
 80070c8:	b530      	push	{r4, r5, lr}
 80070ca:	f04f 0500 	mov.w	r5, #0
 80070ce:	e00a      	b.n	80070e6 <__aeabi_l2d+0x16>

080070d0 <__aeabi_l2d>:
 80070d0:	ea50 0201 	orrs.w	r2, r0, r1
 80070d4:	bf08      	it	eq
 80070d6:	4770      	bxeq	lr
 80070d8:	b530      	push	{r4, r5, lr}
 80070da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80070de:	d502      	bpl.n	80070e6 <__aeabi_l2d+0x16>
 80070e0:	4240      	negs	r0, r0
 80070e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80070ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80070ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80070f2:	f43f aed8 	beq.w	8006ea6 <__adddf3+0xe6>
 80070f6:	f04f 0203 	mov.w	r2, #3
 80070fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070fe:	bf18      	it	ne
 8007100:	3203      	addne	r2, #3
 8007102:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007106:	bf18      	it	ne
 8007108:	3203      	addne	r2, #3
 800710a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800710e:	f1c2 0320 	rsb	r3, r2, #32
 8007112:	fa00 fc03 	lsl.w	ip, r0, r3
 8007116:	fa20 f002 	lsr.w	r0, r0, r2
 800711a:	fa01 fe03 	lsl.w	lr, r1, r3
 800711e:	ea40 000e 	orr.w	r0, r0, lr
 8007122:	fa21 f102 	lsr.w	r1, r1, r2
 8007126:	4414      	add	r4, r2
 8007128:	e6bd      	b.n	8006ea6 <__adddf3+0xe6>
 800712a:	bf00      	nop

0800712c <__aeabi_dmul>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800713a:	bf1d      	ittte	ne
 800713c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007140:	ea94 0f0c 	teqne	r4, ip
 8007144:	ea95 0f0c 	teqne	r5, ip
 8007148:	f000 f8de 	bleq	8007308 <__aeabi_dmul+0x1dc>
 800714c:	442c      	add	r4, r5
 800714e:	ea81 0603 	eor.w	r6, r1, r3
 8007152:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007156:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800715a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800715e:	bf18      	it	ne
 8007160:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800716c:	d038      	beq.n	80071e0 <__aeabi_dmul+0xb4>
 800716e:	fba0 ce02 	umull	ip, lr, r0, r2
 8007172:	f04f 0500 	mov.w	r5, #0
 8007176:	fbe1 e502 	umlal	lr, r5, r1, r2
 800717a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800717e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007182:	f04f 0600 	mov.w	r6, #0
 8007186:	fbe1 5603 	umlal	r5, r6, r1, r3
 800718a:	f09c 0f00 	teq	ip, #0
 800718e:	bf18      	it	ne
 8007190:	f04e 0e01 	orrne.w	lr, lr, #1
 8007194:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007198:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800719c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80071a0:	d204      	bcs.n	80071ac <__aeabi_dmul+0x80>
 80071a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80071a6:	416d      	adcs	r5, r5
 80071a8:	eb46 0606 	adc.w	r6, r6, r6
 80071ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80071b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80071b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80071b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80071bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80071c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80071c4:	bf88      	it	hi
 80071c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80071ca:	d81e      	bhi.n	800720a <__aeabi_dmul+0xde>
 80071cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80071d0:	bf08      	it	eq
 80071d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80071d6:	f150 0000 	adcs.w	r0, r0, #0
 80071da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80071e4:	ea46 0101 	orr.w	r1, r6, r1
 80071e8:	ea40 0002 	orr.w	r0, r0, r2
 80071ec:	ea81 0103 	eor.w	r1, r1, r3
 80071f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80071f4:	bfc2      	ittt	gt
 80071f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071fe:	bd70      	popgt	{r4, r5, r6, pc}
 8007200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007204:	f04f 0e00 	mov.w	lr, #0
 8007208:	3c01      	subs	r4, #1
 800720a:	f300 80ab 	bgt.w	8007364 <__aeabi_dmul+0x238>
 800720e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007212:	bfde      	ittt	le
 8007214:	2000      	movle	r0, #0
 8007216:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800721a:	bd70      	pople	{r4, r5, r6, pc}
 800721c:	f1c4 0400 	rsb	r4, r4, #0
 8007220:	3c20      	subs	r4, #32
 8007222:	da35      	bge.n	8007290 <__aeabi_dmul+0x164>
 8007224:	340c      	adds	r4, #12
 8007226:	dc1b      	bgt.n	8007260 <__aeabi_dmul+0x134>
 8007228:	f104 0414 	add.w	r4, r4, #20
 800722c:	f1c4 0520 	rsb	r5, r4, #32
 8007230:	fa00 f305 	lsl.w	r3, r0, r5
 8007234:	fa20 f004 	lsr.w	r0, r0, r4
 8007238:	fa01 f205 	lsl.w	r2, r1, r5
 800723c:	ea40 0002 	orr.w	r0, r0, r2
 8007240:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800724c:	fa21 f604 	lsr.w	r6, r1, r4
 8007250:	eb42 0106 	adc.w	r1, r2, r6
 8007254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007258:	bf08      	it	eq
 800725a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f1c4 040c 	rsb	r4, r4, #12
 8007264:	f1c4 0520 	rsb	r5, r4, #32
 8007268:	fa00 f304 	lsl.w	r3, r0, r4
 800726c:	fa20 f005 	lsr.w	r0, r0, r5
 8007270:	fa01 f204 	lsl.w	r2, r1, r4
 8007274:	ea40 0002 	orr.w	r0, r0, r2
 8007278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800727c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007280:	f141 0100 	adc.w	r1, r1, #0
 8007284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007288:	bf08      	it	eq
 800728a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f1c4 0520 	rsb	r5, r4, #32
 8007294:	fa00 f205 	lsl.w	r2, r0, r5
 8007298:	ea4e 0e02 	orr.w	lr, lr, r2
 800729c:	fa20 f304 	lsr.w	r3, r0, r4
 80072a0:	fa01 f205 	lsl.w	r2, r1, r5
 80072a4:	ea43 0302 	orr.w	r3, r3, r2
 80072a8:	fa21 f004 	lsr.w	r0, r1, r4
 80072ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072b0:	fa21 f204 	lsr.w	r2, r1, r4
 80072b4:	ea20 0002 	bic.w	r0, r0, r2
 80072b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80072bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80072c0:	bf08      	it	eq
 80072c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	f094 0f00 	teq	r4, #0
 80072cc:	d10f      	bne.n	80072ee <__aeabi_dmul+0x1c2>
 80072ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80072d2:	0040      	lsls	r0, r0, #1
 80072d4:	eb41 0101 	adc.w	r1, r1, r1
 80072d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072dc:	bf08      	it	eq
 80072de:	3c01      	subeq	r4, #1
 80072e0:	d0f7      	beq.n	80072d2 <__aeabi_dmul+0x1a6>
 80072e2:	ea41 0106 	orr.w	r1, r1, r6
 80072e6:	f095 0f00 	teq	r5, #0
 80072ea:	bf18      	it	ne
 80072ec:	4770      	bxne	lr
 80072ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80072f2:	0052      	lsls	r2, r2, #1
 80072f4:	eb43 0303 	adc.w	r3, r3, r3
 80072f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80072fc:	bf08      	it	eq
 80072fe:	3d01      	subeq	r5, #1
 8007300:	d0f7      	beq.n	80072f2 <__aeabi_dmul+0x1c6>
 8007302:	ea43 0306 	orr.w	r3, r3, r6
 8007306:	4770      	bx	lr
 8007308:	ea94 0f0c 	teq	r4, ip
 800730c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007310:	bf18      	it	ne
 8007312:	ea95 0f0c 	teqne	r5, ip
 8007316:	d00c      	beq.n	8007332 <__aeabi_dmul+0x206>
 8007318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800731c:	bf18      	it	ne
 800731e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007322:	d1d1      	bne.n	80072c8 <__aeabi_dmul+0x19c>
 8007324:	ea81 0103 	eor.w	r1, r1, r3
 8007328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007336:	bf06      	itte	eq
 8007338:	4610      	moveq	r0, r2
 800733a:	4619      	moveq	r1, r3
 800733c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007340:	d019      	beq.n	8007376 <__aeabi_dmul+0x24a>
 8007342:	ea94 0f0c 	teq	r4, ip
 8007346:	d102      	bne.n	800734e <__aeabi_dmul+0x222>
 8007348:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800734c:	d113      	bne.n	8007376 <__aeabi_dmul+0x24a>
 800734e:	ea95 0f0c 	teq	r5, ip
 8007352:	d105      	bne.n	8007360 <__aeabi_dmul+0x234>
 8007354:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007358:	bf1c      	itt	ne
 800735a:	4610      	movne	r0, r2
 800735c:	4619      	movne	r1, r3
 800735e:	d10a      	bne.n	8007376 <__aeabi_dmul+0x24a>
 8007360:	ea81 0103 	eor.w	r1, r1, r3
 8007364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007368:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800736c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007370:	f04f 0000 	mov.w	r0, #0
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800737a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800737e:	bd70      	pop	{r4, r5, r6, pc}

08007380 <__aeabi_ddiv>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800738a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800738e:	bf1d      	ittte	ne
 8007390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007394:	ea94 0f0c 	teqne	r4, ip
 8007398:	ea95 0f0c 	teqne	r5, ip
 800739c:	f000 f8a7 	bleq	80074ee <__aeabi_ddiv+0x16e>
 80073a0:	eba4 0405 	sub.w	r4, r4, r5
 80073a4:	ea81 0e03 	eor.w	lr, r1, r3
 80073a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80073ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80073b0:	f000 8088 	beq.w	80074c4 <__aeabi_ddiv+0x144>
 80073b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80073b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80073bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80073c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80073c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80073c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80073cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80073d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80073d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80073d8:	429d      	cmp	r5, r3
 80073da:	bf08      	it	eq
 80073dc:	4296      	cmpeq	r6, r2
 80073de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80073e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80073e6:	d202      	bcs.n	80073ee <__aeabi_ddiv+0x6e>
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ee:	1ab6      	subs	r6, r6, r2
 80073f0:	eb65 0503 	sbc.w	r5, r5, r3
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007402:	ebb6 0e02 	subs.w	lr, r6, r2
 8007406:	eb75 0e03 	sbcs.w	lr, r5, r3
 800740a:	bf22      	ittt	cs
 800740c:	1ab6      	subcs	r6, r6, r2
 800740e:	4675      	movcs	r5, lr
 8007410:	ea40 000c 	orrcs.w	r0, r0, ip
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	ea4f 0232 	mov.w	r2, r2, rrx
 800741a:	ebb6 0e02 	subs.w	lr, r6, r2
 800741e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007422:	bf22      	ittt	cs
 8007424:	1ab6      	subcs	r6, r6, r2
 8007426:	4675      	movcs	r5, lr
 8007428:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007432:	ebb6 0e02 	subs.w	lr, r6, r2
 8007436:	eb75 0e03 	sbcs.w	lr, r5, r3
 800743a:	bf22      	ittt	cs
 800743c:	1ab6      	subcs	r6, r6, r2
 800743e:	4675      	movcs	r5, lr
 8007440:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	ea4f 0232 	mov.w	r2, r2, rrx
 800744a:	ebb6 0e02 	subs.w	lr, r6, r2
 800744e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007452:	bf22      	ittt	cs
 8007454:	1ab6      	subcs	r6, r6, r2
 8007456:	4675      	movcs	r5, lr
 8007458:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800745c:	ea55 0e06 	orrs.w	lr, r5, r6
 8007460:	d018      	beq.n	8007494 <__aeabi_ddiv+0x114>
 8007462:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007466:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800746a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800746e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007472:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007476:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800747a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800747e:	d1c0      	bne.n	8007402 <__aeabi_ddiv+0x82>
 8007480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007484:	d10b      	bne.n	800749e <__aeabi_ddiv+0x11e>
 8007486:	ea41 0100 	orr.w	r1, r1, r0
 800748a:	f04f 0000 	mov.w	r0, #0
 800748e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007492:	e7b6      	b.n	8007402 <__aeabi_ddiv+0x82>
 8007494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007498:	bf04      	itt	eq
 800749a:	4301      	orreq	r1, r0
 800749c:	2000      	moveq	r0, #0
 800749e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80074a2:	bf88      	it	hi
 80074a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80074a8:	f63f aeaf 	bhi.w	800720a <__aeabi_dmul+0xde>
 80074ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80074b0:	bf04      	itt	eq
 80074b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80074b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80074ba:	f150 0000 	adcs.w	r0, r0, #0
 80074be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80074c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80074cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80074d0:	bfc2      	ittt	gt
 80074d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80074d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80074da:	bd70      	popgt	{r4, r5, r6, pc}
 80074dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074e0:	f04f 0e00 	mov.w	lr, #0
 80074e4:	3c01      	subs	r4, #1
 80074e6:	e690      	b.n	800720a <__aeabi_dmul+0xde>
 80074e8:	ea45 0e06 	orr.w	lr, r5, r6
 80074ec:	e68d      	b.n	800720a <__aeabi_dmul+0xde>
 80074ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80074f2:	ea94 0f0c 	teq	r4, ip
 80074f6:	bf08      	it	eq
 80074f8:	ea95 0f0c 	teqeq	r5, ip
 80074fc:	f43f af3b 	beq.w	8007376 <__aeabi_dmul+0x24a>
 8007500:	ea94 0f0c 	teq	r4, ip
 8007504:	d10a      	bne.n	800751c <__aeabi_ddiv+0x19c>
 8007506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800750a:	f47f af34 	bne.w	8007376 <__aeabi_dmul+0x24a>
 800750e:	ea95 0f0c 	teq	r5, ip
 8007512:	f47f af25 	bne.w	8007360 <__aeabi_dmul+0x234>
 8007516:	4610      	mov	r0, r2
 8007518:	4619      	mov	r1, r3
 800751a:	e72c      	b.n	8007376 <__aeabi_dmul+0x24a>
 800751c:	ea95 0f0c 	teq	r5, ip
 8007520:	d106      	bne.n	8007530 <__aeabi_ddiv+0x1b0>
 8007522:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007526:	f43f aefd 	beq.w	8007324 <__aeabi_dmul+0x1f8>
 800752a:	4610      	mov	r0, r2
 800752c:	4619      	mov	r1, r3
 800752e:	e722      	b.n	8007376 <__aeabi_dmul+0x24a>
 8007530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007534:	bf18      	it	ne
 8007536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800753a:	f47f aec5 	bne.w	80072c8 <__aeabi_dmul+0x19c>
 800753e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007542:	f47f af0d 	bne.w	8007360 <__aeabi_dmul+0x234>
 8007546:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800754a:	f47f aeeb 	bne.w	8007324 <__aeabi_dmul+0x1f8>
 800754e:	e712      	b.n	8007376 <__aeabi_dmul+0x24a>

08007550 <__gedf2>:
 8007550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007554:	e006      	b.n	8007564 <__cmpdf2+0x4>
 8007556:	bf00      	nop

08007558 <__ledf2>:
 8007558:	f04f 0c01 	mov.w	ip, #1
 800755c:	e002      	b.n	8007564 <__cmpdf2+0x4>
 800755e:	bf00      	nop

08007560 <__cmpdf2>:
 8007560:	f04f 0c01 	mov.w	ip, #1
 8007564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800756c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007574:	bf18      	it	ne
 8007576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800757a:	d01b      	beq.n	80075b4 <__cmpdf2+0x54>
 800757c:	b001      	add	sp, #4
 800757e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007582:	bf0c      	ite	eq
 8007584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007588:	ea91 0f03 	teqne	r1, r3
 800758c:	bf02      	ittt	eq
 800758e:	ea90 0f02 	teqeq	r0, r2
 8007592:	2000      	moveq	r0, #0
 8007594:	4770      	bxeq	lr
 8007596:	f110 0f00 	cmn.w	r0, #0
 800759a:	ea91 0f03 	teq	r1, r3
 800759e:	bf58      	it	pl
 80075a0:	4299      	cmppl	r1, r3
 80075a2:	bf08      	it	eq
 80075a4:	4290      	cmpeq	r0, r2
 80075a6:	bf2c      	ite	cs
 80075a8:	17d8      	asrcs	r0, r3, #31
 80075aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80075ae:	f040 0001 	orr.w	r0, r0, #1
 80075b2:	4770      	bx	lr
 80075b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80075b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075bc:	d102      	bne.n	80075c4 <__cmpdf2+0x64>
 80075be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80075c2:	d107      	bne.n	80075d4 <__cmpdf2+0x74>
 80075c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80075c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075cc:	d1d6      	bne.n	800757c <__cmpdf2+0x1c>
 80075ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80075d2:	d0d3      	beq.n	800757c <__cmpdf2+0x1c>
 80075d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <__aeabi_cdrcmple>:
 80075dc:	4684      	mov	ip, r0
 80075de:	4610      	mov	r0, r2
 80075e0:	4662      	mov	r2, ip
 80075e2:	468c      	mov	ip, r1
 80075e4:	4619      	mov	r1, r3
 80075e6:	4663      	mov	r3, ip
 80075e8:	e000      	b.n	80075ec <__aeabi_cdcmpeq>
 80075ea:	bf00      	nop

080075ec <__aeabi_cdcmpeq>:
 80075ec:	b501      	push	{r0, lr}
 80075ee:	f7ff ffb7 	bl	8007560 <__cmpdf2>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	bf48      	it	mi
 80075f6:	f110 0f00 	cmnmi.w	r0, #0
 80075fa:	bd01      	pop	{r0, pc}

080075fc <__aeabi_dcmpeq>:
 80075fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007600:	f7ff fff4 	bl	80075ec <__aeabi_cdcmpeq>
 8007604:	bf0c      	ite	eq
 8007606:	2001      	moveq	r0, #1
 8007608:	2000      	movne	r0, #0
 800760a:	f85d fb08 	ldr.w	pc, [sp], #8
 800760e:	bf00      	nop

08007610 <__aeabi_dcmplt>:
 8007610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007614:	f7ff ffea 	bl	80075ec <__aeabi_cdcmpeq>
 8007618:	bf34      	ite	cc
 800761a:	2001      	movcc	r0, #1
 800761c:	2000      	movcs	r0, #0
 800761e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007622:	bf00      	nop

08007624 <__aeabi_dcmple>:
 8007624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007628:	f7ff ffe0 	bl	80075ec <__aeabi_cdcmpeq>
 800762c:	bf94      	ite	ls
 800762e:	2001      	movls	r0, #1
 8007630:	2000      	movhi	r0, #0
 8007632:	f85d fb08 	ldr.w	pc, [sp], #8
 8007636:	bf00      	nop

08007638 <__aeabi_dcmpge>:
 8007638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800763c:	f7ff ffce 	bl	80075dc <__aeabi_cdrcmple>
 8007640:	bf94      	ite	ls
 8007642:	2001      	movls	r0, #1
 8007644:	2000      	movhi	r0, #0
 8007646:	f85d fb08 	ldr.w	pc, [sp], #8
 800764a:	bf00      	nop

0800764c <__aeabi_dcmpgt>:
 800764c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007650:	f7ff ffc4 	bl	80075dc <__aeabi_cdrcmple>
 8007654:	bf34      	ite	cc
 8007656:	2001      	movcc	r0, #1
 8007658:	2000      	movcs	r0, #0
 800765a:	f85d fb08 	ldr.w	pc, [sp], #8
 800765e:	bf00      	nop

08007660 <__aeabi_dcmpun>:
 8007660:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007668:	d102      	bne.n	8007670 <__aeabi_dcmpun+0x10>
 800766a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800766e:	d10a      	bne.n	8007686 <__aeabi_dcmpun+0x26>
 8007670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007678:	d102      	bne.n	8007680 <__aeabi_dcmpun+0x20>
 800767a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800767e:	d102      	bne.n	8007686 <__aeabi_dcmpun+0x26>
 8007680:	f04f 0000 	mov.w	r0, #0
 8007684:	4770      	bx	lr
 8007686:	f04f 0001 	mov.w	r0, #1
 800768a:	4770      	bx	lr

0800768c <__aeabi_d2iz>:
 800768c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007690:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007694:	d215      	bcs.n	80076c2 <__aeabi_d2iz+0x36>
 8007696:	d511      	bpl.n	80076bc <__aeabi_d2iz+0x30>
 8007698:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800769c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80076a0:	d912      	bls.n	80076c8 <__aeabi_d2iz+0x3c>
 80076a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80076a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80076ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80076b2:	fa23 f002 	lsr.w	r0, r3, r2
 80076b6:	bf18      	it	ne
 80076b8:	4240      	negne	r0, r0
 80076ba:	4770      	bx	lr
 80076bc:	f04f 0000 	mov.w	r0, #0
 80076c0:	4770      	bx	lr
 80076c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80076c6:	d105      	bne.n	80076d4 <__aeabi_d2iz+0x48>
 80076c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80076cc:	bf08      	it	eq
 80076ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80076d2:	4770      	bx	lr
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop

080076dc <__aeabi_uldivmod>:
 80076dc:	b953      	cbnz	r3, 80076f4 <__aeabi_uldivmod+0x18>
 80076de:	b94a      	cbnz	r2, 80076f4 <__aeabi_uldivmod+0x18>
 80076e0:	2900      	cmp	r1, #0
 80076e2:	bf08      	it	eq
 80076e4:	2800      	cmpeq	r0, #0
 80076e6:	bf1c      	itt	ne
 80076e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80076ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80076f0:	f001 b8f8 	b.w	80088e4 <__aeabi_idiv0>
 80076f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80076f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80076fc:	f000 f806 	bl	800770c <__udivmoddi4>
 8007700:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007708:	b004      	add	sp, #16
 800770a:	4770      	bx	lr

0800770c <__udivmoddi4>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	9e08      	ldr	r6, [sp, #32]
 8007712:	4604      	mov	r4, r0
 8007714:	4688      	mov	r8, r1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d14b      	bne.n	80077b2 <__udivmoddi4+0xa6>
 800771a:	428a      	cmp	r2, r1
 800771c:	4615      	mov	r5, r2
 800771e:	d967      	bls.n	80077f0 <__udivmoddi4+0xe4>
 8007720:	fab2 f282 	clz	r2, r2
 8007724:	b14a      	cbz	r2, 800773a <__udivmoddi4+0x2e>
 8007726:	f1c2 0720 	rsb	r7, r2, #32
 800772a:	fa01 f302 	lsl.w	r3, r1, r2
 800772e:	fa20 f707 	lsr.w	r7, r0, r7
 8007732:	4095      	lsls	r5, r2
 8007734:	ea47 0803 	orr.w	r8, r7, r3
 8007738:	4094      	lsls	r4, r2
 800773a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800773e:	0c23      	lsrs	r3, r4, #16
 8007740:	fbb8 f7fe 	udiv	r7, r8, lr
 8007744:	fa1f fc85 	uxth.w	ip, r5
 8007748:	fb0e 8817 	mls	r8, lr, r7, r8
 800774c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007750:	fb07 f10c 	mul.w	r1, r7, ip
 8007754:	4299      	cmp	r1, r3
 8007756:	d909      	bls.n	800776c <__udivmoddi4+0x60>
 8007758:	18eb      	adds	r3, r5, r3
 800775a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800775e:	f080 811b 	bcs.w	8007998 <__udivmoddi4+0x28c>
 8007762:	4299      	cmp	r1, r3
 8007764:	f240 8118 	bls.w	8007998 <__udivmoddi4+0x28c>
 8007768:	3f02      	subs	r7, #2
 800776a:	442b      	add	r3, r5
 800776c:	1a5b      	subs	r3, r3, r1
 800776e:	b2a4      	uxth	r4, r4
 8007770:	fbb3 f0fe 	udiv	r0, r3, lr
 8007774:	fb0e 3310 	mls	r3, lr, r0, r3
 8007778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800777c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007780:	45a4      	cmp	ip, r4
 8007782:	d909      	bls.n	8007798 <__udivmoddi4+0x8c>
 8007784:	192c      	adds	r4, r5, r4
 8007786:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800778a:	f080 8107 	bcs.w	800799c <__udivmoddi4+0x290>
 800778e:	45a4      	cmp	ip, r4
 8007790:	f240 8104 	bls.w	800799c <__udivmoddi4+0x290>
 8007794:	3802      	subs	r0, #2
 8007796:	442c      	add	r4, r5
 8007798:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800779c:	eba4 040c 	sub.w	r4, r4, ip
 80077a0:	2700      	movs	r7, #0
 80077a2:	b11e      	cbz	r6, 80077ac <__udivmoddi4+0xa0>
 80077a4:	40d4      	lsrs	r4, r2
 80077a6:	2300      	movs	r3, #0
 80077a8:	e9c6 4300 	strd	r4, r3, [r6]
 80077ac:	4639      	mov	r1, r7
 80077ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b2:	428b      	cmp	r3, r1
 80077b4:	d909      	bls.n	80077ca <__udivmoddi4+0xbe>
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	f000 80eb 	beq.w	8007992 <__udivmoddi4+0x286>
 80077bc:	2700      	movs	r7, #0
 80077be:	e9c6 0100 	strd	r0, r1, [r6]
 80077c2:	4638      	mov	r0, r7
 80077c4:	4639      	mov	r1, r7
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	fab3 f783 	clz	r7, r3
 80077ce:	2f00      	cmp	r7, #0
 80077d0:	d147      	bne.n	8007862 <__udivmoddi4+0x156>
 80077d2:	428b      	cmp	r3, r1
 80077d4:	d302      	bcc.n	80077dc <__udivmoddi4+0xd0>
 80077d6:	4282      	cmp	r2, r0
 80077d8:	f200 80fa 	bhi.w	80079d0 <__udivmoddi4+0x2c4>
 80077dc:	1a84      	subs	r4, r0, r2
 80077de:	eb61 0303 	sbc.w	r3, r1, r3
 80077e2:	2001      	movs	r0, #1
 80077e4:	4698      	mov	r8, r3
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	d0e0      	beq.n	80077ac <__udivmoddi4+0xa0>
 80077ea:	e9c6 4800 	strd	r4, r8, [r6]
 80077ee:	e7dd      	b.n	80077ac <__udivmoddi4+0xa0>
 80077f0:	b902      	cbnz	r2, 80077f4 <__udivmoddi4+0xe8>
 80077f2:	deff      	udf	#255	; 0xff
 80077f4:	fab2 f282 	clz	r2, r2
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	f040 808f 	bne.w	800791c <__udivmoddi4+0x210>
 80077fe:	1b49      	subs	r1, r1, r5
 8007800:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007804:	fa1f f885 	uxth.w	r8, r5
 8007808:	2701      	movs	r7, #1
 800780a:	fbb1 fcfe 	udiv	ip, r1, lr
 800780e:	0c23      	lsrs	r3, r4, #16
 8007810:	fb0e 111c 	mls	r1, lr, ip, r1
 8007814:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007818:	fb08 f10c 	mul.w	r1, r8, ip
 800781c:	4299      	cmp	r1, r3
 800781e:	d907      	bls.n	8007830 <__udivmoddi4+0x124>
 8007820:	18eb      	adds	r3, r5, r3
 8007822:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8007826:	d202      	bcs.n	800782e <__udivmoddi4+0x122>
 8007828:	4299      	cmp	r1, r3
 800782a:	f200 80cd 	bhi.w	80079c8 <__udivmoddi4+0x2bc>
 800782e:	4684      	mov	ip, r0
 8007830:	1a59      	subs	r1, r3, r1
 8007832:	b2a3      	uxth	r3, r4
 8007834:	fbb1 f0fe 	udiv	r0, r1, lr
 8007838:	fb0e 1410 	mls	r4, lr, r0, r1
 800783c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007840:	fb08 f800 	mul.w	r8, r8, r0
 8007844:	45a0      	cmp	r8, r4
 8007846:	d907      	bls.n	8007858 <__udivmoddi4+0x14c>
 8007848:	192c      	adds	r4, r5, r4
 800784a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800784e:	d202      	bcs.n	8007856 <__udivmoddi4+0x14a>
 8007850:	45a0      	cmp	r8, r4
 8007852:	f200 80b6 	bhi.w	80079c2 <__udivmoddi4+0x2b6>
 8007856:	4618      	mov	r0, r3
 8007858:	eba4 0408 	sub.w	r4, r4, r8
 800785c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007860:	e79f      	b.n	80077a2 <__udivmoddi4+0x96>
 8007862:	f1c7 0c20 	rsb	ip, r7, #32
 8007866:	40bb      	lsls	r3, r7
 8007868:	fa22 fe0c 	lsr.w	lr, r2, ip
 800786c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007870:	fa01 f407 	lsl.w	r4, r1, r7
 8007874:	fa20 f50c 	lsr.w	r5, r0, ip
 8007878:	fa21 f30c 	lsr.w	r3, r1, ip
 800787c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007880:	4325      	orrs	r5, r4
 8007882:	fbb3 f9f8 	udiv	r9, r3, r8
 8007886:	0c2c      	lsrs	r4, r5, #16
 8007888:	fb08 3319 	mls	r3, r8, r9, r3
 800788c:	fa1f fa8e 	uxth.w	sl, lr
 8007890:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007894:	fb09 f40a 	mul.w	r4, r9, sl
 8007898:	429c      	cmp	r4, r3
 800789a:	fa02 f207 	lsl.w	r2, r2, r7
 800789e:	fa00 f107 	lsl.w	r1, r0, r7
 80078a2:	d90b      	bls.n	80078bc <__udivmoddi4+0x1b0>
 80078a4:	eb1e 0303 	adds.w	r3, lr, r3
 80078a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80078ac:	f080 8087 	bcs.w	80079be <__udivmoddi4+0x2b2>
 80078b0:	429c      	cmp	r4, r3
 80078b2:	f240 8084 	bls.w	80079be <__udivmoddi4+0x2b2>
 80078b6:	f1a9 0902 	sub.w	r9, r9, #2
 80078ba:	4473      	add	r3, lr
 80078bc:	1b1b      	subs	r3, r3, r4
 80078be:	b2ad      	uxth	r5, r5
 80078c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80078c4:	fb08 3310 	mls	r3, r8, r0, r3
 80078c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80078cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80078d0:	45a2      	cmp	sl, r4
 80078d2:	d908      	bls.n	80078e6 <__udivmoddi4+0x1da>
 80078d4:	eb1e 0404 	adds.w	r4, lr, r4
 80078d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078dc:	d26b      	bcs.n	80079b6 <__udivmoddi4+0x2aa>
 80078de:	45a2      	cmp	sl, r4
 80078e0:	d969      	bls.n	80079b6 <__udivmoddi4+0x2aa>
 80078e2:	3802      	subs	r0, #2
 80078e4:	4474      	add	r4, lr
 80078e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80078ea:	fba0 8902 	umull	r8, r9, r0, r2
 80078ee:	eba4 040a 	sub.w	r4, r4, sl
 80078f2:	454c      	cmp	r4, r9
 80078f4:	46c2      	mov	sl, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	d354      	bcc.n	80079a4 <__udivmoddi4+0x298>
 80078fa:	d051      	beq.n	80079a0 <__udivmoddi4+0x294>
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	d069      	beq.n	80079d4 <__udivmoddi4+0x2c8>
 8007900:	ebb1 050a 	subs.w	r5, r1, sl
 8007904:	eb64 0403 	sbc.w	r4, r4, r3
 8007908:	fa04 fc0c 	lsl.w	ip, r4, ip
 800790c:	40fd      	lsrs	r5, r7
 800790e:	40fc      	lsrs	r4, r7
 8007910:	ea4c 0505 	orr.w	r5, ip, r5
 8007914:	e9c6 5400 	strd	r5, r4, [r6]
 8007918:	2700      	movs	r7, #0
 800791a:	e747      	b.n	80077ac <__udivmoddi4+0xa0>
 800791c:	f1c2 0320 	rsb	r3, r2, #32
 8007920:	fa20 f703 	lsr.w	r7, r0, r3
 8007924:	4095      	lsls	r5, r2
 8007926:	fa01 f002 	lsl.w	r0, r1, r2
 800792a:	fa21 f303 	lsr.w	r3, r1, r3
 800792e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007932:	4338      	orrs	r0, r7
 8007934:	0c01      	lsrs	r1, r0, #16
 8007936:	fbb3 f7fe 	udiv	r7, r3, lr
 800793a:	fa1f f885 	uxth.w	r8, r5
 800793e:	fb0e 3317 	mls	r3, lr, r7, r3
 8007942:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007946:	fb07 f308 	mul.w	r3, r7, r8
 800794a:	428b      	cmp	r3, r1
 800794c:	fa04 f402 	lsl.w	r4, r4, r2
 8007950:	d907      	bls.n	8007962 <__udivmoddi4+0x256>
 8007952:	1869      	adds	r1, r5, r1
 8007954:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8007958:	d22f      	bcs.n	80079ba <__udivmoddi4+0x2ae>
 800795a:	428b      	cmp	r3, r1
 800795c:	d92d      	bls.n	80079ba <__udivmoddi4+0x2ae>
 800795e:	3f02      	subs	r7, #2
 8007960:	4429      	add	r1, r5
 8007962:	1acb      	subs	r3, r1, r3
 8007964:	b281      	uxth	r1, r0
 8007966:	fbb3 f0fe 	udiv	r0, r3, lr
 800796a:	fb0e 3310 	mls	r3, lr, r0, r3
 800796e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007972:	fb00 f308 	mul.w	r3, r0, r8
 8007976:	428b      	cmp	r3, r1
 8007978:	d907      	bls.n	800798a <__udivmoddi4+0x27e>
 800797a:	1869      	adds	r1, r5, r1
 800797c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8007980:	d217      	bcs.n	80079b2 <__udivmoddi4+0x2a6>
 8007982:	428b      	cmp	r3, r1
 8007984:	d915      	bls.n	80079b2 <__udivmoddi4+0x2a6>
 8007986:	3802      	subs	r0, #2
 8007988:	4429      	add	r1, r5
 800798a:	1ac9      	subs	r1, r1, r3
 800798c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007990:	e73b      	b.n	800780a <__udivmoddi4+0xfe>
 8007992:	4637      	mov	r7, r6
 8007994:	4630      	mov	r0, r6
 8007996:	e709      	b.n	80077ac <__udivmoddi4+0xa0>
 8007998:	4607      	mov	r7, r0
 800799a:	e6e7      	b.n	800776c <__udivmoddi4+0x60>
 800799c:	4618      	mov	r0, r3
 800799e:	e6fb      	b.n	8007798 <__udivmoddi4+0x8c>
 80079a0:	4541      	cmp	r1, r8
 80079a2:	d2ab      	bcs.n	80078fc <__udivmoddi4+0x1f0>
 80079a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80079a8:	eb69 020e 	sbc.w	r2, r9, lr
 80079ac:	3801      	subs	r0, #1
 80079ae:	4613      	mov	r3, r2
 80079b0:	e7a4      	b.n	80078fc <__udivmoddi4+0x1f0>
 80079b2:	4660      	mov	r0, ip
 80079b4:	e7e9      	b.n	800798a <__udivmoddi4+0x27e>
 80079b6:	4618      	mov	r0, r3
 80079b8:	e795      	b.n	80078e6 <__udivmoddi4+0x1da>
 80079ba:	4667      	mov	r7, ip
 80079bc:	e7d1      	b.n	8007962 <__udivmoddi4+0x256>
 80079be:	4681      	mov	r9, r0
 80079c0:	e77c      	b.n	80078bc <__udivmoddi4+0x1b0>
 80079c2:	3802      	subs	r0, #2
 80079c4:	442c      	add	r4, r5
 80079c6:	e747      	b.n	8007858 <__udivmoddi4+0x14c>
 80079c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80079cc:	442b      	add	r3, r5
 80079ce:	e72f      	b.n	8007830 <__udivmoddi4+0x124>
 80079d0:	4638      	mov	r0, r7
 80079d2:	e708      	b.n	80077e6 <__udivmoddi4+0xda>
 80079d4:	4637      	mov	r7, r6
 80079d6:	e6e9      	b.n	80077ac <__udivmoddi4+0xa0>

080079d8 <selfrel_offset31>:
 80079d8:	6803      	ldr	r3, [r0, #0]
 80079da:	005a      	lsls	r2, r3, #1
 80079dc:	bf4c      	ite	mi
 80079de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80079e2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80079e6:	4418      	add	r0, r3
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop

080079ec <search_EIT_table>:
 80079ec:	b361      	cbz	r1, 8007a48 <search_EIT_table+0x5c>
 80079ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f2:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 80079f6:	4690      	mov	r8, r2
 80079f8:	4606      	mov	r6, r0
 80079fa:	46d1      	mov	r9, sl
 80079fc:	2700      	movs	r7, #0
 80079fe:	eb07 0409 	add.w	r4, r7, r9
 8007a02:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007a06:	1064      	asrs	r4, r4, #1
 8007a08:	00e5      	lsls	r5, r4, #3
 8007a0a:	1971      	adds	r1, r6, r5
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	f7ff ffe3 	bl	80079d8 <selfrel_offset31>
 8007a12:	45a2      	cmp	sl, r4
 8007a14:	4683      	mov	fp, r0
 8007a16:	f105 0008 	add.w	r0, r5, #8
 8007a1a:	4430      	add	r0, r6
 8007a1c:	d009      	beq.n	8007a32 <search_EIT_table+0x46>
 8007a1e:	f7ff ffdb 	bl	80079d8 <selfrel_offset31>
 8007a22:	45c3      	cmp	fp, r8
 8007a24:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007a28:	d805      	bhi.n	8007a36 <search_EIT_table+0x4a>
 8007a2a:	4540      	cmp	r0, r8
 8007a2c:	d209      	bcs.n	8007a42 <search_EIT_table+0x56>
 8007a2e:	1c67      	adds	r7, r4, #1
 8007a30:	e7e5      	b.n	80079fe <search_EIT_table+0x12>
 8007a32:	45c3      	cmp	fp, r8
 8007a34:	d905      	bls.n	8007a42 <search_EIT_table+0x56>
 8007a36:	42a7      	cmp	r7, r4
 8007a38:	d002      	beq.n	8007a40 <search_EIT_table+0x54>
 8007a3a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8007a3e:	e7de      	b.n	80079fe <search_EIT_table+0x12>
 8007a40:	2100      	movs	r1, #0
 8007a42:	4608      	mov	r0, r1
 8007a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	4608      	mov	r0, r1
 8007a4a:	4770      	bx	lr

08007a4c <__gnu_unwind_get_pr_addr>:
 8007a4c:	2801      	cmp	r0, #1
 8007a4e:	d007      	beq.n	8007a60 <__gnu_unwind_get_pr_addr+0x14>
 8007a50:	2802      	cmp	r0, #2
 8007a52:	d007      	beq.n	8007a64 <__gnu_unwind_get_pr_addr+0x18>
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <__gnu_unwind_get_pr_addr+0x1c>)
 8007a56:	2800      	cmp	r0, #0
 8007a58:	bf0c      	ite	eq
 8007a5a:	4618      	moveq	r0, r3
 8007a5c:	2000      	movne	r0, #0
 8007a5e:	4770      	bx	lr
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <__gnu_unwind_get_pr_addr+0x20>)
 8007a62:	4770      	bx	lr
 8007a64:	4802      	ldr	r0, [pc, #8]	; (8007a70 <__gnu_unwind_get_pr_addr+0x24>)
 8007a66:	4770      	bx	lr
 8007a68:	08008139 	.word	0x08008139
 8007a6c:	0800813d 	.word	0x0800813d
 8007a70:	08008141 	.word	0x08008141

08007a74 <get_eit_entry>:
 8007a74:	b530      	push	{r4, r5, lr}
 8007a76:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <get_eit_entry+0x98>)
 8007a78:	b083      	sub	sp, #12
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	1e8d      	subs	r5, r1, #2
 8007a7e:	b34b      	cbz	r3, 8007ad4 <get_eit_entry+0x60>
 8007a80:	a901      	add	r1, sp, #4
 8007a82:	4628      	mov	r0, r5
 8007a84:	f3af 8000 	nop.w
 8007a88:	b1f0      	cbz	r0, 8007ac8 <get_eit_entry+0x54>
 8007a8a:	9901      	ldr	r1, [sp, #4]
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	f7ff ffad 	bl	80079ec <search_EIT_table>
 8007a92:	4601      	mov	r1, r0
 8007a94:	b1c0      	cbz	r0, 8007ac8 <get_eit_entry+0x54>
 8007a96:	f7ff ff9f 	bl	80079d8 <selfrel_offset31>
 8007a9a:	684b      	ldr	r3, [r1, #4]
 8007a9c:	64a0      	str	r0, [r4, #72]	; 0x48
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d02e      	beq.n	8007b00 <get_eit_entry+0x8c>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f101 0004 	add.w	r0, r1, #4
 8007aa8:	db26      	blt.n	8007af8 <get_eit_entry+0x84>
 8007aaa:	f7ff ff95 	bl	80079d8 <selfrel_offset31>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007ab4:	6803      	ldr	r3, [r0, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	db12      	blt.n	8007ae0 <get_eit_entry+0x6c>
 8007aba:	f7ff ff8d 	bl	80079d8 <selfrel_offset31>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6120      	str	r0, [r4, #16]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	b003      	add	sp, #12
 8007ac6:	bd30      	pop	{r4, r5, pc}
 8007ac8:	2300      	movs	r3, #0
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	2309      	movs	r3, #9
 8007ace:	4618      	mov	r0, r3
 8007ad0:	b003      	add	sp, #12
 8007ad2:	bd30      	pop	{r4, r5, pc}
 8007ad4:	490e      	ldr	r1, [pc, #56]	; (8007b10 <get_eit_entry+0x9c>)
 8007ad6:	480f      	ldr	r0, [pc, #60]	; (8007b14 <get_eit_entry+0xa0>)
 8007ad8:	1a09      	subs	r1, r1, r0
 8007ada:	10c9      	asrs	r1, r1, #3
 8007adc:	9101      	str	r1, [sp, #4]
 8007ade:	e7d5      	b.n	8007a8c <get_eit_entry+0x18>
 8007ae0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007ae4:	f7ff ffb2 	bl	8007a4c <__gnu_unwind_get_pr_addr>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	bf14      	ite	ne
 8007aec:	2300      	movne	r3, #0
 8007aee:	2309      	moveq	r3, #9
 8007af0:	6120      	str	r0, [r4, #16]
 8007af2:	4618      	mov	r0, r3
 8007af4:	b003      	add	sp, #12
 8007af6:	bd30      	pop	{r4, r5, pc}
 8007af8:	2301      	movs	r3, #1
 8007afa:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007afe:	e7d9      	b.n	8007ab4 <get_eit_entry+0x40>
 8007b00:	2300      	movs	r3, #0
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	2305      	movs	r3, #5
 8007b06:	4618      	mov	r0, r3
 8007b08:	b003      	add	sp, #12
 8007b0a:	bd30      	pop	{r4, r5, pc}
 8007b0c:	00000000 	.word	0x00000000
 8007b10:	08094d0c 	.word	0x08094d0c
 8007b14:	08094b7c 	.word	0x08094b7c

08007b18 <restore_non_core_regs>:
 8007b18:	6803      	ldr	r3, [r0, #0]
 8007b1a:	07da      	lsls	r2, r3, #31
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	4604      	mov	r4, r0
 8007b20:	d406      	bmi.n	8007b30 <restore_non_core_regs+0x18>
 8007b22:	079b      	lsls	r3, r3, #30
 8007b24:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007b28:	d509      	bpl.n	8007b3e <restore_non_core_regs+0x26>
 8007b2a:	f000 fc5f 	bl	80083ec <__gnu_Unwind_Restore_VFP_D>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	0759      	lsls	r1, r3, #29
 8007b32:	d509      	bpl.n	8007b48 <restore_non_core_regs+0x30>
 8007b34:	071a      	lsls	r2, r3, #28
 8007b36:	d50e      	bpl.n	8007b56 <restore_non_core_regs+0x3e>
 8007b38:	06db      	lsls	r3, r3, #27
 8007b3a:	d513      	bpl.n	8007b64 <restore_non_core_regs+0x4c>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	f000 fc4d 	bl	80083dc <__gnu_Unwind_Restore_VFP>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	0759      	lsls	r1, r3, #29
 8007b46:	d4f5      	bmi.n	8007b34 <restore_non_core_regs+0x1c>
 8007b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b4c:	f000 fc56 	bl	80083fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	071a      	lsls	r2, r3, #28
 8007b54:	d4f0      	bmi.n	8007b38 <restore_non_core_regs+0x20>
 8007b56:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007b5a:	f000 fc57 	bl	800840c <__gnu_Unwind_Restore_WMMXD>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	06db      	lsls	r3, r3, #27
 8007b62:	d4eb      	bmi.n	8007b3c <restore_non_core_regs+0x24>
 8007b64:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b6c:	f000 bc92 	b.w	8008494 <__gnu_Unwind_Restore_WMMXC>

08007b70 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007b70:	6803      	ldr	r3, [r0, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007b74:	4403      	add	r3, r0
 8007b76:	4618      	mov	r0, r3
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop

08007b7c <__gnu_unwind_24bit.isra.1>:
 8007b7c:	2009      	movs	r0, #9
 8007b7e:	4770      	bx	lr

08007b80 <_Unwind_DebugHook>:
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <unwind_phase2>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	e008      	b.n	8007b9e <unwind_phase2+0x1a>
 8007b8c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007b8e:	6163      	str	r3, [r4, #20]
 8007b90:	462a      	mov	r2, r5
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	4621      	mov	r1, r4
 8007b96:	2001      	movs	r0, #1
 8007b98:	4798      	blx	r3
 8007b9a:	2808      	cmp	r0, #8
 8007b9c:	d108      	bne.n	8007bb0 <unwind_phase2+0x2c>
 8007b9e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff ff67 	bl	8007a74 <get_eit_entry>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d0ef      	beq.n	8007b8c <unwind_phase2+0x8>
 8007bac:	f010 fab8 	bl	8018120 <abort>
 8007bb0:	2807      	cmp	r0, #7
 8007bb2:	d1fb      	bne.n	8007bac <unwind_phase2+0x28>
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007bb8:	f7ff ffe2 	bl	8007b80 <_Unwind_DebugHook>
 8007bbc:	1d28      	adds	r0, r5, #4
 8007bbe:	f000 fc01 	bl	80083c4 <__restore_core_regs>
 8007bc2:	bf00      	nop

08007bc4 <unwind_phase2_forced>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	1d0c      	adds	r4, r1, #4
 8007bca:	4605      	mov	r5, r0
 8007bcc:	4617      	mov	r7, r2
 8007bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bd0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007bd4:	ae03      	add	r6, sp, #12
 8007bd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007be0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007be4:	ac02      	add	r4, sp, #8
 8007be6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007bea:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007bee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	e021      	b.n	8007c3c <unwind_phase2_forced+0x78>
 8007bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bfa:	616b      	str	r3, [r5, #20]
 8007bfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c00:	4621      	mov	r1, r4
 8007c02:	a87a      	add	r0, sp, #488	; 0x1e8
 8007c04:	f010 ff2b 	bl	8018a5e <memcpy>
 8007c08:	692b      	ldr	r3, [r5, #16]
 8007c0a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4798      	blx	r3
 8007c12:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007c14:	e9cd 4900 	strd	r4, r9, [sp]
 8007c18:	4682      	mov	sl, r0
 8007c1a:	6463      	str	r3, [r4, #68]	; 0x44
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	462b      	mov	r3, r5
 8007c20:	462a      	mov	r2, r5
 8007c22:	2001      	movs	r0, #1
 8007c24:	47c0      	blx	r8
 8007c26:	4607      	mov	r7, r0
 8007c28:	b9f8      	cbnz	r0, 8007c6a <unwind_phase2_forced+0xa6>
 8007c2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c2e:	a97a      	add	r1, sp, #488	; 0x1e8
 8007c30:	4620      	mov	r0, r4
 8007c32:	f010 ff14 	bl	8018a5e <memcpy>
 8007c36:	f1ba 0f08 	cmp.w	sl, #8
 8007c3a:	d11c      	bne.n	8007c76 <unwind_phase2_forced+0xb2>
 8007c3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f7ff ff18 	bl	8007a74 <get_eit_entry>
 8007c44:	2f00      	cmp	r7, #0
 8007c46:	bf08      	it	eq
 8007c48:	2609      	moveq	r6, #9
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	bf18      	it	ne
 8007c4e:	260a      	movne	r6, #10
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d0d1      	beq.n	8007bf8 <unwind_phase2_forced+0x34>
 8007c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c56:	f046 0110 	orr.w	r1, r6, #16
 8007c5a:	e9cd 4900 	strd	r4, r9, [sp]
 8007c5e:	462a      	mov	r2, r5
 8007c60:	6463      	str	r3, [r4, #68]	; 0x44
 8007c62:	2001      	movs	r0, #1
 8007c64:	462b      	mov	r3, r5
 8007c66:	47c0      	blx	r8
 8007c68:	b100      	cbz	r0, 8007c6c <unwind_phase2_forced+0xa8>
 8007c6a:	2709      	movs	r7, #9
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c76:	f1ba 0f07 	cmp.w	sl, #7
 8007c7a:	d1f6      	bne.n	8007c6a <unwind_phase2_forced+0xa6>
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c80:	f7ff ff7e 	bl	8007b80 <_Unwind_DebugHook>
 8007c84:	a803      	add	r0, sp, #12
 8007c86:	f000 fb9d 	bl	80083c4 <__restore_core_regs>
 8007c8a:	bf00      	nop

08007c8c <_Unwind_GetCFA>:
 8007c8c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007c8e:	4770      	bx	lr

08007c90 <__gnu_Unwind_RaiseException>:
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c92:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007c94:	640b      	str	r3, [r1, #64]	; 0x40
 8007c96:	1d0d      	adds	r5, r1, #4
 8007c98:	460f      	mov	r7, r1
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c9e:	b0f9      	sub	sp, #484	; 0x1e4
 8007ca0:	ac01      	add	r4, sp, #4
 8007ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007cb8:	9500      	str	r5, [sp, #0]
 8007cba:	e006      	b.n	8007cca <__gnu_Unwind_RaiseException+0x3a>
 8007cbc:	6933      	ldr	r3, [r6, #16]
 8007cbe:	466a      	mov	r2, sp
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4798      	blx	r3
 8007cc4:	2808      	cmp	r0, #8
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	d108      	bne.n	8007cdc <__gnu_Unwind_RaiseException+0x4c>
 8007cca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff fed1 	bl	8007a74 <get_eit_entry>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d0f2      	beq.n	8007cbc <__gnu_Unwind_RaiseException+0x2c>
 8007cd6:	2009      	movs	r0, #9
 8007cd8:	b079      	add	sp, #484	; 0x1e4
 8007cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cdc:	4668      	mov	r0, sp
 8007cde:	f7ff ff1b 	bl	8007b18 <restore_non_core_regs>
 8007ce2:	2c06      	cmp	r4, #6
 8007ce4:	d1f7      	bne.n	8007cd6 <__gnu_Unwind_RaiseException+0x46>
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7ff ff4b 	bl	8007b84 <unwind_phase2>
 8007cee:	bf00      	nop

08007cf0 <__gnu_Unwind_ForcedUnwind>:
 8007cf0:	b430      	push	{r4, r5}
 8007cf2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007cf4:	60c1      	str	r1, [r0, #12]
 8007cf6:	6182      	str	r2, [r0, #24]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	641d      	str	r5, [r3, #64]	; 0x40
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	bc30      	pop	{r4, r5}
 8007d00:	e760      	b.n	8007bc4 <unwind_phase2_forced>
 8007d02:	bf00      	nop

08007d04 <__gnu_Unwind_Resume>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	68c6      	ldr	r6, [r0, #12]
 8007d08:	6943      	ldr	r3, [r0, #20]
 8007d0a:	640b      	str	r3, [r1, #64]	; 0x40
 8007d0c:	b9be      	cbnz	r6, 8007d3e <__gnu_Unwind_Resume+0x3a>
 8007d0e:	6903      	ldr	r3, [r0, #16]
 8007d10:	460a      	mov	r2, r1
 8007d12:	4604      	mov	r4, r0
 8007d14:	460d      	mov	r5, r1
 8007d16:	4601      	mov	r1, r0
 8007d18:	2002      	movs	r0, #2
 8007d1a:	4798      	blx	r3
 8007d1c:	2807      	cmp	r0, #7
 8007d1e:	d007      	beq.n	8007d30 <__gnu_Unwind_Resume+0x2c>
 8007d20:	2808      	cmp	r0, #8
 8007d22:	d103      	bne.n	8007d2c <__gnu_Unwind_Resume+0x28>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4620      	mov	r0, r4
 8007d28:	f7ff ff2c 	bl	8007b84 <unwind_phase2>
 8007d2c:	f010 f9f8 	bl	8018120 <abort>
 8007d30:	4630      	mov	r0, r6
 8007d32:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007d34:	f7ff ff24 	bl	8007b80 <_Unwind_DebugHook>
 8007d38:	1d28      	adds	r0, r5, #4
 8007d3a:	f000 fb43 	bl	80083c4 <__restore_core_regs>
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f7ff ff40 	bl	8007bc4 <unwind_phase2_forced>
 8007d44:	f010 f9ec 	bl	8018120 <abort>

08007d48 <__gnu_Unwind_Resume_or_Rethrow>:
 8007d48:	68c2      	ldr	r2, [r0, #12]
 8007d4a:	b11a      	cbz	r2, 8007d54 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007d4c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007d4e:	640a      	str	r2, [r1, #64]	; 0x40
 8007d50:	2200      	movs	r2, #0
 8007d52:	e737      	b.n	8007bc4 <unwind_phase2_forced>
 8007d54:	e79c      	b.n	8007c90 <__gnu_Unwind_RaiseException>
 8007d56:	bf00      	nop

08007d58 <_Unwind_Complete>:
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop

08007d5c <_Unwind_DeleteException>:
 8007d5c:	6883      	ldr	r3, [r0, #8]
 8007d5e:	b113      	cbz	r3, 8007d66 <_Unwind_DeleteException+0xa>
 8007d60:	4601      	mov	r1, r0
 8007d62:	2001      	movs	r0, #1
 8007d64:	4718      	bx	r3
 8007d66:	4770      	bx	lr

08007d68 <_Unwind_VRS_Get>:
 8007d68:	2904      	cmp	r1, #4
 8007d6a:	d807      	bhi.n	8007d7c <_Unwind_VRS_Get+0x14>
 8007d6c:	e8df f001 	tbb	[pc, r1]
 8007d70:	08060803 	.word	0x08060803
 8007d74:	08          	.byte	0x08
 8007d75:	00          	.byte	0x00
 8007d76:	b90b      	cbnz	r3, 8007d7c <_Unwind_VRS_Get+0x14>
 8007d78:	2a0f      	cmp	r2, #15
 8007d7a:	d903      	bls.n	8007d84 <_Unwind_VRS_Get+0x1c>
 8007d7c:	2002      	movs	r0, #2
 8007d7e:	4770      	bx	lr
 8007d80:	2001      	movs	r0, #1
 8007d82:	4770      	bx	lr
 8007d84:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	6853      	ldr	r3, [r2, #4]
 8007d8c:	9a00      	ldr	r2, [sp, #0]
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop

08007d94 <_Unwind_GetGR>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	2300      	movs	r3, #0
 8007d9a:	ac03      	add	r4, sp, #12
 8007d9c:	460a      	mov	r2, r1
 8007d9e:	9400      	str	r4, [sp, #0]
 8007da0:	4619      	mov	r1, r3
 8007da2:	f7ff ffe1 	bl	8007d68 <_Unwind_VRS_Get>
 8007da6:	9803      	ldr	r0, [sp, #12]
 8007da8:	b004      	add	sp, #16
 8007daa:	bd10      	pop	{r4, pc}

08007dac <_Unwind_VRS_Set>:
 8007dac:	2904      	cmp	r1, #4
 8007dae:	d807      	bhi.n	8007dc0 <_Unwind_VRS_Set+0x14>
 8007db0:	e8df f001 	tbb	[pc, r1]
 8007db4:	08060803 	.word	0x08060803
 8007db8:	08          	.byte	0x08
 8007db9:	00          	.byte	0x00
 8007dba:	b90b      	cbnz	r3, 8007dc0 <_Unwind_VRS_Set+0x14>
 8007dbc:	2a0f      	cmp	r2, #15
 8007dbe:	d903      	bls.n	8007dc8 <_Unwind_VRS_Set+0x1c>
 8007dc0:	2002      	movs	r0, #2
 8007dc2:	4770      	bx	lr
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	4770      	bx	lr
 8007dc8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007dcc:	9a00      	ldr	r2, [sp, #0]
 8007dce:	6812      	ldr	r2, [r2, #0]
 8007dd0:	6042      	str	r2, [r0, #4]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop

08007dd8 <_Unwind_SetGR>:
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	ac04      	add	r4, sp, #16
 8007dde:	2300      	movs	r3, #0
 8007de0:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007de4:	460a      	mov	r2, r1
 8007de6:	9400      	str	r4, [sp, #0]
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7ff ffdf 	bl	8007dac <_Unwind_VRS_Set>
 8007dee:	b004      	add	sp, #16
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	bf00      	nop

08007df4 <__gnu_Unwind_Backtrace>:
 8007df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007df8:	6413      	str	r3, [r2, #64]	; 0x40
 8007dfa:	1d15      	adds	r5, r2, #4
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	460e      	mov	r6, r1
 8007e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e02:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007e06:	ac17      	add	r4, sp, #92	; 0x5c
 8007e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e1e:	9516      	str	r5, [sp, #88]	; 0x58
 8007e20:	e010      	b.n	8007e44 <__gnu_Unwind_Backtrace+0x50>
 8007e22:	a816      	add	r0, sp, #88	; 0x58
 8007e24:	f7ff ffd8 	bl	8007dd8 <_Unwind_SetGR>
 8007e28:	4631      	mov	r1, r6
 8007e2a:	a816      	add	r0, sp, #88	; 0x58
 8007e2c:	47b8      	blx	r7
 8007e2e:	aa16      	add	r2, sp, #88	; 0x58
 8007e30:	4669      	mov	r1, sp
 8007e32:	b978      	cbnz	r0, 8007e54 <__gnu_Unwind_Backtrace+0x60>
 8007e34:	9b04      	ldr	r3, [sp, #16]
 8007e36:	2008      	movs	r0, #8
 8007e38:	4798      	blx	r3
 8007e3a:	2805      	cmp	r0, #5
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	d00a      	beq.n	8007e56 <__gnu_Unwind_Backtrace+0x62>
 8007e40:	2809      	cmp	r0, #9
 8007e42:	d007      	beq.n	8007e54 <__gnu_Unwind_Backtrace+0x60>
 8007e44:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007e46:	4668      	mov	r0, sp
 8007e48:	f7ff fe14 	bl	8007a74 <get_eit_entry>
 8007e4c:	466a      	mov	r2, sp
 8007e4e:	210c      	movs	r1, #12
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d0e6      	beq.n	8007e22 <__gnu_Unwind_Backtrace+0x2e>
 8007e54:	2409      	movs	r4, #9
 8007e56:	a816      	add	r0, sp, #88	; 0x58
 8007e58:	f7ff fe5e 	bl	8007b18 <restore_non_core_regs>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e64 <__gnu_unwind_pr_common>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	460d      	mov	r5, r1
 8007e6a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007e6c:	b089      	sub	sp, #36	; 0x24
 8007e6e:	1d0c      	adds	r4, r1, #4
 8007e70:	4616      	mov	r6, r2
 8007e72:	f000 0b03 	and.w	fp, r0, #3
 8007e76:	680a      	ldr	r2, [r1, #0]
 8007e78:	9406      	str	r4, [sp, #24]
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d068      	beq.n	8007f52 <__gnu_unwind_pr_common+0xee>
 8007e80:	0c13      	lsrs	r3, r2, #16
 8007e82:	b2d9      	uxtb	r1, r3
 8007e84:	0412      	lsls	r2, r2, #16
 8007e86:	f88d 301d 	strb.w	r3, [sp, #29]
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007e90:	9205      	str	r2, [sp, #20]
 8007e92:	f88d 301c 	strb.w	r3, [sp, #28]
 8007e96:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007e98:	f1bb 0f02 	cmp.w	fp, #2
 8007e9c:	bf08      	it	eq
 8007e9e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007ea0:	f013 0301 	ands.w	r3, r3, #1
 8007ea4:	d146      	bne.n	8007f34 <__gnu_unwind_pr_common+0xd0>
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	f000 0308 	and.w	r3, r0, #8
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	f8d4 9000 	ldr.w	r9, [r4]
 8007eb2:	f1b9 0f00 	cmp.w	r9, #0
 8007eb6:	f000 80f3 	beq.w	80080a0 <__gnu_unwind_pr_common+0x23c>
 8007eba:	2f02      	cmp	r7, #2
 8007ebc:	d045      	beq.n	8007f4a <__gnu_unwind_pr_common+0xe6>
 8007ebe:	f8b4 9000 	ldrh.w	r9, [r4]
 8007ec2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8007ec6:	3404      	adds	r4, #4
 8007ec8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007eca:	f028 0a01 	bic.w	sl, r8, #1
 8007ece:	210f      	movs	r1, #15
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	449a      	add	sl, r3
 8007ed4:	f7ff ff5e 	bl	8007d94 <_Unwind_GetGR>
 8007ed8:	4582      	cmp	sl, r0
 8007eda:	d834      	bhi.n	8007f46 <__gnu_unwind_pr_common+0xe2>
 8007edc:	f029 0301 	bic.w	r3, r9, #1
 8007ee0:	4453      	add	r3, sl
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	bf94      	ite	ls
 8007ee6:	2000      	movls	r0, #0
 8007ee8:	2001      	movhi	r0, #1
 8007eea:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007eee:	f008 0802 	and.w	r8, r8, #2
 8007ef2:	f009 0901 	and.w	r9, r9, #1
 8007ef6:	ea48 0809 	orr.w	r8, r8, r9
 8007efa:	f1b8 0f01 	cmp.w	r8, #1
 8007efe:	d03a      	beq.n	8007f76 <__gnu_unwind_pr_common+0x112>
 8007f00:	d331      	bcc.n	8007f66 <__gnu_unwind_pr_common+0x102>
 8007f02:	f1b8 0f02 	cmp.w	r8, #2
 8007f06:	d11a      	bne.n	8007f3e <__gnu_unwind_pr_common+0xda>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007f0e:	f1bb 0f00 	cmp.w	fp, #0
 8007f12:	d166      	bne.n	8007fe2 <__gnu_unwind_pr_common+0x17e>
 8007f14:	b130      	cbz	r0, 8007f24 <__gnu_unwind_pr_common+0xc0>
 8007f16:	9a00      	ldr	r2, [sp, #0]
 8007f18:	2a00      	cmp	r2, #0
 8007f1a:	d06c      	beq.n	8007ff6 <__gnu_unwind_pr_common+0x192>
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	f000 8090 	beq.w	8008044 <__gnu_unwind_pr_common+0x1e0>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da00      	bge.n	8007f2a <__gnu_unwind_pr_common+0xc6>
 8007f28:	3404      	adds	r4, #4
 8007f2a:	f10a 0301 	add.w	r3, sl, #1
 8007f2e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007f32:	e7bc      	b.n	8007eae <__gnu_unwind_pr_common+0x4a>
 8007f34:	4630      	mov	r0, r6
 8007f36:	a905      	add	r1, sp, #20
 8007f38:	f000 fb46 	bl	80085c8 <__gnu_unwind_execute>
 8007f3c:	b178      	cbz	r0, 8007f5e <__gnu_unwind_pr_common+0xfa>
 8007f3e:	2009      	movs	r0, #9
 8007f40:	b009      	add	sp, #36	; 0x24
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	2000      	movs	r0, #0
 8007f48:	e7cf      	b.n	8007eea <__gnu_unwind_pr_common+0x86>
 8007f4a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007f4e:	3408      	adds	r4, #8
 8007f50:	e7ba      	b.n	8007ec8 <__gnu_unwind_pr_common+0x64>
 8007f52:	0212      	lsls	r2, r2, #8
 8007f54:	2303      	movs	r3, #3
 8007f56:	9205      	str	r2, [sp, #20]
 8007f58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007f5c:	e79b      	b.n	8007e96 <__gnu_unwind_pr_common+0x32>
 8007f5e:	2008      	movs	r0, #8
 8007f60:	b009      	add	sp, #36	; 0x24
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	f1bb 0f00 	cmp.w	fp, #0
 8007f6a:	d002      	beq.n	8007f72 <__gnu_unwind_pr_common+0x10e>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f040 80b4 	bne.w	80080da <__gnu_unwind_pr_common+0x276>
 8007f72:	3404      	adds	r4, #4
 8007f74:	e79b      	b.n	8007eae <__gnu_unwind_pr_common+0x4a>
 8007f76:	f1bb 0f00 	cmp.w	fp, #0
 8007f7a:	d118      	bne.n	8007fae <__gnu_unwind_pr_common+0x14a>
 8007f7c:	b1a8      	cbz	r0, 8007faa <__gnu_unwind_pr_common+0x146>
 8007f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f82:	1c99      	adds	r1, r3, #2
 8007f84:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007f88:	d0d9      	beq.n	8007f3e <__gnu_unwind_pr_common+0xda>
 8007f8a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9104      	str	r1, [sp, #16]
 8007f92:	f000 80b5 	beq.w	8008100 <__gnu_unwind_pr_common+0x29c>
 8007f96:	1d20      	adds	r0, r4, #4
 8007f98:	f7ff fdea 	bl	8007b70 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007f9c:	ab04      	add	r3, sp, #16
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f00f fabb 	bl	801751c <__cxa_type_match>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d167      	bne.n	800807a <__gnu_unwind_pr_common+0x216>
 8007faa:	3408      	adds	r4, #8
 8007fac:	e77f      	b.n	8007eae <__gnu_unwind_pr_common+0x4a>
 8007fae:	210d      	movs	r1, #13
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007fb6:	f7ff feed 	bl	8007d94 <_Unwind_GetGR>
 8007fba:	4580      	cmp	r8, r0
 8007fbc:	d1f5      	bne.n	8007faa <__gnu_unwind_pr_common+0x146>
 8007fbe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	d1f2      	bne.n	8007faa <__gnu_unwind_pr_common+0x146>
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7ff fd07 	bl	80079d8 <selfrel_offset31>
 8007fca:	210f      	movs	r1, #15
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ff02 	bl	8007dd8 <_Unwind_SetGR>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	2100      	movs	r1, #0
 8007fda:	f7ff fefd 	bl	8007dd8 <_Unwind_SetGR>
 8007fde:	2007      	movs	r0, #7
 8007fe0:	e7ae      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8007fe2:	210d      	movs	r1, #13
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007fea:	f7ff fed3 	bl	8007d94 <_Unwind_GetGR>
 8007fee:	4580      	cmp	r8, r0
 8007ff0:	d032      	beq.n	8008058 <__gnu_unwind_pr_common+0x1f4>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	e796      	b.n	8007f24 <__gnu_unwind_pr_common+0xc0>
 8007ff6:	f1ba 0f00 	cmp.w	sl, #0
 8007ffa:	d023      	beq.n	8008044 <__gnu_unwind_pr_common+0x1e0>
 8007ffc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8008000:	f104 0804 	add.w	r8, r4, #4
 8008004:	f8cd b008 	str.w	fp, [sp, #8]
 8008008:	f8dd 9000 	ldr.w	r9, [sp]
 800800c:	9703      	str	r7, [sp, #12]
 800800e:	46a3      	mov	fp, r4
 8008010:	461c      	mov	r4, r3
 8008012:	e002      	b.n	800801a <__gnu_unwind_pr_common+0x1b6>
 8008014:	4557      	cmp	r7, sl
 8008016:	46b9      	mov	r9, r7
 8008018:	d040      	beq.n	800809c <__gnu_unwind_pr_common+0x238>
 800801a:	4640      	mov	r0, r8
 800801c:	9404      	str	r4, [sp, #16]
 800801e:	f7ff fda7 	bl	8007b70 <_Unwind_decode_typeinfo_ptr.isra.0>
 8008022:	ab04      	add	r3, sp, #16
 8008024:	4601      	mov	r1, r0
 8008026:	2200      	movs	r2, #0
 8008028:	4628      	mov	r0, r5
 800802a:	f00f fa77 	bl	801751c <__cxa_type_match>
 800802e:	f109 0701 	add.w	r7, r9, #1
 8008032:	f108 0804 	add.w	r8, r8, #4
 8008036:	2800      	cmp	r0, #0
 8008038:	d0ec      	beq.n	8008014 <__gnu_unwind_pr_common+0x1b0>
 800803a:	45d1      	cmp	r9, sl
 800803c:	465c      	mov	r4, fp
 800803e:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8008042:	d1d6      	bne.n	8007ff2 <__gnu_unwind_pr_common+0x18e>
 8008044:	4630      	mov	r0, r6
 8008046:	210d      	movs	r1, #13
 8008048:	f7ff fea4 	bl	8007d94 <_Unwind_GetGR>
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	6228      	str	r0, [r5, #32]
 8008050:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8008054:	2006      	movs	r0, #6
 8008056:	e773      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8008058:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800805a:	429c      	cmp	r4, r3
 800805c:	d1c9      	bne.n	8007ff2 <__gnu_unwind_pr_common+0x18e>
 800805e:	2204      	movs	r2, #4
 8008060:	f04f 0800 	mov.w	r8, #0
 8008064:	18a3      	adds	r3, r4, r2
 8008066:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 800806a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	4543      	cmp	r3, r8
 8008072:	db4d      	blt.n	8008110 <__gnu_unwind_pr_common+0x2ac>
 8008074:	2301      	movs	r3, #1
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	e757      	b.n	8007f2a <__gnu_unwind_pr_common+0xc6>
 800807a:	4680      	mov	r8, r0
 800807c:	210d      	movs	r1, #13
 800807e:	4630      	mov	r0, r6
 8008080:	f7ff fe88 	bl	8007d94 <_Unwind_GetGR>
 8008084:	f1b8 0f02 	cmp.w	r8, #2
 8008088:	6228      	str	r0, [r5, #32]
 800808a:	d13e      	bne.n	800810a <__gnu_unwind_pr_common+0x2a6>
 800808c:	462b      	mov	r3, r5
 800808e:	9a04      	ldr	r2, [sp, #16]
 8008090:	f843 2f2c 	str.w	r2, [r3, #44]!
 8008094:	626b      	str	r3, [r5, #36]	; 0x24
 8008096:	62ac      	str	r4, [r5, #40]	; 0x28
 8008098:	2006      	movs	r0, #6
 800809a:	e751      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 800809c:	465c      	mov	r4, fp
 800809e:	e7d1      	b.n	8008044 <__gnu_unwind_pr_common+0x1e0>
 80080a0:	a905      	add	r1, sp, #20
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 fa90 	bl	80085c8 <__gnu_unwind_execute>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f47f af48 	bne.w	8007f3e <__gnu_unwind_pr_common+0xda>
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f43f af54 	beq.w	8007f5e <__gnu_unwind_pr_common+0xfa>
 80080b6:	210f      	movs	r1, #15
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff fe6b 	bl	8007d94 <_Unwind_GetGR>
 80080be:	210e      	movs	r1, #14
 80080c0:	4602      	mov	r2, r0
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff fe88 	bl	8007dd8 <_Unwind_SetGR>
 80080c8:	4630      	mov	r0, r6
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <__gnu_unwind_pr_common+0x2d0>)
 80080cc:	210f      	movs	r1, #15
 80080ce:	f7ff fe83 	bl	8007dd8 <_Unwind_SetGR>
 80080d2:	2007      	movs	r0, #7
 80080d4:	b009      	add	sp, #36	; 0x24
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	4620      	mov	r0, r4
 80080dc:	f7ff fc7c 	bl	80079d8 <selfrel_offset31>
 80080e0:	3404      	adds	r4, #4
 80080e2:	4607      	mov	r7, r0
 80080e4:	63ac      	str	r4, [r5, #56]	; 0x38
 80080e6:	4628      	mov	r0, r5
 80080e8:	f00f fa70 	bl	80175cc <__cxa_begin_cleanup>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f43f af26 	beq.w	8007f3e <__gnu_unwind_pr_common+0xda>
 80080f2:	4630      	mov	r0, r6
 80080f4:	463a      	mov	r2, r7
 80080f6:	210f      	movs	r1, #15
 80080f8:	f7ff fe6e 	bl	8007dd8 <_Unwind_SetGR>
 80080fc:	2007      	movs	r0, #7
 80080fe:	e71f      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8008100:	4630      	mov	r0, r6
 8008102:	210d      	movs	r1, #13
 8008104:	f7ff fe46 	bl	8007d94 <_Unwind_GetGR>
 8008108:	6228      	str	r0, [r5, #32]
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	626b      	str	r3, [r5, #36]	; 0x24
 800810e:	e7c2      	b.n	8008096 <__gnu_unwind_pr_common+0x232>
 8008110:	f10a 0001 	add.w	r0, sl, #1
 8008114:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8008118:	f7ff fc5e 	bl	80079d8 <selfrel_offset31>
 800811c:	210f      	movs	r1, #15
 800811e:	4602      	mov	r2, r0
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff fe59 	bl	8007dd8 <_Unwind_SetGR>
 8008126:	4630      	mov	r0, r6
 8008128:	462a      	mov	r2, r5
 800812a:	4641      	mov	r1, r8
 800812c:	f7ff fe54 	bl	8007dd8 <_Unwind_SetGR>
 8008130:	2007      	movs	r0, #7
 8008132:	e705      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8008134:	080176fd 	.word	0x080176fd

08008138 <__aeabi_unwind_cpp_pr0>:
 8008138:	2300      	movs	r3, #0
 800813a:	e693      	b.n	8007e64 <__gnu_unwind_pr_common>

0800813c <__aeabi_unwind_cpp_pr1>:
 800813c:	2301      	movs	r3, #1
 800813e:	e691      	b.n	8007e64 <__gnu_unwind_pr_common>

08008140 <__aeabi_unwind_cpp_pr2>:
 8008140:	2302      	movs	r3, #2
 8008142:	e68f      	b.n	8007e64 <__gnu_unwind_pr_common>

08008144 <_Unwind_VRS_Pop>:
 8008144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	4605      	mov	r5, r0
 800814a:	b0c4      	sub	sp, #272	; 0x110
 800814c:	2904      	cmp	r1, #4
 800814e:	d806      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 8008150:	e8df f001 	tbb	[pc, r1]
 8008154:	03052b4d 	.word	0x03052b4d
 8008158:	09          	.byte	0x09
 8008159:	00          	.byte	0x00
 800815a:	2b03      	cmp	r3, #3
 800815c:	d05f      	beq.n	800821e <_Unwind_VRS_Pop+0xda>
 800815e:	2002      	movs	r0, #2
 8008160:	b044      	add	sp, #272	; 0x110
 8008162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f9      	bne.n	800815e <_Unwind_VRS_Pop+0x1a>
 800816a:	2a10      	cmp	r2, #16
 800816c:	d8f7      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	06dc      	lsls	r4, r3, #27
 8008172:	f100 80f4 	bmi.w	800835e <_Unwind_VRS_Pop+0x21a>
 8008176:	ac22      	add	r4, sp, #136	; 0x88
 8008178:	4620      	mov	r0, r4
 800817a:	9201      	str	r2, [sp, #4]
 800817c:	f000 f994 	bl	80084a8 <__gnu_Unwind_Save_WMMXC>
 8008180:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008182:	9a01      	ldr	r2, [sp, #4]
 8008184:	2300      	movs	r3, #0
 8008186:	2601      	movs	r6, #1
 8008188:	fa06 f103 	lsl.w	r1, r6, r3
 800818c:	4211      	tst	r1, r2
 800818e:	d003      	beq.n	8008198 <_Unwind_VRS_Pop+0x54>
 8008190:	6801      	ldr	r1, [r0, #0]
 8008192:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008196:	3004      	adds	r0, #4
 8008198:	3301      	adds	r3, #1
 800819a:	2b04      	cmp	r3, #4
 800819c:	d1f4      	bne.n	8008188 <_Unwind_VRS_Pop+0x44>
 800819e:	63a8      	str	r0, [r5, #56]	; 0x38
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 f977 	bl	8008494 <__gnu_Unwind_Restore_WMMXC>
 80081a6:	2000      	movs	r0, #0
 80081a8:	e7da      	b.n	8008160 <_Unwind_VRS_Pop+0x1c>
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80081b0:	b297      	uxth	r7, r2
 80081b2:	d052      	beq.n	800825a <_Unwind_VRS_Pop+0x116>
 80081b4:	2b05      	cmp	r3, #5
 80081b6:	d1d2      	bne.n	800815e <_Unwind_VRS_Pop+0x1a>
 80081b8:	eb06 0807 	add.w	r8, r6, r7
 80081bc:	f1b8 0f20 	cmp.w	r8, #32
 80081c0:	d8cd      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 80081c2:	2e0f      	cmp	r6, #15
 80081c4:	f240 8099 	bls.w	80082fa <_Unwind_VRS_Pop+0x1b6>
 80081c8:	46b8      	mov	r8, r7
 80081ca:	2f00      	cmp	r7, #0
 80081cc:	f040 80db 	bne.w	8008386 <_Unwind_VRS_Pop+0x242>
 80081d0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80081d2:	63aa      	str	r2, [r5, #56]	; 0x38
 80081d4:	2e0f      	cmp	r6, #15
 80081d6:	f240 80be 	bls.w	8008356 <_Unwind_VRS_Pop+0x212>
 80081da:	f1b8 0f00 	cmp.w	r8, #0
 80081de:	d002      	beq.n	80081e6 <_Unwind_VRS_Pop+0xa2>
 80081e0:	a802      	add	r0, sp, #8
 80081e2:	f000 f90b 	bl	80083fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80081e6:	2000      	movs	r0, #0
 80081e8:	b044      	add	sp, #272	; 0x110
 80081ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1b5      	bne.n	800815e <_Unwind_VRS_Pop+0x1a>
 80081f2:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80081f4:	b297      	uxth	r7, r2
 80081f6:	1d28      	adds	r0, r5, #4
 80081f8:	2601      	movs	r6, #1
 80081fa:	fa06 f103 	lsl.w	r1, r6, r3
 80081fe:	4239      	tst	r1, r7
 8008200:	f103 0301 	add.w	r3, r3, #1
 8008204:	d002      	beq.n	800820c <_Unwind_VRS_Pop+0xc8>
 8008206:	6821      	ldr	r1, [r4, #0]
 8008208:	6001      	str	r1, [r0, #0]
 800820a:	3404      	adds	r4, #4
 800820c:	2b10      	cmp	r3, #16
 800820e:	f100 0004 	add.w	r0, r0, #4
 8008212:	d1f2      	bne.n	80081fa <_Unwind_VRS_Pop+0xb6>
 8008214:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8008218:	d1e5      	bne.n	80081e6 <_Unwind_VRS_Pop+0xa2>
 800821a:	63ac      	str	r4, [r5, #56]	; 0x38
 800821c:	e7a0      	b.n	8008160 <_Unwind_VRS_Pop+0x1c>
 800821e:	0c16      	lsrs	r6, r2, #16
 8008220:	b297      	uxth	r7, r2
 8008222:	19f3      	adds	r3, r6, r7
 8008224:	2b10      	cmp	r3, #16
 8008226:	d89a      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	071a      	lsls	r2, r3, #28
 800822c:	d45d      	bmi.n	80082ea <_Unwind_VRS_Pop+0x1a6>
 800822e:	ac22      	add	r4, sp, #136	; 0x88
 8008230:	4620      	mov	r0, r4
 8008232:	f000 f90d 	bl	8008450 <__gnu_Unwind_Save_WMMXD>
 8008236:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800823a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800823c:	b13f      	cbz	r7, 800824e <_Unwind_VRS_Pop+0x10a>
 800823e:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	f841 0b04 	str.w	r0, [r1], #4
 8008248:	3304      	adds	r3, #4
 800824a:	4293      	cmp	r3, r2
 800824c:	d1f9      	bne.n	8008242 <_Unwind_VRS_Pop+0xfe>
 800824e:	4620      	mov	r0, r4
 8008250:	63ab      	str	r3, [r5, #56]	; 0x38
 8008252:	f000 f8db 	bl	800840c <__gnu_Unwind_Restore_WMMXD>
 8008256:	2000      	movs	r0, #0
 8008258:	e782      	b.n	8008160 <_Unwind_VRS_Pop+0x1c>
 800825a:	19f2      	adds	r2, r6, r7
 800825c:	2a10      	cmp	r2, #16
 800825e:	f63f af7e 	bhi.w	800815e <_Unwind_VRS_Pop+0x1a>
 8008262:	2e0f      	cmp	r6, #15
 8008264:	f63f af7b 	bhi.w	800815e <_Unwind_VRS_Pop+0x1a>
 8008268:	682a      	ldr	r2, [r5, #0]
 800826a:	07d1      	lsls	r1, r2, #31
 800826c:	d508      	bpl.n	8008280 <_Unwind_VRS_Pop+0x13c>
 800826e:	4628      	mov	r0, r5
 8008270:	f022 0203 	bic.w	r2, r2, #3
 8008274:	f840 2b48 	str.w	r2, [r0], #72
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f000 f8b3 	bl	80083e4 <__gnu_Unwind_Save_VFP>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	ac22      	add	r4, sp, #136	; 0x88
 8008284:	4620      	mov	r0, r4
 8008286:	f000 f8ad 	bl	80083e4 <__gnu_Unwind_Save_VFP>
 800828a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	2f00      	cmp	r7, #0
 8008290:	f000 8095 	beq.w	80083be <_Unwind_VRS_Pop+0x27a>
 8008294:	007f      	lsls	r7, r7, #1
 8008296:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800829a:	f04f 0800 	mov.w	r8, #0
 800829e:	3c04      	subs	r4, #4
 80082a0:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 80082a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80082a8:	f844 0f04 	str.w	r0, [r4, #4]!
 80082ac:	4291      	cmp	r1, r2
 80082ae:	d1f9      	bne.n	80082a4 <_Unwind_VRS_Pop+0x160>
 80082b0:	f1b8 0f00 	cmp.w	r8, #0
 80082b4:	d00f      	beq.n	80082d6 <_Unwind_VRS_Pop+0x192>
 80082b6:	ac02      	add	r4, sp, #8
 80082b8:	2e10      	cmp	r6, #16
 80082ba:	4631      	mov	r1, r6
 80082bc:	bf38      	it	cc
 80082be:	2110      	movcc	r1, #16
 80082c0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80082c4:	3984      	subs	r1, #132	; 0x84
 80082c6:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 80082ca:	f852 0b04 	ldr.w	r0, [r2], #4
 80082ce:	f841 0f04 	str.w	r0, [r1, #4]!
 80082d2:	4294      	cmp	r4, r2
 80082d4:	d1f9      	bne.n	80082ca <_Unwind_VRS_Pop+0x186>
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	f47f af7b 	bne.w	80081d2 <_Unwind_VRS_Pop+0x8e>
 80082dc:	ac22      	add	r4, sp, #136	; 0x88
 80082de:	3204      	adds	r2, #4
 80082e0:	63aa      	str	r2, [r5, #56]	; 0x38
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f87a 	bl	80083dc <__gnu_Unwind_Restore_VFP>
 80082e8:	e77d      	b.n	80081e6 <_Unwind_VRS_Pop+0xa2>
 80082ea:	f023 0308 	bic.w	r3, r3, #8
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 80082f4:	f000 f8ac 	bl	8008450 <__gnu_Unwind_Save_WMMXD>
 80082f8:	e799      	b.n	800822e <_Unwind_VRS_Pop+0xea>
 80082fa:	f1b8 0f10 	cmp.w	r8, #16
 80082fe:	682a      	ldr	r2, [r5, #0]
 8008300:	d943      	bls.n	800838a <_Unwind_VRS_Pop+0x246>
 8008302:	07d0      	lsls	r0, r2, #31
 8008304:	f1a8 0810 	sub.w	r8, r8, #16
 8008308:	d50b      	bpl.n	8008322 <_Unwind_VRS_Pop+0x1de>
 800830a:	4628      	mov	r0, r5
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	f042 0202 	orr.w	r2, r2, #2
 8008314:	f840 2b48 	str.w	r2, [r0], #72
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f000 f86b 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 800831e:	682a      	ldr	r2, [r5, #0]
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	0751      	lsls	r1, r2, #29
 8008324:	d425      	bmi.n	8008372 <_Unwind_VRS_Pop+0x22e>
 8008326:	2e0f      	cmp	r6, #15
 8008328:	d804      	bhi.n	8008334 <_Unwind_VRS_Pop+0x1f0>
 800832a:	a822      	add	r0, sp, #136	; 0x88
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f000 f861 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 8008332:	9b01      	ldr	r3, [sp, #4]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	ac02      	add	r4, sp, #8
 8008338:	4620      	mov	r0, r4
 800833a:	f000 f863 	bl	8008404 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800833e:	f1c6 0110 	rsb	r1, r6, #16
 8008342:	2900      	cmp	r1, #0
 8008344:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	ddb6      	ble.n	80082b8 <_Unwind_VRS_Pop+0x174>
 800834a:	ac22      	add	r4, sp, #136	; 0x88
 800834c:	004f      	lsls	r7, r1, #1
 800834e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008352:	4611      	mov	r1, r2
 8008354:	e7a3      	b.n	800829e <_Unwind_VRS_Pop+0x15a>
 8008356:	a822      	add	r0, sp, #136	; 0x88
 8008358:	f000 f848 	bl	80083ec <__gnu_Unwind_Restore_VFP_D>
 800835c:	e73d      	b.n	80081da <_Unwind_VRS_Pop+0x96>
 800835e:	f023 0310 	bic.w	r3, r3, #16
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8008368:	9201      	str	r2, [sp, #4]
 800836a:	f000 f89d 	bl	80084a8 <__gnu_Unwind_Save_WMMXC>
 800836e:	9a01      	ldr	r2, [sp, #4]
 8008370:	e701      	b.n	8008176 <_Unwind_VRS_Pop+0x32>
 8008372:	4628      	mov	r0, r5
 8008374:	f022 0204 	bic.w	r2, r2, #4
 8008378:	f840 2bd0 	str.w	r2, [r0], #208
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	f000 f841 	bl	8008404 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008382:	9b01      	ldr	r3, [sp, #4]
 8008384:	e7cf      	b.n	8008326 <_Unwind_VRS_Pop+0x1e2>
 8008386:	682a      	ldr	r2, [r5, #0]
 8008388:	e7cb      	b.n	8008322 <_Unwind_VRS_Pop+0x1de>
 800838a:	07d0      	lsls	r0, r2, #31
 800838c:	d50a      	bpl.n	80083a4 <_Unwind_VRS_Pop+0x260>
 800838e:	4628      	mov	r0, r5
 8008390:	f022 0201 	bic.w	r2, r2, #1
 8008394:	f042 0202 	orr.w	r2, r2, #2
 8008398:	f840 2b48 	str.w	r2, [r0], #72
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	f000 f829 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	ac22      	add	r4, sp, #136	; 0x88
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 f823 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 80083ae:	46b8      	mov	r8, r7
 80083b0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	f47f af6d 	bne.w	8008294 <_Unwind_VRS_Pop+0x150>
 80083ba:	460a      	mov	r2, r1
 80083bc:	e709      	b.n	80081d2 <_Unwind_VRS_Pop+0x8e>
 80083be:	460a      	mov	r2, r1
 80083c0:	e78d      	b.n	80082de <_Unwind_VRS_Pop+0x19a>
 80083c2:	bf00      	nop

080083c4 <__restore_core_regs>:
 80083c4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80083c8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80083cc:	469c      	mov	ip, r3
 80083ce:	46a6      	mov	lr, r4
 80083d0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80083d4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80083d8:	46e5      	mov	sp, ip
 80083da:	bd00      	pop	{pc}

080083dc <__gnu_Unwind_Restore_VFP>:
 80083dc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop

080083e4 <__gnu_Unwind_Save_VFP>:
 80083e4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <__gnu_Unwind_Restore_VFP_D>:
 80083ec:	ec90 0b20 	vldmia	r0, {d0-d15}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop

080083f4 <__gnu_Unwind_Save_VFP_D>:
 80083f4:	ec80 0b20 	vstmia	r0, {d0-d15}
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80083fc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop

08008404 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8008404:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop

0800840c <__gnu_Unwind_Restore_WMMXD>:
 800840c:	ecf0 0102 	ldfe	f0, [r0], #8
 8008410:	ecf0 1102 	ldfe	f1, [r0], #8
 8008414:	ecf0 2102 	ldfe	f2, [r0], #8
 8008418:	ecf0 3102 	ldfe	f3, [r0], #8
 800841c:	ecf0 4102 	ldfe	f4, [r0], #8
 8008420:	ecf0 5102 	ldfe	f5, [r0], #8
 8008424:	ecf0 6102 	ldfe	f6, [r0], #8
 8008428:	ecf0 7102 	ldfe	f7, [r0], #8
 800842c:	ecf0 8102 	ldfp	f0, [r0], #8
 8008430:	ecf0 9102 	ldfp	f1, [r0], #8
 8008434:	ecf0 a102 	ldfp	f2, [r0], #8
 8008438:	ecf0 b102 	ldfp	f3, [r0], #8
 800843c:	ecf0 c102 	ldfp	f4, [r0], #8
 8008440:	ecf0 d102 	ldfp	f5, [r0], #8
 8008444:	ecf0 e102 	ldfp	f6, [r0], #8
 8008448:	ecf0 f102 	ldfp	f7, [r0], #8
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop

08008450 <__gnu_Unwind_Save_WMMXD>:
 8008450:	ece0 0102 	stfe	f0, [r0], #8
 8008454:	ece0 1102 	stfe	f1, [r0], #8
 8008458:	ece0 2102 	stfe	f2, [r0], #8
 800845c:	ece0 3102 	stfe	f3, [r0], #8
 8008460:	ece0 4102 	stfe	f4, [r0], #8
 8008464:	ece0 5102 	stfe	f5, [r0], #8
 8008468:	ece0 6102 	stfe	f6, [r0], #8
 800846c:	ece0 7102 	stfe	f7, [r0], #8
 8008470:	ece0 8102 	stfp	f0, [r0], #8
 8008474:	ece0 9102 	stfp	f1, [r0], #8
 8008478:	ece0 a102 	stfp	f2, [r0], #8
 800847c:	ece0 b102 	stfp	f3, [r0], #8
 8008480:	ece0 c102 	stfp	f4, [r0], #8
 8008484:	ece0 d102 	stfp	f5, [r0], #8
 8008488:	ece0 e102 	stfp	f6, [r0], #8
 800848c:	ece0 f102 	stfp	f7, [r0], #8
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop

08008494 <__gnu_Unwind_Restore_WMMXC>:
 8008494:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008498:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800849c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80084a0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop

080084a8 <__gnu_Unwind_Save_WMMXC>:
 80084a8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80084ac:	fca0 9101 	stc2	1, cr9, [r0], #4
 80084b0:	fca0 a101 	stc2	1, cr10, [r0], #4
 80084b4:	fca0 b101 	stc2	1, cr11, [r0], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop

080084bc <_Unwind_RaiseException>:
 80084bc:	46ec      	mov	ip, sp
 80084be:	b500      	push	{lr}
 80084c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084d0:	a901      	add	r1, sp, #4
 80084d2:	f7ff fbdd 	bl	8007c90 <__gnu_Unwind_RaiseException>
 80084d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80084da:	b012      	add	sp, #72	; 0x48
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop

080084e0 <_Unwind_Resume>:
 80084e0:	46ec      	mov	ip, sp
 80084e2:	b500      	push	{lr}
 80084e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084f4:	a901      	add	r1, sp, #4
 80084f6:	f7ff fc05 	bl	8007d04 <__gnu_Unwind_Resume>
 80084fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80084fe:	b012      	add	sp, #72	; 0x48
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <_Unwind_Resume_or_Rethrow>:
 8008504:	46ec      	mov	ip, sp
 8008506:	b500      	push	{lr}
 8008508:	e92d 5000 	stmdb	sp!, {ip, lr}
 800850c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008510:	f04f 0300 	mov.w	r3, #0
 8008514:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008518:	a901      	add	r1, sp, #4
 800851a:	f7ff fc15 	bl	8007d48 <__gnu_Unwind_Resume_or_Rethrow>
 800851e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008522:	b012      	add	sp, #72	; 0x48
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop

08008528 <_Unwind_ForcedUnwind>:
 8008528:	46ec      	mov	ip, sp
 800852a:	b500      	push	{lr}
 800852c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008530:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	e92d 000c 	stmdb	sp!, {r2, r3}
 800853c:	ab01      	add	r3, sp, #4
 800853e:	f7ff fbd7 	bl	8007cf0 <__gnu_Unwind_ForcedUnwind>
 8008542:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008546:	b012      	add	sp, #72	; 0x48
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop

0800854c <_Unwind_Backtrace>:
 800854c:	46ec      	mov	ip, sp
 800854e:	b500      	push	{lr}
 8008550:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008554:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008560:	aa01      	add	r2, sp, #4
 8008562:	f7ff fc47 	bl	8007df4 <__gnu_Unwind_Backtrace>
 8008566:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800856a:	b012      	add	sp, #72	; 0x48
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop

08008570 <next_unwind_byte>:
 8008570:	7a02      	ldrb	r2, [r0, #8]
 8008572:	b982      	cbnz	r2, 8008596 <next_unwind_byte+0x26>
 8008574:	7a43      	ldrb	r3, [r0, #9]
 8008576:	b1ab      	cbz	r3, 80085a4 <next_unwind_byte+0x34>
 8008578:	6842      	ldr	r2, [r0, #4]
 800857a:	3b01      	subs	r3, #1
 800857c:	b410      	push	{r4}
 800857e:	7243      	strb	r3, [r0, #9]
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	2103      	movs	r1, #3
 8008584:	1d14      	adds	r4, r2, #4
 8008586:	7201      	strb	r1, [r0, #8]
 8008588:	021a      	lsls	r2, r3, #8
 800858a:	6044      	str	r4, [r0, #4]
 800858c:	6002      	str	r2, [r0, #0]
 800858e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008592:	0e18      	lsrs	r0, r3, #24
 8008594:	4770      	bx	lr
 8008596:	6803      	ldr	r3, [r0, #0]
 8008598:	3a01      	subs	r2, #1
 800859a:	7202      	strb	r2, [r0, #8]
 800859c:	021a      	lsls	r2, r3, #8
 800859e:	6002      	str	r2, [r0, #0]
 80085a0:	0e18      	lsrs	r0, r3, #24
 80085a2:	4770      	bx	lr
 80085a4:	20b0      	movs	r0, #176	; 0xb0
 80085a6:	4770      	bx	lr

080085a8 <_Unwind_GetGR.constprop.0>:
 80085a8:	b500      	push	{lr}
 80085aa:	b085      	sub	sp, #20
 80085ac:	aa03      	add	r2, sp, #12
 80085ae:	2300      	movs	r3, #0
 80085b0:	9200      	str	r2, [sp, #0]
 80085b2:	4619      	mov	r1, r3
 80085b4:	220c      	movs	r2, #12
 80085b6:	f7ff fbd7 	bl	8007d68 <_Unwind_VRS_Get>
 80085ba:	9803      	ldr	r0, [sp, #12]
 80085bc:	b005      	add	sp, #20
 80085be:	f85d fb04 	ldr.w	pc, [sp], #4
 80085c2:	bf00      	nop

080085c4 <unwind_UCB_from_context>:
 80085c4:	e7f0      	b.n	80085a8 <_Unwind_GetGR.constprop.0>
 80085c6:	bf00      	nop

080085c8 <__gnu_unwind_execute>:
 80085c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085cc:	4605      	mov	r5, r0
 80085ce:	b085      	sub	sp, #20
 80085d0:	460e      	mov	r6, r1
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ffca 	bl	8008570 <next_unwind_byte>
 80085dc:	28b0      	cmp	r0, #176	; 0xb0
 80085de:	4604      	mov	r4, r0
 80085e0:	f000 80b1 	beq.w	8008746 <__gnu_unwind_execute+0x17e>
 80085e4:	0607      	lsls	r7, r0, #24
 80085e6:	d520      	bpl.n	800862a <__gnu_unwind_execute+0x62>
 80085e8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80085ec:	2b80      	cmp	r3, #128	; 0x80
 80085ee:	d065      	beq.n	80086bc <__gnu_unwind_execute+0xf4>
 80085f0:	2b90      	cmp	r3, #144	; 0x90
 80085f2:	d036      	beq.n	8008662 <__gnu_unwind_execute+0x9a>
 80085f4:	2ba0      	cmp	r3, #160	; 0xa0
 80085f6:	d078      	beq.n	80086ea <__gnu_unwind_execute+0x122>
 80085f8:	2bb0      	cmp	r3, #176	; 0xb0
 80085fa:	d047      	beq.n	800868c <__gnu_unwind_execute+0xc4>
 80085fc:	2bc0      	cmp	r3, #192	; 0xc0
 80085fe:	f000 808a 	beq.w	8008716 <__gnu_unwind_execute+0x14e>
 8008602:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8008606:	2bd0      	cmp	r3, #208	; 0xd0
 8008608:	d10b      	bne.n	8008622 <__gnu_unwind_execute+0x5a>
 800860a:	f000 0207 	and.w	r2, r0, #7
 800860e:	3201      	adds	r2, #1
 8008610:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008614:	2305      	movs	r3, #5
 8008616:	2101      	movs	r1, #1
 8008618:	4628      	mov	r0, r5
 800861a:	f7ff fd93 	bl	8008144 <_Unwind_VRS_Pop>
 800861e:	2800      	cmp	r0, #0
 8008620:	d0d9      	beq.n	80085d6 <__gnu_unwind_execute+0xe>
 8008622:	2009      	movs	r0, #9
 8008624:	b005      	add	sp, #20
 8008626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800862a:	f10d 090c 	add.w	r9, sp, #12
 800862e:	2300      	movs	r3, #0
 8008630:	4619      	mov	r1, r3
 8008632:	0087      	lsls	r7, r0, #2
 8008634:	f8cd 9000 	str.w	r9, [sp]
 8008638:	220d      	movs	r2, #13
 800863a:	4628      	mov	r0, r5
 800863c:	f7ff fb94 	bl	8007d68 <_Unwind_VRS_Get>
 8008640:	b2ff      	uxtb	r7, r7
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	f8cd 9000 	str.w	r9, [sp]
 8008648:	3704      	adds	r7, #4
 800864a:	0660      	lsls	r0, r4, #25
 800864c:	bf4c      	ite	mi
 800864e:	1bdf      	submi	r7, r3, r7
 8008650:	18ff      	addpl	r7, r7, r3
 8008652:	2300      	movs	r3, #0
 8008654:	4619      	mov	r1, r3
 8008656:	220d      	movs	r2, #13
 8008658:	4628      	mov	r0, r5
 800865a:	9703      	str	r7, [sp, #12]
 800865c:	f7ff fba6 	bl	8007dac <_Unwind_VRS_Set>
 8008660:	e7b9      	b.n	80085d6 <__gnu_unwind_execute+0xe>
 8008662:	f000 030d 	and.w	r3, r0, #13
 8008666:	2b0d      	cmp	r3, #13
 8008668:	d0db      	beq.n	8008622 <__gnu_unwind_execute+0x5a>
 800866a:	af03      	add	r7, sp, #12
 800866c:	2300      	movs	r3, #0
 800866e:	f000 020f 	and.w	r2, r0, #15
 8008672:	4619      	mov	r1, r3
 8008674:	9700      	str	r7, [sp, #0]
 8008676:	4628      	mov	r0, r5
 8008678:	f7ff fb76 	bl	8007d68 <_Unwind_VRS_Get>
 800867c:	2300      	movs	r3, #0
 800867e:	9700      	str	r7, [sp, #0]
 8008680:	4619      	mov	r1, r3
 8008682:	220d      	movs	r2, #13
 8008684:	4628      	mov	r0, r5
 8008686:	f7ff fb91 	bl	8007dac <_Unwind_VRS_Set>
 800868a:	e7a4      	b.n	80085d6 <__gnu_unwind_execute+0xe>
 800868c:	28b1      	cmp	r0, #177	; 0xb1
 800868e:	d05f      	beq.n	8008750 <__gnu_unwind_execute+0x188>
 8008690:	28b2      	cmp	r0, #178	; 0xb2
 8008692:	f000 80cc 	beq.w	800882e <__gnu_unwind_execute+0x266>
 8008696:	28b3      	cmp	r0, #179	; 0xb3
 8008698:	d07e      	beq.n	8008798 <__gnu_unwind_execute+0x1d0>
 800869a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800869e:	2bb4      	cmp	r3, #180	; 0xb4
 80086a0:	d0bf      	beq.n	8008622 <__gnu_unwind_execute+0x5a>
 80086a2:	f000 0207 	and.w	r2, r0, #7
 80086a6:	3201      	adds	r2, #1
 80086a8:	2301      	movs	r3, #1
 80086aa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80086ae:	4619      	mov	r1, r3
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7ff fd47 	bl	8008144 <_Unwind_VRS_Pop>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d08d      	beq.n	80085d6 <__gnu_unwind_execute+0xe>
 80086ba:	e7b2      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ff57 	bl	8008570 <next_unwind_byte>
 80086c2:	0224      	lsls	r4, r4, #8
 80086c4:	4304      	orrs	r4, r0
 80086c6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80086ca:	d0aa      	beq.n	8008622 <__gnu_unwind_execute+0x5a>
 80086cc:	0124      	lsls	r4, r4, #4
 80086ce:	2300      	movs	r3, #0
 80086d0:	b2a2      	uxth	r2, r4
 80086d2:	4619      	mov	r1, r3
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff fd35 	bl	8008144 <_Unwind_VRS_Pop>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1a1      	bne.n	8008622 <__gnu_unwind_execute+0x5a>
 80086de:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80086e2:	bf18      	it	ne
 80086e4:	f04f 0801 	movne.w	r8, #1
 80086e8:	e775      	b.n	80085d6 <__gnu_unwind_execute+0xe>
 80086ea:	43c2      	mvns	r2, r0
 80086ec:	f002 0307 	and.w	r3, r2, #7
 80086f0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80086f4:	411a      	asrs	r2, r3
 80086f6:	0701      	lsls	r1, r0, #28
 80086f8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	bf48      	it	mi
 8008702:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8008706:	4619      	mov	r1, r3
 8008708:	4628      	mov	r0, r5
 800870a:	f7ff fd1b 	bl	8008144 <_Unwind_VRS_Pop>
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f af61 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 8008714:	e785      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 8008716:	28c6      	cmp	r0, #198	; 0xc6
 8008718:	d051      	beq.n	80087be <__gnu_unwind_execute+0x1f6>
 800871a:	28c7      	cmp	r0, #199	; 0xc7
 800871c:	d05a      	beq.n	80087d4 <__gnu_unwind_execute+0x20c>
 800871e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8008722:	2bc0      	cmp	r3, #192	; 0xc0
 8008724:	d069      	beq.n	80087fa <__gnu_unwind_execute+0x232>
 8008726:	28c8      	cmp	r0, #200	; 0xc8
 8008728:	d075      	beq.n	8008816 <__gnu_unwind_execute+0x24e>
 800872a:	28c9      	cmp	r0, #201	; 0xc9
 800872c:	f47f af79 	bne.w	8008622 <__gnu_unwind_execute+0x5a>
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ff1d 	bl	8008570 <next_unwind_byte>
 8008736:	0302      	lsls	r2, r0, #12
 8008738:	f000 000f 	and.w	r0, r0, #15
 800873c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8008740:	3001      	adds	r0, #1
 8008742:	4302      	orrs	r2, r0
 8008744:	e766      	b.n	8008614 <__gnu_unwind_execute+0x4c>
 8008746:	f1b8 0f00 	cmp.w	r8, #0
 800874a:	d014      	beq.n	8008776 <__gnu_unwind_execute+0x1ae>
 800874c:	2000      	movs	r0, #0
 800874e:	e769      	b.n	8008624 <__gnu_unwind_execute+0x5c>
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff ff0d 	bl	8008570 <next_unwind_byte>
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f af63 	beq.w	8008622 <__gnu_unwind_execute+0x5a>
 800875c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008760:	f47f af5f 	bne.w	8008622 <__gnu_unwind_execute+0x5a>
 8008764:	4602      	mov	r2, r0
 8008766:	4619      	mov	r1, r3
 8008768:	4628      	mov	r0, r5
 800876a:	f7ff fceb 	bl	8008144 <_Unwind_VRS_Pop>
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f af31 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 8008774:	e755      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 8008776:	ac03      	add	r4, sp, #12
 8008778:	4643      	mov	r3, r8
 800877a:	220e      	movs	r2, #14
 800877c:	4641      	mov	r1, r8
 800877e:	9400      	str	r4, [sp, #0]
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff faf1 	bl	8007d68 <_Unwind_VRS_Get>
 8008786:	9400      	str	r4, [sp, #0]
 8008788:	4628      	mov	r0, r5
 800878a:	4643      	mov	r3, r8
 800878c:	220f      	movs	r2, #15
 800878e:	4641      	mov	r1, r8
 8008790:	f7ff fb0c 	bl	8007dac <_Unwind_VRS_Set>
 8008794:	4640      	mov	r0, r8
 8008796:	e745      	b.n	8008624 <__gnu_unwind_execute+0x5c>
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff fee9 	bl	8008570 <next_unwind_byte>
 800879e:	0301      	lsls	r1, r0, #12
 80087a0:	f000 000f 	and.w	r0, r0, #15
 80087a4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80087a8:	1c42      	adds	r2, r0, #1
 80087aa:	2301      	movs	r3, #1
 80087ac:	430a      	orrs	r2, r1
 80087ae:	4628      	mov	r0, r5
 80087b0:	4619      	mov	r1, r3
 80087b2:	f7ff fcc7 	bl	8008144 <_Unwind_VRS_Pop>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f43f af0d 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 80087bc:	e731      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff fed6 	bl	8008570 <next_unwind_byte>
 80087c4:	0301      	lsls	r1, r0, #12
 80087c6:	f000 000f 	and.w	r0, r0, #15
 80087ca:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80087ce:	1c42      	adds	r2, r0, #1
 80087d0:	2303      	movs	r3, #3
 80087d2:	e7eb      	b.n	80087ac <__gnu_unwind_execute+0x1e4>
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7ff fecb 	bl	8008570 <next_unwind_byte>
 80087da:	4602      	mov	r2, r0
 80087dc:	2800      	cmp	r0, #0
 80087de:	f43f af20 	beq.w	8008622 <__gnu_unwind_execute+0x5a>
 80087e2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80087e6:	f47f af1c 	bne.w	8008622 <__gnu_unwind_execute+0x5a>
 80087ea:	2104      	movs	r1, #4
 80087ec:	4628      	mov	r0, r5
 80087ee:	f7ff fca9 	bl	8008144 <_Unwind_VRS_Pop>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f43f aeef 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 80087f8:	e713      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 80087fa:	f000 020f 	and.w	r2, r0, #15
 80087fe:	3201      	adds	r2, #1
 8008800:	2303      	movs	r3, #3
 8008802:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8008806:	4619      	mov	r1, r3
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff fc9b 	bl	8008144 <_Unwind_VRS_Pop>
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f aee1 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 8008814:	e705      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff feaa 	bl	8008570 <next_unwind_byte>
 800881c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8008820:	f000 030f 	and.w	r3, r0, #15
 8008824:	3210      	adds	r2, #16
 8008826:	3301      	adds	r3, #1
 8008828:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800882c:	e6f2      	b.n	8008614 <__gnu_unwind_execute+0x4c>
 800882e:	2300      	movs	r3, #0
 8008830:	f10d 090c 	add.w	r9, sp, #12
 8008834:	220d      	movs	r2, #13
 8008836:	4619      	mov	r1, r3
 8008838:	f8cd 9000 	str.w	r9, [sp]
 800883c:	4628      	mov	r0, r5
 800883e:	f7ff fa93 	bl	8007d68 <_Unwind_VRS_Get>
 8008842:	4630      	mov	r0, r6
 8008844:	f7ff fe94 	bl	8008570 <next_unwind_byte>
 8008848:	0602      	lsls	r2, r0, #24
 800884a:	f04f 0702 	mov.w	r7, #2
 800884e:	d50c      	bpl.n	800886a <__gnu_unwind_execute+0x2a2>
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008856:	40b8      	lsls	r0, r7
 8008858:	4403      	add	r3, r0
 800885a:	4630      	mov	r0, r6
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	f7ff fe87 	bl	8008570 <next_unwind_byte>
 8008862:	0603      	lsls	r3, r0, #24
 8008864:	f107 0707 	add.w	r7, r7, #7
 8008868:	d4f2      	bmi.n	8008850 <__gnu_unwind_execute+0x288>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f8cd 9000 	str.w	r9, [sp]
 8008870:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8008874:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8008878:	40bc      	lsls	r4, r7
 800887a:	2300      	movs	r3, #0
 800887c:	4414      	add	r4, r2
 800887e:	4619      	mov	r1, r3
 8008880:	220d      	movs	r2, #13
 8008882:	4628      	mov	r0, r5
 8008884:	9403      	str	r4, [sp, #12]
 8008886:	f7ff fa91 	bl	8007dac <_Unwind_VRS_Set>
 800888a:	e6a4      	b.n	80085d6 <__gnu_unwind_execute+0xe>

0800888c <__gnu_unwind_frame>:
 800888c:	b510      	push	{r4, lr}
 800888e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008890:	b084      	sub	sp, #16
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	2003      	movs	r0, #3
 8008896:	f88d 000c 	strb.w	r0, [sp, #12]
 800889a:	79dc      	ldrb	r4, [r3, #7]
 800889c:	f88d 400d 	strb.w	r4, [sp, #13]
 80088a0:	0212      	lsls	r2, r2, #8
 80088a2:	3308      	adds	r3, #8
 80088a4:	4608      	mov	r0, r1
 80088a6:	a901      	add	r1, sp, #4
 80088a8:	9201      	str	r2, [sp, #4]
 80088aa:	9302      	str	r3, [sp, #8]
 80088ac:	f7ff fe8c 	bl	80085c8 <__gnu_unwind_execute>
 80088b0:	b004      	add	sp, #16
 80088b2:	bd10      	pop	{r4, pc}

080088b4 <_Unwind_GetRegionStart>:
 80088b4:	b508      	push	{r3, lr}
 80088b6:	f7ff fe85 	bl	80085c4 <unwind_UCB_from_context>
 80088ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80088bc:	bd08      	pop	{r3, pc}
 80088be:	bf00      	nop

080088c0 <_Unwind_GetLanguageSpecificData>:
 80088c0:	b508      	push	{r3, lr}
 80088c2:	f7ff fe7f 	bl	80085c4 <unwind_UCB_from_context>
 80088c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80088c8:	79c3      	ldrb	r3, [r0, #7]
 80088ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80088ce:	3008      	adds	r0, #8
 80088d0:	bd08      	pop	{r3, pc}
 80088d2:	bf00      	nop

080088d4 <_Unwind_GetDataRelBase>:
 80088d4:	b508      	push	{r3, lr}
 80088d6:	f00f fc23 	bl	8018120 <abort>
 80088da:	bf00      	nop

080088dc <_Unwind_GetTextRelBase>:
 80088dc:	b508      	push	{r3, lr}
 80088de:	f7ff fff9 	bl	80088d4 <_Unwind_GetDataRelBase>
 80088e2:	bf00      	nop

080088e4 <__aeabi_idiv0>:
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop

080088e8 <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80088e8:	4a25      	ldr	r2, [pc, #148]	; (8008980 <BSP_PB_Init+0x98>)
{
 80088ea:	460b      	mov	r3, r1
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80088ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80088ee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 80088f2:	b530      	push	{r4, r5, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80088f4:	6311      	str	r1, [r2, #48]	; 0x30
{
 80088f6:	b089      	sub	sp, #36	; 0x24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80088f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088fa:	4604      	mov	r4, r0
 80088fc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008900:	bb28      	cbnz	r0, 800894e <BSP_PB_Init+0x66>
 8008902:	9200      	str	r2, [sp, #0]
 8008904:	9a00      	ldr	r2, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008906:	b343      	cbz	r3, 800895a <BSP_PB_Init+0x72>
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8008908:	2b01      	cmp	r3, #1
 800890a:	d11e      	bne.n	800894a <BSP_PB_Init+0x62>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
    gpio_init_structure.Pull = GPIO_NOPULL;
 800890c:	2500      	movs	r5, #0
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    
    if(Button != BUTTON_WAKEUP)
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800890e:	481d      	ldr	r0, [pc, #116]	; (8008984 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008910:	491d      	ldr	r1, [pc, #116]	; (8008988 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8008912:	2202      	movs	r2, #2
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8008914:	4b1d      	ldr	r3, [pc, #116]	; (800898c <BSP_PB_Init+0xa4>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008916:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800891a:	42ac      	cmp	r4, r5
 800891c:	bf18      	it	ne
 800891e:	4603      	movne	r3, r0
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008920:	481b      	ldr	r0, [pc, #108]	; (8008990 <BSP_PB_Init+0xa8>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008922:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008924:	a903      	add	r1, sp, #12
 8008926:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800892a:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800892c:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008930:	f000 ff6a 	bl	8009808 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8008934:	4b17      	ldr	r3, [pc, #92]	; (8008994 <BSP_PB_Init+0xac>)
 8008936:	462a      	mov	r2, r5
 8008938:	210f      	movs	r1, #15
 800893a:	f913 4014 	ldrsb.w	r4, [r3, r4, lsl #1]
 800893e:	4620      	mov	r0, r4
 8008940:	f000 fcba 	bl	80092b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fced 	bl	8009324 <HAL_NVIC_EnableIRQ>
  }
}
 800894a:	b009      	add	sp, #36	; 0x24
 800894c:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800894e:	2801      	cmp	r0, #1
 8008950:	d013      	beq.n	800897a <BSP_PB_Init+0x92>
 8008952:	9202      	str	r2, [sp, #8]
 8008954:	9a02      	ldr	r2, [sp, #8]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1d6      	bne.n	8008908 <BSP_PB_Init+0x20>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800895a:	4d0b      	ldr	r5, [pc, #44]	; (8008988 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800895c:	2202      	movs	r2, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800895e:	480c      	ldr	r0, [pc, #48]	; (8008990 <BSP_PB_Init+0xa8>)
 8008960:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008962:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008966:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800896a:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800896c:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800896e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008972:	f000 ff49 	bl	8009808 <HAL_GPIO_Init>
}
 8008976:	b009      	add	sp, #36	; 0x24
 8008978:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800897a:	9201      	str	r2, [sp, #4]
 800897c:	9a01      	ldr	r2, [sp, #4]
 800897e:	e7c2      	b.n	8008906 <BSP_PB_Init+0x1e>
 8008980:	40023800 	.word	0x40023800
 8008984:	10210000 	.word	0x10210000
 8008988:	0801c9b0 	.word	0x0801c9b0
 800898c:	10110000 	.word	0x10110000
 8008990:	20000000 	.word	0x20000000
 8008994:	0801c9a8 	.word	0x0801c9a8

08008998 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008998:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <BSP_LCD_GetXSize+0x10>)
 800899a:	2134      	movs	r1, #52	; 0x34
 800899c:	4a03      	ldr	r2, [pc, #12]	; (80089ac <BSP_LCD_GetXSize+0x14>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	fb01 2303 	mla	r3, r1, r3, r2
}
 80089a4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80089a6:	4770      	bx	lr
 80089a8:	200009f4 	.word	0x200009f4
 80089ac:	20000a50 	.word	0x20000a50

080089b0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80089b0:	4b03      	ldr	r3, [pc, #12]	; (80089c0 <BSP_LCD_GetYSize+0x10>)
 80089b2:	2134      	movs	r1, #52	; 0x34
 80089b4:	4a03      	ldr	r2, [pc, #12]	; (80089c4 <BSP_LCD_GetYSize+0x14>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	fb01 2303 	mla	r3, r1, r3, r2
}
 80089bc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80089be:	4770      	bx	lr
 80089c0:	200009f4 	.word	0x200009f4
 80089c4:	20000a50 	.word	0x20000a50

080089c8 <BSP_LCD_LayerRgb565Init>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80089c8:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <BSP_LCD_LayerRgb565Init+0x70>)
  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80089ca:	f04f 0c02 	mov.w	ip, #2
{     
 80089ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	2634      	movs	r6, #52	; 0x34
 80089d4:	4d19      	ldr	r5, [pc, #100]	; (8008a3c <BSP_LCD_LayerRgb565Init+0x74>)
{     
 80089d6:	b08f      	sub	sp, #60	; 0x3c
 80089d8:	4604      	mov	r4, r0
  layer_cfg.WindowX0 = 0;
 80089da:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80089dc:	fb06 5202 	mla	r2, r6, r2, r5
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80089e0:	4628      	mov	r0, r5
  layer_cfg.FBStartAdress = FB_Address;
 80089e2:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 80089e4:	27ff      	movs	r7, #255	; 0xff
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80089e6:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80089ea:	2507      	movs	r5, #7
  layer_cfg.WindowX0 = 0;
 80089ec:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowY0 = 0;
 80089ee:	9303      	str	r3, [sp, #12]
  layer_cfg.Alpha0 = 0;
 80089f0:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 80089f2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 80089f6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80089fa:	f8cd c014 	str.w	ip, [sp, #20]
  layer_cfg.Alpha = 255;
 80089fe:	9706      	str	r7, [sp, #24]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008a00:	e9d2 1218 	ldrd	r1, r2, [r2, #96]	; 0x60
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008a04:	e9cd 6508 	strd	r6, r5, [sp, #32]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8008a08:	9204      	str	r2, [sp, #16]

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
  DrawProp[LayerIndex].pFont     = &Font24;
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8008a0a:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8008a0e:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008a10:	4622      	mov	r2, r4
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008a12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8008a16:	9102      	str	r1, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8008a18:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008a1a:	a901      	add	r1, sp, #4
 8008a1c:	f001 fbf0 	bl	800a200 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008a20:	4a07      	ldr	r2, [pc, #28]	; (8008a40 <BSP_LCD_LayerRgb565Init+0x78>)
 8008a22:	00a4      	lsls	r4, r4, #2
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  DrawProp[LayerIndex].pFont     = &Font24;
 8008a28:	4906      	ldr	r1, [pc, #24]	; (8008a44 <BSP_LCD_LayerRgb565Init+0x7c>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008a2a:	1913      	adds	r3, r2, r4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8008a2c:	5115      	str	r5, [r2, r4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8008a2e:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8008a32:	b00f      	add	sp, #60	; 0x3c
 8008a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200009f4 	.word	0x200009f4
 8008a3c:	20000a50 	.word	0x20000a50
 8008a40:	200009f8 	.word	0x200009f8
 8008a44:	2000001c 	.word	0x2000001c

08008a48 <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 8008a48:	4b01      	ldr	r3, [pc, #4]	; (8008a50 <BSP_LCD_SelectLayer+0x8>)
 8008a4a:	6018      	str	r0, [r3, #0]
} 
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	200009f4 	.word	0x200009f4

08008a54 <BSP_LCD_SetTransparency>:
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8008a54:	4602      	mov	r2, r0
 8008a56:	4801      	ldr	r0, [pc, #4]	; (8008a5c <BSP_LCD_SetTransparency+0x8>)
 8008a58:	f001 bc9a 	b.w	800a390 <HAL_LTDC_SetAlpha>
 8008a5c:	20000a50 	.word	0x20000a50

08008a60 <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <BSP_LCD_SetTextColor+0x10>)
 8008a62:	4a04      	ldr	r2, [pc, #16]	; (8008a74 <BSP_LCD_SetTextColor+0x14>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008a6a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8008a6e:	4770      	bx	lr
 8008a70:	200009f4 	.word	0x200009f4
 8008a74:	200009f8 	.word	0x200009f8

08008a78 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8008a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008a7c:	4c1a      	ldr	r4, [pc, #104]	; (8008ae8 <BSP_LCD_Clear+0x70>)
 8008a7e:	2334      	movs	r3, #52	; 0x34
 8008a80:	491a      	ldr	r1, [pc, #104]	; (8008aec <BSP_LCD_Clear+0x74>)
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8008a82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008a86:	6825      	ldr	r5, [r4, #0]
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8008a88:	2600      	movs	r6, #0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8008a8a:	4c19      	ldr	r4, [pc, #100]	; (8008af0 <BSP_LCD_Clear+0x78>)
{ 
 8008a8c:	b083      	sub	sp, #12
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008a8e:	fb03 1305 	mla	r3, r3, r5, r1
  
  hDma2dHandler.Instance = DMA2D;
 8008a92:	4918      	ldr	r1, [pc, #96]	; (8008af4 <BSP_LCD_Clear+0x7c>)
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8008a94:	6062      	str	r2, [r4, #4]
{ 
 8008a96:	4607      	mov	r7, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8008a9a:	4620      	mov	r0, r4
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8008a9c:	60e6      	str	r6, [r4, #12]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008a9e:	2a02      	cmp	r2, #2
  hDma2dHandler.Instance = DMA2D;
 8008aa0:	6021      	str	r1, [r4, #0]
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008aa2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8008aa4:	bf18      	it	ne
 8008aa6:	2200      	movne	r2, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008aa8:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 8008aac:	60a2      	str	r2, [r4, #8]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8008aae:	f000 fd3f 	bl	8009530 <HAL_DMA2D_Init>
 8008ab2:	b110      	cbz	r0, 8008aba <BSP_LCD_Clear+0x42>
}
 8008ab4:	b003      	add	sp, #12
 8008ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8008aba:	4629      	mov	r1, r5
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 fe51 	bl	8009764 <HAL_DMA2D_ConfigLayer>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d1f6      	bne.n	8008ab4 <BSP_LCD_Clear+0x3c>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8008ac6:	f8cd 9000 	str.w	r9, [sp]
 8008aca:	4643      	mov	r3, r8
 8008acc:	4632      	mov	r2, r6
 8008ace:	4639      	mov	r1, r7
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fd5b 	bl	800958c <HAL_DMA2D_Start>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d1ec      	bne.n	8008ab4 <BSP_LCD_Clear+0x3c>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8008ada:	4620      	mov	r0, r4
 8008adc:	210a      	movs	r1, #10
}
 8008ade:	b003      	add	sp, #12
 8008ae0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8008ae4:	f000 bda8 	b.w	8009638 <HAL_DMA2D_PollForTransfer>
 8008ae8:	200009f4 	.word	0x200009f4
 8008aec:	20000a50 	.word	0x20000a50
 8008af0:	20000a10 	.word	0x20000a10
 8008af4:	4002b000 	.word	0x4002b000

08008af8 <BSP_LCD_DisplayChar>:
{
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008afc:	4c3b      	ldr	r4, [pc, #236]	; (8008bec <BSP_LCD_DisplayChar+0xf4>)
{
 8008afe:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008b00:	4b3b      	ldr	r3, [pc, #236]	; (8008bf0 <BSP_LCD_DisplayChar+0xf8>)
{
 8008b02:	4682      	mov	sl, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008b04:	6825      	ldr	r5, [r4, #0]
 8008b06:	3a20      	subs	r2, #32
{
 8008b08:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008b0a:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8008b0e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8008b12:	f8de 3008 	ldr.w	r3, [lr, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008b16:	8898      	ldrh	r0, [r3, #4]
 8008b18:	88de      	ldrh	r6, [r3, #6]
 8008b1a:	1dc1      	adds	r1, r0, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008b1c:	681c      	ldr	r4, [r3, #0]
 8008b1e:	fb06 f202 	mul.w	r2, r6, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008b22:	10c9      	asrs	r1, r1, #3
 8008b24:	9602      	str	r6, [sp, #8]
  offset =  8 *((width + 7)/8) -  width ;
 8008b26:	ebc0 03c1 	rsb	r3, r0, r1, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008b2a:	9101      	str	r1, [sp, #4]
 8008b2c:	fb01 f202 	mul.w	r2, r1, r2
  offset =  8 *((width + 7)/8) -  width ;
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	9304      	str	r3, [sp, #16]
  for(i = 0; i < height; i++)
 8008b34:	2e00      	cmp	r6, #0
 8008b36:	d04c      	beq.n	8008bd2 <BSP_LCD_DisplayChar+0xda>
 8008b38:	4b2e      	ldr	r3, [pc, #184]	; (8008bf4 <BSP_LCD_DisplayChar+0xfc>)
 8008b3a:	2134      	movs	r1, #52	; 0x34
 8008b3c:	eb04 0b02 	add.w	fp, r4, r2
 8008b40:	fb01 3505 	mla	r5, r1, r5, r3
 8008b44:	2300      	movs	r3, #0
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	1e43      	subs	r3, r0, #1
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	9a00      	ldr	r2, [sp, #0]
 8008b50:	f89b 7000 	ldrb.w	r7, [fp]
 8008b54:	eb03 0c02 	add.w	ip, r3, r2
    switch(((width + 7)/8))
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	fa1f fc8c 	uxth.w	ip, ip
 8008b60:	d005      	beq.n	8008b6e <BSP_LCD_DisplayChar+0x76>
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d138      	bne.n	8008bd8 <BSP_LCD_DisplayChar+0xe0>
      line =  (pchar[0]<< 8) | pchar[1];      
 8008b66:	f8bb 7000 	ldrh.w	r7, [fp]
 8008b6a:	ba7f      	rev16	r7, r7
 8008b6c:	b2bf      	uxth	r7, r7
    for (j = 0; j < width; j++)
 8008b6e:	b340      	cbz	r0, 8008bc2 <BSP_LCD_DisplayChar+0xca>
 8008b70:	2100      	movs	r1, #0
      if(line & (1 << (width- j + offset- 1))) 
 8008b72:	f04f 0801 	mov.w	r8, #1
 8008b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b7a:	eb03 0902 	add.w	r9, r3, r2
 8008b7e:	e008      	b.n	8008b92 <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008b80:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8008b82:	f8de 2000 	ldr.w	r2, [lr]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008b86:	d016      	beq.n	8008bb6 <BSP_LCD_DisplayChar+0xbe>
    for (j = 0; j < width; j++)
 8008b88:	3101      	adds	r1, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8008b8a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (j = 0; j < width; j++)
 8008b8e:	4288      	cmp	r0, r1
 8008b90:	d017      	beq.n	8008bc2 <BSP_LCD_DisplayChar+0xca>
      if(line & (1 << (width- j + offset- 1))) 
 8008b92:	eba9 0201 	sub.w	r2, r9, r1
 8008b96:	eb0a 0301 	add.w	r3, sl, r1
 8008b9a:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8008b9c:	fa08 f202 	lsl.w	r2, r8, r2
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	6cae      	ldr	r6, [r5, #72]	; 0x48
 8008ba4:	423a      	tst	r2, r7
 8008ba6:	fb04 330c 	mla	r3, r4, ip, r3
 8008baa:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8008bac:	d1e8      	bne.n	8008b80 <BSP_LCD_DisplayChar+0x88>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008bae:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8008bb0:	f8de 2004 	ldr.w	r2, [lr, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008bb4:	d1e8      	bne.n	8008b88 <BSP_LCD_DisplayChar+0x90>
    for (j = 0; j < width; j++)
 8008bb6:	3101      	adds	r1, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008bb8:	b292      	uxth	r2, r2
    for (j = 0; j < width; j++)
 8008bba:	4288      	cmp	r0, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008bbc:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (j = 0; j < width; j++)
 8008bc0:	d1e7      	bne.n	8008b92 <BSP_LCD_DisplayChar+0x9a>
  for(i = 0; i < height; i++)
 8008bc2:	9b00      	ldr	r3, [sp, #0]
 8008bc4:	9a01      	ldr	r2, [sp, #4]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4493      	add	fp, r2
 8008bca:	9a02      	ldr	r2, [sp, #8]
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d1bc      	bne.n	8008b4c <BSP_LCD_DisplayChar+0x54>
}
 8008bd2:	b007      	add	sp, #28
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8008bd8:	043f      	lsls	r7, r7, #16
 8008bda:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008bde:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8008be2:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8008be6:	431f      	orrs	r7, r3
 8008be8:	e7c1      	b.n	8008b6e <BSP_LCD_DisplayChar+0x76>
 8008bea:	bf00      	nop
 8008bec:	200009f4 	.word	0x200009f4
 8008bf0:	200009f8 	.word	0x200009f8
 8008bf4:	20000a50 	.word	0x20000a50

08008bf8 <BSP_LCD_DisplayStringAt>:
{
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 8008bfe:	7812      	ldrb	r2, [r2, #0]
{
 8008c00:	4604      	mov	r4, r0
 8008c02:	4688      	mov	r8, r1
  while (*ptr++) size ++ ;
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	d04b      	beq.n	8008ca0 <BSP_LCD_DisplayStringAt+0xa8>
 8008c08:	1c71      	adds	r1, r6, #1
 8008c0a:	1b8d      	subs	r5, r1, r6
 8008c0c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1fa      	bne.n	8008c0a <BSP_LCD_DisplayStringAt+0x12>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008c14:	4f23      	ldr	r7, [pc, #140]	; (8008ca4 <BSP_LCD_DisplayStringAt+0xac>)
 8008c16:	2034      	movs	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008c18:	4923      	ldr	r1, [pc, #140]	; (8008ca8 <BSP_LCD_DisplayStringAt+0xb0>)
  switch (Mode)
 8008c1a:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008c1c:	f8d7 9000 	ldr.w	r9, [r7]
 8008c20:	f8df c088 	ldr.w	ip, [pc, #136]	; 8008cac <BSP_LCD_DisplayStringAt+0xb4>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008c24:	eb09 0749 	add.w	r7, r9, r9, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008c28:	fb00 c009 	mla	r0, r0, r9, ip
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008c2c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008c30:	6e00      	ldr	r0, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008c32:	688f      	ldr	r7, [r1, #8]
 8008c34:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 8008c38:	fbb0 f1fe 	udiv	r1, r0, lr
  switch (Mode)
 8008c3c:	d029      	beq.n	8008c92 <BSP_LCD_DisplayStringAt+0x9a>
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d021      	beq.n	8008c86 <BSP_LCD_DisplayStringAt+0x8e>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8008c42:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008c44:	b280      	uxth	r0, r0
    ref_column = 1;
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfd8      	it	le
 8008c4a:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008c4c:	4586      	cmp	lr, r0
 8008c4e:	d818      	bhi.n	8008c82 <BSP_LCD_DisplayStringAt+0x8a>
 8008c50:	b1ba      	cbz	r2, 8008c82 <BSP_LCD_DisplayStringAt+0x8a>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008c52:	2334      	movs	r3, #52	; 0x34
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008c54:	4635      	mov	r5, r6
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008c56:	fb03 c909 	mla	r9, r3, r9, ip
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	f7ff ff4b 	bl	8008af8 <BSP_LCD_DisplayChar>
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008c62:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008c66:	88b8      	ldrh	r0, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008c68:	1bab      	subs	r3, r5, r6
 8008c6a:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008c6e:	4404      	add	r4, r0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008c70:	b29b      	uxth	r3, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008c72:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008c74:	fb00 1313 	mls	r3, r0, r3, r1
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	4283      	cmp	r3, r0
 8008c7c:	d301      	bcc.n	8008c82 <BSP_LCD_DisplayStringAt+0x8a>
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	d1eb      	bne.n	8008c5a <BSP_LCD_DisplayStringAt+0x62>
}
 8008c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8008c86:	1b49      	subs	r1, r1, r5
 8008c88:	fb11 f10e 	smulbb	r1, r1, lr
 8008c8c:	1b0c      	subs	r4, r1, r4
 8008c8e:	b2a4      	uxth	r4, r4
      break;
 8008c90:	e7d7      	b.n	8008c42 <BSP_LCD_DisplayStringAt+0x4a>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8008c92:	1b49      	subs	r1, r1, r5
 8008c94:	fb0e f101 	mul.w	r1, lr, r1
 8008c98:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 8008c9c:	b2a4      	uxth	r4, r4
      break;
 8008c9e:	e7d0      	b.n	8008c42 <BSP_LCD_DisplayStringAt+0x4a>
  uint32_t size = 0, xsize = 0; 
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	e7b7      	b.n	8008c14 <BSP_LCD_DisplayStringAt+0x1c>
 8008ca4:	200009f4 	.word	0x200009f4
 8008ca8:	200009f8 	.word	0x200009f8
 8008cac:	20000a50 	.word	0x20000a50

08008cb0 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008cb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <BSP_LCD_DrawPixel+0x30>)
{
 8008cb2:	b430      	push	{r4, r5}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2534      	movs	r5, #52	; 0x34
 8008cb8:	4c0a      	ldr	r4, [pc, #40]	; (8008ce4 <BSP_LCD_DrawPixel+0x34>)
 8008cba:	fb05 4303 	mla	r3, r5, r3, r4
 8008cbe:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8008cc0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8008cc2:	2d02      	cmp	r5, #2
 8008cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc6:	fb04 0101 	mla	r1, r4, r1, r0
 8008cca:	d003      	beq.n	8008cd4 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8008ccc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8008cd0:	bc30      	pop	{r4, r5}
 8008cd2:	4770      	bx	lr
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008cd4:	b292      	uxth	r2, r2
}
 8008cd6:	bc30      	pop	{r4, r5}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008cd8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	200009f4 	.word	0x200009f4
 8008ce4:	20000a50 	.word	0x20000a50

08008ce8 <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8008ce8:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8008cea:	2201      	movs	r2, #1
 8008cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cf0:	4808      	ldr	r0, [pc, #32]	; (8008d14 <BSP_LCD_DisplayOn+0x2c>)
{
 8008cf2:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8008cf4:	681c      	ldr	r4, [r3, #0]
 8008cf6:	69a3      	ldr	r3, [r4, #24]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8008cfc:	f000 fea2 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008d00:	2201      	movs	r2, #1
 8008d02:	2108      	movs	r1, #8
 8008d04:	4804      	ldr	r0, [pc, #16]	; (8008d18 <BSP_LCD_DisplayOn+0x30>)
}
 8008d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008d0a:	f000 be9b 	b.w	8009a44 <HAL_GPIO_WritePin>
 8008d0e:	bf00      	nop
 8008d10:	20000a50 	.word	0x20000a50
 8008d14:	40022000 	.word	0x40022000
 8008d18:	40022800 	.word	0x40022800

08008d1c <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d1c:	4b4e      	ldr	r3, [pc, #312]	; (8008e58 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008d1e:	f04f 0c10 	mov.w	ip, #16
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008d22:	484e      	ldr	r0, [pc, #312]	; (8008e5c <BSP_LCD_MspInit+0x140>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8008d2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d2e:	645a      	str	r2, [r3, #68]	; 0x44
{
 8008d30:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008d34:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008d36:	250e      	movs	r5, #14
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008d38:	2700      	movs	r7, #0
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d3a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008d3e:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008d40:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008d44:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8008e6c <BSP_LCD_MspInit+0x150>
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d48:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008d4a:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d52:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
 8008d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d5a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d64:	ea42 020c 	orr.w	r2, r2, ip
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
 8008d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d6c:	ea02 020c 	and.w	r2, r2, ip
 8008d70:	9202      	str	r2, [sp, #8]
 8008d72:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8008d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d7e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008d82:	9203      	str	r2, [sp, #12]
 8008d84:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d90:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008d94:	9204      	str	r2, [sp, #16]
 8008d96:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8008da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8008da6:	9205      	str	r2, [sp, #20]
 8008da8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008db0:	631a      	str	r2, [r3, #48]	; 0x30
 8008db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008db4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008db8:	9206      	str	r2, [sp, #24]
 8008dba:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8008dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8008dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dc6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008dca:	9207      	str	r2, [sp, #28]
 8008dcc:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008dd8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008de0:	970b      	str	r7, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008de2:	940a      	str	r4, [sp, #40]	; 0x28
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008de4:	9308      	str	r3, [sp, #32]
 8008de6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008de8:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008dea:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008dec:	f000 fd0c 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8008df0:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008df2:	a909      	add	r1, sp, #36	; 0x24
 8008df4:	481a      	ldr	r0, [pc, #104]	; (8008e60 <BSP_LCD_MspInit+0x144>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8008df6:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008df8:	4f1a      	ldr	r7, [pc, #104]	; (8008e64 <BSP_LCD_MspInit+0x148>)
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008dfa:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008dfe:	f000 fd03 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8008e02:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008e06:	a909      	add	r1, sp, #36	; 0x24
 8008e08:	4648      	mov	r0, r9
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8008e0a:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e0c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e0e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008e10:	f000 fcfa 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8008e14:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8008e18:	a909      	add	r1, sp, #36	; 0x24
 8008e1a:	4813      	ldr	r0, [pc, #76]	; (8008e68 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8008e1c:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e1e:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e20:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8008e22:	f000 fcf1 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8008e26:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008e28:	a909      	add	r1, sp, #36	; 0x24
 8008e2a:	4638      	mov	r0, r7
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e2c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8008e2e:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e30:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008e32:	f000 fce9 	bl	8009808 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8008e36:	4648      	mov	r0, r9
 8008e38:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008e3a:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8008e3e:	f000 fce3 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8008e42:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008e44:	a909      	add	r1, sp, #36	; 0x24
 8008e46:	4638      	mov	r0, r7
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8008e48:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008e4c:	f000 fcdc 	bl	8009808 <HAL_GPIO_Init>
}
 8008e50:	b00f      	add	sp, #60	; 0x3c
 8008e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e56:	bf00      	nop
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	40021800 	.word	0x40021800
 8008e64:	40022800 	.word	0x40022800
 8008e68:	40022400 	.word	0x40022400
 8008e6c:	40022000 	.word	0x40022000

08008e70 <BSP_LCD_ClockConfig>:
{
 8008e70:	b430      	push	{r4, r5}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008e72:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <BSP_LCD_ClockConfig+0x20>)
 8008e74:	2508      	movs	r5, #8
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008e76:	24c0      	movs	r4, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8008e78:	2105      	movs	r1, #5
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008e7e:	601d      	str	r5, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008e80:	615c      	str	r4, [r3, #20]
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8008e82:	4618      	mov	r0, r3
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8008e84:	61d9      	str	r1, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008e86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008e88:	bc30      	pop	{r4, r5}
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8008e8a:	f001 be23 	b.w	800aad4 <HAL_RCCEx_PeriphCLKConfig>
 8008e8e:	bf00      	nop
 8008e90:	20000af8 	.word	0x20000af8

08008e94 <BSP_LCD_Init>:
{    
 8008e94:	b538      	push	{r3, r4, r5, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8008e96:	2209      	movs	r2, #9
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8008e98:	4c25      	ldr	r4, [pc, #148]	; (8008f30 <BSP_LCD_Init+0x9c>)
 8008e9a:	2528      	movs	r5, #40	; 0x28
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008e9c:	2335      	movs	r3, #53	; 0x35
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008e9e:	200b      	movs	r0, #11
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008ea0:	f240 111b 	movw	r1, #283	; 0x11b
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8008ea4:	6165      	str	r5, [r4, #20]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008ea6:	f240 2515 	movw	r5, #533	; 0x215
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8008eaa:	61a2      	str	r2, [r4, #24]
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8008eac:	f240 121d 	movw	r2, #285	; 0x11d
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008eb0:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8008eb2:	f240 2335 	movw	r3, #565	; 0x235
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008eb6:	6220      	str	r0, [r4, #32]
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008eb8:	4620      	mov	r0, r4
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008eba:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008ebc:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008ebe:	6265      	str	r5, [r4, #36]	; 0x24
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8008ec0:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8008ec4:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008ec8:	f7ff ffd2 	bl	8008e70 <BSP_LCD_ClockConfig>
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8008ecc:	2300      	movs	r3, #0
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8008ece:	f44f 7188 	mov.w	r1, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8008ed2:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <BSP_LCD_Init+0xa0>)
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8008ed4:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8008ed6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Instance = LTDC;
 8008ed8:	6022      	str	r2, [r4, #0]
  hLtdcHandler.Init.Backcolor.Green = 0;
 8008eda:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8008ede:	e9c4 5118 	strd	r5, r1, [r4, #96]	; 0x60
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8008ee2:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008ee6:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8008eea:	f001 fb1d 	bl	800a528 <HAL_LTDC_GetState>
 8008eee:	b918      	cbnz	r0, 8008ef8 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8008ef0:	4601      	mov	r1, r0
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7ff ff12 	bl	8008d1c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8008ef8:	480d      	ldr	r0, [pc, #52]	; (8008f30 <BSP_LCD_Init+0x9c>)
 8008efa:	f001 f909 	bl	800a110 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8008efe:	2201      	movs	r2, #1
 8008f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f04:	480c      	ldr	r0, [pc, #48]	; (8008f38 <BSP_LCD_Init+0xa4>)
 8008f06:	f000 fd9d 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	2108      	movs	r1, #8
 8008f0e:	480b      	ldr	r0, [pc, #44]	; (8008f3c <BSP_LCD_Init+0xa8>)
 8008f10:	f000 fd98 	bl	8009a44 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8008f14:	f000 f8d4 	bl	80090c0 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8008f18:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <BSP_LCD_Init+0xac>)
 8008f1a:	4a0a      	ldr	r2, [pc, #40]	; (8008f44 <BSP_LCD_Init+0xb0>)
}
 8008f1c:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4909      	ldr	r1, [pc, #36]	; (8008f48 <BSP_LCD_Init+0xb4>)
 8008f22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008f26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f2a:	6099      	str	r1, [r3, #8]
}
 8008f2c:	bd38      	pop	{r3, r4, r5, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000a50 	.word	0x20000a50
 8008f34:	40016800 	.word	0x40016800
 8008f38:	40022000 	.word	0x40022000
 8008f3c:	40022800 	.word	0x40022800
 8008f40:	200009f4 	.word	0x200009f4
 8008f44:	200009f8 	.word	0x200009f8
 8008f48:	2000001c 	.word	0x2000001c

08008f4c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008f4c:	4b53      	ldr	r3, [pc, #332]	; (800909c <BSP_SDRAM_MspInit+0x150>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008f4e:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 8008f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f52:	f042 0201 	orr.w	r2, r2, #1
{  
 8008f56:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8008f5a:	4606      	mov	r6, r0
  __HAL_RCC_FMC_CLK_ENABLE();
 8008f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008f5e:	2001      	movs	r0, #1
{  
 8008f60:	b08e      	sub	sp, #56	; 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8008f62:	2508      	movs	r5, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8008f64:	4002      	ands	r2, r0
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8008f66:	ac0e      	add	r4, sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8008f68:	9201      	str	r2, [sp, #4]
 8008f6a:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8008f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008f72:	631a      	str	r2, [r3, #48]	; 0x30
 8008f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f76:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8008f7a:	9202      	str	r2, [sp, #8]
 8008f7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f80:	f042 0204 	orr.w	r2, r2, #4
 8008f84:	631a      	str	r2, [r3, #48]	; 0x30
 8008f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f88:	f002 0204 	and.w	r2, r2, #4
 8008f8c:	9203      	str	r2, [sp, #12]
 8008f8e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f92:	432a      	orrs	r2, r5
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
 8008f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f98:	402a      	ands	r2, r5
 8008f9a:	9204      	str	r2, [sp, #16]
 8008f9c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fa0:	f042 0210 	orr.w	r2, r2, #16
 8008fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8008fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fa8:	f002 0210 	and.w	r2, r2, #16
 8008fac:	9205      	str	r2, [sp, #20]
 8008fae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb2:	f042 0220 	orr.w	r2, r2, #32
 8008fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8008fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fba:	f002 0220 	and.w	r2, r2, #32
 8008fbe:	9206      	str	r2, [sp, #24]
 8008fc0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8008fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fcc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008fd0:	9207      	str	r2, [sp, #28]
 8008fd2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fda:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008fdc:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8008fe0:	f844 5d14 	str.w	r5, [r4, #-20]!
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8008fe4:	2500      	movs	r5, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008fea:	910a      	str	r1, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008fec:	910c      	str	r1, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008fee:	4621      	mov	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ff0:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008ff2:	900b      	str	r0, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008ff4:	482a      	ldr	r0, [pc, #168]	; (80090a0 <BSP_SDRAM_MspInit+0x154>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008ff6:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ff8:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008ffa:	f000 fc05 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8008ffe:	f24c 730b 	movw	r3, #50955	; 0xc70b
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009002:	4621      	mov	r1, r4
 8009004:	4827      	ldr	r0, [pc, #156]	; (80090a4 <BSP_SDRAM_MspInit+0x158>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8009006:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009008:	f000 fbfe 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800900c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8009010:	4621      	mov	r1, r4
 8009012:	4825      	ldr	r0, [pc, #148]	; (80090a8 <BSP_SDRAM_MspInit+0x15c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8009016:	f000 fbf7 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800901a:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800901e:	4621      	mov	r1, r4
 8009020:	4822      	ldr	r0, [pc, #136]	; (80090ac <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8009022:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8009024:	f000 fbf0 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8009028:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800902c:	4621      	mov	r1, r4
 800902e:	4820      	ldr	r0, [pc, #128]	; (80090b0 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8009030:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009032:	f000 fbe9 	bl	8009808 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8009036:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8009038:	4621      	mov	r1, r4
 800903a:	481e      	ldr	r0, [pc, #120]	; (80090b4 <BSP_SDRAM_MspInit+0x168>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800903c:	4c1e      	ldr	r4, [pc, #120]	; (80090b8 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8009040:	f000 fbe2 	bl	8009808 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8009044:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8009048:	2180      	movs	r1, #128	; 0x80
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800904a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800904e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8009052:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8009054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8009058:	60a1      	str	r1, [r4, #8]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800905a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800905e:	6122      	str	r2, [r4, #16]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009060:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8009062:	6223      	str	r3, [r4, #32]
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8009064:	4b15      	ldr	r3, [pc, #84]	; (80090bc <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8009066:	6325      	str	r5, [r4, #48]	; 0x30
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009068:	6160      	str	r0, [r4, #20]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800906a:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800906c:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800906e:	61a1      	str	r1, [r4, #24]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009070:	62a2      	str	r2, [r4, #40]	; 0x28
  dma_handle.Init.Mode                = DMA_NORMAL;
 8009072:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8009074:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8009076:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8009078:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800907a:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_DMA_DeInit(&dma_handle);
 800907e:	f000 fa13 	bl	80094a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8009082:	4620      	mov	r0, r4
 8009084:	f000 f974 	bl	8009370 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8009088:	462a      	mov	r2, r5
 800908a:	2105      	movs	r1, #5
 800908c:	2038      	movs	r0, #56	; 0x38
 800908e:	f000 f913 	bl	80092b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8009092:	2038      	movs	r0, #56	; 0x38
 8009094:	f000 f946 	bl	8009324 <HAL_NVIC_EnableIRQ>
}
 8009098:	b00e      	add	sp, #56	; 0x38
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	40023800 	.word	0x40023800
 80090a0:	40020800 	.word	0x40020800
 80090a4:	40020c00 	.word	0x40020c00
 80090a8:	40021000 	.word	0x40021000
 80090ac:	40021400 	.word	0x40021400
 80090b0:	40021800 	.word	0x40021800
 80090b4:	40021c00 	.word	0x40021c00
 80090b8:	20000ba8 	.word	0x20000ba8
 80090bc:	40026410 	.word	0x40026410

080090c0 <BSP_SDRAM_Init>:
{ 
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80090c4:	483d      	ldr	r0, [pc, #244]	; (80091bc <BSP_SDRAM_Init+0xfc>)
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80090c6:	2600      	movs	r6, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80090c8:	4d3d      	ldr	r5, [pc, #244]	; (80091c0 <BSP_SDRAM_Init+0x100>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80090ca:	2140      	movs	r1, #64	; 0x40
  Timing.LoadToActiveDelay    = 2;
 80090cc:	4c3d      	ldr	r4, [pc, #244]	; (80091c4 <BSP_SDRAM_Init+0x104>)
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80090ce:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80090d2:	f04f 0810 	mov.w	r8, #16
  Timing.LoadToActiveDelay    = 2;
 80090d6:	f04f 0902 	mov.w	r9, #2
  Timing.ExitSelfRefreshDelay = 7;
 80090da:	2307      	movs	r3, #7
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80090dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.SelfRefreshTime      = 4;
 80090e0:	f04f 0a04 	mov.w	sl, #4
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80090e4:	f44f 7780 	mov.w	r7, #256	; 0x100
{ 
 80090e8:	b083      	sub	sp, #12
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80090ea:	6028      	str	r0, [r5, #0]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80090ec:	6169      	str	r1, [r5, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80090ee:	4628      	mov	r0, r5
 80090f0:	4631      	mov	r1, r6
  Timing.ExitSelfRefreshDelay = 7;
 80090f2:	6063      	str	r3, [r4, #4]
  Timing.RowCycleDelay        = 7;
 80090f4:	60e3      	str	r3, [r4, #12]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80090f6:	61af      	str	r7, [r5, #24]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80090f8:	2701      	movs	r7, #1
  Timing.SelfRefreshTime      = 4;
 80090fa:	f8c4 a008 	str.w	sl, [r4, #8]
  Timing.LoadToActiveDelay    = 2;
 80090fe:	f8c4 9000 	str.w	r9, [r4]
  Timing.RCDDelay             = 2;
 8009102:	f8c4 9018 	str.w	r9, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009106:	61ee      	str	r6, [r5, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009108:	62ae      	str	r6, [r5, #40]	; 0x28
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800910a:	f8c5 a00c 	str.w	sl, [r5, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800910e:	f8c5 8010 	str.w	r8, [r5, #16]
 8009112:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80091cc <BSP_SDRAM_Init+0x10c>
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8009116:	e9c5 c208 	strd	ip, r2, [r5, #32]
  Timing.RPDelay              = 2;
 800911a:	e9c4 9904 	strd	r9, r9, [r4, #16]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800911e:	e9c5 6601 	strd	r6, r6, [r5, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8009122:	f7ff ff13 	bl	8008f4c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800912a:	4c27      	ldr	r4, [pc, #156]	; (80091c8 <BSP_SDRAM_Init+0x108>)
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800912c:	f001 ff74 	bl	800b018 <HAL_SDRAM_Init>
 8009130:	1b83      	subs	r3, r0, r6
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009132:	4621      	mov	r1, r4
 8009134:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8009138:	bf18      	it	ne
 800913a:	2301      	movne	r3, #1
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800913c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800913e:	9601      	str	r6, [sp, #4]
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8009140:	f88b 3000 	strb.w	r3, [fp]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009144:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8009148:	60e6      	str	r6, [r4, #12]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800914a:	6027      	str	r7, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 800914c:	60a7      	str	r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800914e:	f001 ff85 	bl	800b05c <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8009152:	4638      	mov	r0, r7
 8009154:	f000 f88a 	bl	800926c <HAL_Delay>
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8009158:	4621      	mov	r1, r4
 800915a:	4628      	mov	r0, r5
 800915c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009160:	e9c4 9800 	strd	r9, r8, [r4]
  Command.ModeRegisterDefinition = 0;
 8009164:	e9c4 7602 	strd	r7, r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8009168:	f001 ff78 	bl	800b05c <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800916c:	f04f 0c03 	mov.w	ip, #3
  Command.AutoRefreshNumber      = 8;
 8009170:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009172:	4621      	mov	r1, r4
 8009174:	4628      	mov	r0, r5
 8009176:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800917a:	f8c4 c000 	str.w	ip, [r4]
  Command.AutoRefreshNumber      = 8;
 800917e:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009180:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8009184:	60e6      	str	r6, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009186:	f001 ff69 	bl	800b05c <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800918a:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800918e:	4621      	mov	r1, r4
 8009190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009194:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8009196:	9301      	str	r3, [sp, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8009198:	9b01      	ldr	r3, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800919a:	e9c4 a800 	strd	sl, r8, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 800919e:	e9c4 7302 	strd	r7, r3, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80091a2:	f001 ff5b 	bl	800b05c <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80091a6:	4628      	mov	r0, r5
 80091a8:	f240 6103 	movw	r1, #1539	; 0x603
 80091ac:	f001 ff70 	bl	800b090 <HAL_SDRAM_ProgramRefreshRate>
}
 80091b0:	f89b 0000 	ldrb.w	r0, [fp]
 80091b4:	b003      	add	sp, #12
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	bf00      	nop
 80091bc:	a0000140 	.word	0xa0000140
 80091c0:	20000c08 	.word	0x20000c08
 80091c4:	20000b8c 	.word	0x20000b8c
 80091c8:	20000b7c 	.word	0x20000b7c
 80091cc:	2000000c 	.word	0x2000000c

080091d0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop

080091d4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80091d4:	4a0e      	ldr	r2, [pc, #56]	; (8009210 <HAL_InitTick+0x3c>)
 80091d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091da:	490e      	ldr	r1, [pc, #56]	; (8009214 <HAL_InitTick+0x40>)
 80091dc:	7812      	ldrb	r2, [r2, #0]
 80091de:	fbb3 f3f2 	udiv	r3, r3, r2
{
 80091e2:	b510      	push	{r4, lr}
 80091e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80091e6:	6808      	ldr	r0, [r1, #0]
 80091e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80091ec:	f000 f8a8 	bl	8009340 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091f0:	b908      	cbnz	r0, 80091f6 <HAL_InitTick+0x22>
 80091f2:	2c0f      	cmp	r4, #15
 80091f4:	d901      	bls.n	80091fa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80091f6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80091f8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091fa:	2200      	movs	r2, #0
 80091fc:	4621      	mov	r1, r4
 80091fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009202:	f000 f859 	bl	80092b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009206:	4b04      	ldr	r3, [pc, #16]	; (8009218 <HAL_InitTick+0x44>)
 8009208:	2000      	movs	r0, #0
 800920a:	601c      	str	r4, [r3, #0]
}
 800920c:	bd10      	pop	{r4, pc}
 800920e:	bf00      	nop
 8009210:	2000000d 	.word	0x2000000d
 8009214:	20000018 	.word	0x20000018
 8009218:	20000010 	.word	0x20000010

0800921c <HAL_Init>:
{
 800921c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009220:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009228:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009230:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009232:	f000 f82d 	bl	8009290 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8009236:	2000      	movs	r0, #0
 8009238:	f7ff ffcc 	bl	80091d4 <HAL_InitTick>
  HAL_MspInit();
 800923c:	f7ff ffc8 	bl	80091d0 <HAL_MspInit>
}
 8009240:	2000      	movs	r0, #0
 8009242:	bd08      	pop	{r3, pc}
 8009244:	40023c00 	.word	0x40023c00

08009248 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009248:	4a03      	ldr	r2, [pc, #12]	; (8009258 <HAL_IncTick+0x10>)
 800924a:	4b04      	ldr	r3, [pc, #16]	; (800925c <HAL_IncTick+0x14>)
 800924c:	6811      	ldr	r1, [r2, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	440b      	add	r3, r1
 8009252:	6013      	str	r3, [r2, #0]
}
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	2001ba1c 	.word	0x2001ba1c
 800925c:	2000000d 	.word	0x2000000d

08009260 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009260:	4b01      	ldr	r3, [pc, #4]	; (8009268 <HAL_GetTick+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
}
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	2001ba1c 	.word	0x2001ba1c

0800926c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009270:	f7ff fff6 	bl	8009260 <HAL_GetTick>
 8009274:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009276:	1c63      	adds	r3, r4, #1
 8009278:	d002      	beq.n	8009280 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800927a:	4b04      	ldr	r3, [pc, #16]	; (800928c <HAL_Delay+0x20>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009280:	f7ff ffee 	bl	8009260 <HAL_GetTick>
 8009284:	1b40      	subs	r0, r0, r5
 8009286:	42a0      	cmp	r0, r4
 8009288:	d3fa      	bcc.n	8009280 <HAL_Delay+0x14>
  {
  }
}
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	2000000d 	.word	0x2000000d

08009290 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009290:	4907      	ldr	r1, [pc, #28]	; (80092b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009292:	0200      	lsls	r0, r0, #8
 8009294:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009296:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009298:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800929c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800929e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80092a2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80092a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092aa:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80092ac:	60c8      	str	r0, [r1, #12]
 80092ae:	4770      	bx	lr
 80092b0:	e000ed00 	.word	0xe000ed00
 80092b4:	05fa0000 	.word	0x05fa0000

080092b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80092b8:	4b17      	ldr	r3, [pc, #92]	; (8009318 <HAL_NVIC_SetPriority+0x60>)
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80092c0:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092c2:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092c6:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092c8:	2d04      	cmp	r5, #4
 80092ca:	bf28      	it	cs
 80092cc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092ce:	2c06      	cmp	r4, #6
 80092d0:	d918      	bls.n	8009304 <HAL_NVIC_SetPriority+0x4c>
 80092d2:	3b03      	subs	r3, #3
 80092d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80092d8:	409c      	lsls	r4, r3
 80092da:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80092e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092e4:	fa02 f205 	lsl.w	r2, r2, r5
 80092e8:	ea21 0102 	bic.w	r1, r1, r2
 80092ec:	fa01 f203 	lsl.w	r2, r1, r3
 80092f0:	ea42 0204 	orr.w	r2, r2, r4
 80092f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80092f8:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80092fa:	db06      	blt.n	800930a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092fc:	4b07      	ldr	r3, [pc, #28]	; (800931c <HAL_NVIC_SetPriority+0x64>)
 80092fe:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009300:	bc30      	pop	{r4, r5}
 8009302:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009304:	2400      	movs	r4, #0
 8009306:	4623      	mov	r3, r4
 8009308:	e7e9      	b.n	80092de <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800930a:	f000 000f 	and.w	r0, r0, #15
 800930e:	4b04      	ldr	r3, [pc, #16]	; (8009320 <HAL_NVIC_SetPriority+0x68>)
 8009310:	541a      	strb	r2, [r3, r0]
 8009312:	bc30      	pop	{r4, r5}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	e000ed00 	.word	0xe000ed00
 800931c:	e000e400 	.word	0xe000e400
 8009320:	e000ed14 	.word	0xe000ed14

08009324 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009324:	2800      	cmp	r0, #0
 8009326:	db07      	blt.n	8009338 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009328:	2301      	movs	r3, #1
 800932a:	f000 011f 	and.w	r1, r0, #31
 800932e:	4a03      	ldr	r2, [pc, #12]	; (800933c <HAL_NVIC_EnableIRQ+0x18>)
 8009330:	0940      	lsrs	r0, r0, #5
 8009332:	408b      	lsls	r3, r1
 8009334:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	e000e100 	.word	0xe000e100

08009340 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009340:	3801      	subs	r0, #1
 8009342:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009346:	d20d      	bcs.n	8009364 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009348:	4b07      	ldr	r3, [pc, #28]	; (8009368 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800934a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800934c:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800934e:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009350:	25f0      	movs	r5, #240	; 0xf0
 8009352:	4c06      	ldr	r4, [pc, #24]	; (800936c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009354:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009356:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009358:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800935c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800935e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8009360:	bc30      	pop	{r4, r5}
 8009362:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009364:	2001      	movs	r0, #1
 8009366:	4770      	bx	lr
 8009368:	e000e010 	.word	0xe000e010
 800936c:	e000ed00 	.word	0xe000ed00

08009370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8009374:	f7ff ff74 	bl	8009260 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009378:	2c00      	cmp	r4, #0
 800937a:	d053      	beq.n	8009424 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800937c:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800937e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8009380:	2100      	movs	r1, #0
 8009382:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8009384:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8009388:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800938a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800938e:	f022 0201 	bic.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009394:	e005      	b.n	80093a2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009396:	f7ff ff63 	bl	8009260 <HAL_GetTick>
 800939a:	1b40      	subs	r0, r0, r5
 800939c:	2805      	cmp	r0, #5
 800939e:	d83a      	bhi.n	8009416 <HAL_DMA_Init+0xa6>
 80093a0:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	07d1      	lsls	r1, r2, #31
 80093a6:	d4f6      	bmi.n	8009396 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80093a8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80093ac:	68e1      	ldr	r1, [r4, #12]
 80093ae:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 80093b0:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093b2:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80093b6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093b8:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80093ba:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093bc:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093c0:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80093c2:	4d35      	ldr	r5, [pc, #212]	; (8009498 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093c4:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80093c6:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093c8:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80093cc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093ce:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80093d0:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093d4:	d028      	beq.n	8009428 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80093d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80093d8:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80093da:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80093de:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	4d2e      	ldr	r5, [pc, #184]	; (800949c <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80093e4:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093e6:	3a10      	subs	r2, #16
 80093e8:	492d      	ldr	r1, [pc, #180]	; (80094a0 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80093ea:	482e      	ldr	r0, [pc, #184]	; (80094a4 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093ec:	fba5 5202 	umull	r5, r2, r5, r2
 80093f0:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80093f2:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093f4:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093f6:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80093f8:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80093fa:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80093fc:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009400:	bf88      	it	hi
 8009402:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009404:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009406:	4083      	lsls	r3, r0
  return HAL_OK;
 8009408:	4610      	mov	r0, r2
 800940a:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800940c:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800940e:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8009410:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8009414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009416:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009418:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800941a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800941c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800941e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8009424:	2001      	movs	r0, #1
}
 8009426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009428:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800942c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800942e:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8009432:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009436:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8009438:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800943a:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800943c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8009440:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009442:	2d00      	cmp	r5, #0
 8009444:	d0cc      	beq.n	80093e0 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009446:	b17e      	cbz	r6, 8009468 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009448:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800944c:	d016      	beq.n	800947c <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800944e:	2f02      	cmp	r7, #2
 8009450:	d903      	bls.n	800945a <HAL_DMA_Init+0xea>
 8009452:	2f03      	cmp	r7, #3
 8009454:	d1c4      	bne.n	80093e0 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009456:	01ea      	lsls	r2, r5, #7
 8009458:	d5c2      	bpl.n	80093e0 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800945a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800945c:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800945e:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009460:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8009462:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8009468:	2f01      	cmp	r7, #1
 800946a:	d003      	beq.n	8009474 <HAL_DMA_Init+0x104>
 800946c:	d3f3      	bcc.n	8009456 <HAL_DMA_Init+0xe6>
 800946e:	2f02      	cmp	r7, #2
 8009470:	d1b6      	bne.n	80093e0 <HAL_DMA_Init+0x70>
 8009472:	e7f0      	b.n	8009456 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009474:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8009478:	d1b2      	bne.n	80093e0 <HAL_DMA_Init+0x70>
 800947a:	e7ee      	b.n	800945a <HAL_DMA_Init+0xea>
    switch (tmp)
 800947c:	2f03      	cmp	r7, #3
 800947e:	d8af      	bhi.n	80093e0 <HAL_DMA_Init+0x70>
 8009480:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <HAL_DMA_Init+0x118>)
 8009482:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8009486:	bf00      	nop
 8009488:	0800945b 	.word	0x0800945b
 800948c:	08009457 	.word	0x08009457
 8009490:	0800945b 	.word	0x0800945b
 8009494:	08009475 	.word	0x08009475
 8009498:	f010803f 	.word	0xf010803f
 800949c:	aaaaaaab 	.word	0xaaaaaaab
 80094a0:	fffffc00 	.word	0xfffffc00
 80094a4:	0801c9b8 	.word	0x0801c9b8

080094a8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d035      	beq.n	8009518 <HAL_DMA_DeInit+0x70>
 80094ac:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80094ae:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80094b2:	b2c0      	uxtb	r0, r0
 80094b4:	2802      	cmp	r0, #2
 80094b6:	d031      	beq.n	800951c <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 80094b8:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 80094ba:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094bc:	b2d1      	uxtb	r1, r2
{
 80094be:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094c0:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 80094c2:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094c4:	4d16      	ldr	r5, [pc, #88]	; (8009520 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80094c6:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 80094c8:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094cc:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094d0:	4d14      	ldr	r5, [pc, #80]	; (8009524 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 80094d2:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094d4:	0909      	lsrs	r1, r1, #4
 80094d6:	4c14      	ldr	r4, [pc, #80]	; (8009528 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 80094d8:	6010      	str	r0, [r2, #0]
 80094da:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094dc:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 80094de:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094e0:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 80094e4:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094e6:	bf88      	it	hi
 80094e8:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 80094ea:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094ec:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 80094ee:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80094f0:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80094f2:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 80094f4:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094f6:	65dd      	str	r5, [r3, #92]	; 0x5c
 80094f8:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 80094fa:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094fc:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8009500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8009504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8009508:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800950c:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8009510:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 8009514:	bc70      	pop	{r4, r5, r6}
 8009516:	4770      	bx	lr
    return HAL_ERROR;
 8009518:	2001      	movs	r0, #1
 800951a:	4770      	bx	lr
}
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	aaaaaaab 	.word	0xaaaaaaab
 8009524:	0801c9b8 	.word	0x0801c9b8
 8009528:	fffffc00 	.word	0xfffffc00

0800952c <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop

08009530 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8009530:	b340      	cbz	r0, 8009584 <HAL_DMA2D_Init+0x54>
{ 
 8009532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8009534:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009538:	4604      	mov	r4, r0
 800953a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800953e:	b1e3      	cbz	r3, 800957a <HAL_DMA2D_Init+0x4a>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8009540:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8009542:	68a7      	ldr	r7, [r4, #8]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009544:	2500      	movs	r5, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009546:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8009548:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  return HAL_OK;
 800954c:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800954e:	e9d4 3100 	ldrd	r3, r1, [r4]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009558:	430a      	orrs	r2, r1
 800955a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800955c:	6b59      	ldr	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800955e:	4a0a      	ldr	r2, [pc, #40]	; (8009588 <HAL_DMA2D_Init+0x58>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8009560:	f021 0107 	bic.w	r1, r1, #7
 8009564:	4339      	orrs	r1, r7
 8009566:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8009568:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800956a:	400a      	ands	r2, r1
 800956c:	68e1      	ldr	r1, [r4, #12]
 800956e:	430a      	orrs	r2, r1
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009572:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009574:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 8009578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800957a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800957e:	f7ff ffd5 	bl	800952c <HAL_DMA2D_MspInit>
 8009582:	e7dd      	b.n	8009540 <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 8009584:	2001      	movs	r0, #1
}
 8009586:	4770      	bx	lr
 8009588:	ffffc000 	.word	0xffffc000

0800958c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800958c:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800958e:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8009592:	2c01      	cmp	r4, #1
 8009594:	d036      	beq.n	8009604 <HAL_DMA2D_Start+0x78>
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8009596:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009598:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800959a:	9e03      	ldr	r6, [sp, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800959c:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80095a0:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80095a4:	6c65      	ldr	r5, [r4, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 80095a6:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80095a8:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  __HAL_LOCK(hdma2d);
 80095ac:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80095b0:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80095b2:	432b      	orrs	r3, r5
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80095b4:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80095b8:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80095ba:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80095bc:	d007      	beq.n	80095ce <HAL_DMA2D_Start+0x42>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80095be:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 80095c0:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80095c2:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80095c4:	f043 0301 	orr.w	r3, r3, #1
 80095c8:	6023      	str	r3, [r4, #0]
}
 80095ca:	bc70      	pop	{r4, r5, r6}
 80095cc:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80095ce:	6882      	ldr	r2, [r0, #8]
 80095d0:	b1b2      	cbz	r2, 8009600 <HAL_DMA2D_Start+0x74>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80095d2:	2a01      	cmp	r2, #1
 80095d4:	d024      	beq.n	8009620 <HAL_DMA2D_Start+0x94>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80095d6:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80095d8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80095dc:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80095e0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80095e2:	d020      	beq.n	8009626 <HAL_DMA2D_Start+0x9a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80095e4:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80095e6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80095ea:	d00e      	beq.n	800960a <HAL_DMA2D_Start+0x7e>
      tmp2 = (tmp2 >> 20);
 80095ec:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12);
 80095ee:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80095f0:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28);
 80095f2:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80095f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80095f8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80095fc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8009600:	63a1      	str	r1, [r4, #56]	; 0x38
 8009602:	e7dd      	b.n	80095c0 <HAL_DMA2D_Start+0x34>
  __HAL_LOCK(hdma2d);
 8009604:	2002      	movs	r0, #2
}
 8009606:	bc70      	pop	{r4, r5, r6}
 8009608:	4770      	bx	lr
      tmp2 = (tmp2 >> 19);
 800960a:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 800960c:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 800960e:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 8009610:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8009612:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8009616:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800961a:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800961e:	e7ef      	b.n	8009600 <HAL_DMA2D_Start+0x74>
      tmp = (tmp3 | tmp2 | tmp4);  
 8009620:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8009624:	e7ec      	b.n	8009600 <HAL_DMA2D_Start+0x74>
      tmp2 = (tmp2 >> 19);
 8009626:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 8009628:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800962a:	02c9      	lsls	r1, r1, #11
 800962c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8009630:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8009634:	e7e4      	b.n	8009600 <HAL_DMA2D_Start+0x74>
 8009636:	bf00      	nop

08009638 <HAL_DMA2D_PollForTransfer>:
{
 8009638:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 800963a:	2200      	movs	r2, #0
{
 800963c:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 800963e:	6803      	ldr	r3, [r0, #0]
{
 8009640:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0;  
 8009642:	9201      	str	r2, [sp, #4]
{
 8009644:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	07d2      	lsls	r2, r2, #31
 800964a:	d420      	bmi.n	800968e <HAL_DMA2D_PollForTransfer+0x56>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 800964c:	69da      	ldr	r2, [r3, #28]
 800964e:	0690      	lsls	r0, r2, #26
 8009650:	d402      	bmi.n	8009658 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8009652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8009654:	0691      	lsls	r1, r2, #26
 8009656:	d50f      	bpl.n	8009678 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 8009658:	f7ff fe02 	bl	8009260 <HAL_GetTick>
 800965c:	4606      	mov	r6, r0
 800965e:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	d006      	beq.n	8009672 <HAL_DMA2D_PollForTransfer+0x3a>
 8009664:	e032      	b.n	80096cc <HAL_DMA2D_PollForTransfer+0x94>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 800966a:	9a01      	ldr	r2, [sp, #4]
 800966c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8009670:	d147      	bne.n	8009702 <HAL_DMA2D_PollForTransfer+0xca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	06d1      	lsls	r1, r2, #27
 8009676:	d5f6      	bpl.n	8009666 <HAL_DMA2D_PollForTransfer+0x2e>
  __HAL_UNLOCK(hdma2d);
 8009678:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800967a:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800967c:	2101      	movs	r1, #1
  return HAL_OK;
 800967e:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8009680:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8009682:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009686:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
}
 800968a:	b002      	add	sp, #8
 800968c:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800968e:	f7ff fde7 	bl	8009260 <HAL_GetTick>
 8009692:	4606      	mov	r6, r0
 8009694:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	d153      	bne.n	8009742 <HAL_DMA2D_PollForTransfer+0x10a>
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	0791      	lsls	r1, r2, #30
 800969e:	d4d5      	bmi.n	800964c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80096a4:	9a01      	ldr	r2, [sp, #4]
 80096a6:	f012 0f21 	tst.w	r2, #33	; 0x21
 80096aa:	d0f6      	beq.n	800969a <HAL_DMA2D_PollForTransfer+0x62>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80096ac:	9a01      	ldr	r2, [sp, #4]
 80096ae:	0696      	lsls	r6, r2, #26
 80096b0:	d503      	bpl.n	80096ba <HAL_DMA2D_PollForTransfer+0x82>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 80096b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80096b4:	f042 0202 	orr.w	r2, r2, #2
 80096b8:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 80096ba:	9a01      	ldr	r2, [sp, #4]
 80096bc:	07d5      	lsls	r5, r2, #31
 80096be:	d503      	bpl.n	80096c8 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80096c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80096c2:	f042 0201 	orr.w	r2, r2, #1
 80096c6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80096c8:	2521      	movs	r5, #33	; 0x21
 80096ca:	e030      	b.n	800972e <HAL_DMA2D_PollForTransfer+0xf6>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	06d2      	lsls	r2, r2, #27
 80096d0:	d4d2      	bmi.n	8009678 <HAL_DMA2D_PollForTransfer+0x40>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 80096d6:	9a01      	ldr	r2, [sp, #4]
 80096d8:	f012 0f29 	tst.w	r2, #41	; 0x29
 80096dc:	d111      	bne.n	8009702 <HAL_DMA2D_PollForTransfer+0xca>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80096de:	b125      	cbz	r5, 80096ea <HAL_DMA2D_PollForTransfer+0xb2>
 80096e0:	f7ff fdbe 	bl	8009260 <HAL_GetTick>
 80096e4:	1b80      	subs	r0, r0, r6
 80096e6:	42a8      	cmp	r0, r5
 80096e8:	d9b9      	bls.n	800965e <HAL_DMA2D_PollForTransfer+0x26>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80096ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80096ec:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80096ee:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80096f0:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80096f4:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80096f6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80096fa:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80096fc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8009700:	e7c3      	b.n	800968a <HAL_DMA2D_PollForTransfer+0x52>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8009702:	9a01      	ldr	r2, [sp, #4]
 8009704:	0712      	lsls	r2, r2, #28
 8009706:	d503      	bpl.n	8009710 <HAL_DMA2D_PollForTransfer+0xd8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8009708:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800970a:	f042 0204 	orr.w	r2, r2, #4
 800970e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8009710:	9a01      	ldr	r2, [sp, #4]
 8009712:	0696      	lsls	r6, r2, #26
 8009714:	d503      	bpl.n	800971e <HAL_DMA2D_PollForTransfer+0xe6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8009716:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009718:	f042 0202 	orr.w	r2, r2, #2
 800971c:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 800971e:	9a01      	ldr	r2, [sp, #4]
 8009720:	07d5      	lsls	r5, r2, #31
 8009722:	d503      	bpl.n	800972c <HAL_DMA2D_PollForTransfer+0xf4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8009724:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800972c:	2529      	movs	r5, #41	; 0x29
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800972e:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8009730:	2200      	movs	r2, #0
        return HAL_ERROR;      
 8009732:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009734:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8009736:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800973a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 800973e:	b002      	add	sp, #8
 8009740:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	0792      	lsls	r2, r2, #30
 8009746:	d481      	bmi.n	800964c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 800974c:	9a01      	ldr	r2, [sp, #4]
 800974e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8009752:	d1ab      	bne.n	80096ac <HAL_DMA2D_PollForTransfer+0x74>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8009754:	2d00      	cmp	r5, #0
 8009756:	d0c8      	beq.n	80096ea <HAL_DMA2D_PollForTransfer+0xb2>
 8009758:	f7ff fd82 	bl	8009260 <HAL_GetTick>
 800975c:	1b80      	subs	r0, r0, r6
 800975e:	42a8      	cmp	r0, r5
 8009760:	d998      	bls.n	8009694 <HAL_DMA2D_PollForTransfer+0x5c>
 8009762:	e7c2      	b.n	80096ea <HAL_DMA2D_PollForTransfer+0xb2>

08009764 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8009764:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009768:	2a01      	cmp	r2, #1
 800976a:	d049      	beq.n	8009800 <HAL_DMA2D_ConfigLayer+0x9c>
 800976c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800976e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
{ 
 8009772:	b4f0      	push	{r4, r5, r6, r7}
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8009774:	e9d0 2507 	ldrd	r2, r5, [r0, #28]
  __HAL_LOCK(hdma2d);
 8009778:	2701      	movs	r7, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800977a:	2402      	movs	r4, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800977c:	f1a2 0609 	sub.w	r6, r2, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8009780:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  __HAL_LOCK(hdma2d);
 8009784:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009788:	42be      	cmp	r6, r7
 800978a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800978c:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
 8009790:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009792:	d91a      	bls.n	80097ca <HAL_DMA2D_ConfigLayer+0x66>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009794:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == 0)
 8009798:	b179      	cbz	r1, 80097ba <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800979a:	69e5      	ldr	r5, [r4, #28]
 800979c:	4919      	ldr	r1, [pc, #100]	; (8009804 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800979e:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80097a0:	4029      	ands	r1, r5
 80097a2:	430a      	orrs	r2, r1
 80097a4:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80097a6:	6120      	str	r0, [r4, #16]
  __HAL_UNLOCK(hdma2d);  
 80097a8:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80097aa:	2101      	movs	r1, #1
  return HAL_OK;
 80097ac:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80097ae:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 80097b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80097b6:	bcf0      	pop	{r4, r5, r6, r7}
 80097b8:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80097ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097bc:	4911      	ldr	r1, [pc, #68]	; (8009804 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80097be:	6998      	ldr	r0, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80097c0:	4029      	ands	r1, r5
 80097c2:	430a      	orrs	r2, r1
 80097c4:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80097c6:	61a0      	str	r0, [r4, #24]
 80097c8:	e7ee      	b.n	80097a8 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80097ca:	f005 467f 	and.w	r6, r5, #4278190080	; 0xff000000
 80097ce:	4332      	orrs	r2, r6
  if(LayerIdx == 0)
 80097d0:	b151      	cbz	r1, 80097e8 <HAL_DMA2D_ConfigLayer+0x84>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80097d2:	69e6      	ldr	r6, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80097d4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80097d8:	490a      	ldr	r1, [pc, #40]	; (8009804 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80097da:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80097dc:	4031      	ands	r1, r6
 80097de:	430a      	orrs	r2, r1
 80097e0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80097e2:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80097e4:	6225      	str	r5, [r4, #32]
 80097e6:	e7df      	b.n	80097a8 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80097e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097ea:	4906      	ldr	r1, [pc, #24]	; (8009804 <HAL_DMA2D_ConfigLayer+0xa0>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80097ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80097ee:	4029      	ands	r1, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80097f0:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80097f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80097f6:	430a      	orrs	r2, r1
 80097f8:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80097fa:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80097fc:	62a0      	str	r0, [r4, #40]	; 0x28
 80097fe:	e7d3      	b.n	80097a8 <HAL_DMA2D_ConfigLayer+0x44>
  __HAL_LOCK(hdma2d);
 8009800:	2002      	movs	r0, #2
}
 8009802:	4770      	bx	lr
 8009804:	00fcfff0 	.word	0x00fcfff0

08009808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800980c:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8009a3c <HAL_GPIO_Init+0x234>
{
 8009810:	b083      	sub	sp, #12
 8009812:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8009814:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009816:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8009a40 <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800981a:	f8d1 8000 	ldr.w	r8, [r1]
 800981e:	e003      	b.n	8009828 <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 8009820:	3501      	adds	r5, #1
 8009822:	2d10      	cmp	r5, #16
 8009824:	f000 80b6 	beq.w	8009994 <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 8009828:	2301      	movs	r3, #1
 800982a:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800982c:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 8009830:	428b      	cmp	r3, r1
 8009832:	d1f5      	bne.n	8009820 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009834:	f8de 4004 	ldr.w	r4, [lr, #4]
 8009838:	f024 0710 	bic.w	r7, r4, #16
 800983c:	2f02      	cmp	r7, #2
 800983e:	f040 80ac 	bne.w	800999a <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 8009842:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009844:	f005 0a07 	and.w	sl, r5, #7
 8009848:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800984c:	f8de 2010 	ldr.w	r2, [lr, #16]
 8009850:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009854:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8009858:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800985a:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800985e:	fa02 f20a 	lsl.w	r2, r2, sl
 8009862:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009866:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800986a:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800986e:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009870:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009874:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 8009878:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800987a:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 800987e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009880:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009884:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009886:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8009888:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 800988a:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800988c:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009890:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8009894:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009898:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800989a:	fa06 f60a 	lsl.w	r6, r6, sl
 800989e:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 80098a2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80098a4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80098a6:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80098aa:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 80098ac:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80098ae:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80098b0:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80098b2:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80098b6:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80098ba:	fa03 f30a 	lsl.w	r3, r3, sl
 80098be:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 80098c2:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80098c4:	d5ac      	bpl.n	8009820 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098c6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80098ca:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098ce:	f005 0303 	and.w	r3, r5, #3
 80098d2:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098d4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80098d8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098dc:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098de:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80098e2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80098e6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098ea:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098ee:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80098f2:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80098f4:	4e48      	ldr	r6, [pc, #288]	; (8009a18 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098f6:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80098f8:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 80098fa:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098fc:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009900:	d020      	beq.n	8009944 <HAL_GPIO_Init+0x13c>
 8009902:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009906:	42b0      	cmp	r0, r6
 8009908:	d05e      	beq.n	80099c8 <HAL_GPIO_Init+0x1c0>
 800990a:	4e44      	ldr	r6, [pc, #272]	; (8009a1c <HAL_GPIO_Init+0x214>)
 800990c:	42b0      	cmp	r0, r6
 800990e:	d060      	beq.n	80099d2 <HAL_GPIO_Init+0x1ca>
 8009910:	4e43      	ldr	r6, [pc, #268]	; (8009a20 <HAL_GPIO_Init+0x218>)
 8009912:	42b0      	cmp	r0, r6
 8009914:	d062      	beq.n	80099dc <HAL_GPIO_Init+0x1d4>
 8009916:	4e43      	ldr	r6, [pc, #268]	; (8009a24 <HAL_GPIO_Init+0x21c>)
 8009918:	42b0      	cmp	r0, r6
 800991a:	d064      	beq.n	80099e6 <HAL_GPIO_Init+0x1de>
 800991c:	4e42      	ldr	r6, [pc, #264]	; (8009a28 <HAL_GPIO_Init+0x220>)
 800991e:	42b0      	cmp	r0, r6
 8009920:	d06b      	beq.n	80099fa <HAL_GPIO_Init+0x1f2>
 8009922:	4e42      	ldr	r6, [pc, #264]	; (8009a2c <HAL_GPIO_Init+0x224>)
 8009924:	42b0      	cmp	r0, r6
 8009926:	d06d      	beq.n	8009a04 <HAL_GPIO_Init+0x1fc>
 8009928:	4e41      	ldr	r6, [pc, #260]	; (8009a30 <HAL_GPIO_Init+0x228>)
 800992a:	42b0      	cmp	r0, r6
 800992c:	d060      	beq.n	80099f0 <HAL_GPIO_Init+0x1e8>
 800992e:	4e41      	ldr	r6, [pc, #260]	; (8009a34 <HAL_GPIO_Init+0x22c>)
 8009930:	42b0      	cmp	r0, r6
 8009932:	d06c      	beq.n	8009a0e <HAL_GPIO_Init+0x206>
 8009934:	4e40      	ldr	r6, [pc, #256]	; (8009a38 <HAL_GPIO_Init+0x230>)
 8009936:	42b0      	cmp	r0, r6
 8009938:	bf0c      	ite	eq
 800993a:	2609      	moveq	r6, #9
 800993c:	260a      	movne	r6, #10
 800993e:	fa06 f303 	lsl.w	r3, r6, r3
 8009942:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8009944:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009946:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8009948:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 800994c:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8009950:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8009954:	bf54      	ite	pl
 8009956:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009958:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800995a:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 800995c:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8009960:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8009964:	bf54      	ite	pl
 8009966:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009968:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800996a:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 800996c:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8009970:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8009974:	bf54      	ite	pl
 8009976:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009978:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800997a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800997c:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8009980:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8009984:	bf54      	ite	pl
 8009986:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009988:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 800998a:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 800998c:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009990:	f47f af4a 	bne.w	8009828 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009994:	b003      	add	sp, #12
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800999e:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 80099a0:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80099a4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80099a6:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80099aa:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099ae:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80099b0:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80099b4:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80099b8:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80099bc:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 80099c0:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099c2:	f63f af74 	bhi.w	80098ae <HAL_GPIO_Init+0xa6>
 80099c6:	e760      	b.n	800988a <HAL_GPIO_Init+0x82>
 80099c8:	2601      	movs	r6, #1
 80099ca:	fa06 f303 	lsl.w	r3, r6, r3
 80099ce:	431a      	orrs	r2, r3
 80099d0:	e7b8      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 80099d2:	2602      	movs	r6, #2
 80099d4:	fa06 f303 	lsl.w	r3, r6, r3
 80099d8:	431a      	orrs	r2, r3
 80099da:	e7b3      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 80099dc:	2603      	movs	r6, #3
 80099de:	fa06 f303 	lsl.w	r3, r6, r3
 80099e2:	431a      	orrs	r2, r3
 80099e4:	e7ae      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 80099e6:	2604      	movs	r6, #4
 80099e8:	fa06 f303 	lsl.w	r3, r6, r3
 80099ec:	431a      	orrs	r2, r3
 80099ee:	e7a9      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 80099f0:	2607      	movs	r6, #7
 80099f2:	fa06 f303 	lsl.w	r3, r6, r3
 80099f6:	431a      	orrs	r2, r3
 80099f8:	e7a4      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 80099fa:	2605      	movs	r6, #5
 80099fc:	fa06 f303 	lsl.w	r3, r6, r3
 8009a00:	431a      	orrs	r2, r3
 8009a02:	e79f      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 8009a04:	2606      	movs	r6, #6
 8009a06:	fa06 f303 	lsl.w	r3, r6, r3
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	e79a      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 8009a0e:	2608      	movs	r6, #8
 8009a10:	fa06 f303 	lsl.w	r3, r6, r3
 8009a14:	431a      	orrs	r2, r3
 8009a16:	e795      	b.n	8009944 <HAL_GPIO_Init+0x13c>
 8009a18:	40020000 	.word	0x40020000
 8009a1c:	40020800 	.word	0x40020800
 8009a20:	40020c00 	.word	0x40020c00
 8009a24:	40021000 	.word	0x40021000
 8009a28:	40021400 	.word	0x40021400
 8009a2c:	40021800 	.word	0x40021800
 8009a30:	40021c00 	.word	0x40021c00
 8009a34:	40022000 	.word	0x40022000
 8009a38:	40022400 	.word	0x40022400
 8009a3c:	40013c00 	.word	0x40013c00
 8009a40:	40023800 	.word	0x40023800

08009a44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a44:	b902      	cbnz	r2, 8009a48 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009a46:	0409      	lsls	r1, r1, #16
 8009a48:	6181      	str	r1, [r0, #24]
  }
}
 8009a4a:	4770      	bx	lr

08009a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4616      	mov	r6, r2
 8009a52:	460d      	mov	r5, r1
 8009a54:	b941      	cbnz	r1, 8009a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 8009a56:	e03f      	b.n	8009ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    {
      return HAL_ERROR;
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	0697      	lsls	r7, r2, #26
 8009a5c:	d453      	bmi.n	8009b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
        return HAL_ERROR;
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a5e:	f7ff fbff 	bl	8009260 <HAL_GetTick>
 8009a62:	1b80      	subs	r0, r0, r6
 8009a64:	4285      	cmp	r5, r0
 8009a66:	d341      	bcc.n	8009aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	699a      	ldr	r2, [r3, #24]
 8009a6c:	0751      	lsls	r1, r2, #29
 8009a6e:	d448      	bmi.n	8009b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a70:	699a      	ldr	r2, [r3, #24]
 8009a72:	06d2      	lsls	r2, r2, #27
 8009a74:	d5f0      	bpl.n	8009a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
 8009a76:	1c69      	adds	r1, r5, #1
 8009a78:	d122      	bne.n	8009ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	0692      	lsls	r2, r2, #26
 8009a7e:	d5fc      	bpl.n	8009a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a80:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a82:	2110      	movs	r1, #16
 8009a84:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a86:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	0796      	lsls	r6, r2, #30
 8009a8c:	d501      	bpl.n	8009a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    hi2c->Instance->TXDR = 0x00U;
 8009a8e:	2200      	movs	r2, #0
 8009a90:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a92:	699a      	ldr	r2, [r3, #24]
 8009a94:	07d5      	lsls	r5, r2, #31
 8009a96:	d403      	bmi.n	8009aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009aa0:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8009aa4:	4f28      	ldr	r7, [pc, #160]	; (8009b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009aa6:	2604      	movs	r6, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8009aa8:	2520      	movs	r5, #32
      return HAL_ERROR;
 8009aaa:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009aac:	403a      	ands	r2, r7
 8009aae:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009ab0:	6466      	str	r6, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ab2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009ab6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aba:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ac0:	699a      	ldr	r2, [r3, #24]
 8009ac2:	0697      	lsls	r7, r2, #26
 8009ac4:	d4dc      	bmi.n	8009a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ac6:	2d00      	cmp	r5, #0
 8009ac8:	d033      	beq.n	8009b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8009aca:	f7ff fbc9 	bl	8009260 <HAL_GetTick>
 8009ace:	1b80      	subs	r0, r0, r6
 8009ad0:	4285      	cmp	r5, r0
 8009ad2:	d32e      	bcc.n	8009b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	e7ce      	b.n	8009a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ad8:	6803      	ldr	r3, [r0, #0]
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	0752      	lsls	r2, r2, #29
 8009ade:	d410      	bmi.n	8009b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ae0:	699a      	ldr	r2, [r3, #24]
 8009ae2:	06d0      	lsls	r0, r2, #27
 8009ae4:	d4c7      	bmi.n	8009a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009ae6:	699a      	ldr	r2, [r3, #24]
 8009ae8:	0690      	lsls	r0, r2, #26
 8009aea:	d40c      	bmi.n	8009b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009aee:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 8009af0:	2100      	movs	r1, #0
      return HAL_TIMEOUT;
 8009af2:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009af4:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8009af6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009afa:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009afc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 8009b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_OK;
 8009b02:	2000      	movs	r0, #0
}
 8009b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009b06:	699a      	ldr	r2, [r3, #24]
 8009b08:	0751      	lsls	r1, r2, #29
 8009b0a:	d502      	bpl.n	8009b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xc6>
 8009b0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	d1f7      	bne.n	8009b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b12:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 8009b14:	4e0c      	ldr	r6, [pc, #48]	; (8009b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b16:	2200      	movs	r2, #0
        return HAL_ERROR;
 8009b18:	2001      	movs	r0, #1
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b1a:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8009b1c:	6859      	ldr	r1, [r3, #4]
 8009b1e:	4031      	ands	r1, r6
 8009b20:	6059      	str	r1, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b22:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009b24:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8009b28:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8009b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b32:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8009b34:	2220      	movs	r2, #32
      return HAL_ERROR;
 8009b36:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8009b38:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8009b3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b46:	bf00      	nop
 8009b48:	fe00e800 	.word	0xfe00e800

08009b4c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4e:	4604      	mov	r4, r0
 8009b50:	460d      	mov	r5, r1
 8009b52:	4616      	mov	r6, r2
 8009b54:	1c6f      	adds	r7, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	d12a      	bne.n	8009bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	0790      	lsls	r0, r2, #30
 8009b5e:	d425      	bmi.n	8009bac <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	06d1      	lsls	r1, r2, #27
 8009b64:	d5f9      	bpl.n	8009b5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b66:	699a      	ldr	r2, [r3, #24]
 8009b68:	0695      	lsls	r5, r2, #26
 8009b6a:	d5fc      	bpl.n	8009b66 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b6c:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b6e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b70:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b72:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	0791      	lsls	r1, r2, #30
 8009b78:	d501      	bpl.n	8009b7e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b7e:	699a      	ldr	r2, [r3, #24]
 8009b80:	07d2      	lsls	r2, r2, #31
 8009b82:	d403      	bmi.n	8009b8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	f042 0201 	orr.w	r2, r2, #1
 8009b8a:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8009b8c:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8009b90:	4f1e      	ldr	r7, [pc, #120]	; (8009c0c <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b92:	2604      	movs	r6, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8009b94:	2520      	movs	r5, #32
      return HAL_ERROR;
 8009b96:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009b98:	403a      	ands	r2, r7
 8009b9a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b9c:	6466      	str	r6, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8009b9e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009ba2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8009bac:	2000      	movs	r0, #0
}
 8009bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	0792      	lsls	r2, r2, #30
 8009bb4:	d4fa      	bmi.n	8009bac <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bb6:	699a      	ldr	r2, [r3, #24]
 8009bb8:	06d7      	lsls	r7, r2, #27
 8009bba:	d419      	bmi.n	8009bf0 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009bbc:	b125      	cbz	r5, 8009bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x7c>
 8009bbe:	f7ff fb4f 	bl	8009260 <HAL_GetTick>
 8009bc2:	1b80      	subs	r0, r0, r6
 8009bc4:	42a8      	cmp	r0, r5
 8009bc6:	d9c5      	bls.n	8009b54 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bca:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bcc:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009bce:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bd0:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009bd2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bd6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bd8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bdc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8009be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009be2:	b14d      	cbz	r5, 8009bf8 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8009be4:	f7ff fb3c 	bl	8009260 <HAL_GetTick>
 8009be8:	1b80      	subs	r0, r0, r6
 8009bea:	4285      	cmp	r5, r0
 8009bec:	d304      	bcc.n	8009bf8 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8009bee:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	0690      	lsls	r0, r2, #26
 8009bf4:	d5f5      	bpl.n	8009be2 <I2C_WaitOnTXISFlagUntilTimeout+0x96>
 8009bf6:	e7b9      	b.n	8009b6c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf8:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8009bfa:	2220      	movs	r2, #32
      return HAL_ERROR;
 8009bfc:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8009bfe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8009c02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c0c:	fe00e800 	.word	0xfe00e800

08009c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	4604      	mov	r4, r0
 8009c14:	4616      	mov	r6, r2
 8009c16:	460d      	mov	r5, r1
 8009c18:	b929      	cbnz	r1, 8009c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8009c1a:	e03b      	b.n	8009c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c1c:	f7ff fb20 	bl	8009260 <HAL_GetTick>
 8009c20:	1b80      	subs	r0, r0, r6
 8009c22:	4285      	cmp	r5, r0
 8009c24:	d33d      	bcc.n	8009ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	699a      	ldr	r2, [r3, #24]
 8009c2a:	0692      	lsls	r2, r2, #26
 8009c2c:	d446      	bmi.n	8009cbc <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	06d7      	lsls	r7, r2, #27
 8009c32:	d5f3      	bpl.n	8009c1c <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8009c34:	1c69      	adds	r1, r5, #1
 8009c36:	d122      	bne.n	8009c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	0692      	lsls	r2, r2, #26
 8009c3c:	d5fc      	bpl.n	8009c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c3e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c40:	2110      	movs	r1, #16
 8009c42:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c44:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c46:	699a      	ldr	r2, [r3, #24]
 8009c48:	0790      	lsls	r0, r2, #30
 8009c4a:	d501      	bpl.n	8009c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    hi2c->Instance->TXDR = 0x00U;
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c50:	699a      	ldr	r2, [r3, #24]
 8009c52:	07d1      	lsls	r1, r2, #31
 8009c54:	d403      	bmi.n	8009c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c56:	699a      	ldr	r2, [r3, #24]
 8009c58:	f042 0201 	orr.w	r2, r2, #1
 8009c5c:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8009c5e:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c60:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8009c62:	4f1c      	ldr	r7, [pc, #112]	; (8009cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c64:	2604      	movs	r6, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8009c66:	2520      	movs	r5, #32
      return HAL_ERROR;
 8009c68:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009c6a:	403a      	ands	r2, r7
 8009c6c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c6e:	6466      	str	r6, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8009c70:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009c74:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	0697      	lsls	r7, r2, #26
 8009c82:	d4dc      	bmi.n	8009c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c84:	b1e5      	cbz	r5, 8009cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8009c86:	f7ff faeb 	bl	8009260 <HAL_GetTick>
 8009c8a:	1b80      	subs	r0, r0, r6
 8009c8c:	4285      	cmp	r5, r0
 8009c8e:	d317      	bcc.n	8009cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	e7cf      	b.n	8009c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c94:	6803      	ldr	r3, [r0, #0]
 8009c96:	699a      	ldr	r2, [r3, #24]
 8009c98:	0692      	lsls	r2, r2, #26
 8009c9a:	d40f      	bmi.n	8009cbc <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	06d0      	lsls	r0, r2, #27
 8009ca0:	d4c8      	bmi.n	8009c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ca4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca6:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009ca8:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009caa:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009cac:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cb0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cb2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8009cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8009cbc:	2000      	movs	r0, #0
}
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc0:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8009cc2:	2220      	movs	r2, #32
      return HAL_ERROR;
 8009cc4:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8009cc6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8009cca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd4:	fe00e800 	.word	0xfe00e800

08009cd8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d04d      	beq.n	8009d78 <HAL_I2C_Init+0xa0>
{
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cde:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d040      	beq.n	8009d6e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cec:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009cee:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009cf0:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cf4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009cf8:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8009cfa:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009cfc:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8009d00:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8009d02:	f020 0001 	bic.w	r0, r0, #1
 8009d06:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009d08:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009d0a:	6899      	ldr	r1, [r3, #8]
 8009d0c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009d10:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d12:	d028      	beq.n	8009d66 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009d18:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d1a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009d1c:	d102      	bne.n	8009d24 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d22:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d24:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d26:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d28:	4814      	ldr	r0, [pc, #80]	; (8009d7c <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8009d2a:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009d2c:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d2e:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009d30:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d34:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009d36:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009d38:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d3a:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009d3c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d40:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009d42:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d46:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009d48:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8009d4a:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009d4c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d4e:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	f042 0201 	orr.w	r2, r2, #1
 8009d56:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d58:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009d5a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d5e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d6a:	609a      	str	r2, [r3, #8]
 8009d6c:	e7da      	b.n	8009d24 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8009d6e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8009d72:	f007 f8f7 	bl	8010f64 <HAL_I2C_MspInit>
 8009d76:	e7b9      	b.n	8009cec <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8009d78:	2001      	movs	r0, #1
}
 8009d7a:	4770      	bx	lr
 8009d7c:	02008000 	.word	0x02008000

08009d80 <HAL_I2C_Master_Transmit>:
{
 8009d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d84:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8009d88:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d8a:	2c20      	cmp	r4, #32
 8009d8c:	d16a      	bne.n	8009e64 <HAL_I2C_Master_Transmit+0xe4>
    __HAL_LOCK(hi2c);
 8009d8e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8009d92:	2c01      	cmp	r4, #1
 8009d94:	d066      	beq.n	8009e64 <HAL_I2C_Master_Transmit+0xe4>
 8009d96:	4698      	mov	r8, r3
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4691      	mov	r9, r2
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009da2:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8009da4:	f7ff fa5c 	bl	8009260 <HAL_GetTick>
 8009da8:	4605      	mov	r5, r0
 8009daa:	e004      	b.n	8009db6 <HAL_I2C_Master_Transmit+0x36>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009dac:	f7ff fa58 	bl	8009260 <HAL_GetTick>
 8009db0:	1b40      	subs	r0, r0, r5
 8009db2:	2819      	cmp	r0, #25
 8009db4:	d864      	bhi.n	8009e80 <HAL_I2C_Master_Transmit+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	6998      	ldr	r0, [r3, #24]
 8009dba:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8009dbe:	d1f5      	bne.n	8009dac <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009dc0:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009dc2:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8009dc4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8009dc8:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009dcc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009dd0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009dd4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009dd6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009ddc:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dde:	2aff      	cmp	r2, #255	; 0xff
 8009de0:	d972      	bls.n	8009ec8 <HAL_I2C_Master_Transmit+0x148>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009de2:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009de4:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009de6:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009f14 <HAL_I2C_Master_Transmit+0x194>
 8009dea:	4947      	ldr	r1, [pc, #284]	; (8009f08 <HAL_I2C_Master_Transmit+0x188>)
 8009dec:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009df0:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009df2:	4339      	orrs	r1, r7
 8009df4:	430a      	orrs	r2, r1
 8009df6:	605a      	str	r2, [r3, #4]
 8009df8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8009f18 <HAL_I2C_Master_Transmit+0x198>
 8009dfc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8009f1c <HAL_I2C_Master_Transmit+0x19c>
 8009e00:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8009e04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e06:	462a      	mov	r2, r5
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d041      	beq.n	8009e96 <HAL_I2C_Master_Transmit+0x116>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e12:	f7ff fe9b 	bl	8009b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d140      	bne.n	8009e9c <HAL_I2C_Master_Transmit+0x11c>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009e1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e1c:	6821      	ldr	r1, [r4, #0]
 8009e1e:	1c50      	adds	r0, r2, #1
      hi2c->XferSize--;
 8009e20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009e22:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009e24:	3b01      	subs	r3, #1
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009e26:	7812      	ldrb	r2, [r2, #0]
      hi2c->XferSize--;
 8009e28:	b29b      	uxth	r3, r3
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009e2a:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8009e2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009e2e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009e30:	3a01      	subs	r2, #1
 8009e32:	b292      	uxth	r2, r2
 8009e34:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e4      	bne.n	8009e04 <HAL_I2C_Master_Transmit+0x84>
 8009e3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0e0      	beq.n	8009e04 <HAL_I2C_Master_Transmit+0x84>
 8009e42:	1c70      	adds	r0, r6, #1
 8009e44:	d111      	bne.n	8009e6a <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e46:	698b      	ldr	r3, [r1, #24]
 8009e48:	061a      	lsls	r2, r3, #24
 8009e4a:	d5fc      	bpl.n	8009e46 <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e4e:	2bff      	cmp	r3, #255	; 0xff
 8009e50:	d92b      	bls.n	8009eaa <HAL_I2C_Master_Transmit+0x12a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009e52:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e54:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009e56:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e5a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009e5c:	ea43 0308 	orr.w	r3, r3, r8
 8009e60:	604b      	str	r3, [r1, #4]
 8009e62:	e7cf      	b.n	8009e04 <HAL_I2C_Master_Transmit+0x84>
    return HAL_BUSY;
 8009e64:	2002      	movs	r0, #2
}
 8009e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e6a:	698b      	ldr	r3, [r1, #24]
 8009e6c:	061b      	lsls	r3, r3, #24
 8009e6e:	d4ed      	bmi.n	8009e4c <HAL_I2C_Master_Transmit+0xcc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e70:	b136      	cbz	r6, 8009e80 <HAL_I2C_Master_Transmit+0x100>
 8009e72:	f7ff f9f5 	bl	8009260 <HAL_GetTick>
 8009e76:	1b40      	subs	r0, r0, r5
 8009e78:	4286      	cmp	r6, r0
 8009e7a:	d301      	bcc.n	8009e80 <HAL_I2C_Master_Transmit+0x100>
 8009e7c:	6821      	ldr	r1, [r4, #0]
 8009e7e:	e7e0      	b.n	8009e42 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e80:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8009e82:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 8009e84:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8009e86:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8009e8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e96:	f7ff febb 	bl	8009c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e9a:	b330      	cbz	r0, 8009eea <HAL_I2C_Master_Transmit+0x16a>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009e9e:	2b04      	cmp	r3, #4
          return HAL_ERROR;
 8009ea0:	bf0c      	ite	eq
 8009ea2:	2001      	moveq	r0, #1
          return HAL_TIMEOUT;
 8009ea4:	2003      	movne	r0, #3
}
 8009ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8009eaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009eac:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8009eb0:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8009eb2:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009eb4:	ea00 0009 	and.w	r0, r0, r9
 8009eb8:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 8009ebc:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009ebe:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8009ec2:	4303      	orrs	r3, r0
 8009ec4:	604b      	str	r3, [r1, #4]
 8009ec6:	e79d      	b.n	8009e04 <HAL_I2C_Master_Transmit+0x84>
      hi2c->XferSize = hi2c->XferCount;
 8009ec8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009eca:	4a10      	ldr	r2, [pc, #64]	; (8009f0c <HAL_I2C_Master_Transmit+0x18c>)
      hi2c->XferSize = hi2c->XferCount;
 8009ecc:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009ece:	6858      	ldr	r0, [r3, #4]
 8009ed0:	433a      	orrs	r2, r7
 8009ed2:	f8df e040 	ldr.w	lr, [pc, #64]	; 8009f14 <HAL_I2C_Master_Transmit+0x194>
 8009ed6:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8009eda:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009edc:	ea00 010e 	and.w	r1, r0, lr
 8009ee0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	605a      	str	r2, [r3, #4]
 8009ee8:	e786      	b.n	8009df8 <HAL_I2C_Master_Transmit+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8009eee:	4d08      	ldr	r5, [pc, #32]	; (8009f10 <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ef0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	402a      	ands	r2, r5
 8009ef6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009ef8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009efc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f00:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009f04:	e7af      	b.n	8009e66 <HAL_I2C_Master_Transmit+0xe6>
 8009f06:	bf00      	nop
 8009f08:	81ff2000 	.word	0x81ff2000
 8009f0c:	82002000 	.word	0x82002000
 8009f10:	fe00e800 	.word	0xfe00e800
 8009f14:	fc009800 	.word	0xfc009800
 8009f18:	01ff0000 	.word	0x01ff0000
 8009f1c:	fc009c00 	.word	0xfc009c00

08009f20 <HAL_I2C_Master_Receive>:
{
 8009f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f24:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8009f28:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f2a:	2c20      	cmp	r4, #32
 8009f2c:	d16b      	bne.n	800a006 <HAL_I2C_Master_Receive+0xe6>
    __HAL_LOCK(hi2c);
 8009f2e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8009f32:	2c01      	cmp	r4, #1
 8009f34:	d067      	beq.n	800a006 <HAL_I2C_Master_Receive+0xe6>
 8009f36:	4698      	mov	r8, r3
 8009f38:	2301      	movs	r3, #1
 8009f3a:	4691      	mov	r9, r2
 8009f3c:	460f      	mov	r7, r1
 8009f3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009f42:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8009f44:	f7ff f98c 	bl	8009260 <HAL_GetTick>
 8009f48:	4605      	mov	r5, r0
 8009f4a:	e004      	b.n	8009f56 <HAL_I2C_Master_Receive+0x36>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f4c:	f7ff f988 	bl	8009260 <HAL_GetTick>
 8009f50:	1b40      	subs	r0, r0, r5
 8009f52:	2819      	cmp	r0, #25
 8009f54:	d863      	bhi.n	800a01e <HAL_I2C_Master_Receive+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	6998      	ldr	r0, [r3, #24]
 8009f5a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8009f5e:	d1f5      	bne.n	8009f4c <HAL_I2C_Master_Receive+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009f60:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009f62:	2122      	movs	r1, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8009f64:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8009f68:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009f6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009f70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f74:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009f76:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009f7c:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f7e:	2aff      	cmp	r2, #255	; 0xff
 8009f80:	d971      	bls.n	800a066 <HAL_I2C_Master_Receive+0x146>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f82:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f84:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f86:	f8df c128 	ldr.w	ip, [pc, #296]	; 800a0b0 <HAL_I2C_Master_Receive+0x190>
 8009f8a:	4946      	ldr	r1, [pc, #280]	; (800a0a4 <HAL_I2C_Master_Receive+0x184>)
 8009f8c:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f90:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f92:	4339      	orrs	r1, r7
 8009f94:	430a      	orrs	r2, r1
 8009f96:	605a      	str	r2, [r3, #4]
 8009f98:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800a0b4 <HAL_I2C_Master_Receive+0x194>
 8009f9c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800a0b8 <HAL_I2C_Master_Receive+0x198>
 8009fa0:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8009fa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d040      	beq.n	800a034 <HAL_I2C_Master_Receive+0x114>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fb2:	f7ff fd4b 	bl	8009a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d13f      	bne.n	800a03a <HAL_I2C_Master_Receive+0x11a>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8009fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fbc:	6822      	ldr	r2, [r4, #0]
 8009fbe:	1c59      	adds	r1, r3, #1
 8009fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009fc2:	6261      	str	r1, [r4, #36]	; 0x24
 8009fc4:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8009fc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009fc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009fca:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8009fcc:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8009fce:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8009fd0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8009fd2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009fd4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e4      	bne.n	8009fa4 <HAL_I2C_Master_Receive+0x84>
 8009fda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0e0      	beq.n	8009fa4 <HAL_I2C_Master_Receive+0x84>
 8009fe2:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	d111      	bne.n	800a00c <HAL_I2C_Master_Receive+0xec>
 8009fe8:	6993      	ldr	r3, [r2, #24]
 8009fea:	0619      	lsls	r1, r3, #24
 8009fec:	d5fc      	bpl.n	8009fe8 <HAL_I2C_Master_Receive+0xc8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009ff0:	2bff      	cmp	r3, #255	; 0xff
 8009ff2:	d929      	bls.n	800a048 <HAL_I2C_Master_Receive+0x128>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009ff4:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ff6:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009ff8:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ffc:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009ffe:	ea43 0308 	orr.w	r3, r3, r8
 800a002:	6053      	str	r3, [r2, #4]
 800a004:	e7ce      	b.n	8009fa4 <HAL_I2C_Master_Receive+0x84>
    return HAL_BUSY;
 800a006:	2002      	movs	r0, #2
}
 800a008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a00c:	6993      	ldr	r3, [r2, #24]
 800a00e:	061b      	lsls	r3, r3, #24
 800a010:	d4ed      	bmi.n	8009fee <HAL_I2C_Master_Receive+0xce>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a012:	b126      	cbz	r6, 800a01e <HAL_I2C_Master_Receive+0xfe>
 800a014:	f7ff f924 	bl	8009260 <HAL_GetTick>
 800a018:	1b40      	subs	r0, r0, r5
 800a01a:	4286      	cmp	r6, r0
 800a01c:	d2e1      	bcs.n	8009fe2 <HAL_I2C_Master_Receive+0xc2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a01e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800a020:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 800a022:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 800a024:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800a028:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800a030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a034:	f7ff fdec 	bl	8009c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a038:	b330      	cbz	r0, 800a088 <HAL_I2C_Master_Receive+0x168>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a03a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a03c:	2b04      	cmp	r3, #4
          return HAL_ERROR;
 800a03e:	bf0c      	ite	eq
 800a040:	2001      	moveq	r0, #1
          return HAL_TIMEOUT;
 800a042:	2003      	movne	r0, #3
}
 800a044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 800a048:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a04a:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 800a04e:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800a050:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a052:	ea00 0009 	and.w	r0, r0, r9
 800a056:	fa5f fc81 	uxtb.w	ip, r1
          hi2c->XferSize = hi2c->XferCount;
 800a05a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a05c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800a060:	4303      	orrs	r3, r0
 800a062:	6053      	str	r3, [r2, #4]
 800a064:	e79e      	b.n	8009fa4 <HAL_I2C_Master_Receive+0x84>
      hi2c->XferSize = hi2c->XferCount;
 800a066:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a068:	4a0f      	ldr	r2, [pc, #60]	; (800a0a8 <HAL_I2C_Master_Receive+0x188>)
      hi2c->XferSize = hi2c->XferCount;
 800a06a:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a06c:	6858      	ldr	r0, [r3, #4]
 800a06e:	433a      	orrs	r2, r7
 800a070:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800a0b0 <HAL_I2C_Master_Receive+0x190>
 800a074:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 800a078:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a07a:	ea00 010e 	and.w	r1, r0, lr
 800a07e:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800a082:	430a      	orrs	r2, r1
 800a084:	605a      	str	r2, [r3, #4]
 800a086:	e787      	b.n	8009f98 <HAL_I2C_Master_Receive+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800a08c:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <HAL_I2C_Master_Receive+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a08e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a090:	685a      	ldr	r2, [r3, #4]
 800a092:	402a      	ands	r2, r5
 800a094:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a096:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a09a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a09e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a0a2:	e7b1      	b.n	800a008 <HAL_I2C_Master_Receive+0xe8>
 800a0a4:	81ff2400 	.word	0x81ff2400
 800a0a8:	82002400 	.word	0x82002400
 800a0ac:	fe00e800 	.word	0xfe00e800
 800a0b0:	fc009800 	.word	0xfc009800
 800a0b4:	01ff0000 	.word	0x01ff0000
 800a0b8:	fc009c00 	.word	0xfc009c00

0800a0bc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b20      	cmp	r3, #32
{
 800a0c4:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0c6:	d11f      	bne.n	800a108 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800a0cc:	2a01      	cmp	r2, #1
 800a0ce:	d01b      	beq.n	800a108 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0d0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0d2:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0d4:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0d6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800a0da:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 800a0dc:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 800a0de:	f025 0501 	bic.w	r5, r5, #1
 800a0e2:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a0e4:	6815      	ldr	r5, [r2, #0]
 800a0e6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800a0ea:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800a0ec:	6815      	ldr	r5, [r2, #0]
 800a0ee:	4329      	orrs	r1, r5
 800a0f0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a0f2:	6811      	ldr	r1, [r2, #0]
 800a0f4:	f041 0101 	orr.w	r1, r1, #1
 800a0f8:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800a0fa:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a0fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a102:	4620      	mov	r0, r4
 800a104:	bc70      	pop	{r4, r5, r6}
 800a106:	4770      	bx	lr
    return HAL_BUSY;
 800a108:	2402      	movs	r4, #2
}
 800a10a:	4620      	mov	r0, r4
 800a10c:	bc70      	pop	{r4, r5, r6}
 800a10e:	4770      	bx	lr

0800a110 <HAL_LTDC_Init>:
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800a110:	2800      	cmp	r0, #0
 800a112:	d071      	beq.n	800a1f8 <HAL_LTDC_Init+0xe8>
{
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800a116:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800a11a:	4604      	mov	r4, r0
 800a11c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a120:	2b00      	cmp	r3, #0
 800a122:	d064      	beq.n	800a1ee <HAL_LTDC_Init+0xde>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a124:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a126:	2502      	movs	r5, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a128:	68e6      	ldr	r6, [r4, #12]

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800a12a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a12c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a130:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800a132:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a134:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a138:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a13c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a13e:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a140:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a142:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a146:	4e2d      	ldr	r6, [pc, #180]	; (800a1fc <HAL_LTDC_Init+0xec>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a148:	6198      	str	r0, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a14a:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a14c:	6998      	ldr	r0, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a14e:	2501      	movs	r5, #1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a150:	4302      	orrs	r2, r0
 800a152:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a154:	689a      	ldr	r2, [r3, #8]
 800a156:	4032      	ands	r2, r6
 800a158:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a15a:	6898      	ldr	r0, [r3, #8]
 800a15c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800a160:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a162:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a166:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a16a:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a16c:	68d8      	ldr	r0, [r3, #12]
 800a16e:	4030      	ands	r0, r6
 800a170:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a172:	68da      	ldr	r2, [r3, #12]
 800a174:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800a178:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a17a:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a17e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a182:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a184:	691a      	ldr	r2, [r3, #16]
 800a186:	4032      	ands	r2, r6
 800a188:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a18a:	6918      	ldr	r0, [r3, #16]
 800a18c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16);
 800a190:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a192:	ea40 000c 	orr.w	r0, r0, ip
 800a196:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a198:	6958      	ldr	r0, [r3, #20]
 800a19a:	4006      	ands	r6, r0
 800a19c:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a19e:	695a      	ldr	r2, [r3, #20]
 800a1a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a1a2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a1a6:	4302      	orrs	r2, r0
 800a1a8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a1aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800a1ac:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a1b0:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800a1b4:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a1b8:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a1ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a1bc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800a1c0:	4302      	orrs	r2, r0

  return HAL_OK;
 800a1c2:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a1c4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800a1c8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a1cc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800a1ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1d0:	f042 0204 	orr.w	r2, r2, #4
 800a1d4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800a1d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1d8:	f042 0202 	orr.w	r2, r2, #2
 800a1dc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800a1de:	699a      	ldr	r2, [r3, #24]
 800a1e0:	432a      	orrs	r2, r5
 800a1e2:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800a1e4:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a1e8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800a1ee:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800a1f2:	f006 ff49 	bl	8011088 <HAL_LTDC_MspInit>
 800a1f6:	e795      	b.n	800a124 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800a1f8:	2001      	movs	r0, #1
}
 800a1fa:	4770      	bx	lr
 800a1fc:	f000f800 	.word	0xf000f800

0800a200 <HAL_LTDC_ConfigLayer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 800a200:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800a204:	2b01      	cmp	r3, #1
 800a206:	f000 80b9 	beq.w	800a37c <HAL_LTDC_ConfigLayer+0x17c>
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a20a:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a20e:	2302      	movs	r3, #2
{   
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a214:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a218:	6806      	ldr	r6, [r0, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a21a:	f04f 0834 	mov.w	r8, #52	; 0x34
 800a21e:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a220:	eb06 040c 	add.w	r4, r6, ip
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a224:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a228:	fb08 0202 	mla	r2, r8, r2, r0
 800a22c:	4689      	mov	r9, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a22e:	68f1      	ldr	r1, [r6, #12]
 800a230:	4607      	mov	r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a232:	6863      	ldr	r3, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a234:	f102 0838 	add.w	r8, r2, #56	; 0x38
  __HAL_LOCK(hltdc);
 800a238:	f04f 0201 	mov.w	r2, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a23c:	f3c1 4a0b 	ubfx	sl, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a240:	f403 4e70 	and.w	lr, r3, #61440	; 0xf000
  __HAL_LOCK(hltdc);
 800a244:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a248:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a24c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800a250:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a254:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800a258:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a25c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800a260:	f8d9 3000 	ldr.w	r3, [r9]
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a264:	4848      	ldr	r0, [pc, #288]	; (800a388 <HAL_LTDC_ConfigLayer+0x188>)
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a266:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a26a:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a26c:	f8c4 e004 	str.w	lr, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a270:	f8d5 e000 	ldr.w	lr, [r5]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a274:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a276:	68f1      	ldr	r1, [r6, #12]
 800a278:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a27c:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a280:	f3c1 410b 	ubfx	r1, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a284:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a286:	4441      	add	r1, r8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a288:	f8d5 8010 	ldr.w	r8, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a28c:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a28e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800a292:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a296:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a298:	68f1      	ldr	r1, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a29a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a29e:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a2a2:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a2a6:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a2a8:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a2ac:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a2b0:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800a2b4:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 800a2b8:	445a      	add	r2, fp
 800a2ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a2be:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	f022 0207 	bic.w	r2, r2, #7
 800a2c6:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a2c8:	f8c4 8010 	str.w	r8, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a2cc:	69a2      	ldr	r2, [r4, #24]
 800a2ce:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800a2d0:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800a2d4:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a2d8:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a2da:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800a2de:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800a2e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a2e6:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a2e8:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a2ec:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a2ee:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a2f2:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a2f4:	6962      	ldr	r2, [r4, #20]
 800a2f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a2fa:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a2fc:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a300:	69e2      	ldr	r2, [r4, #28]
 800a302:	4010      	ands	r0, r2
 800a304:	61e0      	str	r0, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a306:	61e1      	str	r1, [r4, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a308:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a30a:	2200      	movs	r2, #0
 800a30c:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a30e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a310:	62a2      	str	r2, [r4, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a312:	f1b8 0f00 	cmp.w	r8, #0
 800a316:	d00b      	beq.n	800a330 <HAL_LTDC_ConfigLayer+0x130>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a318:	f1b8 0f01 	cmp.w	r8, #1
 800a31c:	d030      	beq.n	800a380 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a31e:	f1a8 0202 	sub.w	r2, r8, #2
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a322:	2a02      	cmp	r2, #2
 800a324:	d902      	bls.n	800a32c <HAL_LTDC_ConfigLayer+0x12c>
 800a326:	f1b8 0f07 	cmp.w	r8, #7
 800a32a:	d12b      	bne.n	800a384 <HAL_LTDC_ConfigLayer+0x184>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 800a32c:	2202      	movs	r2, #2
 800a32e:	e000      	b.n	800a332 <HAL_LTDC_ConfigLayer+0x132>
    tmp = 4;
 800a330:	2204      	movs	r2, #4
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a332:	eba3 030e 	sub.w	r3, r3, lr

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a336:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a33e:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a340:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a344:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a346:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a348:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a350:	4a0e      	ldr	r2, [pc, #56]	; (800a38c <HAL_LTDC_ConfigLayer+0x18c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a352:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 800a354:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a356:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a358:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a35a:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a35c:	401a      	ands	r2, r3
 800a35e:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a360:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a364:	f856 300c 	ldr.w	r3, [r6, ip]
 800a368:	432b      	orrs	r3, r5
 800a36a:	f846 300c 	str.w	r3, [r6, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a36e:	6275      	str	r5, [r6, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a370:	f887 50a1 	strb.w	r5, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800a374:	f887 10a0 	strb.w	r1, [r7, #160]	; 0xa0
}
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 800a37c:	2002      	movs	r0, #2
}
 800a37e:	4770      	bx	lr
    tmp = 3;
 800a380:	2203      	movs	r2, #3
 800a382:	e7d6      	b.n	800a332 <HAL_LTDC_ConfigLayer+0x132>
    tmp = 1;
 800a384:	2201      	movs	r2, #1
 800a386:	e7d4      	b.n	800a332 <HAL_LTDC_ConfigLayer+0x132>
 800a388:	fffff8f8 	.word	0xfffff8f8
 800a38c:	fffff800 	.word	0xfffff800

0800a390 <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 800a390:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800a394:	2b01      	cmp	r3, #1
{
 800a396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	b083      	sub	sp, #12
  __HAL_LOCK(hltdc);
 800a39c:	f000 80b4 	beq.w	800a508 <HAL_LTDC_SetAlpha+0x178>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a3a0:	01d7      	lsls	r7, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a3a2:	6806      	ldr	r6, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3a4:	2302      	movs	r3, #2
  pLayerCfg->Alpha = Alpha;
 800a3a6:	2434      	movs	r4, #52	; 0x34
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a3a8:	3784      	adds	r7, #132	; 0x84
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a3aa:	f04f 0800 	mov.w	r8, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3ae:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a3b2:	19f3      	adds	r3, r6, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a3b4:	68f5      	ldr	r5, [r6, #12]
  pLayerCfg->Alpha = Alpha;
 800a3b6:	fb04 0402 	mla	r4, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a3ba:	f8d3 9004 	ldr.w	r9, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a3be:	f3c5 4c0b 	ubfx	ip, r5, #16, #12
 800a3c2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a3c4:	f409 4970 	and.w	r9, r9, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a3c8:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  pLayerCfg->Alpha = Alpha;
 800a3cc:	64e1      	str	r1, [r4, #76]	; 0x4c
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a3ce:	eb0c 0a05 	add.w	sl, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a3d2:	f8c3 9004 	str.w	r9, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a3d6:	f10e 0b01 	add.w	fp, lr, #1
 800a3da:	f8d6 c00c 	ldr.w	ip, [r6, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a3de:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a3e2:	f3cc 4c0b 	ubfx	ip, ip, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a3e6:	9501      	str	r5, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a3e8:	6c25      	ldr	r5, [r4, #64]	; 0x40
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a3ea:	44dc      	add	ip, fp
 800a3ec:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a3f0:	f105 0a01 	add.w	sl, r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a3f4:	6d25      	ldr	r5, [r4, #80]	; 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a3f6:	f8c3 c004 	str.w	ip, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a3fa:	f8d6 b00c 	ldr.w	fp, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a3fe:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a402:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a406:	f40c 4c70 	and.w	ip, ip, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a40a:	44d9      	add	r9, fp
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a40c:	f8c3 c008 	str.w	ip, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a410:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800a414:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800a418:	44e2      	add	sl, ip
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a41a:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a41e:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800a422:	f894 a069 	ldrb.w	sl, [r4, #105]	; 0x69
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a426:	ea4c 6c05 	orr.w	ip, ip, r5, lsl #24
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a42a:	f8c3 9008 	str.w	r9, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a42e:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800a432:	f894 906a 	ldrb.w	r9, [r4, #106]	; 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a436:	f8d3 a010 	ldr.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a43a:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a43e:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a442:	f02a 0a07 	bic.w	sl, sl, #7
 800a446:	f8c3 a010 	str.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a44a:	f8c3 9010 	str.w	r9, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a44e:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800a452:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a456:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a45a:	f8d3 c014 	ldr.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a45e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a524 <HAL_LTDC_SetAlpha+0x194>
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a462:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 800a466:	f8c3 c014 	str.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a46a:	6159      	str	r1, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a46c:	69d9      	ldr	r1, [r3, #28]
 800a46e:	ea01 0a0a 	and.w	sl, r1, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a472:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	; 0x54
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a476:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a478:	ea41 010c 	orr.w	r1, r1, ip
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a47c:	f8c3 a01c 	str.w	sl, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a480:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a482:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a484:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a488:	629c      	str	r4, [r3, #40]	; 0x28
  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a48a:	f1b9 0f00 	cmp.w	r9, #0
 800a48e:	d00c      	beq.n	800a4aa <HAL_LTDC_SetAlpha+0x11a>
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a490:	f1b9 0f01 	cmp.w	r9, #1
 800a494:	d03d      	beq.n	800a512 <HAL_LTDC_SetAlpha+0x182>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a496:	f1a9 0102 	sub.w	r1, r9, #2
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a49a:	2902      	cmp	r1, #2
 800a49c:	d902      	bls.n	800a4a4 <HAL_LTDC_SetAlpha+0x114>
 800a49e:	f1b9 0f07 	cmp.w	r9, #7
 800a4a2:	d139      	bne.n	800a518 <HAL_LTDC_SetAlpha+0x188>
    tmp = 2;
 800a4a4:	f04f 0c02 	mov.w	ip, #2
 800a4a8:	e001      	b.n	800a4ae <HAL_LTDC_SetAlpha+0x11e>
    tmp = 4;
 800a4aa:	f04f 0c04 	mov.w	ip, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a4ae:	9901      	ldr	r1, [sp, #4]
 800a4b0:	2434      	movs	r4, #52	; 0x34
 800a4b2:	eba1 050e 	sub.w	r5, r1, lr
 800a4b6:	fb04 0202 	mla	r2, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a4ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a4bc:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800a4be:	fb0c f505 	mul.w	r5, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a4c2:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a4c6:	f8d2 e064 	ldr.w	lr, [r2, #100]	; 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a4ca:	fb04 f40c 	mul.w	r4, r4, ip
 800a4ce:	3503      	adds	r5, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a4d0:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a4d2:	f04f 0c01 	mov.w	ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a4d6:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a4da:	4911      	ldr	r1, [pc, #68]	; (800a520 <HAL_LTDC_SetAlpha+0x190>)
  __HAL_UNLOCK(hltdc);
 800a4dc:	2200      	movs	r2, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a4de:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a4e0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  return HAL_OK;
 800a4e2:	4614      	mov	r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a4e4:	4029      	ands	r1, r5
 800a4e6:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a4e8:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a4ec:	59f3      	ldr	r3, [r6, r7]
 800a4ee:	ea43 030c 	orr.w	r3, r3, ip
 800a4f2:	51f3      	str	r3, [r6, r7]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a4f4:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800a4f8:	f880 c0a1 	strb.w	ip, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800a4fc:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 800a500:	4620      	mov	r0, r4
 800a502:	b003      	add	sp, #12
 800a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 800a508:	2402      	movs	r4, #2
}
 800a50a:	4620      	mov	r0, r4
 800a50c:	b003      	add	sp, #12
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3;
 800a512:	f04f 0c03 	mov.w	ip, #3
 800a516:	e7ca      	b.n	800a4ae <HAL_LTDC_SetAlpha+0x11e>
    tmp = 1;
 800a518:	f04f 0c01 	mov.w	ip, #1
 800a51c:	e7c7      	b.n	800a4ae <HAL_LTDC_SetAlpha+0x11e>
 800a51e:	bf00      	nop
 800a520:	fffff800 	.word	0xfffff800
 800a524:	fffff8f8 	.word	0xfffff8f8

0800a528 <HAL_LTDC_GetState>:
  return hltdc->State;
 800a528:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop

0800a530 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800a530:	4a1b      	ldr	r2, [pc, #108]	; (800a5a0 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a532:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800a534:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a536:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800a53a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800a53c:	6411      	str	r1, [r2, #64]	; 0x40
{
 800a53e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800a540:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a542:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800a544:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a548:	9201      	str	r2, [sp, #4]
 800a54a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a552:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a554:	f7fe fe84 	bl	8009260 <HAL_GetTick>
 800a558:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a55a:	e005      	b.n	800a568 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a55c:	f7fe fe80 	bl	8009260 <HAL_GetTick>
 800a560:	1b40      	subs	r0, r0, r5
 800a562:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a566:	d817      	bhi.n	800a598 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a568:	6863      	ldr	r3, [r4, #4]
 800a56a:	03da      	lsls	r2, r3, #15
 800a56c:	d5f6      	bpl.n	800a55c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a56e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a570:	4d0c      	ldr	r5, [pc, #48]	; (800a5a4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a576:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a578:	f7fe fe72 	bl	8009260 <HAL_GetTick>
 800a57c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a57e:	e005      	b.n	800a58c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a580:	f7fe fe6e 	bl	8009260 <HAL_GetTick>
 800a584:	1b00      	subs	r0, r0, r4
 800a586:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a58a:	d805      	bhi.n	800a598 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a58c:	686b      	ldr	r3, [r5, #4]
 800a58e:	039b      	lsls	r3, r3, #14
 800a590:	d5f6      	bpl.n	800a580 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800a592:	2000      	movs	r0, #0
}
 800a594:	b003      	add	sp, #12
 800a596:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800a598:	2003      	movs	r0, #3
}
 800a59a:	b003      	add	sp, #12
 800a59c:	bd30      	pop	{r4, r5, pc}
 800a59e:	bf00      	nop
 800a5a0:	40023800 	.word	0x40023800
 800a5a4:	40007000 	.word	0x40007000

0800a5a8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f000 8134 	beq.w	800a816 <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5ae:	6803      	ldr	r3, [r0, #0]
{
 800a5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5b4:	07dd      	lsls	r5, r3, #31
{
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5ba:	d535      	bpl.n	800a628 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5bc:	49ab      	ldr	r1, [pc, #684]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a5be:	688a      	ldr	r2, [r1, #8]
 800a5c0:	f002 020c 	and.w	r2, r2, #12
 800a5c4:	2a04      	cmp	r2, #4
 800a5c6:	f000 80fe 	beq.w	800a7c6 <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a5ca:	688a      	ldr	r2, [r1, #8]
 800a5cc:	f002 020c 	and.w	r2, r2, #12
 800a5d0:	2a08      	cmp	r2, #8
 800a5d2:	f000 80f4 	beq.w	800a7be <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5dc:	d010      	beq.n	800a600 <HAL_RCC_OscConfig+0x58>
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 811b 	beq.w	800a81a <HAL_RCC_OscConfig+0x272>
 800a5e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5e8:	4ba0      	ldr	r3, [pc, #640]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	f000 8162 	beq.w	800a8b4 <HAL_RCC_OscConfig+0x30c>
 800a5f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	e004      	b.n	800a60a <HAL_RCC_OscConfig+0x62>
 800a600:	4a9a      	ldr	r2, [pc, #616]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a602:	6813      	ldr	r3, [r2, #0]
 800a604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a608:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a60a:	f7fe fe29 	bl	8009260 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a60e:	4d97      	ldr	r5, [pc, #604]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 800a610:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a612:	e005      	b.n	800a620 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a614:	f7fe fe24 	bl	8009260 <HAL_GetTick>
 800a618:	1b80      	subs	r0, r0, r6
 800a61a:	2864      	cmp	r0, #100	; 0x64
 800a61c:	f200 80ee 	bhi.w	800a7fc <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	039a      	lsls	r2, r3, #14
 800a624:	d5f6      	bpl.n	800a614 <HAL_RCC_OscConfig+0x6c>
 800a626:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a628:	079f      	lsls	r7, r3, #30
 800a62a:	d442      	bmi.n	800a6b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a62c:	071a      	lsls	r2, r3, #28
 800a62e:	d517      	bpl.n	800a660 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a630:	6963      	ldr	r3, [r4, #20]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 80b0 	beq.w	800a798 <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a638:	4b8c      	ldr	r3, [pc, #560]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a63a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a63c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a644:	f7fe fe0c 	bl	8009260 <HAL_GetTick>
 800a648:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a64a:	e005      	b.n	800a658 <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a64c:	f7fe fe08 	bl	8009260 <HAL_GetTick>
 800a650:	1b80      	subs	r0, r0, r6
 800a652:	2802      	cmp	r0, #2
 800a654:	f200 80d2 	bhi.w	800a7fc <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a658:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a65a:	079b      	lsls	r3, r3, #30
 800a65c:	d5f6      	bpl.n	800a64c <HAL_RCC_OscConfig+0xa4>
 800a65e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a660:	075d      	lsls	r5, r3, #29
 800a662:	d56b      	bpl.n	800a73c <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a664:	4b81      	ldr	r3, [pc, #516]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a668:	00d0      	lsls	r0, r2, #3
 800a66a:	f100 80ed 	bmi.w	800a848 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a66e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800a670:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a672:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a676:	641a      	str	r2, [r3, #64]	; 0x40
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a682:	4b7b      	ldr	r3, [pc, #492]	; (800a870 <HAL_RCC_OscConfig+0x2c8>)
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	05d1      	lsls	r1, r2, #23
 800a688:	f140 80a7 	bpl.w	800a7da <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a68c:	68a3      	ldr	r3, [r4, #8]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d039      	beq.n	800a706 <HAL_RCC_OscConfig+0x15e>
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 80da 	beq.w	800a84c <HAL_RCC_OscConfig+0x2a4>
 800a698:	2b05      	cmp	r3, #5
 800a69a:	4b74      	ldr	r3, [pc, #464]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a69c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a69e:	f000 8111 	beq.w	800a8c4 <HAL_RCC_OscConfig+0x31c>
 800a6a2:	f022 0201 	bic.w	r2, r2, #1
 800a6a6:	671a      	str	r2, [r3, #112]	; 0x70
 800a6a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6aa:	f022 0204 	bic.w	r2, r2, #4
 800a6ae:	671a      	str	r2, [r3, #112]	; 0x70
 800a6b0:	e02e      	b.n	800a710 <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a6b2:	4a6e      	ldr	r2, [pc, #440]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a6b4:	6891      	ldr	r1, [r2, #8]
 800a6b6:	f011 0f0c 	tst.w	r1, #12
 800a6ba:	d062      	beq.n	800a782 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a6bc:	6891      	ldr	r1, [r2, #8]
 800a6be:	f001 010c 	and.w	r1, r1, #12
 800a6c2:	2908      	cmp	r1, #8
 800a6c4:	d05a      	beq.n	800a77c <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 80df 	beq.w	800a88c <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 800a6ce:	4b67      	ldr	r3, [pc, #412]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a6d0:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6d2:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 800a6d4:	f042 0201 	orr.w	r2, r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a6da:	f7fe fdc1 	bl	8009260 <HAL_GetTick>
 800a6de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6e0:	e005      	b.n	800a6ee <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6e2:	f7fe fdbd 	bl	8009260 <HAL_GetTick>
 800a6e6:	1b80      	subs	r0, r0, r6
 800a6e8:	2802      	cmp	r0, #2
 800a6ea:	f200 8087 	bhi.w	800a7fc <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6ee:	682b      	ldr	r3, [r5, #0]
 800a6f0:	0798      	lsls	r0, r3, #30
 800a6f2:	d5f6      	bpl.n	800a6e2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	6922      	ldr	r2, [r4, #16]
 800a6f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a6fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	e792      	b.n	800a62c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a706:	4a59      	ldr	r2, [pc, #356]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a708:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a710:	f7fe fda6 	bl	8009260 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a714:	4e55      	ldr	r6, [pc, #340]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 800a716:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a718:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a71c:	e005      	b.n	800a72a <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a71e:	f7fe fd9f 	bl	8009260 <HAL_GetTick>
 800a722:	eba0 0008 	sub.w	r0, r0, r8
 800a726:	42b8      	cmp	r0, r7
 800a728:	d868      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a72a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a72c:	079b      	lsls	r3, r3, #30
 800a72e:	d5f6      	bpl.n	800a71e <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a730:	b125      	cbz	r5, 800a73c <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a732:	4a4e      	ldr	r2, [pc, #312]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a734:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a73a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a73c:	69a3      	ldr	r3, [r4, #24]
 800a73e:	b1cb      	cbz	r3, 800a774 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a740:	4a4a      	ldr	r2, [pc, #296]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a742:	6891      	ldr	r1, [r2, #8]
 800a744:	f001 010c 	and.w	r1, r1, #12
 800a748:	2908      	cmp	r1, #8
 800a74a:	d021      	beq.n	800a790 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a74c:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a74e:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a750:	f000 80c0 	beq.w	800a8d4 <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a758:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 800a75a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a75c:	f7fe fd80 	bl	8009260 <HAL_GetTick>
 800a760:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a762:	e004      	b.n	800a76e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a764:	f7fe fd7c 	bl	8009260 <HAL_GetTick>
 800a768:	1b40      	subs	r0, r0, r5
 800a76a:	2802      	cmp	r0, #2
 800a76c:	d846      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	019b      	lsls	r3, r3, #6
 800a772:	d4f7      	bmi.n	800a764 <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800a774:	2000      	movs	r0, #0
}
 800a776:	b002      	add	sp, #8
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a77c:	6852      	ldr	r2, [r2, #4]
 800a77e:	0256      	lsls	r6, r2, #9
 800a780:	d4a1      	bmi.n	800a6c6 <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a782:	4a3a      	ldr	r2, [pc, #232]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a784:	6812      	ldr	r2, [r2, #0]
 800a786:	0795      	lsls	r5, r2, #30
 800a788:	d53c      	bpl.n	800a804 <HAL_RCC_OscConfig+0x25c>
 800a78a:	68e2      	ldr	r2, [r4, #12]
 800a78c:	2a01      	cmp	r2, #1
 800a78e:	d039      	beq.n	800a804 <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 800a790:	2001      	movs	r0, #1
}
 800a792:	b002      	add	sp, #8
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800a798:	4b34      	ldr	r3, [pc, #208]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a79a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a79c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800a79e:	f022 0201 	bic.w	r2, r2, #1
 800a7a2:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a7a4:	f7fe fd5c 	bl	8009260 <HAL_GetTick>
 800a7a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7aa:	e004      	b.n	800a7b6 <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7ac:	f7fe fd58 	bl	8009260 <HAL_GetTick>
 800a7b0:	1b80      	subs	r0, r0, r6
 800a7b2:	2802      	cmp	r0, #2
 800a7b4:	d822      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a7b8:	079f      	lsls	r7, r3, #30
 800a7ba:	d4f7      	bmi.n	800a7ac <HAL_RCC_OscConfig+0x204>
 800a7bc:	e74f      	b.n	800a65e <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7be:	684a      	ldr	r2, [r1, #4]
 800a7c0:	0250      	lsls	r0, r2, #9
 800a7c2:	f57f af08 	bpl.w	800a5d6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7c6:	4a29      	ldr	r2, [pc, #164]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a7c8:	6812      	ldr	r2, [r2, #0]
 800a7ca:	0391      	lsls	r1, r2, #14
 800a7cc:	f57f af2c 	bpl.w	800a628 <HAL_RCC_OscConfig+0x80>
 800a7d0:	6862      	ldr	r2, [r4, #4]
 800a7d2:	2a00      	cmp	r2, #0
 800a7d4:	f47f af28 	bne.w	800a628 <HAL_RCC_OscConfig+0x80>
 800a7d8:	e7da      	b.n	800a790 <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 800a7da:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7dc:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800a7de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a7e4:	f7fe fd3c 	bl	8009260 <HAL_GetTick>
 800a7e8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7ea:	6833      	ldr	r3, [r6, #0]
 800a7ec:	05da      	lsls	r2, r3, #23
 800a7ee:	f53f af4d 	bmi.w	800a68c <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a7f2:	f7fe fd35 	bl	8009260 <HAL_GetTick>
 800a7f6:	1bc0      	subs	r0, r0, r7
 800a7f8:	2864      	cmp	r0, #100	; 0x64
 800a7fa:	d9f6      	bls.n	800a7ea <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 800a7fc:	2003      	movs	r0, #3
}
 800a7fe:	b002      	add	sp, #8
 800a800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a804:	4919      	ldr	r1, [pc, #100]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a806:	6920      	ldr	r0, [r4, #16]
 800a808:	680a      	ldr	r2, [r1, #0]
 800a80a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800a80e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800a812:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a814:	e70a      	b.n	800a62c <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800a816:	2001      	movs	r0, #1
}
 800a818:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
 800a81c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a81e:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a820:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a82c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a82e:	f7fe fd17 	bl	8009260 <HAL_GetTick>
 800a832:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a834:	e004      	b.n	800a840 <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a836:	f7fe fd13 	bl	8009260 <HAL_GetTick>
 800a83a:	1b80      	subs	r0, r0, r6
 800a83c:	2864      	cmp	r0, #100	; 0x64
 800a83e:	d8dd      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	039b      	lsls	r3, r3, #14
 800a844:	d4f7      	bmi.n	800a836 <HAL_RCC_OscConfig+0x28e>
 800a846:	e6ee      	b.n	800a626 <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 800a848:	2500      	movs	r5, #0
 800a84a:	e71a      	b.n	800a682 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a84c:	4b07      	ldr	r3, [pc, #28]	; (800a86c <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a84e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a854:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a856:	f022 0201 	bic.w	r2, r2, #1
 800a85a:	671a      	str	r2, [r3, #112]	; 0x70
 800a85c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a85e:	f022 0204 	bic.w	r2, r2, #4
 800a862:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a864:	f7fe fcfc 	bl	8009260 <HAL_GetTick>
 800a868:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a86a:	e008      	b.n	800a87e <HAL_RCC_OscConfig+0x2d6>
 800a86c:	40023800 	.word	0x40023800
 800a870:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a874:	f7fe fcf4 	bl	8009260 <HAL_GetTick>
 800a878:	1bc0      	subs	r0, r0, r7
 800a87a:	4540      	cmp	r0, r8
 800a87c:	d8be      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a87e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a880:	0798      	lsls	r0, r3, #30
 800a882:	d4f7      	bmi.n	800a874 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 800a884:	2d00      	cmp	r5, #0
 800a886:	f43f af59 	beq.w	800a73c <HAL_RCC_OscConfig+0x194>
 800a88a:	e752      	b.n	800a732 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 800a88c:	4b2b      	ldr	r3, [pc, #172]	; (800a93c <HAL_RCC_OscConfig+0x394>)
 800a88e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a890:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800a892:	f022 0201 	bic.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a898:	f7fe fce2 	bl	8009260 <HAL_GetTick>
 800a89c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a89e:	e004      	b.n	800a8aa <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8a0:	f7fe fcde 	bl	8009260 <HAL_GetTick>
 800a8a4:	1b80      	subs	r0, r0, r6
 800a8a6:	2802      	cmp	r0, #2
 800a8a8:	d8a8      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	0799      	lsls	r1, r3, #30
 800a8ae:	d4f7      	bmi.n	800a8a0 <HAL_RCC_OscConfig+0x2f8>
 800a8b0:	6823      	ldr	r3, [r4, #0]
 800a8b2:	e6bb      	b.n	800a62c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a8c0:	601a      	str	r2, [r3, #0]
 800a8c2:	e6a2      	b.n	800a60a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8c4:	f042 0204 	orr.w	r2, r2, #4
 800a8c8:	671a      	str	r2, [r3, #112]	; 0x70
 800a8ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	671a      	str	r2, [r3, #112]	; 0x70
 800a8d2:	e71d      	b.n	800a710 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 800a8d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8d8:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 800a8da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a8dc:	f7fe fcc0 	bl	8009260 <HAL_GetTick>
 800a8e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8e2:	e004      	b.n	800a8ee <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8e4:	f7fe fcbc 	bl	8009260 <HAL_GetTick>
 800a8e8:	1b80      	subs	r0, r0, r6
 800a8ea:	2802      	cmp	r0, #2
 800a8ec:	d886      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8ee:	682b      	ldr	r3, [r5, #0]
 800a8f0:	0199      	lsls	r1, r3, #6
 800a8f2:	d4f7      	bmi.n	800a8e4 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8f4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800a8f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800a900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a904:	4c0d      	ldr	r4, [pc, #52]	; (800a93c <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a906:	0852      	lsrs	r2, r2, #1
 800a908:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a90c:	3a01      	subs	r2, #1
 800a90e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a916:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a91e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a920:	f7fe fc9e 	bl	8009260 <HAL_GetTick>
 800a924:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a926:	e005      	b.n	800a934 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a928:	f7fe fc9a 	bl	8009260 <HAL_GetTick>
 800a92c:	1b40      	subs	r0, r0, r5
 800a92e:	2802      	cmp	r0, #2
 800a930:	f63f af64 	bhi.w	800a7fc <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	019a      	lsls	r2, r3, #6
 800a938:	d5f6      	bpl.n	800a928 <HAL_RCC_OscConfig+0x380>
 800a93a:	e71b      	b.n	800a774 <HAL_RCC_OscConfig+0x1cc>
 800a93c:	40023800 	.word	0x40023800

0800a940 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a940:	b178      	cbz	r0, 800a962 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a942:	4a5e      	ldr	r2, [pc, #376]	; (800aabc <HAL_RCC_ClockConfig+0x17c>)
 800a944:	6813      	ldr	r3, [r2, #0]
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	428b      	cmp	r3, r1
 800a94c:	d20b      	bcs.n	800a966 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a94e:	6813      	ldr	r3, [r2, #0]
 800a950:	f023 030f 	bic.w	r3, r3, #15
 800a954:	430b      	orrs	r3, r1
 800a956:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a958:	6813      	ldr	r3, [r2, #0]
 800a95a:	f003 030f 	and.w	r3, r3, #15
 800a95e:	428b      	cmp	r3, r1
 800a960:	d001      	beq.n	800a966 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800a962:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 800a964:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a966:	6803      	ldr	r3, [r0, #0]
{
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a96c:	079d      	lsls	r5, r3, #30
 800a96e:	d514      	bpl.n	800a99a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a970:	075c      	lsls	r4, r3, #29
 800a972:	d504      	bpl.n	800a97e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a974:	4c52      	ldr	r4, [pc, #328]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
 800a976:	68a2      	ldr	r2, [r4, #8]
 800a978:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800a97c:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a97e:	071a      	lsls	r2, r3, #28
 800a980:	d504      	bpl.n	800a98c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a982:	4c4f      	ldr	r4, [pc, #316]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
 800a984:	68a2      	ldr	r2, [r4, #8]
 800a986:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800a98a:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a98c:	4c4c      	ldr	r4, [pc, #304]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
 800a98e:	6885      	ldr	r5, [r0, #8]
 800a990:	68a2      	ldr	r2, [r4, #8]
 800a992:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a996:	432a      	orrs	r2, r5
 800a998:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a99a:	07df      	lsls	r7, r3, #31
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	d521      	bpl.n	800a9e6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9a2:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9a4:	4b46      	ldr	r3, [pc, #280]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9a6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9a8:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9aa:	d063      	beq.n	800aa74 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9ac:	2a02      	cmp	r2, #2
 800a9ae:	d078      	beq.n	800aaa2 <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9b0:	0799      	lsls	r1, r3, #30
 800a9b2:	d528      	bpl.n	800aa06 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9b4:	4942      	ldr	r1, [pc, #264]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9b6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9ba:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9bc:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a9c6:	f7fe fc4b 	bl	8009260 <HAL_GetTick>
 800a9ca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9cc:	e004      	b.n	800a9d8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9ce:	f7fe fc47 	bl	8009260 <HAL_GetTick>
 800a9d2:	1bc0      	subs	r0, r0, r7
 800a9d4:	4540      	cmp	r0, r8
 800a9d6:	d862      	bhi.n	800aa9e <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9d8:	68b3      	ldr	r3, [r6, #8]
 800a9da:	6862      	ldr	r2, [r4, #4]
 800a9dc:	f003 030c 	and.w	r3, r3, #12
 800a9e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a9e4:	d1f3      	bne.n	800a9ce <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9e6:	4a35      	ldr	r2, [pc, #212]	; (800aabc <HAL_RCC_ClockConfig+0x17c>)
 800a9e8:	6813      	ldr	r3, [r2, #0]
 800a9ea:	f003 030f 	and.w	r3, r3, #15
 800a9ee:	42ab      	cmp	r3, r5
 800a9f0:	d90c      	bls.n	800aa0c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9f2:	6813      	ldr	r3, [r2, #0]
 800a9f4:	f023 030f 	bic.w	r3, r3, #15
 800a9f8:	432b      	orrs	r3, r5
 800a9fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9fc:	6813      	ldr	r3, [r2, #0]
 800a9fe:	f003 030f 	and.w	r3, r3, #15
 800aa02:	42ab      	cmp	r3, r5
 800aa04:	d002      	beq.n	800aa0c <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 800aa06:	2001      	movs	r0, #1
}
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	075a      	lsls	r2, r3, #29
 800aa10:	d506      	bpl.n	800aa20 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa12:	492b      	ldr	r1, [pc, #172]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
 800aa14:	68e0      	ldr	r0, [r4, #12]
 800aa16:	688a      	ldr	r2, [r1, #8]
 800aa18:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800aa1c:	4302      	orrs	r2, r0
 800aa1e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa20:	071b      	lsls	r3, r3, #28
 800aa22:	d507      	bpl.n	800aa34 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aa24:	4a26      	ldr	r2, [pc, #152]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
 800aa26:	6921      	ldr	r1, [r4, #16]
 800aa28:	6893      	ldr	r3, [r2, #8]
 800aa2a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800aa2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800aa32:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa34:	4922      	ldr	r1, [pc, #136]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
 800aa36:	688b      	ldr	r3, [r1, #8]
 800aa38:	f003 030c 	and.w	r3, r3, #12
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d01c      	beq.n	800aa7a <HAL_RCC_ClockConfig+0x13a>
 800aa40:	2b08      	cmp	r3, #8
 800aa42:	d12a      	bne.n	800aa9a <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa44:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aa46:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa4c:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aa4e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800aa52:	d129      	bne.n	800aaa8 <HAL_RCC_ClockConfig+0x168>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa54:	481b      	ldr	r0, [pc, #108]	; (800aac4 <HAL_RCC_ClockConfig+0x184>)
 800aa56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800aa5a:	fba1 0100 	umull	r0, r1, r1, r0
 800aa5e:	f7fc fe3d 	bl	80076dc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800aa62:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800aa6e:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa72:	e003      	b.n	800aa7c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa74:	039e      	lsls	r6, r3, #14
 800aa76:	d49d      	bmi.n	800a9b4 <HAL_RCC_ClockConfig+0x74>
 800aa78:	e7c5      	b.n	800aa06 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 800aa7a:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa7c:	4a10      	ldr	r2, [pc, #64]	; (800aac0 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 800aa7e:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa80:	4c12      	ldr	r4, [pc, #72]	; (800aacc <HAL_RCC_ClockConfig+0x18c>)
 800aa82:	6892      	ldr	r2, [r2, #8]
 800aa84:	4912      	ldr	r1, [pc, #72]	; (800aad0 <HAL_RCC_ClockConfig+0x190>)
 800aa86:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800aa8a:	5ca2      	ldrb	r2, [r4, r2]
 800aa8c:	40d3      	lsrs	r3, r2
 800aa8e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800aa90:	f7fe fba0 	bl	80091d4 <HAL_InitTick>
  return HAL_OK;
 800aa94:	2000      	movs	r0, #0
}
 800aa96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 800aa9a:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <HAL_RCC_ClockConfig+0x184>)
 800aa9c:	e7ee      	b.n	800aa7c <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 800aa9e:	2003      	movs	r0, #3
 800aaa0:	e7b2      	b.n	800aa08 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaa2:	0198      	lsls	r0, r3, #6
 800aaa4:	d486      	bmi.n	800a9b4 <HAL_RCC_ClockConfig+0x74>
 800aaa6:	e7ae      	b.n	800aa06 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aaa8:	4807      	ldr	r0, [pc, #28]	; (800aac8 <HAL_RCC_ClockConfig+0x188>)
 800aaaa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800aaae:	2300      	movs	r3, #0
 800aab0:	fba1 0100 	umull	r0, r1, r1, r0
 800aab4:	f7fc fe12 	bl	80076dc <__aeabi_uldivmod>
 800aab8:	e7d3      	b.n	800aa62 <HAL_RCC_ClockConfig+0x122>
 800aaba:	bf00      	nop
 800aabc:	40023c00 	.word	0x40023c00
 800aac0:	40023800 	.word	0x40023800
 800aac4:	00f42400 	.word	0x00f42400
 800aac8:	017d7840 	.word	0x017d7840
 800aacc:	0801cef8 	.word	0x0801cef8
 800aad0:	20000018 	.word	0x20000018

0800aad4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aad4:	6803      	ldr	r3, [r0, #0]
{
 800aad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aada:	f013 0601 	ands.w	r6, r3, #1
{
 800aade:	b083      	sub	sp, #12
 800aae0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aae2:	d00b      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aae4:	4ab8      	ldr	r2, [pc, #736]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aae6:	6891      	ldr	r1, [r2, #8]
 800aae8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800aaec:	6091      	str	r1, [r2, #8]
 800aaee:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800aaf0:	6891      	ldr	r1, [r2, #8]
 800aaf2:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aaf4:	fab6 f686 	clz	r6, r6
 800aaf8:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aafa:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aafc:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800ab00:	d010      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab02:	49b1      	ldr	r1, [pc, #708]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab04:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ab06:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab0a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab0e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ab12:	ea42 0205 	orr.w	r2, r2, r5
 800ab16:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab1a:	f000 81b0 	beq.w	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab1e:	fab5 f585 	clz	r5, r5
 800ab22:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ab24:	02d9      	lsls	r1, r3, #11
 800ab26:	d510      	bpl.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab28:	48a7      	ldr	r0, [pc, #668]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab2c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ab30:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab34:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800ab38:	ea42 0201 	orr.w	r2, r2, r1
 800ab3c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ab40:	f000 819b 	beq.w	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800ab44:	2900      	cmp	r1, #0
 800ab46:	bf08      	it	eq
 800ab48:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800ab4a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800ab4e:	bf18      	it	ne
 800ab50:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ab52:	069a      	lsls	r2, r3, #26
 800ab54:	f100 8149 	bmi.w	800adea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ab58:	06d9      	lsls	r1, r3, #27
 800ab5a:	d50c      	bpl.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab5c:	4a9a      	ldr	r2, [pc, #616]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab5e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800ab62:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800ab66:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800ab6a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800ab6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ab70:	4301      	orrs	r1, r0
 800ab72:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab76:	045a      	lsls	r2, r3, #17
 800ab78:	d508      	bpl.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab7a:	4993      	ldr	r1, [pc, #588]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab7c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800ab7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ab82:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ab86:	4302      	orrs	r2, r0
 800ab88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab8c:	041f      	lsls	r7, r3, #16
 800ab8e:	d508      	bpl.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ab90:	498d      	ldr	r1, [pc, #564]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab92:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800ab94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ab98:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800ab9c:	4302      	orrs	r2, r0
 800ab9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aba2:	03d8      	lsls	r0, r3, #15
 800aba4:	d508      	bpl.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aba6:	4988      	ldr	r1, [pc, #544]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aba8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800abaa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800abae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800abb2:	4302      	orrs	r2, r0
 800abb4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abb8:	0399      	lsls	r1, r3, #14
 800abba:	d508      	bpl.n	800abce <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800abbc:	4982      	ldr	r1, [pc, #520]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abbe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800abc0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800abc4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800abc8:	4302      	orrs	r2, r0
 800abca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800abce:	065a      	lsls	r2, r3, #25
 800abd0:	d508      	bpl.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800abd2:	497d      	ldr	r1, [pc, #500]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abd4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800abd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800abda:	f022 0203 	bic.w	r2, r2, #3
 800abde:	4302      	orrs	r2, r0
 800abe0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800abe4:	061f      	lsls	r7, r3, #24
 800abe6:	d508      	bpl.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800abe8:	4977      	ldr	r1, [pc, #476]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800abec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800abf0:	f022 020c 	bic.w	r2, r2, #12
 800abf4:	4302      	orrs	r2, r0
 800abf6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800abfa:	05d8      	lsls	r0, r3, #23
 800abfc:	d508      	bpl.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800abfe:	4972      	ldr	r1, [pc, #456]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac00:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ac02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac06:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800ac0a:	4302      	orrs	r2, r0
 800ac0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ac10:	0599      	lsls	r1, r3, #22
 800ac12:	d508      	bpl.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ac14:	496c      	ldr	r1, [pc, #432]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac16:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ac18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac1c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ac20:	4302      	orrs	r2, r0
 800ac22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ac26:	055a      	lsls	r2, r3, #21
 800ac28:	d508      	bpl.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ac2a:	4967      	ldr	r1, [pc, #412]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ac36:	4302      	orrs	r2, r0
 800ac38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ac3c:	051f      	lsls	r7, r3, #20
 800ac3e:	d508      	bpl.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ac40:	4961      	ldr	r1, [pc, #388]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ac4c:	4302      	orrs	r2, r0
 800ac4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ac52:	04d8      	lsls	r0, r3, #19
 800ac54:	d508      	bpl.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ac56:	495c      	ldr	r1, [pc, #368]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac58:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800ac5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ac62:	4302      	orrs	r2, r0
 800ac64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ac68:	0499      	lsls	r1, r3, #18
 800ac6a:	d508      	bpl.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ac6c:	4956      	ldr	r1, [pc, #344]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac6e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ac70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac74:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac78:	4302      	orrs	r2, r0
 800ac7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac7e:	025a      	lsls	r2, r3, #9
 800ac80:	d508      	bpl.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac82:	4951      	ldr	r1, [pc, #324]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac84:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ac86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac8a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ac8e:	4302      	orrs	r2, r0
 800ac90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ac94:	029f      	lsls	r7, r3, #10
 800ac96:	d50c      	bpl.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ac98:	494b      	ldr	r1, [pc, #300]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac9a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ac9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800aca0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aca4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800aca8:	bf08      	it	eq
 800acaa:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800acac:	4302      	orrs	r2, r0
 800acae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800acb2:	f013 0f08 	tst.w	r3, #8
 800acb6:	bf18      	it	ne
 800acb8:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800acba:	0358      	lsls	r0, r3, #13
 800acbc:	d508      	bpl.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acbe:	4942      	ldr	r1, [pc, #264]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acc0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800acc2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800acc6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800acca:	4302      	orrs	r2, r0
 800accc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800acd0:	0219      	lsls	r1, r3, #8
 800acd2:	d40b      	bmi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800acd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acd8:	d016      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800acda:	07f2      	lsls	r2, r6, #31
 800acdc:	d414      	bmi.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800acde:	2d01      	cmp	r5, #1
 800ace0:	f000 80d0 	beq.w	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800ace4:	2000      	movs	r0, #0
}
 800ace6:	b003      	add	sp, #12
 800ace8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acec:	4936      	ldr	r1, [pc, #216]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800acee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acf2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800acf6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800acfa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800acfe:	ea42 0200 	orr.w	r2, r2, r0
 800ad02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ad06:	d1e8      	bne.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 800ad08:	4b2f      	ldr	r3, [pc, #188]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad0c:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800ad0e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ad12:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ad14:	f7fe faa4 	bl	8009260 <HAL_GetTick>
 800ad18:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad1a:	e004      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ad1c:	f7fe faa0 	bl	8009260 <HAL_GetTick>
 800ad20:	1bc0      	subs	r0, r0, r7
 800ad22:	2864      	cmp	r0, #100	; 0x64
 800ad24:	d85d      	bhi.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad26:	6833      	ldr	r3, [r6, #0]
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	d4f7      	bmi.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	07df      	lsls	r7, r3, #31
 800ad30:	d512      	bpl.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800ad32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ad34:	b982      	cbnz	r2, 800ad58 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad36:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad3a:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad3e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800ad42:	6860      	ldr	r0, [r4, #4]
 800ad44:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 800ad48:	68a1      	ldr	r1, [r4, #8]
 800ad4a:	433a      	orrs	r2, r7
 800ad4c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800ad50:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800ad54:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad58:	031e      	lsls	r6, r3, #12
 800ad5a:	f100 8111 	bmi.w	800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800ad5e:	02d8      	lsls	r0, r3, #11
 800ad60:	d504      	bpl.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ad64:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800ad68:	f000 810f 	beq.w	800af8a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad6c:	01d9      	lsls	r1, r3, #7
 800ad6e:	d511      	bpl.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad70:	4e15      	ldr	r6, [pc, #84]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ad72:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad74:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad78:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ad7c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800ad80:	6921      	ldr	r1, [r4, #16]
 800ad82:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800ad86:	433a      	orrs	r2, r7
 800ad88:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800ad8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ad90:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ad94:	019a      	lsls	r2, r3, #6
 800ad96:	d50d      	bpl.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	041b      	lsls	r3, r3, #16
 800ad9e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800ada2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ada6:	4a08      	ldr	r2, [pc, #32]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ada8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800adac:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800adb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800adb4:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adb6:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800adb8:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800adba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800adbe:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800adc0:	f7fe fa4e 	bl	8009260 <HAL_GetTick>
 800adc4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800adc6:	e006      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x302>
 800adc8:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800adcc:	f7fe fa48 	bl	8009260 <HAL_GetTick>
 800add0:	1bc0      	subs	r0, r0, r7
 800add2:	2864      	cmp	r0, #100	; 0x64
 800add4:	d805      	bhi.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800add6:	6833      	ldr	r3, [r6, #0]
 800add8:	011b      	lsls	r3, r3, #4
 800adda:	d5f7      	bpl.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if(pllsaiused == 1)
 800addc:	2d01      	cmp	r5, #1
 800adde:	d181      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800ade0:	e050      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 800ade2:	2003      	movs	r0, #3
}
 800ade4:	b003      	add	sp, #12
 800ade6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800adea:	4a87      	ldr	r2, [pc, #540]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 800adec:	4b87      	ldr	r3, [pc, #540]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800adee:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800adf0:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800adf2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800adf6:	6411      	str	r1, [r2, #64]	; 0x40
 800adf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800adfa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800adfe:	9201      	str	r2, [sp, #4]
 800ae00:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae08:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ae0a:	f7fe fa29 	bl	8009260 <HAL_GetTick>
 800ae0e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ae10:	e005      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae12:	f7fe fa25 	bl	8009260 <HAL_GetTick>
 800ae16:	eba0 0008 	sub.w	r0, r0, r8
 800ae1a:	2864      	cmp	r0, #100	; 0x64
 800ae1c:	d8e1      	bhi.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	05db      	lsls	r3, r3, #23
 800ae22:	d5f6      	bpl.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ae24:	4a78      	ldr	r2, [pc, #480]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800ae26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ae28:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ae2a:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ae2e:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800ae32:	d011      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800ae34:	4281      	cmp	r1, r0
 800ae36:	d00f      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x384>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae38:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800ae3a:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae3c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800ae40:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800ae44:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ae46:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800ae48:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 800ae4c:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800ae4e:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ae50:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ae52:	07cf      	lsls	r7, r1, #31
 800ae54:	f100 80c3 	bmi.w	800afde <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae58:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800ae5c:	f000 80b1 	beq.w	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ae60:	4969      	ldr	r1, [pc, #420]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800ae62:	688a      	ldr	r2, [r1, #8]
 800ae64:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ae68:	608a      	str	r2, [r1, #8]
 800ae6a:	4a67      	ldr	r2, [pc, #412]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800ae6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae70:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ae72:	430b      	orrs	r3, r1
 800ae74:	6713      	str	r3, [r2, #112]	; 0x70
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	e66e      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 800ae7a:	2601      	movs	r6, #1
 800ae7c:	e665      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 800ae7e:	2500      	movs	r5, #0
      plli2sused = 1;
 800ae80:	2601      	movs	r6, #1
 800ae82:	e64f      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 800ae84:	4b60      	ldr	r3, [pc, #384]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800ae86:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae88:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800ae8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ae8e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ae90:	f7fe f9e6 	bl	8009260 <HAL_GetTick>
 800ae94:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae96:	e004      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ae98:	f7fe f9e2 	bl	8009260 <HAL_GetTick>
 800ae9c:	1b80      	subs	r0, r0, r6
 800ae9e:	2864      	cmp	r0, #100	; 0x64
 800aea0:	d89f      	bhi.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	009f      	lsls	r7, r3, #2
 800aea6:	d4f7      	bmi.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	031d      	lsls	r5, r3, #12
 800aeac:	f100 8092 	bmi.w	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800aeb0:	02d8      	lsls	r0, r3, #11
 800aeb2:	d51d      	bpl.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aeb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aeb6:	b9da      	cbnz	r2, 800aef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aeb8:	4953      	ldr	r1, [pc, #332]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800aeba:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aebc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aec0:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800aec4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800aec8:	69a0      	ldr	r0, [r4, #24]
 800aeca:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800aece:	4332      	orrs	r2, r6
 800aed0:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800aed4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800aed8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aedc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800aee0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800aee2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800aee6:	3801      	subs	r0, #1
 800aee8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800aeec:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800aef0:	0299      	lsls	r1, r3, #10
 800aef2:	d515      	bpl.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800aef4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800aef6:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800aefa:	d111      	bne.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aefc:	4942      	ldr	r1, [pc, #264]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800aefe:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af04:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800af08:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800af0c:	6a20      	ldr	r0, [r4, #32]
 800af0e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800af12:	4332      	orrs	r2, r6
 800af14:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800af18:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800af1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800af20:	071a      	lsls	r2, r3, #28
 800af22:	d519      	bpl.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af24:	4a38      	ldr	r2, [pc, #224]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800af26:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af28:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800af2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800af30:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800af34:	69e0      	ldr	r0, [r4, #28]
 800af36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af3a:	430b      	orrs	r3, r1
 800af3c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800af40:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800af44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800af48:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800af4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800af52:	430b      	orrs	r3, r1
 800af54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800af58:	4b2b      	ldr	r3, [pc, #172]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800af5a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af5c:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800af5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800af62:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800af64:	f7fe f97c 	bl	8009260 <HAL_GetTick>
 800af68:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af6a:	e005      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800af6c:	f7fe f978 	bl	8009260 <HAL_GetTick>
 800af70:	1b40      	subs	r0, r0, r5
 800af72:	2864      	cmp	r0, #100	; 0x64
 800af74:	f63f af35 	bhi.w	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	d5f6      	bpl.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800af7e:	e6b1      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800af82:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800af86:	f47f aeea 	bne.w	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af8a:	4e1f      	ldr	r6, [pc, #124]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af8c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af8e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af92:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af96:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800af9a:	68e1      	ldr	r1, [r4, #12]
 800af9c:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800afa0:	433a      	orrs	r2, r7
 800afa2:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800afa6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800afaa:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800afae:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800afb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800afb4:	f021 011f 	bic.w	r1, r1, #31
 800afb8:	3a01      	subs	r2, #1
 800afba:	430a      	orrs	r2, r1
 800afbc:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 800afc0:	e6d4      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afc2:	4811      	ldr	r0, [pc, #68]	; (800b008 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800afc4:	4912      	ldr	r1, [pc, #72]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800afc6:	6882      	ldr	r2, [r0, #8]
 800afc8:	4019      	ands	r1, r3
 800afca:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800afce:	430a      	orrs	r2, r1
 800afd0:	6082      	str	r2, [r0, #8]
 800afd2:	e74a      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x396>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800afd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	f43f af6e 	beq.w	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800afdc:	e768      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afde:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afe0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800afe4:	f7fe f93c 	bl	8009260 <HAL_GetTick>
 800afe8:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afea:	e006      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x526>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afec:	f7fe f938 	bl	8009260 <HAL_GetTick>
 800aff0:	eba0 0009 	sub.w	r0, r0, r9
 800aff4:	4540      	cmp	r0, r8
 800aff6:	f63f aef4 	bhi.w	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800affa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800affc:	0798      	lsls	r0, r3, #30
 800affe:	d5f5      	bpl.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b000:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b002:	f403 7040 	and.w	r0, r3, #768	; 0x300
 800b006:	e727      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800b008:	40023800 	.word	0x40023800
 800b00c:	40007000 	.word	0x40007000
 800b010:	0ffffcff 	.word	0x0ffffcff

0800b014 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop

0800b018 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 800b018:	b1e8      	cbz	r0, 800b056 <HAL_SDRAM_Init+0x3e>
{   
 800b01a:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b01c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b020:	4604      	mov	r4, r0
 800b022:	460d      	mov	r5, r1
 800b024:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b028:	b183      	cbz	r3, 800b04c <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b02a:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b02c:	1d21      	adds	r1, r4, #4
 800b02e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b030:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b034:	f000 fc48 	bl	800b8c8 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b038:	4629      	mov	r1, r5
 800b03a:	e9d4 0200 	ldrd	r0, r2, [r4]
 800b03e:	f000 fc81 	bl	800b944 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b042:	2301      	movs	r3, #1
  return HAL_OK;
 800b044:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b046:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800b04c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800b050:	f7ff ffe0 	bl	800b014 <HAL_SDRAM_MspInit>
 800b054:	e7e9      	b.n	800b02a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800b056:	2001      	movs	r0, #1
}
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop

0800b05c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b05c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b05e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b02      	cmp	r3, #2
 800b066:	d010      	beq.n	800b08a <HAL_SDRAM_SendCommand+0x2e>
 800b068:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b06a:	2302      	movs	r3, #2
 800b06c:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b06e:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b070:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b074:	f000 fcb8 	bl	800b9e8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b078:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800b07a:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b07c:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b07e:	bf0c      	ite	eq
 800b080:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b082:	2301      	movne	r3, #1
 800b084:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b088:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800b08a:	4618      	mov	r0, r3
}
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop

0800b090 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b090:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d00c      	beq.n	800b0b4 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b09a:	2302      	movs	r3, #2
{
 800b09c:	b510      	push	{r4, lr}
 800b09e:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b0a0:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b0a6:	f000 fcb5 	bl	800ba14 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b0aa:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800b0ac:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b0ae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b0b2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800b0b4:	4618      	mov	r0, r3
}
 800b0b6:	4770      	bx	lr

0800b0b8 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	4604      	mov	r4, r0
 800b0be:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b0c0:	f7fe f8ce 	bl	8009260 <HAL_GetTick>
 800b0c4:	4606      	mov	r6, r0
 800b0c6:	1c69      	adds	r1, r5, #1
  while((hspi->Instance->SR & Fifo) != State)
 800b0c8:	6822      	ldr	r2, [r4, #0]
 800b0ca:	d120      	bne.n	800b10e <SPI_EndRxTxTransaction+0x56>
 800b0cc:	6893      	ldr	r3, [r2, #8]
 800b0ce:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800b0d2:	d1fb      	bne.n	800b0cc <SPI_EndRxTxTransaction+0x14>
  uint32_t tickstart = HAL_GetTick();
 800b0d4:	f7fe f8c4 	bl	8009260 <HAL_GetTick>
 800b0d8:	4606      	mov	r6, r0
 800b0da:	1c6b      	adds	r3, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b0dc:	6822      	ldr	r2, [r4, #0]
 800b0de:	d143      	bne.n	800b168 <SPI_EndRxTxTransaction+0xb0>
 800b0e0:	6893      	ldr	r3, [r2, #8]
 800b0e2:	0618      	lsls	r0, r3, #24
 800b0e4:	d4fc      	bmi.n	800b0e0 <SPI_EndRxTxTransaction+0x28>
  uint32_t tickstart = HAL_GetTick();
 800b0e6:	f7fe f8bb 	bl	8009260 <HAL_GetTick>
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	1c6b      	adds	r3, r5, #1
  while((hspi->Instance->SR & Fifo) != State)
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	d006      	beq.n	800b100 <SPI_EndRxTxTransaction+0x48>
 800b0f2:	e044      	b.n	800b17e <SPI_EndRxTxTransaction+0xc6>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800b0f4:	7b13      	ldrb	r3, [r2, #12]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b0fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  while((hspi->Instance->SR & Fifo) != State)
 800b100:	6893      	ldr	r3, [r2, #8]
 800b102:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800b106:	d1f5      	bne.n	800b0f4 <SPI_EndRxTxTransaction+0x3c>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  return HAL_OK;
 800b108:	2000      	movs	r0, #0
}
 800b10a:	b002      	add	sp, #8
 800b10c:	bd70      	pop	{r4, r5, r6, pc}
  while((hspi->Instance->SR & Fifo) != State)
 800b10e:	6893      	ldr	r3, [r2, #8]
 800b110:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800b114:	d0de      	beq.n	800b0d4 <SPI_EndRxTxTransaction+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b116:	b12d      	cbz	r5, 800b124 <SPI_EndRxTxTransaction+0x6c>
 800b118:	f7fe f8a2 	bl	8009260 <HAL_GetTick>
 800b11c:	1b80      	subs	r0, r0, r6
 800b11e:	4285      	cmp	r5, r0
 800b120:	d8d1      	bhi.n	800b0c6 <SPI_EndRxTxTransaction+0xe>
 800b122:	6822      	ldr	r2, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b124:	6853      	ldr	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b126:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b128:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b12c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b130:	6053      	str	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b132:	d036      	beq.n	800b1a2 <SPI_EndRxTxTransaction+0xea>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b134:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b13a:	d108      	bne.n	800b14e <SPI_EndRxTxTransaction+0x96>
          SPI_RESET_CRC(hspi);
 800b13c:	6813      	ldr	r3, [r2, #0]
 800b13e:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b142:	400b      	ands	r3, r1
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b14c:	6013      	str	r3, [r2, #0]
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b14e:	6e23      	ldr	r3, [r4, #96]	; 0x60
        hspi->State= HAL_SPI_STATE_READY;
 800b150:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800b152:	2200      	movs	r2, #0
    return HAL_TIMEOUT;
 800b154:	2003      	movs	r0, #3
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b156:	f043 0320 	orr.w	r3, r3, #32
        hspi->State= HAL_SPI_STATE_READY;
 800b15a:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b15e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b162:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b164:	b002      	add	sp, #8
 800b166:	bd70      	pop	{r4, r5, r6, pc}
  while((hspi->Instance->SR & Flag) != State)
 800b168:	6893      	ldr	r3, [r2, #8]
 800b16a:	0619      	lsls	r1, r3, #24
 800b16c:	d5bb      	bpl.n	800b0e6 <SPI_EndRxTxTransaction+0x2e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b16e:	2d00      	cmp	r5, #0
 800b170:	d0d8      	beq.n	800b124 <SPI_EndRxTxTransaction+0x6c>
 800b172:	f7fe f875 	bl	8009260 <HAL_GetTick>
 800b176:	1b80      	subs	r0, r0, r6
 800b178:	4285      	cmp	r5, r0
 800b17a:	d8ae      	bhi.n	800b0da <SPI_EndRxTxTransaction+0x22>
 800b17c:	e7d1      	b.n	800b122 <SPI_EndRxTxTransaction+0x6a>
  while((hspi->Instance->SR & Fifo) != State)
 800b17e:	6893      	ldr	r3, [r2, #8]
 800b180:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800b184:	d0c0      	beq.n	800b108 <SPI_EndRxTxTransaction+0x50>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800b186:	7b13      	ldrb	r3, [r2, #12]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b18e:	f89d 3007 	ldrb.w	r3, [sp, #7]
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b192:	2d00      	cmp	r5, #0
 800b194:	d0c6      	beq.n	800b124 <SPI_EndRxTxTransaction+0x6c>
 800b196:	f7fe f863 	bl	8009260 <HAL_GetTick>
 800b19a:	1b80      	subs	r0, r0, r6
 800b19c:	4285      	cmp	r5, r0
 800b19e:	d8a5      	bhi.n	800b0ec <SPI_EndRxTxTransaction+0x34>
 800b1a0:	e7bf      	b.n	800b122 <SPI_EndRxTxTransaction+0x6a>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1a2:	68a3      	ldr	r3, [r4, #8]
 800b1a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1a8:	d002      	beq.n	800b1b0 <SPI_EndRxTxTransaction+0xf8>
 800b1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ae:	d1c1      	bne.n	800b134 <SPI_EndRxTxTransaction+0x7c>
          __HAL_SPI_DISABLE(hspi);
 800b1b0:	6813      	ldr	r3, [r2, #0]
 800b1b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	e7bc      	b.n	800b134 <SPI_EndRxTxTransaction+0x7c>
 800b1ba:	bf00      	nop

0800b1bc <HAL_SPI_Init>:
  if(hspi == NULL)
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d060      	beq.n	800b282 <HAL_SPI_Init+0xc6>
{
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hspi->State == HAL_SPI_STATE_RESET)
 800b1c2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d055      	beq.n	800b278 <HAL_SPI_Init+0xbc>
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1cc:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b1ce:	2502      	movs	r5, #2
  __HAL_SPI_DISABLE(hspi);
 800b1d0:	6821      	ldr	r1, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b1d2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b1d6:	f422 6000 	bic.w	r0, r2, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800b1da:	680b      	ldr	r3, [r1, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b1dc:	bf94      	ite	ls
 800b1de:	f44f 5e80 	movls.w	lr, #4096	; 0x1000
 800b1e2:	f04f 0e00 	movhi.w	lr, #0
  __HAL_SPI_DISABLE(hspi);
 800b1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b1ea:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800b1ee:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b1f2:	600b      	str	r3, [r1, #0]
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b1f4:	d13c      	bne.n	800b270 <HAL_SPI_Init+0xb4>
 800b1f6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b1fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b1fc:	b920      	cbnz	r0, 800b208 <HAL_SPI_Init+0x4c>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1fe:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b202:	d940      	bls.n	800b286 <HAL_SPI_Init+0xca>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b204:	2002      	movs	r0, #2
 800b206:	6320      	str	r0, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b208:	6927      	ldr	r7, [r4, #16]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b20a:	2802      	cmp	r0, #2
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b20c:	6a25      	ldr	r5, [r4, #32]
 800b20e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800b212:	ea43 0306 	orr.w	r3, r3, r6
 800b216:	69e6      	ldr	r6, [r4, #28]
 800b218:	ea43 0307 	orr.w	r3, r3, r7
 800b21c:	6967      	ldr	r7, [r4, #20]
 800b21e:	ea43 0307 	orr.w	r3, r3, r7
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b222:	69a7      	ldr	r7, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b224:	ea43 0306 	orr.w	r3, r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b228:	f407 7600 	and.w	r6, r7, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b22c:	ea43 0305 	orr.w	r3, r3, r5
 800b230:	ea43 0306 	orr.w	r3, r3, r6
 800b234:	ea43 030c 	orr.w	r3, r3, ip
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800b238:	600b      	str	r3, [r1, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b23a:	d103      	bne.n	800b244 <HAL_SPI_Init+0x88>
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800b23c:	680b      	ldr	r3, [r1, #0]
 800b23e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b242:	600b      	str	r3, [r1, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b244:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b246:	0c3f      	lsrs	r7, r7, #16
 800b248:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hspi->State= HAL_SPI_STATE_READY;
 800b24a:	2601      	movs	r6, #1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b24c:	4302      	orrs	r2, r0
 800b24e:	f007 0704 	and.w	r7, r7, #4
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800b252:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b256:	431a      	orrs	r2, r3
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b258:	2300      	movs	r3, #0
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b25a:	433a      	orrs	r2, r7
  return HAL_OK;
 800b25c:	4618      	mov	r0, r3
                         hspi->Init.DataSize ) | frxth;
 800b25e:	ea4e 0502 	orr.w	r5, lr, r2
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b262:	604d      	str	r5, [r1, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800b264:	f8c1 c010 	str.w	ip, [r1, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b268:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
 800b26a:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 800b26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b270:	2300      	movs	r3, #0
 800b272:	469c      	mov	ip, r3
 800b274:	62a3      	str	r3, [r4, #40]	; 0x28
 800b276:	e7c0      	b.n	800b1fa <HAL_SPI_Init+0x3e>
    hspi->Lock = HAL_UNLOCKED;
 800b278:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b27c:	f005 feb6 	bl	8010fec <HAL_SPI_MspInit>
 800b280:	e7a4      	b.n	800b1cc <HAL_SPI_Init+0x10>
    return HAL_ERROR;
 800b282:	2001      	movs	r0, #1
}
 800b284:	4770      	bx	lr
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b286:	2301      	movs	r3, #1
 800b288:	4618      	mov	r0, r3
 800b28a:	6323      	str	r3, [r4, #48]	; 0x30
 800b28c:	e7bc      	b.n	800b208 <HAL_SPI_Init+0x4c>
 800b28e:	bf00      	nop

0800b290 <HAL_SPI_Transmit>:
{
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800b294:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800b298:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	f000 8108 	beq.w	800b4b0 <HAL_SPI_Transmit+0x220>
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	2301      	movs	r3, #1
  if(hspi->State != HAL_SPI_STATE_READY)
 800b2a4:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
  __HAL_LOCK(hspi);
 800b2a8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if(hspi->State != HAL_SPI_STATE_READY)
 800b2ac:	4298      	cmp	r0, r3
 800b2ae:	d159      	bne.n	800b364 <HAL_SPI_Transmit+0xd4>
  if((pData == NULL ) || (Size == 0))
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	d05f      	beq.n	800b374 <HAL_SPI_Transmit+0xe4>
 800b2b4:	fab2 f382 	clz	r3, r2
 800b2b8:	095b      	lsrs	r3, r3, #5
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d15a      	bne.n	800b374 <HAL_SPI_Transmit+0xe4>
  hspi->pTxBuffPtr  = pData;
 800b2be:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2c0:	2003      	movs	r0, #3
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2c2:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2c4:	6623      	str	r3, [r4, #96]	; 0x60
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2c6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800b2ca:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b2cc:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2ce:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b2d2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 800b2d6:	6823      	ldr	r3, [r4, #0]
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2d8:	f000 8090 	beq.w	800b3fc <HAL_SPI_Transmit+0x16c>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b2de:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b2e2:	f000 8081 	beq.w	800b3e8 <HAL_SPI_Transmit+0x158>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2e6:	6819      	ldr	r1, [r3, #0]
 800b2e8:	0648      	lsls	r0, r1, #25
 800b2ea:	d574      	bpl.n	800b3d6 <HAL_SPI_Transmit+0x146>
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2ec:	68e3      	ldr	r3, [r4, #12]
 800b2ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2f2:	d959      	bls.n	800b3a8 <HAL_SPI_Transmit+0x118>
  uint32_t tickstart = HAL_GetTick();
 800b2f4:	f7fd ffb4 	bl	8009260 <HAL_GetTick>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	1c69      	adds	r1, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b2fc:	6820      	ldr	r0, [r4, #0]
 800b2fe:	f040 80aa 	bne.w	800b456 <HAL_SPI_Transmit+0x1c6>
 800b302:	6882      	ldr	r2, [r0, #8]
 800b304:	0792      	lsls	r2, r2, #30
 800b306:	d5fc      	bpl.n	800b302 <HAL_SPI_Transmit+0x72>
      hspi->TxXferCount--;
 800b308:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b30a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800b30c:	3b01      	subs	r3, #1
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b30e:	f832 1b02 	ldrh.w	r1, [r2], #2
      hspi->TxXferCount--;
 800b312:	b29b      	uxth	r3, r3
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b314:	60c1      	str	r1, [r0, #12]
      hspi->TxXferCount--;
 800b316:	87e3      	strh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b318:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0)
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1ea      	bne.n	800b2f4 <HAL_SPI_Transmit+0x64>
 800b31e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b324:	d104      	bne.n	800b330 <HAL_SPI_Transmit+0xa0>
     hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
 800b326:	6822      	ldr	r2, [r4, #0]
 800b328:	6813      	ldr	r3, [r2, #0]
 800b32a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b32e:	6013      	str	r3, [r2, #0]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b330:	4629      	mov	r1, r5
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff fec0 	bl	800b0b8 <SPI_EndRxTxTransaction>
 800b338:	2800      	cmp	r0, #0
 800b33a:	f040 80c8 	bne.w	800b4ce <HAL_SPI_Transmit+0x23e>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b33e:	68a3      	ldr	r3, [r4, #8]
 800b340:	b92b      	cbnz	r3, 800b34e <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	68da      	ldr	r2, [r3, #12]
 800b346:	9201      	str	r2, [sp, #4]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(hspi);
 800b34e:	2300      	movs	r3, #0
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b350:	6e20      	ldr	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY; 
 800b352:	2201      	movs	r2, #1
  __HAL_LOCK(hspi);
 800b354:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 800b356:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_READY; 
 800b35a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 800b35e:	bf18      	it	ne
 800b360:	2001      	movne	r0, #1
 800b362:	e005      	b.n	800b370 <HAL_SPI_Transmit+0xe0>
   __HAL_UNLOCK(hspi);
 800b364:	2200      	movs	r2, #0
   return HAL_BUSY;
 800b366:	2002      	movs	r0, #2
    hspi->State = HAL_SPI_STATE_READY;
 800b368:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   __HAL_UNLOCK(hspi);
 800b36c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800b370:	b002      	add	sp, #8
 800b372:	bd70      	pop	{r4, r5, r6, pc}
   __HAL_UNLOCK(hspi);
 800b374:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b376:	2001      	movs	r0, #1
   __HAL_UNLOCK(hspi);
 800b378:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b37c:	b002      	add	sp, #8
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tickstart = HAL_GetTick();
 800b380:	f7fd ff6e 	bl	8009260 <HAL_GetTick>
 800b384:	4606      	mov	r6, r0
 800b386:	1c68      	adds	r0, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	d171      	bne.n	800b470 <HAL_SPI_Transmit+0x1e0>
 800b38c:	689a      	ldr	r2, [r3, #8]
 800b38e:	0791      	lsls	r1, r2, #30
 800b390:	d5fc      	bpl.n	800b38c <HAL_SPI_Transmit+0xfc>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*hspi->pTxBuffPtr++);
 800b392:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b394:	1c51      	adds	r1, r2, #1
 800b396:	63a1      	str	r1, [r4, #56]	; 0x38
 800b398:	7812      	ldrb	r2, [r2, #0]
 800b39a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;    
 800b39c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b39e:	3a01      	subs	r2, #1
 800b3a0:	b292      	uxth	r2, r2
 800b3a2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0)
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	d0ba      	beq.n	800b31e <HAL_SPI_Transmit+0x8e>
      if(hspi->TxXferCount != 0x1)
 800b3a8:	2a01      	cmp	r2, #1
 800b3aa:	d0e9      	beq.n	800b380 <HAL_SPI_Transmit+0xf0>
  uint32_t tickstart = HAL_GetTick();
 800b3ac:	f7fd ff58 	bl	8009260 <HAL_GetTick>
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	1c69      	adds	r1, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	d126      	bne.n	800b406 <HAL_SPI_Transmit+0x176>
 800b3b8:	6882      	ldr	r2, [r0, #8]
 800b3ba:	0792      	lsls	r2, r2, #30
 800b3bc:	d5fc      	bpl.n	800b3b8 <HAL_SPI_Transmit+0x128>
        hspi->TxXferCount -= 2;
 800b3be:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b3c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2;
 800b3c2:	3a02      	subs	r2, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b3c4:	f833 1b02 	ldrh.w	r1, [r3], #2
        hspi->TxXferCount -= 2;
 800b3c8:	b292      	uxth	r2, r2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b3ca:	60c1      	str	r1, [r0, #12]
        hspi->TxXferCount -= 2;
 800b3cc:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3ce:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0)
 800b3d0:	2a00      	cmp	r2, #0
 800b3d2:	d1e9      	bne.n	800b3a8 <HAL_SPI_Transmit+0x118>
 800b3d4:	e7a3      	b.n	800b31e <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 800b3d6:	6819      	ldr	r1, [r3, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3d8:	68e0      	ldr	r0, [r4, #12]
    __HAL_SPI_ENABLE(hspi);
 800b3da:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3de:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    __HAL_SPI_ENABLE(hspi);
 800b3e2:	6019      	str	r1, [r3, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3e4:	d886      	bhi.n	800b2f4 <HAL_SPI_Transmit+0x64>
 800b3e6:	e7df      	b.n	800b3a8 <HAL_SPI_Transmit+0x118>
    SPI_RESET_CRC(hspi);
 800b3e8:	6819      	ldr	r1, [r3, #0]
 800b3ea:	f64d 70ff 	movw	r0, #57343	; 0xdfff
 800b3ee:	4001      	ands	r1, r0
 800b3f0:	6019      	str	r1, [r3, #0]
 800b3f2:	6819      	ldr	r1, [r3, #0]
 800b3f4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b3f8:	6019      	str	r1, [r3, #0]
 800b3fa:	e774      	b.n	800b2e6 <HAL_SPI_Transmit+0x56>
    SPI_1LINE_TX(hspi);
 800b3fc:	6819      	ldr	r1, [r3, #0]
 800b3fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b402:	6019      	str	r1, [r3, #0]
 800b404:	e76a      	b.n	800b2dc <HAL_SPI_Transmit+0x4c>
  while((hspi->Instance->SR & Flag) != State)
 800b406:	6883      	ldr	r3, [r0, #8]
 800b408:	079b      	lsls	r3, r3, #30
 800b40a:	d4d8      	bmi.n	800b3be <HAL_SPI_Transmit+0x12e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b40c:	b12d      	cbz	r5, 800b41a <HAL_SPI_Transmit+0x18a>
 800b40e:	f7fd ff27 	bl	8009260 <HAL_GetTick>
 800b412:	1b80      	subs	r0, r0, r6
 800b414:	4285      	cmp	r5, r0
 800b416:	d8cc      	bhi.n	800b3b2 <HAL_SPI_Transmit+0x122>
 800b418:	6820      	ldr	r0, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b41a:	6843      	ldr	r3, [r0, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b41c:	6862      	ldr	r2, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b41e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b422:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b426:	6043      	str	r3, [r0, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b428:	d045      	beq.n	800b4b6 <HAL_SPI_Transmit+0x226>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b42a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b430:	d108      	bne.n	800b444 <HAL_SPI_Transmit+0x1b4>
          SPI_RESET_CRC(hspi);
 800b432:	6803      	ldr	r3, [r0, #0]
 800b434:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 800b438:	4013      	ands	r3, r2
 800b43a:	6003      	str	r3, [r0, #0]
 800b43c:	6803      	ldr	r3, [r0, #0]
 800b43e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b442:	6003      	str	r3, [r0, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b444:	2201      	movs	r2, #1
       __HAL_UNLOCK(hspi);
 800b446:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800b448:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800b44a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
       __HAL_UNLOCK(hspi);
 800b44e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b452:	b002      	add	sp, #8
 800b454:	bd70      	pop	{r4, r5, r6, pc}
  while((hspi->Instance->SR & Flag) != State)
 800b456:	6883      	ldr	r3, [r0, #8]
 800b458:	079b      	lsls	r3, r3, #30
 800b45a:	f53f af55 	bmi.w	800b308 <HAL_SPI_Transmit+0x78>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b45e:	2d00      	cmp	r5, #0
 800b460:	d0db      	beq.n	800b41a <HAL_SPI_Transmit+0x18a>
 800b462:	f7fd fefd 	bl	8009260 <HAL_GetTick>
 800b466:	1b80      	subs	r0, r0, r6
 800b468:	4285      	cmp	r5, r0
 800b46a:	f63f af46 	bhi.w	800b2fa <HAL_SPI_Transmit+0x6a>
 800b46e:	e7d3      	b.n	800b418 <HAL_SPI_Transmit+0x188>
  while((hspi->Instance->SR & Flag) != State)
 800b470:	689a      	ldr	r2, [r3, #8]
 800b472:	0792      	lsls	r2, r2, #30
 800b474:	d48d      	bmi.n	800b392 <HAL_SPI_Transmit+0x102>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b476:	b12d      	cbz	r5, 800b484 <HAL_SPI_Transmit+0x1f4>
 800b478:	f7fd fef2 	bl	8009260 <HAL_GetTick>
 800b47c:	1b80      	subs	r0, r0, r6
 800b47e:	4285      	cmp	r5, r0
 800b480:	d881      	bhi.n	800b386 <HAL_SPI_Transmit+0xf6>
 800b482:	6823      	ldr	r3, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b484:	685a      	ldr	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b486:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b48c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b490:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b492:	d01e      	beq.n	800b4d2 <HAL_SPI_Transmit+0x242>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b494:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b496:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b49a:	d1d3      	bne.n	800b444 <HAL_SPI_Transmit+0x1b4>
          SPI_RESET_CRC(hspi);
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b4a2:	400a      	ands	r2, r1
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	e7c9      	b.n	800b444 <HAL_SPI_Transmit+0x1b4>
  __HAL_LOCK(hspi);
 800b4b0:	2002      	movs	r0, #2
}
 800b4b2:	b002      	add	sp, #8
 800b4b4:	bd70      	pop	{r4, r5, r6, pc}
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4b6:	68a3      	ldr	r3, [r4, #8]
 800b4b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4bc:	d002      	beq.n	800b4c4 <HAL_SPI_Transmit+0x234>
 800b4be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4c2:	d1b2      	bne.n	800b42a <HAL_SPI_Transmit+0x19a>
          __HAL_SPI_DISABLE(hspi);
 800b4c4:	6803      	ldr	r3, [r0, #0]
 800b4c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ca:	6003      	str	r3, [r0, #0]
 800b4cc:	e7ad      	b.n	800b42a <HAL_SPI_Transmit+0x19a>
    return HAL_TIMEOUT;
 800b4ce:	2003      	movs	r0, #3
 800b4d0:	e74e      	b.n	800b370 <HAL_SPI_Transmit+0xe0>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4d2:	68a2      	ldr	r2, [r4, #8]
 800b4d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b4d8:	d002      	beq.n	800b4e0 <HAL_SPI_Transmit+0x250>
 800b4da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b4de:	d1d9      	bne.n	800b494 <HAL_SPI_Transmit+0x204>
          __HAL_SPI_DISABLE(hspi);
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	e7d4      	b.n	800b494 <HAL_SPI_Transmit+0x204>
 800b4ea:	bf00      	nop

0800b4ec <HAL_SPI_TransmitReceive>:
{
 800b4ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	b083      	sub	sp, #12
  __IO uint16_t tmpreg = 0;
 800b4f4:	2000      	movs	r0, #0
{
 800b4f6:	461d      	mov	r5, r3
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	4690      	mov	r8, r2
  __IO uint16_t tmpreg = 0;
 800b4fc:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 800b500:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 800b502:	f7fd fead 	bl	8009260 <HAL_GetTick>
  if(hspi->State != HAL_SPI_STATE_READY) 
 800b506:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d10c      	bne.n	800b528 <HAL_SPI_TransmitReceive+0x3c>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800b50e:	2d00      	cmp	r5, #0
 800b510:	bf18      	it	ne
 800b512:	f1b8 0f00 	cmpne.w	r8, #0
 800b516:	d003      	beq.n	800b520 <HAL_SPI_TransmitReceive+0x34>
 800b518:	fab9 f289 	clz	r2, r9
 800b51c:	0952      	lsrs	r2, r2, #5
 800b51e:	b13a      	cbz	r2, 800b530 <HAL_SPI_TransmitReceive+0x44>
    return HAL_ERROR;
 800b520:	2001      	movs	r0, #1
}
 800b522:	b003      	add	sp, #12
 800b524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800b528:	2002      	movs	r0, #2
}
 800b52a:	b003      	add	sp, #12
 800b52c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi); 
 800b530:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
 800b534:	2901      	cmp	r1, #1
 800b536:	d0f7      	beq.n	800b528 <HAL_SPI_TransmitReceive+0x3c>
 800b538:	4607      	mov	r7, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b53a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b53c:	2105      	movs	r1, #5
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b53e:	6622      	str	r2, [r4, #96]	; 0x60
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b540:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  __HAL_LOCK(hspi); 
 800b544:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hspi->pRxBuffPtr  = pRxData;
 800b548:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b54c:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b550:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800b554:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b558:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b55a:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b55c:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
 800b560:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b562:	d108      	bne.n	800b576 <HAL_SPI_TransmitReceive+0x8a>
    SPI_RESET_CRC(hspi);
 800b564:	6813      	ldr	r3, [r2, #0]
 800b566:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b56a:	400b      	ands	r3, r1
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	6813      	ldr	r3, [r2, #0]
 800b570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b574:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b576:	68e1      	ldr	r1, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b578:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b57a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b57e:	d801      	bhi.n	800b584 <HAL_SPI_TransmitReceive+0x98>
 800b580:	2d01      	cmp	r5, #1
 800b582:	d946      	bls.n	800b612 <HAL_SPI_TransmitReceive+0x126>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b588:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b58a:	6813      	ldr	r3, [r2, #0]
 800b58c:	0658      	lsls	r0, r3, #25
 800b58e:	d403      	bmi.n	800b598 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 800b590:	6813      	ldr	r3, [r2, #0]
 800b592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b596:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b598:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b59c:	d93f      	bls.n	800b61e <HAL_SPI_TransmitReceive+0x132>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	1c73      	adds	r3, r6, #1
 800b5a2:	f040 80b6 	bne.w	800b712 <HAL_SPI_TransmitReceive+0x226>
 800b5a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b5a8:	2d00      	cmp	r5, #0
 800b5aa:	f000 808c 	beq.w	800b6c6 <HAL_SPI_TransmitReceive+0x1da>
 800b5ae:	6822      	ldr	r2, [r4, #0]
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b5b0:	6893      	ldr	r3, [r2, #8]
        hspi->TxXferCount--;
 800b5b2:	3d01      	subs	r5, #1
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b5b4:	f013 0f02 	tst.w	r3, #2
        hspi->TxXferCount--;
 800b5b8:	b2ad      	uxth	r5, r5
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b5ba:	d009      	beq.n	800b5d0 <HAL_SPI_TransmitReceive+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b5be:	f833 7b02 	ldrh.w	r7, [r3], #2
 800b5c2:	60d7      	str	r7, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b5c6:	87e5      	strh	r5, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b5c8:	b915      	cbnz	r5, 800b5d0 <HAL_SPI_TransmitReceive+0xe4>
 800b5ca:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b5ce:	d075      	beq.n	800b6bc <HAL_SPI_TransmitReceive+0x1d0>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b5d0:	2900      	cmp	r1, #0
 800b5d2:	d17b      	bne.n	800b6cc <HAL_SPI_TransmitReceive+0x1e0>
 800b5d4:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	d1ea      	bne.n	800b5b0 <HAL_SPI_TransmitReceive+0xc4>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5da:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b5de:	f000 80da 	beq.w	800b796 <HAL_SPI_TransmitReceive+0x2aa>
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f7ff fd67 	bl	800b0b8 <SPI_EndRxTxTransaction>
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f040 80d0 	bne.w	800b792 <HAL_SPI_TransmitReceive+0x2a6>
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b5f2:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	6e20      	ldr	r0, [r4, #96]	; 0x60
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b5f8:	68aa      	ldr	r2, [r5, #8]
  hspi->State = HAL_SPI_STATE_READY;
 800b5fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b5fe:	f012 0210 	ands.w	r2, r2, #16
 800b602:	f040 80b1 	bne.w	800b768 <HAL_SPI_TransmitReceive+0x27c>
    return HAL_BUSY;
 800b606:	3000      	adds	r0, #0
  __HAL_UNLOCK(hspi);
 800b608:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800b60c:	bf18      	it	ne
 800b60e:	2001      	movne	r0, #1
 800b610:	e787      	b.n	800b522 <HAL_SPI_TransmitReceive+0x36>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b612:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b616:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b618:	6813      	ldr	r3, [r2, #0]
 800b61a:	065b      	lsls	r3, r3, #25
 800b61c:	d5b8      	bpl.n	800b590 <HAL_SPI_TransmitReceive+0xa4>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b61e:	bb0d      	cbnz	r5, 800b664 <HAL_SPI_TransmitReceive+0x178>
 800b620:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 8085 	beq.w	800b734 <HAL_SPI_TransmitReceive+0x248>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b62a:	6821      	ldr	r1, [r4, #0]
 800b62c:	688a      	ldr	r2, [r1, #8]
 800b62e:	07d5      	lsls	r5, r2, #31
 800b630:	d513      	bpl.n	800b65a <HAL_SPI_TransmitReceive+0x16e>
        if(hspi->RxXferCount > 1)
 800b632:	2b01      	cmp	r3, #1
 800b634:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b636:	d962      	bls.n	800b6fe <HAL_SPI_TransmitReceive+0x212>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b638:	4613      	mov	r3, r2
 800b63a:	68ca      	ldr	r2, [r1, #12]
 800b63c:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->RxXferCount -= 2;
 800b640:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b644:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800b646:	1e93      	subs	r3, r2, #2
 800b648:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800b64a:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800b64c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800b650:	d803      	bhi.n	800b65a <HAL_SPI_TransmitReceive+0x16e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b652:	684b      	ldr	r3, [r1, #4]
 800b654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b658:	604b      	str	r3, [r1, #4]
      if(Timeout != HAL_MAX_DELAY)
 800b65a:	1c70      	adds	r0, r6, #1
 800b65c:	d120      	bne.n	800b6a0 <HAL_SPI_TransmitReceive+0x1b4>
 800b65e:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b660:	2d00      	cmp	r5, #0
 800b662:	d0dd      	beq.n	800b620 <HAL_SPI_TransmitReceive+0x134>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	0792      	lsls	r2, r2, #30
 800b66a:	d513      	bpl.n	800b694 <HAL_SPI_TransmitReceive+0x1a8>
        if(hspi->TxXferCount > 1)
 800b66c:	2d01      	cmp	r5, #1
 800b66e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b670:	d93c      	bls.n	800b6ec <HAL_SPI_TransmitReceive+0x200>
          hspi->TxXferCount -= 2;
 800b672:	3d02      	subs	r5, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b674:	f832 1b02 	ldrh.w	r1, [r2], #2
          hspi->TxXferCount -= 2;
 800b678:	b2ad      	uxth	r5, r5
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b67a:	60d9      	str	r1, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b67c:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800b67e:	87e5      	strh	r5, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b680:	b945      	cbnz	r5, 800b694 <HAL_SPI_TransmitReceive+0x1a8>
 800b682:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b684:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b688:	d104      	bne.n	800b694 <HAL_SPI_TransmitReceive+0x1a8>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b68a:	6822      	ldr	r2, [r4, #0]
 800b68c:	6813      	ldr	r3, [r2, #0]
 800b68e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b692:	6013      	str	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b694:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1c6      	bne.n	800b62a <HAL_SPI_TransmitReceive+0x13e>
      if(Timeout != HAL_MAX_DELAY)
 800b69c:	1c70      	adds	r0, r6, #1
 800b69e:	d0de      	beq.n	800b65e <HAL_SPI_TransmitReceive+0x172>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b6a0:	b126      	cbz	r6, 800b6ac <HAL_SPI_TransmitReceive+0x1c0>
 800b6a2:	f7fd fddd 	bl	8009260 <HAL_GetTick>
 800b6a6:	1bc0      	subs	r0, r0, r7
 800b6a8:	42b0      	cmp	r0, r6
 800b6aa:	d9d8      	bls.n	800b65e <HAL_SPI_TransmitReceive+0x172>
          hspi->State = HAL_SPI_STATE_READY;
 800b6ac:	2201      	movs	r2, #1
          __HAL_UNLOCK(hspi);
 800b6ae:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800b6b0:	2003      	movs	r0, #3
          hspi->State = HAL_SPI_STATE_READY;
 800b6b2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800b6b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
 800b6ba:	e732      	b.n	800b522 <HAL_SPI_TransmitReceive+0x36>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b6bc:	6813      	ldr	r3, [r2, #0]
 800b6be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	e784      	b.n	800b5d0 <HAL_SPI_TransmitReceive+0xe4>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b6c6:	2900      	cmp	r1, #0
 800b6c8:	d087      	beq.n	800b5da <HAL_SPI_TransmitReceive+0xee>
 800b6ca:	6822      	ldr	r2, [r4, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b6cc:	6893      	ldr	r3, [r2, #8]
 800b6ce:	07dd      	lsls	r5, r3, #31
 800b6d0:	d50a      	bpl.n	800b6e8 <HAL_SPI_TransmitReceive+0x1fc>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b6d2:	68d2      	ldr	r2, [r2, #12]
 800b6d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6d6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800b6da:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6de:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b6e0:	3901      	subs	r1, #1
 800b6e2:	b289      	uxth	r1, r1
 800b6e4:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
 800b6e8:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 800b6ea:	e75d      	b.n	800b5a8 <HAL_SPI_TransmitReceive+0xbc>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b6ec:	1c51      	adds	r1, r2, #1
 800b6ee:	63a1      	str	r1, [r4, #56]	; 0x38
 800b6f0:	7812      	ldrb	r2, [r2, #0]
 800b6f2:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800b6f4:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 800b6f6:	3d01      	subs	r5, #1
 800b6f8:	b2ad      	uxth	r5, r5
 800b6fa:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800b6fc:	e7c0      	b.n	800b680 <HAL_SPI_TransmitReceive+0x194>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800b6fe:	1c53      	adds	r3, r2, #1
 800b700:	6423      	str	r3, [r4, #64]	; 0x40
 800b702:	7b0b      	ldrb	r3, [r1, #12]
 800b704:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 800b706:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b70a:	3b01      	subs	r3, #1
 800b70c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b710:	e7a3      	b.n	800b65a <HAL_SPI_TransmitReceive+0x16e>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b712:	b98d      	cbnz	r5, 800b738 <HAL_SPI_TransmitReceive+0x24c>
 800b714:	b171      	cbz	r1, 800b734 <HAL_SPI_TransmitReceive+0x248>
 800b716:	6823      	ldr	r3, [r4, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b718:	689a      	ldr	r2, [r3, #8]
 800b71a:	07d2      	lsls	r2, r2, #31
 800b71c:	d42e      	bmi.n	800b77c <HAL_SPI_TransmitReceive+0x290>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b71e:	2e00      	cmp	r6, #0
 800b720:	d0c4      	beq.n	800b6ac <HAL_SPI_TransmitReceive+0x1c0>
 800b722:	f7fd fd9d 	bl	8009260 <HAL_GetTick>
 800b726:	1bc0      	subs	r0, r0, r7
 800b728:	42b0      	cmp	r0, r6
 800b72a:	d8bf      	bhi.n	800b6ac <HAL_SPI_TransmitReceive+0x1c0>
 800b72c:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 800b72e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800b732:	e735      	b.n	800b5a0 <HAL_SPI_TransmitReceive+0xb4>
 800b734:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b736:	e750      	b.n	800b5da <HAL_SPI_TransmitReceive+0xee>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	689a      	ldr	r2, [r3, #8]
 800b73c:	0790      	lsls	r0, r2, #30
 800b73e:	d510      	bpl.n	800b762 <HAL_SPI_TransmitReceive+0x276>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b740:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b742:	3d01      	subs	r5, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b744:	f832 0b02 	ldrh.w	r0, [r2], #2
        hspi->TxXferCount--;
 800b748:	b2ad      	uxth	r5, r5
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b74a:	60d8      	str	r0, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b74c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b74e:	87e5      	strh	r5, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b750:	b93d      	cbnz	r5, 800b762 <HAL_SPI_TransmitReceive+0x276>
 800b752:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b754:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b758:	d103      	bne.n	800b762 <HAL_SPI_TransmitReceive+0x276>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b760:	601a      	str	r2, [r3, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b762:	2900      	cmp	r1, #0
 800b764:	d0db      	beq.n	800b71e <HAL_SPI_TransmitReceive+0x232>
 800b766:	e7d7      	b.n	800b718 <HAL_SPI_TransmitReceive+0x22c>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b768:	f040 0202 	orr.w	r2, r0, #2
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b76c:	f64f 76ef 	movw	r6, #65519	; 0xffef
    return HAL_ERROR;
 800b770:	4618      	mov	r0, r3
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b772:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b774:	60ae      	str	r6, [r5, #8]
    __HAL_UNLOCK(hspi);
 800b776:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800b77a:	e6d2      	b.n	800b522 <HAL_SPI_TransmitReceive+0x36>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b780:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800b784:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b788:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b78a:	3b01      	subs	r3, #1
 800b78c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b790:	e7c5      	b.n	800b71e <HAL_SPI_TransmitReceive+0x232>
    return HAL_TIMEOUT;
 800b792:	2003      	movs	r0, #3
 800b794:	e6c5      	b.n	800b522 <HAL_SPI_TransmitReceive+0x36>
  uint32_t tickstart = HAL_GetTick();
 800b796:	f7fd fd63 	bl	8009260 <HAL_GetTick>
 800b79a:	4605      	mov	r5, r0
 800b79c:	1c71      	adds	r1, r6, #1
  while((hspi->Instance->SR & Flag) != State)
 800b79e:	6822      	ldr	r2, [r4, #0]
 800b7a0:	d11e      	bne.n	800b7e0 <HAL_SPI_TransmitReceive+0x2f4>
 800b7a2:	6893      	ldr	r3, [r2, #8]
 800b7a4:	07db      	lsls	r3, r3, #31
 800b7a6:	d5fc      	bpl.n	800b7a2 <HAL_SPI_TransmitReceive+0x2b6>
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7a8:	68e3      	ldr	r3, [r4, #12]
 800b7aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b7ae:	d041      	beq.n	800b834 <HAL_SPI_TransmitReceive+0x348>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7b0:	7b13      	ldrb	r3, [r2, #12]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b7b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7b4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b7b8:	2a02      	cmp	r2, #2
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b7ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b7be:	f47f af10 	bne.w	800b5e2 <HAL_SPI_TransmitReceive+0xf6>
  uint32_t tickstart = HAL_GetTick();
 800b7c2:	f7fd fd4d 	bl	8009260 <HAL_GetTick>
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	1c70      	adds	r0, r6, #1
  while((hspi->Instance->SR & Flag) != State)
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	d139      	bne.n	800b842 <HAL_SPI_TransmitReceive+0x356>
 800b7ce:	6893      	ldr	r3, [r2, #8]
 800b7d0:	07d9      	lsls	r1, r3, #31
 800b7d2:	d5fc      	bpl.n	800b7ce <HAL_SPI_TransmitReceive+0x2e2>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7d4:	7b13      	ldrb	r3, [r2, #12]
 800b7d6:	f8ad 3006 	strh.w	r3, [sp, #6]
        UNUSED(tmpreg); /* To avoid GCC warning */
 800b7da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b7de:	e700      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0xf6>
  while((hspi->Instance->SR & Flag) != State)
 800b7e0:	6893      	ldr	r3, [r2, #8]
 800b7e2:	07df      	lsls	r7, r3, #31
 800b7e4:	d4e0      	bmi.n	800b7a8 <HAL_SPI_TransmitReceive+0x2bc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b7e6:	b12e      	cbz	r6, 800b7f4 <HAL_SPI_TransmitReceive+0x308>
 800b7e8:	f7fd fd3a 	bl	8009260 <HAL_GetTick>
 800b7ec:	1b40      	subs	r0, r0, r5
 800b7ee:	4286      	cmp	r6, r0
 800b7f0:	d8d4      	bhi.n	800b79c <HAL_SPI_TransmitReceive+0x2b0>
 800b7f2:	6822      	ldr	r2, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7f4:	6853      	ldr	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7f6:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7f8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b800:	6053      	str	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b802:	d048      	beq.n	800b896 <HAL_SPI_TransmitReceive+0x3aa>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b80a:	d108      	bne.n	800b81e <HAL_SPI_TransmitReceive+0x332>
          SPI_RESET_CRC(hspi);
 800b80c:	6813      	ldr	r3, [r2, #0]
 800b80e:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b812:	400b      	ands	r3, r1
 800b814:	6013      	str	r3, [r2, #0]
 800b816:	6813      	ldr	r3, [r2, #0]
 800b818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b81c:	6013      	str	r3, [r2, #0]
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b81e:	6e23      	ldr	r3, [r4, #96]	; 0x60
        hspi->State= HAL_SPI_STATE_READY;
 800b820:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800b822:	2100      	movs	r1, #0
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b824:	f043 0302 	orr.w	r3, r3, #2
        hspi->State= HAL_SPI_STATE_READY;
 800b828:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b82c:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b830:	6623      	str	r3, [r4, #96]	; 0x60
 800b832:	e7b9      	b.n	800b7a8 <HAL_SPI_TransmitReceive+0x2bc>
      tmpreg = hspi->Instance->DR;
 800b834:	68d3      	ldr	r3, [r2, #12]
 800b836:	b29b      	uxth	r3, r3
 800b838:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b83c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b840:	e6cf      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0xf6>
  while((hspi->Instance->SR & Flag) != State)
 800b842:	6893      	ldr	r3, [r2, #8]
 800b844:	07db      	lsls	r3, r3, #31
 800b846:	d4c5      	bmi.n	800b7d4 <HAL_SPI_TransmitReceive+0x2e8>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b848:	b12e      	cbz	r6, 800b856 <HAL_SPI_TransmitReceive+0x36a>
 800b84a:	f7fd fd09 	bl	8009260 <HAL_GetTick>
 800b84e:	1b40      	subs	r0, r0, r5
 800b850:	4286      	cmp	r6, r0
 800b852:	d8b9      	bhi.n	800b7c8 <HAL_SPI_TransmitReceive+0x2dc>
 800b854:	6822      	ldr	r2, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b856:	6853      	ldr	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b858:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b85a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b85e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b862:	6053      	str	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b864:	d023      	beq.n	800b8ae <HAL_SPI_TransmitReceive+0x3c2>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b86c:	d108      	bne.n	800b880 <HAL_SPI_TransmitReceive+0x394>
          SPI_RESET_CRC(hspi);
 800b86e:	6813      	ldr	r3, [r2, #0]
 800b870:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b874:	400b      	ands	r3, r1
 800b876:	6013      	str	r3, [r2, #0]
 800b878:	6813      	ldr	r3, [r2, #0]
 800b87a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b87e:	6013      	str	r3, [r2, #0]
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b880:	6e23      	ldr	r3, [r4, #96]	; 0x60
        hspi->State= HAL_SPI_STATE_READY;
 800b882:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800b884:	2100      	movs	r1, #0
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b886:	f043 0302 	orr.w	r3, r3, #2
        hspi->State= HAL_SPI_STATE_READY;
 800b88a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b88e:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b892:	6623      	str	r3, [r4, #96]	; 0x60
 800b894:	e79e      	b.n	800b7d4 <HAL_SPI_TransmitReceive+0x2e8>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b896:	68a3      	ldr	r3, [r4, #8]
 800b898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b89c:	d002      	beq.n	800b8a4 <HAL_SPI_TransmitReceive+0x3b8>
 800b89e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8a2:	d1af      	bne.n	800b804 <HAL_SPI_TransmitReceive+0x318>
          __HAL_SPI_DISABLE(hspi);
 800b8a4:	6813      	ldr	r3, [r2, #0]
 800b8a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	e7aa      	b.n	800b804 <HAL_SPI_TransmitReceive+0x318>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8ae:	68a3      	ldr	r3, [r4, #8]
 800b8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b4:	d002      	beq.n	800b8bc <HAL_SPI_TransmitReceive+0x3d0>
 800b8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8ba:	d1d4      	bne.n	800b866 <HAL_SPI_TransmitReceive+0x37a>
          __HAL_SPI_DISABLE(hspi);
 800b8bc:	6813      	ldr	r3, [r2, #0]
 800b8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	e7cf      	b.n	800b866 <HAL_SPI_TransmitReceive+0x37a>
 800b8c6:	bf00      	nop

0800b8c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b8cc:	680f      	ldr	r7, [r1, #0]
 800b8ce:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 800b8d2:	2f01      	cmp	r7, #1
 800b8d4:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 800b8d8:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 800b8dc:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 800b8e0:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 800b8e4:	d012      	beq.n	800b90c <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8e6:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b8e8:	4f15      	ldr	r7, [pc, #84]	; (800b940 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b8ea:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8ec:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b8f0:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8f2:	4322      	orrs	r2, r4
 800b8f4:	ea42 0308 	orr.w	r3, r2, r8
 800b8f8:	ea43 030c 	orr.w	r3, r3, ip
 800b8fc:	4333      	orrs	r3, r6
 800b8fe:	432b      	orrs	r3, r5
 800b900:	430b      	orrs	r3, r1
 800b902:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b904:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800b906:	2000      	movs	r0, #0
 800b908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b90c:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b910:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b912:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b914:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b918:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b91c:	4c08      	ldr	r4, [pc, #32]	; (800b940 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b91e:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b922:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b924:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b928:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b92c:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b92e:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b930:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b932:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b934:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b936:	6043      	str	r3, [r0, #4]
}
 800b938:	2000      	movs	r0, #0
 800b93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b93e:	bf00      	nop
 800b940:	ffff8000 	.word	0xffff8000

0800b944 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b948:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b94a:	2a01      	cmp	r2, #1
 800b94c:	68cf      	ldr	r7, [r1, #12]
 800b94e:	694e      	ldr	r6, [r1, #20]
 800b950:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b954:	684d      	ldr	r5, [r1, #4]
 800b956:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800b95a:	688c      	ldr	r4, [r1, #8]
 800b95c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800b960:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800b964:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800b968:	6809      	ldr	r1, [r1, #0]
 800b96a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b96e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b972:	ea4f 3707 	mov.w	r7, r7, lsl #12
 800b976:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800b97a:	ea4f 5606 	mov.w	r6, r6, lsl #20
 800b97e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800b982:	ea4f 2104 	mov.w	r1, r4, lsl #8
 800b986:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 800b98a:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 800b98e:	d012      	beq.n	800b9b6 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b990:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b994:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b996:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b99a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b99e:	ea42 0305 	orr.w	r3, r2, r5
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	ea43 030e 	orr.w	r3, r3, lr
 800b9a8:	ea43 030c 	orr.w	r3, r3, ip
 800b9ac:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b9ae:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9b6:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b9b8:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b9bc:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9be:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b9c2:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b9c4:	4e07      	ldr	r6, [pc, #28]	; (800b9e4 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9c6:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b9ca:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b9ce:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9d0:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b9d4:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9d6:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b9d8:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b9da:	60c3      	str	r3, [r0, #12]
}
 800b9dc:	2000      	movs	r0, #0
 800b9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e2:	bf00      	nop
 800b9e4:	ff0f0fff 	.word	0xff0f0fff

0800b9e8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b9e8:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 800b9ea:	2200      	movs	r2, #0
{
 800b9ec:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b9ee:	684d      	ldr	r5, [r1, #4]
{
 800b9f0:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b9f2:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800b9f4:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 800b9f6:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b9f8:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b9fa:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b9fe:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ba02:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ba04:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ba08:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	6123      	str	r3, [r4, #16]
}
 800ba0e:	b002      	add	sp, #8
 800ba10:	bc30      	pop	{r4, r5}
 800ba12:	4770      	bx	lr

0800ba14 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ba14:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 800ba16:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800ba18:	6953      	ldr	r3, [r2, #20]
 800ba1a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ba1e:	6151      	str	r1, [r2, #20]
}
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop

0800ba24 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv>:
}

uint8_t JPEGDecoder::pjpeg_callback(uint8_t *pBuf, uint8_t buf_size,
                                    uint8_t *pBytes_actually_read,
                                    void *pCallback_data) {
  JPEGDecoder *thisPtr = JpegDec.thisPtr;
 800ba24:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x40>)
 800ba26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                                    void *pCallback_data) {
 800ba28:	b470      	push	{r4, r5, r6}
uint8_t JPEGDecoder::pjpeg_need_bytes_callback(uint8_t *pBuf, uint8_t buf_size,
                                               uint8_t *pBytes_actually_read,
                                               void *pCallback_data) {
  uint n;

  n = jpg_min(g_nInFileSize - g_nInFileOfs, buf_size);
 800ba2a:	e9d3 460f 	ldrd	r4, r6, [r3, #60]	; 0x3c

  if (jpg_source == JPEG_ARRAY) {
 800ba2e:	f893 5059 	ldrb.w	r5, [r3, #89]	; 0x59
  n = jpg_min(g_nInFileSize - g_nInFileOfs, buf_size);
 800ba32:	1ba4      	subs	r4, r4, r6
 800ba34:	42a1      	cmp	r1, r4
 800ba36:	bf28      	it	cs
 800ba38:	4621      	movcs	r1, r4
  if (jpg_source == JPEG_ARRAY) {
 800ba3a:	b95d      	cbnz	r5, 800ba54 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x30>
    for (int i = 0; i < n; i++) {
 800ba3c:	b151      	cbz	r1, 800ba54 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x30>
 800ba3e:	1846      	adds	r6, r0, r1
 800ba40:	3801      	subs	r0, #1
 800ba42:	3e01      	subs	r6, #1
      pBuf[i] = *jpg_data++;
 800ba44:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800ba46:	1c65      	adds	r5, r4, #1
 800ba48:	65dd      	str	r5, [r3, #92]	; 0x5c
 800ba4a:	7824      	ldrb	r4, [r4, #0]
 800ba4c:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (int i = 0; i < n; i++) {
 800ba50:	4286      	cmp	r6, r0
 800ba52:	d1f7      	bne.n	800ba44 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x20>
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    g_pInFileSd.read(pBuf, n);
#endif

  *pBytes_actually_read = (uint8_t)(n);
 800ba54:	7011      	strb	r1, [r2, #0]
}
 800ba56:	2000      	movs	r0, #0
  g_nInFileOfs += n;
 800ba58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba5a:	4411      	add	r1, r2
}
 800ba5c:	bc70      	pop	{r4, r5, r6}
  g_nInFileOfs += n;
 800ba5e:	6419      	str	r1, [r3, #64]	; 0x40
}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20000c3c 	.word	0x20000c3c

0800ba68 <_ZN11JPEGDecoder4readEv>:
    }
  }
  return 1;
}

int JPEGDecoder::read(void) {
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800ba6e:	b095      	sub	sp, #84	; 0x54
  int y, x;
  uint16_t *pDst_row;

  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 800ba70:	6b03      	ldr	r3, [r0, #48]	; 0x30
int JPEGDecoder::read(void) {
 800ba72:	900a      	str	r0, [sp, #40]	; 0x28
 800ba74:	9106      	str	r1, [sp, #24]
  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 80f8 	beq.w	800bc6c <_ZN11JPEGDecoder4readEv+0x204>
 800ba7c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ba7e:	6943      	ldr	r3, [r0, #20]
 800ba80:	9212      	str	r2, [sp, #72]	; 0x48
 800ba82:	429a      	cmp	r2, r3
 800ba84:	f280 80f2 	bge.w	800bc6c <_ZN11JPEGDecoder4readEv+0x204>
    abort();
    return 0;
  }

  pDst_row = pImage;
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800ba88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba8a:	6a13      	ldr	r3, [r2, #32]
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	9713      	str	r7, [sp, #76]	; 0x4c
 800ba94:	f340 80fa 	ble.w	800bc8c <_ZN11JPEGDecoder4readEv+0x224>
 800ba98:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800ba9a:	4616      	mov	r6, r2

    const int by_limit =
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));

    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800ba9c:	69cc      	ldr	r4, [r1, #28]
 800ba9e:	0105      	lsls	r5, r0, #4
 800baa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800baa2:	2c00      	cmp	r4, #0
 800baa4:	950d      	str	r5, [sp, #52]	; 0x34
 800baa6:	fb03 f202 	mul.w	r2, r3, r2
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 800baaa:	688d      	ldr	r5, [r1, #8]
 800baac:	f340 80ee 	ble.w	800bc8c <_ZN11JPEGDecoder4readEv+0x224>
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;

      const int bx_limit =
          jpg_min(8, image_info.m_width - (mcu_x * image_info.m_MCUWidth + x));
 800bab0:	6849      	ldr	r1, [r1, #4]
 800bab2:	1aad      	subs	r5, r5, r2
 800bab4:	1e62      	subs	r2, r4, #1
 800bab6:	3b01      	subs	r3, #1
 800bab8:	fb04 1117 	mls	r1, r4, r7, r1
 800babc:	f1a5 0408 	sub.w	r4, r5, #8
 800bac0:	f022 0207 	bic.w	r2, r2, #7
 800bac4:	f023 0307 	bic.w	r3, r3, #7
 800bac8:	9111      	str	r1, [sp, #68]	; 0x44
 800baca:	3908      	subs	r1, #8
 800bacc:	1ae3      	subs	r3, r4, r3

          pSrcR += (8 - bx_limit);
          pSrcG += (8 - bx_limit);
          pSrcB += (8 - bx_limit);

          pDst_block += row_pitch;
 800bace:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 800bad2:	1a8a      	subs	r2, r1, r2
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800bad4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800bad6:	930c      	str	r3, [sp, #48]	; 0x30
 800bad8:	9204      	str	r2, [sp, #16]
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 800bada:	6ab2      	ldr	r2, [r6, #40]	; 0x28
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800badc:	7e33      	ldrb	r3, [r6, #24]
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 800bade:	920f      	str	r2, [sp, #60]	; 0x3c
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 800bae0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800bae2:	9305      	str	r3, [sp, #20]
 800bae4:	462b      	mov	r3, r5
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 800bae6:	9210      	str	r2, [sp, #64]	; 0x40
          pDst_block += row_pitch;
 800bae8:	2200      	movs	r2, #0
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800baea:	f8df b378 	ldr.w	fp, [pc, #888]	; 800be64 <_ZN11JPEGDecoder4readEv+0x3fc>
          pDst_block += row_pitch;
 800baee:	9209      	str	r2, [sp, #36]	; 0x24
 800baf0:	4602      	mov	r2, r0
 800baf2:	9502      	str	r5, [sp, #8]
 800baf4:	940b      	str	r4, [sp, #44]	; 0x2c
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800baf6:	900e      	str	r0, [sp, #56]	; 0x38
    const int by_limit =
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bafc:	f04f 0900 	mov.w	r9, #0
 800bb00:	bfa8      	it	ge
 800bb02:	2308      	movge	r3, #8
 800bb04:	4698      	mov	r8, r3
 800bb06:	9b06      	ldr	r3, [sp, #24]
 800bb08:	9301      	str	r3, [sp, #4]
 800bb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0c:	441a      	add	r2, r3
 800bb0e:	9203      	str	r2, [sp, #12]
 800bb10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb12:	441a      	add	r2, r3
 800bb14:	9207      	str	r2, [sp, #28]
 800bb16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb18:	18d3      	adds	r3, r2, r3
 800bb1a:	9308      	str	r3, [sp, #32]
 800bb1c:	9b03      	ldr	r3, [sp, #12]
      const int bx_limit =
 800bb1e:	2d08      	cmp	r5, #8
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800bb20:	9e05      	ldr	r6, [sp, #20]
      const int bx_limit =
 800bb22:	46ac      	mov	ip, r5
      uint16_t *pDst_block = pDst_row + x;
 800bb24:	9a01      	ldr	r2, [sp, #4]
 800bb26:	444b      	add	r3, r9
      const int bx_limit =
 800bb28:	bfa8      	it	ge
 800bb2a:	f04f 0c08 	movge.w	ip, #8
        for (by = 0; by < by_limit; by++) {
 800bb2e:	9902      	ldr	r1, [sp, #8]
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800bb30:	2e00      	cmp	r6, #0
 800bb32:	f040 80d4 	bne.w	800bcde <_ZN11JPEGDecoder4readEv+0x276>
        for (by = 0; by < by_limit; by++) {
 800bb36:	2900      	cmp	r1, #0
 800bb38:	dd7c      	ble.n	800bc34 <_ZN11JPEGDecoder4readEv+0x1cc>
 800bb3a:	f1cc 0c08 	rsb	ip, ip, #8
          for (bx = 0; bx < bx_limit; bx++) {
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	dd73      	ble.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb42:	7818      	ldrb	r0, [r3, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb44:	2d01      	cmp	r5, #1
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb46:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800bb4a:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bb4e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bb52:	ea41 0104 	orr.w	r1, r1, r4
 800bb56:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bb5a:	8011      	strh	r1, [r2, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb5c:	f000 8157 	beq.w	800be0e <_ZN11JPEGDecoder4readEv+0x3a6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb60:	7858      	ldrb	r0, [r3, #1]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb62:	2d02      	cmp	r5, #2
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb64:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800bb68:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bb6c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bb70:	ea41 0104 	orr.w	r1, r1, r4
 800bb74:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bb78:	8051      	strh	r1, [r2, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb7a:	f000 814e 	beq.w	800be1a <_ZN11JPEGDecoder4readEv+0x3b2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb7e:	7898      	ldrb	r0, [r3, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb80:	2d03      	cmp	r5, #3
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb82:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800bb86:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bb8a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bb8e:	ea41 0104 	orr.w	r1, r1, r4
 800bb92:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bb96:	8091      	strh	r1, [r2, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb98:	f000 8149 	beq.w	800be2e <_ZN11JPEGDecoder4readEv+0x3c6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bb9c:	78d8      	ldrb	r0, [r3, #3]
          for (bx = 0; bx < bx_limit; bx++) {
 800bb9e:	2d04      	cmp	r5, #4
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bba0:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800bba4:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bba8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bbac:	ea41 0104 	orr.w	r1, r1, r4
 800bbb0:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bbb4:	80d1      	strh	r1, [r2, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800bbb6:	f000 8140 	beq.w	800be3a <_ZN11JPEGDecoder4readEv+0x3d2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bbba:	7918      	ldrb	r0, [r3, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800bbbc:	2d05      	cmp	r5, #5
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bbbe:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800bbc2:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bbc6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bbca:	ea41 0104 	orr.w	r1, r1, r4
 800bbce:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bbd2:	8111      	strh	r1, [r2, #8]
          for (bx = 0; bx < bx_limit; bx++) {
 800bbd4:	f000 8133 	beq.w	800be3e <_ZN11JPEGDecoder4readEv+0x3d6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bbd8:	7958      	ldrb	r0, [r3, #5]
          for (bx = 0; bx < bx_limit; bx++) {
 800bbda:	2d06      	cmp	r5, #6
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bbdc:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800bbe0:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bbe4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bbe8:	ea41 0104 	orr.w	r1, r1, r4
 800bbec:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bbf0:	8151      	strh	r1, [r2, #10]
          for (bx = 0; bx < bx_limit; bx++) {
 800bbf2:	f000 812a 	beq.w	800be4a <_ZN11JPEGDecoder4readEv+0x3e2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bbf6:	7998      	ldrb	r0, [r3, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800bbf8:	2d07      	cmp	r5, #7
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bbfa:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800bbfe:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bc02:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bc06:	ea41 0104 	orr.w	r1, r1, r4
 800bc0a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bc0e:	8191      	strh	r1, [r2, #12]
          for (bx = 0; bx < bx_limit; bx++) {
 800bc10:	f000 8121 	beq.w	800be56 <_ZN11JPEGDecoder4readEv+0x3ee>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bc14:	79d8      	ldrb	r0, [r3, #7]
            pSrcR++;
 800bc16:	3308      	adds	r3, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800bc18:	00c4      	lsls	r4, r0, #3
 800bc1a:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800bc1e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bc22:	4321      	orrs	r1, r4
 800bc24:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bc28:	81d1      	strh	r1, [r2, #14]
        for (by = 0; by < by_limit; by++) {
 800bc2a:	3601      	adds	r6, #1
          pSrcR += (8 - bx_limit);
 800bc2c:	4463      	add	r3, ip
          pDst_block += row_pitch;
 800bc2e:	4452      	add	r2, sl
        for (by = 0; by < by_limit; by++) {
 800bc30:	45b0      	cmp	r8, r6
 800bc32:	dc84      	bgt.n	800bb3e <_ZN11JPEGDecoder4readEv+0xd6>
 800bc34:	9b01      	ldr	r3, [sp, #4]
 800bc36:	3d08      	subs	r5, #8
 800bc38:	f109 0940 	add.w	r9, r9, #64	; 0x40
 800bc3c:	3310      	adds	r3, #16
 800bc3e:	9301      	str	r3, [sp, #4]
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800bc40:	9b04      	ldr	r3, [sp, #16]
 800bc42:	429d      	cmp	r5, r3
 800bc44:	f47f af6a 	bne.w	800bb1c <_ZN11JPEGDecoder4readEv+0xb4>
        }
      }
    }
    pDst_row += (row_pitch * 8);
 800bc48:	9b06      	ldr	r3, [sp, #24]
 800bc4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc4c:	4413      	add	r3, r2
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800bc4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    pDst_row += (row_pitch * 8);
 800bc50:	9306      	str	r3, [sp, #24]
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800bc52:	4611      	mov	r1, r2
 800bc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc56:	3380      	adds	r3, #128	; 0x80
 800bc58:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc5c:	4299      	cmp	r1, r3
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	d014      	beq.n	800bc8c <_ZN11JPEGDecoder4readEv+0x224>
 800bc62:	3b08      	subs	r3, #8
 800bc64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc66:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	e745      	b.n	800baf8 <_ZN11JPEGDecoder4readEv+0x90>
  return decode_mcu();
}

void JPEGDecoder::abort(void) {

  mcu_x = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  mcu_y = 0;
 800bc70:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
  is_available = 0;
 800bc74:	6313      	str	r3, [r2, #48]	; 0x30
  if (pImage)
 800bc76:	9b06      	ldr	r3, [sp, #24]
 800bc78:	b113      	cbz	r3, 800bc80 <_ZN11JPEGDecoder4readEv+0x218>
    delete[] pImage;
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f00b f936 	bl	8016eec <_ZdaPv>
  pImage = NULL;
 800bc80:	2000      	movs	r0, #0
 800bc82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc84:	6618      	str	r0, [r3, #96]	; 0x60
}
 800bc86:	b015      	add	sp, #84	; 0x54
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (mcu_x == image_info.m_MCUSPerRow) {
 800bc8c:	990a      	ldr	r1, [sp, #40]	; 0x28
  mcu_x++;
 800bc8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  if (mcu_x == image_info.m_MCUSPerRow) {
 800bc90:	690a      	ldr	r2, [r1, #16]
  mcu_x++;
 800bc92:	1c63      	adds	r3, r4, #1
  MCUy = mcu_y;
 800bc94:	9812      	ldr	r0, [sp, #72]	; 0x48
  MCUx = mcu_x;
 800bc96:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  if (mcu_x == image_info.m_MCUSPerRow) {
 800bc9a:	4293      	cmp	r3, r2
  mcu_x++;
 800bc9c:	634b      	str	r3, [r1, #52]	; 0x34
  MCUy = mcu_y;
 800bc9e:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
  if (mcu_x == image_info.m_MCUSPerRow) {
 800bca2:	d00f      	beq.n	800bcc4 <_ZN11JPEGDecoder4readEv+0x25c>
  status = pjpeg_decode_mcu();
 800bca4:	f003 fa08 	bl	800f0b8 <pjpeg_decode_mcu>
 800bca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcaa:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
  if (status) {
 800bcae:	b128      	cbz	r0, 800bcbc <_ZN11JPEGDecoder4readEv+0x254>
    is_available = 0;
 800bcb0:	2300      	movs	r3, #0
  return 1;
 800bcb2:	2001      	movs	r0, #1
    is_available = 0;
 800bcb4:	6313      	str	r3, [r2, #48]	; 0x30
}
 800bcb6:	b015      	add	sp, #84	; 0x54
 800bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 1;
 800bcbc:	2001      	movs	r0, #1
}
 800bcbe:	b015      	add	sp, #84	; 0x54
 800bcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mcu_y++;
 800bcc4:	4603      	mov	r3, r0
    mcu_x = 0;
 800bcc6:	2200      	movs	r2, #0
    mcu_y++;
 800bcc8:	3301      	adds	r3, #1
    mcu_x = 0;
 800bcca:	e9c1 230d 	strd	r2, r3, [r1, #52]	; 0x34
  status = pjpeg_decode_mcu();
 800bcce:	f003 f9f3 	bl	800f0b8 <pjpeg_decode_mcu>
 800bcd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcd4:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
  if (status) {
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d1e9      	bne.n	800bcb0 <_ZN11JPEGDecoder4readEv+0x248>
 800bcdc:	e7ee      	b.n	800bcbc <_ZN11JPEGDecoder4readEv+0x254>
        for (by = 0; by < by_limit; by++) {
 800bcde:	2900      	cmp	r1, #0
 800bce0:	dda8      	ble.n	800bc34 <_ZN11JPEGDecoder4readEv+0x1cc>
 800bce2:	9907      	ldr	r1, [sp, #28]
 800bce4:	f1cc 0c08 	rsb	ip, ip, #8
 800bce8:	f04f 0e00 	mov.w	lr, #0
 800bcec:	eb01 0709 	add.w	r7, r1, r9
 800bcf0:	9908      	ldr	r1, [sp, #32]
 800bcf2:	eb01 0609 	add.w	r6, r1, r9
          for (bx = 0; bx < bx_limit; bx++) {
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	dd7f      	ble.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bcfa:	783c      	ldrb	r4, [r7, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800bcfc:	2d01      	cmp	r5, #1
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bcfe:	7819      	ldrb	r1, [r3, #0]
 800bd00:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800bd04:	7830      	ldrb	r0, [r6, #0]
 800bd06:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800bd0a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bd0e:	ea41 0104 	orr.w	r1, r1, r4
 800bd12:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bd16:	8011      	strh	r1, [r2, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd18:	d07b      	beq.n	800be12 <_ZN11JPEGDecoder4readEv+0x3aa>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd1a:	787c      	ldrb	r4, [r7, #1]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd1c:	2d02      	cmp	r5, #2
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd1e:	7859      	ldrb	r1, [r3, #1]
 800bd20:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800bd24:	7870      	ldrb	r0, [r6, #1]
 800bd26:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800bd2a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bd2e:	ea41 0104 	orr.w	r1, r1, r4
 800bd32:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bd36:	8051      	strh	r1, [r2, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd38:	d071      	beq.n	800be1e <_ZN11JPEGDecoder4readEv+0x3b6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd3a:	78bc      	ldrb	r4, [r7, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd3c:	2d03      	cmp	r5, #3
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd3e:	7899      	ldrb	r1, [r3, #2]
 800bd40:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800bd44:	78b0      	ldrb	r0, [r6, #2]
 800bd46:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800bd4a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bd4e:	ea41 0104 	orr.w	r1, r1, r4
 800bd52:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bd56:	8091      	strh	r1, [r2, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd58:	d065      	beq.n	800be26 <_ZN11JPEGDecoder4readEv+0x3be>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd5a:	78fc      	ldrb	r4, [r7, #3]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd5c:	2d04      	cmp	r5, #4
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd5e:	78d9      	ldrb	r1, [r3, #3]
 800bd60:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800bd64:	78f0      	ldrb	r0, [r6, #3]
 800bd66:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800bd6a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bd6e:	ea41 0104 	orr.w	r1, r1, r4
 800bd72:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bd76:	80d1      	strh	r1, [r2, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd78:	d05b      	beq.n	800be32 <_ZN11JPEGDecoder4readEv+0x3ca>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd7a:	793c      	ldrb	r4, [r7, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd7c:	2d05      	cmp	r5, #5
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd7e:	7919      	ldrb	r1, [r3, #4]
 800bd80:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800bd84:	7930      	ldrb	r0, [r6, #4]
 800bd86:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800bd8a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bd8e:	ea41 0104 	orr.w	r1, r1, r4
 800bd92:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bd96:	8111      	strh	r1, [r2, #8]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd98:	d053      	beq.n	800be42 <_ZN11JPEGDecoder4readEv+0x3da>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd9a:	797c      	ldrb	r4, [r7, #5]
          for (bx = 0; bx < bx_limit; bx++) {
 800bd9c:	2d06      	cmp	r5, #6
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bd9e:	7959      	ldrb	r1, [r3, #5]
 800bda0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800bda4:	7970      	ldrb	r0, [r6, #5]
 800bda6:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800bdaa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bdae:	ea41 0104 	orr.w	r1, r1, r4
 800bdb2:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bdb6:	8151      	strh	r1, [r2, #10]
          for (bx = 0; bx < bx_limit; bx++) {
 800bdb8:	d049      	beq.n	800be4e <_ZN11JPEGDecoder4readEv+0x3e6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bdba:	79bc      	ldrb	r4, [r7, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800bdbc:	2d07      	cmp	r5, #7
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bdbe:	7999      	ldrb	r1, [r3, #6]
 800bdc0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800bdc4:	79b0      	ldrb	r0, [r6, #6]
 800bdc6:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800bdca:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bdce:	ea41 0104 	orr.w	r1, r1, r4
 800bdd2:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bdd6:	8191      	strh	r1, [r2, #12]
          for (bx = 0; bx < bx_limit; bx++) {
 800bdd8:	d03f      	beq.n	800be5a <_ZN11JPEGDecoder4readEv+0x3f2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bdda:	79fc      	ldrb	r4, [r7, #7]
            pSrcR++;
 800bddc:	3308      	adds	r3, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bdde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
            pSrcG++;
 800bde2:	3708      	adds	r7, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bde4:	00e4      	lsls	r4, r4, #3
 800bde6:	79f0      	ldrb	r0, [r6, #7]
 800bde8:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
            pSrcB++;
 800bdec:	3608      	adds	r6, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800bdee:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800bdf2:	4321      	orrs	r1, r4
 800bdf4:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800bdf8:	81d1      	strh	r1, [r2, #14]
        for (by = 0; by < by_limit; by++) {
 800bdfa:	f10e 0e01 	add.w	lr, lr, #1
          pSrcR += (8 - bx_limit);
 800bdfe:	4463      	add	r3, ip
          pSrcG += (8 - bx_limit);
 800be00:	4467      	add	r7, ip
          pSrcB += (8 - bx_limit);
 800be02:	4466      	add	r6, ip
        for (by = 0; by < by_limit; by++) {
 800be04:	45f0      	cmp	r8, lr
          pDst_block += row_pitch;
 800be06:	4452      	add	r2, sl
        for (by = 0; by < by_limit; by++) {
 800be08:	f73f af75 	bgt.w	800bcf6 <_ZN11JPEGDecoder4readEv+0x28e>
 800be0c:	e712      	b.n	800bc34 <_ZN11JPEGDecoder4readEv+0x1cc>
            pSrcR++;
 800be0e:	3301      	adds	r3, #1
 800be10:	e70b      	b.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800be12:	3301      	adds	r3, #1
            pSrcG++;
 800be14:	3701      	adds	r7, #1
            pSrcB++;
 800be16:	3601      	adds	r6, #1
 800be18:	e7ef      	b.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800be1a:	3302      	adds	r3, #2
 800be1c:	e705      	b.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800be1e:	3302      	adds	r3, #2
            pSrcG++;
 800be20:	3702      	adds	r7, #2
            pSrcB++;
 800be22:	3602      	adds	r6, #2
 800be24:	e7e9      	b.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800be26:	3303      	adds	r3, #3
            pSrcG++;
 800be28:	3703      	adds	r7, #3
            pSrcB++;
 800be2a:	3603      	adds	r6, #3
 800be2c:	e7e5      	b.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800be2e:	3303      	adds	r3, #3
 800be30:	e6fb      	b.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800be32:	3304      	adds	r3, #4
            pSrcG++;
 800be34:	3704      	adds	r7, #4
            pSrcB++;
 800be36:	3604      	adds	r6, #4
 800be38:	e7df      	b.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800be3a:	3304      	adds	r3, #4
 800be3c:	e6f5      	b.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
 800be3e:	3305      	adds	r3, #5
 800be40:	e6f3      	b.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800be42:	3305      	adds	r3, #5
            pSrcG++;
 800be44:	3705      	adds	r7, #5
            pSrcB++;
 800be46:	3605      	adds	r6, #5
 800be48:	e7d7      	b.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800be4a:	3306      	adds	r3, #6
 800be4c:	e6ed      	b.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800be4e:	3306      	adds	r3, #6
            pSrcG++;
 800be50:	3706      	adds	r7, #6
            pSrcB++;
 800be52:	3606      	adds	r6, #6
 800be54:	e7d1      	b.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800be56:	3307      	adds	r3, #7
 800be58:	e6e7      	b.n	800bc2a <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800be5a:	3307      	adds	r3, #7
            pSrcG++;
 800be5c:	3707      	adds	r7, #7
            pSrcB++;
 800be5e:	3607      	adds	r6, #7
 800be60:	e7cb      	b.n	800bdfa <_ZN11JPEGDecoder4readEv+0x392>
 800be62:	bf00      	nop
 800be64:	fffff800 	.word	0xfffff800

0800be68 <_ZN11JPEGDecoder11decodeArrayEPKhm>:
int JPEGDecoder::decodeArray(const uint8_t array[], uint32_t array_size) {
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	4604      	mov	r4, r0
  jpg_source = JPEG_ARRAY;
 800be6c:	2500      	movs	r5, #0
  jpg_data = (uint8_t *)array;
 800be6e:	65c1      	str	r1, [r0, #92]	; 0x5c
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800be70:	3004      	adds	r0, #4
  g_nInFileSize = array_size;
 800be72:	6382      	str	r2, [r0, #56]	; 0x38
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800be74:	462b      	mov	r3, r5
  jpg_source = JPEG_ARRAY;
 800be76:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800be7a:	462a      	mov	r2, r5
  g_nInFileOfs = 0;
 800be7c:	6425      	str	r5, [r4, #64]	; 0x40
  MCUSPerCol = 0;
 800be7e:	67a5      	str	r5, [r4, #120]	; 0x78
  scanType = (pjpeg_scan_type_t)0;
 800be80:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800be84:	4926      	ldr	r1, [pc, #152]	; (800bf20 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xb8>)
  height = 0;
 800be86:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
  MCUSPerRow = 0;
 800be8a:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
  MCUHeight = 0;
 800be8e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800be92:	f004 fc53 	bl	801073c <pjpeg_decode_init>
 800be96:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
  if (status) {
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d13a      	bne.n	800bf14 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xac>
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800be9e:	4a21      	ldr	r2, [pc, #132]	; (800bf24 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xbc>)
  decoded_width = image_info.m_width;
 800bea0:	6865      	ldr	r5, [r4, #4]
  decoded_height = image_info.m_height;
 800bea2:	68a1      	ldr	r1, [r4, #8]
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800bea4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
  decoded_height = image_info.m_height;
 800bea8:	64e1      	str	r1, [r4, #76]	; 0x4c
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800beaa:	fb00 f003 	mul.w	r0, r0, r3
 800beae:	4290      	cmp	r0, r2
  decoded_width = image_info.m_width;
 800beb0:	e9c4 3511 	strd	r3, r5, [r4, #68]	; 0x44
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800beb4:	bf94      	ite	ls
 800beb6:	0040      	lslls	r0, r0, #1
 800beb8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bebc:	f00b f818 	bl	8016ef0 <_Znaj>
  memset(pImage, 0,
 800bec0:	2100      	movs	r1, #0
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800bec2:	6620      	str	r0, [r4, #96]	; 0x60
         image_info.m_MCUWidth * image_info.m_MCUHeight * sizeof(*pImage));
 800bec4:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
 800bec8:	fb05 f206 	mul.w	r2, r5, r6
  memset(pImage, 0,
 800becc:	0052      	lsls	r2, r2, #1
 800bece:	f00c fdea 	bl	8018aa6 <memset>
  is_available = 1;
 800bed2:	2301      	movs	r3, #1
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 800bed4:	10f1      	asrs	r1, r6, #3
  width = decoded_width;
 800bed6:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 800bed8:	10ea      	asrs	r2, r5, #3
  MCUWidth = image_info.m_MCUWidth;
 800beda:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 800bede:	6521      	str	r1, [r4, #80]	; 0x50
  height = decoded_height;
 800bee0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
  MCUSPerRow = image_info.m_MCUSPerRow;
 800bee2:	6920      	ldr	r0, [r4, #16]
  MCUSPerCol = image_info.m_MCUSPerCol;
 800bee4:	6961      	ldr	r1, [r4, #20]
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 800bee6:	6562      	str	r2, [r4, #84]	; 0x54
  scanType = image_info.m_scanType;
 800bee8:	7e22      	ldrb	r2, [r4, #24]
  MCUHeight = image_info.m_MCUHeight;
 800beea:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  is_available = 1;
 800beee:	6323      	str	r3, [r4, #48]	; 0x30
  comps = 1;
 800bef0:	6723      	str	r3, [r4, #112]	; 0x70
  scanType = image_info.m_scanType;
 800bef2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
  height = decoded_height;
 800bef6:	e9c4 761a 	strd	r7, r6, [r4, #104]	; 0x68
  MCUSPerCol = image_info.m_MCUSPerCol;
 800befa:	e9c4 011d 	strd	r0, r1, [r4, #116]	; 0x74
  status = pjpeg_decode_mcu();
 800befe:	f003 f8db 	bl	800f0b8 <pjpeg_decode_mcu>
 800bf02:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
  if (status) {
 800bf06:	b118      	cbz	r0, 800bf10 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xa8>
    is_available = 0;
 800bf08:	2300      	movs	r3, #0
    if (status != PJPG_NO_MORE_BLOCKS) {
 800bf0a:	2801      	cmp	r0, #1
    is_available = 0;
 800bf0c:	6323      	str	r3, [r4, #48]	; 0x30
    if (status != PJPG_NO_MORE_BLOCKS) {
 800bf0e:	d103      	bne.n	800bf18 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xb0>
  return 1;
 800bf10:	2001      	movs	r0, #1
}
 800bf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 800bf14:	4628      	mov	r0, r5
}
 800bf16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return -1;
 800bf18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800bf1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	0800ba25 	.word	0x0800ba25
 800bf24:	3ffffffc 	.word	0x3ffffffc

0800bf28 <_GLOBAL__sub_I_JpegDec>:
JPEGDecoder::JPEGDecoder() {
 800bf28:	4b04      	ldr	r3, [pc, #16]	; (800bf3c <_GLOBAL__sub_I_JpegDec+0x14>)
 800bf2a:	2200      	movs	r2, #0
  thisPtr = this;
 800bf2c:	665b      	str	r3, [r3, #100]	; 0x64
JPEGDecoder::JPEGDecoder() {
 800bf2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  is_available = 0;
 800bf32:	631a      	str	r2, [r3, #48]	; 0x30
  mcu_y = 0;
 800bf34:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	20000c3c 	.word	0x20000c3c

0800bf40 <_GLOBAL__sub_D_JpegDec>:
  if (pImage)
 800bf40:	4b02      	ldr	r3, [pc, #8]	; (800bf4c <_GLOBAL__sub_D_JpegDec+0xc>)
 800bf42:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bf44:	b108      	cbz	r0, 800bf4a <_GLOBAL__sub_D_JpegDec+0xa>
    delete[] pImage;
 800bf46:	f00a bfd1 	b.w	8016eec <_ZdaPv>
}
 800bf4a:	4770      	bx	lr
 800bf4c:	20000c3c 	.word	0x20000c3c

0800bf50 <_Z10initCamerav>:

void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }

void set_format(byte fmt) { m_fmt = fmt; }

int initCamera() {
 800bf50:	b538      	push	{r3, r4, r5, lr}
  int camrror = camSPISetup();
 800bf52:	f000 faaf 	bl	800c4b4 <_Z11camSPISetupv>
 800bf56:	4604      	mov	r4, r0
  camrror += camI2CSetup();
 800bf58:	f000 f9a8 	bl	800c2ac <_Z11camI2CSetupv>

  wrSensorReg8_8(0xff, 0x01);
 800bf5c:	2101      	movs	r1, #1
  camrror += camI2CSetup();
 800bf5e:	4404      	add	r4, r0
  wrSensorReg8_8(0xff, 0x01);
 800bf60:	20ff      	movs	r0, #255	; 0xff
 800bf62:	f000 fa1b 	bl	800c39c <_Z14wrSensorReg8_8hh>

  wrSensorReg8_8(0x12, 0x80);
 800bf66:	2180      	movs	r1, #128	; 0x80
 800bf68:	2012      	movs	r0, #18
 800bf6a:	f000 fa17 	bl	800c39c <_Z14wrSensorReg8_8hh>

  HAL_Delay(100);
 800bf6e:	2064      	movs	r0, #100	; 0x64
 800bf70:	f7fd f97c 	bl	800926c <HAL_Delay>
  if (m_fmt == JPEG) {
 800bf74:	4b13      	ldr	r3, [pc, #76]	; (800bfc4 <_Z10initCamerav+0x74>)
 800bf76:	781d      	ldrb	r5, [r3, #0]
 800bf78:	2d01      	cmp	r5, #1
 800bf7a:	d00a      	beq.n	800bf92 <_Z10initCamerav+0x42>
    wrSensorReg8_8(0x15, 0x00);
    wrSensorRegs8_8(OV2640_320x240_JPEG);
    HAL_Delay(100);

  } else {
    wrSensorRegs8_8(OV2640_QVGA);
 800bf7c:	4812      	ldr	r0, [pc, #72]	; (800bfc8 <_Z10initCamerav+0x78>)
 800bf7e:	f000 fa25 	bl	800c3cc <_Z15wrSensorRegs8_8PK10sensor_reg>
}

void OV2640_set_JPEG_size(uint8_t size) {
  switch (size) {
  case OV2640_160x120:
    wrSensorRegs8_8(OV2640_160x120_JPEG);
 800bf82:	4812      	ldr	r0, [pc, #72]	; (800bfcc <_Z10initCamerav+0x7c>)
 800bf84:	f000 fa22 	bl	800c3cc <_Z15wrSensorRegs8_8PK10sensor_reg>
  HAL_Delay(100);
 800bf88:	2064      	movs	r0, #100	; 0x64
 800bf8a:	f7fd f96f 	bl	800926c <HAL_Delay>
}
 800bf8e:	4620      	mov	r0, r4
 800bf90:	bd38      	pop	{r3, r4, r5, pc}
    wrSensorRegs8_8(OV2640_JPEG_INIT);
 800bf92:	480f      	ldr	r0, [pc, #60]	; (800bfd0 <_Z10initCamerav+0x80>)
 800bf94:	f000 fa1a 	bl	800c3cc <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_YUV422);
 800bf98:	480e      	ldr	r0, [pc, #56]	; (800bfd4 <_Z10initCamerav+0x84>)
 800bf9a:	f000 fa17 	bl	800c3cc <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_JPEG);
 800bf9e:	480e      	ldr	r0, [pc, #56]	; (800bfd8 <_Z10initCamerav+0x88>)
 800bfa0:	f000 fa14 	bl	800c3cc <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorReg8_8(0xff, 0x01);
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	20ff      	movs	r0, #255	; 0xff
 800bfa8:	f000 f9f8 	bl	800c39c <_Z14wrSensorReg8_8hh>
    wrSensorReg8_8(0x15, 0x00);
 800bfac:	2100      	movs	r1, #0
 800bfae:	2015      	movs	r0, #21
 800bfb0:	f000 f9f4 	bl	800c39c <_Z14wrSensorReg8_8hh>
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 800bfb4:	4809      	ldr	r0, [pc, #36]	; (800bfdc <_Z10initCamerav+0x8c>)
 800bfb6:	f000 fa09 	bl	800c3cc <_Z15wrSensorRegs8_8PK10sensor_reg>
    HAL_Delay(100);
 800bfba:	2064      	movs	r0, #100	; 0x64
 800bfbc:	f7fd f956 	bl	800926c <HAL_Delay>
 800bfc0:	e7df      	b.n	800bf82 <_Z10initCamerav+0x32>
 800bfc2:	bf00      	nop
 800bfc4:	20000014 	.word	0x20000014
 800bfc8:	0801c9d4 	.word	0x0801c9d4
 800bfcc:	0801ccec 	.word	0x0801ccec
 800bfd0:	0801cb6c 	.word	0x0801cb6c
 800bfd4:	0801cb58 	.word	0x0801cb58
 800bfd8:	0801c9c0 	.word	0x0801c9c0
 800bfdc:	0801cd3c 	.word	0x0801cd3c

0800bfe0 <_Z22DecodeandProcessAndRGBiiPaPti>:
  }
}

int DecodeandProcessAndRGB(int image_width, int image_height,
                           int8_t *image_data, uint16_t *lcd_data,
                           int scale_factor) {
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  JpegDec.decodeArray(imgBuf, imgLength);
 800bfe4:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800c1c4 <_Z22DecodeandProcessAndRGBiiPaPti+0x1e4>
                           int scale_factor) {
 800bfe8:	b08f      	sub	sp, #60	; 0x3c
  JpegDec.decodeArray(imgBuf, imgLength);
 800bfea:	4d74      	ldr	r5, [pc, #464]	; (800c1bc <_Z22DecodeandProcessAndRGBiiPaPti+0x1dc>)
                           int scale_factor) {
 800bfec:	460c      	mov	r4, r1
 800bfee:	4606      	mov	r6, r0
 800bff0:	900b      	str	r0, [sp, #44]	; 0x2c
 800bff2:	9203      	str	r2, [sp, #12]
  JpegDec.decodeArray(imgBuf, imgLength);
 800bff4:	4650      	mov	r0, sl
 800bff6:	4972      	ldr	r1, [pc, #456]	; (800c1c0 <_Z22DecodeandProcessAndRGBiiPaPti+0x1e0>)
 800bff8:	682a      	ldr	r2, [r5, #0]
                           int scale_factor) {
 800bffa:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 800bffe:	930d      	str	r3, [sp, #52]	; 0x34
  JpegDec.decodeArray(imgBuf, imgLength);
 800c000:	f7ff ff32 	bl	800be68 <_ZN11JPEGDecoder11decodeArrayEPKhm>

  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;

  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;
 800c004:	f8da 1074 	ldr.w	r1, [sl, #116]	; 0x74
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 800c008:	e9da 2320 	ldrd	r2, r3, [sl, #128]	; 0x80
  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
 800c00c:	fb96 f2f2 	sdiv	r2, r6, r2

  const int skip_start_x_mcus = skip_x_mcus / 2;
 800c010:	1a89      	subs	r1, r1, r2
 800c012:	bf48      	it	mi
 800c014:	3101      	addmi	r1, #1
 800c016:	1049      	asrs	r1, r1, #1
 800c018:	4608      	mov	r0, r1
 800c01a:	9109      	str	r1, [sp, #36]	; 0x24

  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;

  const int skip_y_mcus = JpegDec.MCUSPerCol - keep_y_mcus;
 800c01c:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800c020:	4402      	add	r2, r0
  uint16_t *pImg;

  uint16_t color;

  for (int i = 0;
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c022:	980b      	ldr	r0, [sp, #44]	; 0x2c
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 800c024:	fb94 f3f3 	sdiv	r3, r4, r3
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c028:	fb90 f0fb 	sdiv	r0, r0, fp
  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800c02c:	920c      	str	r2, [sp, #48]	; 0x30
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c02e:	1ac9      	subs	r1, r1, r3
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c030:	9004      	str	r0, [sp, #16]
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c032:	bf48      	it	mi
 800c034:	3101      	addmi	r1, #1
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c036:	fb94 f2fb 	sdiv	r2, r4, fp
 800c03a:	fb00 f202 	mul.w	r2, r0, r2
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c03e:	1049      	asrs	r1, r1, #1
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c040:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 800c044:	440b      	add	r3, r1
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c046:	9105      	str	r1, [sp, #20]
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c048:	2a00      	cmp	r2, #0
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 800c04a:	930a      	str	r3, [sp, #40]	; 0x28
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c04c:	dd03      	ble.n	800c056 <_Z22DecodeandProcessAndRGBiiPaPti+0x76>
 800c04e:	2180      	movs	r1, #128	; 0x80
 800c050:	9803      	ldr	r0, [sp, #12]
 800c052:	f00c fd28 	bl	8018aa6 <memset>
 800c056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        }
        if (scale_factor != 1 &&
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
          continue;

        if (image_width % scale_factor != 0)
 800c058:	9a04      	ldr	r2, [sp, #16]
 800c05a:	0059      	lsls	r1, r3, #1
 800c05c:	4610      	mov	r0, r2
 800c05e:	9108      	str	r1, [sp, #32]
 800c060:	fb0b 3210 	mls	r2, fp, r0, r3
 800c064:	18cb      	adds	r3, r1, r3
 800c066:	9206      	str	r2, [sp, #24]
 800c068:	9307      	str	r3, [sp, #28]
  while (JpegDec.read()) {
 800c06a:	4856      	ldr	r0, [pc, #344]	; (800c1c4 <_Z22DecodeandProcessAndRGBiiPaPti+0x1e4>)
 800c06c:	f7ff fcfc 	bl	800ba68 <_ZN11JPEGDecoder4readEv>
 800c070:	2800      	cmp	r0, #0
 800c072:	f000 8097 	beq.w	800c1a4 <_Z22DecodeandProcessAndRGBiiPaPti+0x1c4>
    if (JpegDec.MCUy < skip_start_y_mcus) {
 800c076:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 800c07a:	9a05      	ldr	r2, [sp, #20]
 800c07c:	4293      	cmp	r3, r2
 800c07e:	dbf4      	blt.n	800c06a <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800c080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    if (JpegDec.MCUx < skip_start_x_mcus ||
 800c082:	f8da 1088 	ldr.w	r1, [sl, #136]	; 0x88
    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800c086:	4293      	cmp	r3, r2
 800c088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c08a:	bfb4      	ite	lt
 800c08c:	2200      	movlt	r2, #0
 800c08e:	2201      	movge	r2, #1
 800c090:	4281      	cmp	r1, r0
 800c092:	bfb8      	it	lt
 800c094:	f042 0201 	orrlt.w	r2, r2, #1
 800c098:	2a00      	cmp	r2, #0
 800c09a:	d1e6      	bne.n	800c06a <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
 800c09c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c09e:	4291      	cmp	r1, r2
 800c0a0:	bfb4      	ite	lt
 800c0a2:	2400      	movlt	r4, #0
 800c0a4:	2401      	movge	r4, #1
 800c0a6:	2c00      	cmp	r4, #0
 800c0a8:	d1df      	bne.n	800c06a <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;
 800c0aa:	9a05      	ldr	r2, [sp, #20]
    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
 800c0ac:	1a09      	subs	r1, r1, r0
    pImg = JpegDec.pImage;
 800c0ae:	f8da e060 	ldr.w	lr, [sl, #96]	; 0x60
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;
 800c0b2:	1a9b      	subs	r3, r3, r2
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 800c0b4:	e9da 2020 	ldrd	r2, r0, [sl, #128]	; 0x80
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800c0b8:	fb02 f101 	mul.w	r1, r2, r1
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800c0bc:	2800      	cmp	r0, #0
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 800c0be:	fb00 f703 	mul.w	r7, r0, r3
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800c0c2:	9100      	str	r1, [sp, #0]
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800c0c4:	ddd1      	ble.n	800c06a <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0c8:	9402      	str	r4, [sp, #8]
 800c0ca:	fb03 1307 	mla	r3, r3, r7, r1
 800c0ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c0d0:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800c0d4:	444b      	add	r3, r9
 800c0d6:	4489      	add	r9, r1
 800c0d8:	9903      	ldr	r1, [sp, #12]
 800c0da:	18cb      	adds	r3, r1, r3
 800c0dc:	9301      	str	r3, [sp, #4]
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800c0de:	2a00      	cmp	r2, #0
 800c0e0:	dd4e      	ble.n	800c180 <_Z22DecodeandProcessAndRGBiiPaPti+0x1a0>
 800c0e2:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e013      	b.n	800c112 <_Z22DecodeandProcessAndRGBiiPaPti+0x132>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800c0ea:	fb97 f8fb 	sdiv	r8, r7, fp
 800c0ee:	fb0b 7418 	mls	r4, fp, r8, r7
        if (scale_factor != 1 &&
 800c0f2:	b93c      	cbnz	r4, 800c104 <_Z22DecodeandProcessAndRGBiiPaPti+0x124>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800c0f4:	fb96 f5fb 	sdiv	r5, r6, fp
 800c0f8:	fb0b 6615 	mls	r6, fp, r5, r6
 800c0fc:	b916      	cbnz	r6, 800c104 <_Z22DecodeandProcessAndRGBiiPaPti+0x124>
        if (image_width % scale_factor != 0)
 800c0fe:	9c06      	ldr	r4, [sp, #24]
 800c100:	2c00      	cmp	r4, #0
 800c102:	d053      	beq.n	800c1ac <_Z22DecodeandProcessAndRGBiiPaPti+0x1cc>
 800c104:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800c108:	3301      	adds	r3, #1
 800c10a:	f10c 0c03 	add.w	ip, ip, #3
 800c10e:	4293      	cmp	r3, r2
 800c110:	da34      	bge.n	800c17c <_Z22DecodeandProcessAndRGBiiPaPti+0x19c>
        if (current_y >= 120)
 800c112:	2f77      	cmp	r7, #119	; 0x77
        color = *pImg++;
 800c114:	f10e 0e02 	add.w	lr, lr, #2
        if (current_y >= 120)
 800c118:	dcf6      	bgt.n	800c108 <_Z22DecodeandProcessAndRGBiiPaPti+0x128>
        color = *pImg++;
 800c11a:	f83e 4c02 	ldrh.w	r4, [lr, #-2]
        if (scale_factor == 1) {
 800c11e:	f1bb 0f01 	cmp.w	fp, #1
 800c122:	9a00      	ldr	r2, [sp, #0]
        r = ((color & 0xF800) >> 11) * 8;
 800c124:	ea4f 20d4 	mov.w	r0, r4, lsr #11
        b = ((color & 0x001F) >> 0) * 8;
 800c128:	f004 011f 	and.w	r1, r4, #31
 800c12c:	eb03 0602 	add.w	r6, r3, r2
        g = ((color & 0x07E0) >> 5) * 4;
 800c130:	f3c4 1245 	ubfx	r2, r4, #5, #6
        lcd_data[index] = color;
 800c134:	f829 4013 	strh.w	r4, [r9, r3, lsl #1]
        r = ((color & 0xF800) >> 11) * 8;
 800c138:	ea4f 00c0 	mov.w	r0, r0, lsl #3
        g = ((color & 0x07E0) >> 5) * 4;
 800c13c:	ea4f 0282 	mov.w	r2, r2, lsl #2
        b = ((color & 0x001F) >> 0) * 8;
 800c140:	ea4f 01c1 	mov.w	r1, r1, lsl #3
        if (scale_factor == 1) {
 800c144:	d1d1      	bne.n	800c0ea <_Z22DecodeandProcessAndRGBiiPaPti+0x10a>
          image_data[index * 3] = r - 128;
 800c146:	3880      	subs	r0, #128	; 0x80
          image_data[index * 3 + 1] = g - 128;
 800c148:	3a80      	subs	r2, #128	; 0x80
          image_data[index * 3 + 2] = b - 128;
 800c14a:	3980      	subs	r1, #128	; 0x80
 800c14c:	4635      	mov	r5, r6
          image_data[index * 3] = r - 128;
 800c14e:	b240      	sxtb	r0, r0
 800c150:	46b8      	mov	r8, r7
          image_data[index * 3 + 1] = g - 128;
 800c152:	b252      	sxtb	r2, r2
          image_data[index * 3 + 2] = b - 128;
 800c154:	b249      	sxtb	r1, r1
          image_data[index * 3] = r - 128;
 800c156:	f88c 0000 	strb.w	r0, [ip]
          image_data[index * 3 + 1] = g - 128;
 800c15a:	f88c 2001 	strb.w	r2, [ip, #1]
          image_data[index * 3 + 2] = b - 128;
 800c15e:	f88c 1002 	strb.w	r1, [ip, #2]
          lcd_data[index] = color;
 800c162:	f829 4013 	strh.w	r4, [r9, r3, lsl #1]
          continue;
        int width = image_width;
        if (width > 120)
          width = 120;
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 800c166:	9c04      	ldr	r4, [sp, #16]
                     current_x / scale_factor;

        image_data[Iindex * 3] = r - 128;
        image_data[Iindex * 3 + 1] = g - 128;
 800c168:	9e03      	ldr	r6, [sp, #12]
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 800c16a:	fb04 5508 	mla	r5, r4, r8, r5
        image_data[Iindex * 3] = r - 128;
 800c16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
        image_data[Iindex * 3 + 1] = g - 128;
 800c172:	1974      	adds	r4, r6, r5
        image_data[Iindex * 3] = r - 128;
 800c174:	5570      	strb	r0, [r6, r5]
        image_data[Iindex * 3 + 1] = g - 128;
 800c176:	7062      	strb	r2, [r4, #1]
        image_data[Iindex * 3 + 2] = b - 128;
 800c178:	70a1      	strb	r1, [r4, #2]
 800c17a:	e7c3      	b.n	800c104 <_Z22DecodeandProcessAndRGBiiPaPti+0x124>
 800c17c:	f8da 0084 	ldr.w	r0, [sl, #132]	; 0x84
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800c180:	9b02      	ldr	r3, [sp, #8]
 800c182:	3701      	adds	r7, #1
 800c184:	9908      	ldr	r1, [sp, #32]
 800c186:	3301      	adds	r3, #1
 800c188:	9c07      	ldr	r4, [sp, #28]
 800c18a:	4489      	add	r9, r1
 800c18c:	9901      	ldr	r1, [sp, #4]
 800c18e:	4283      	cmp	r3, r0
 800c190:	9302      	str	r3, [sp, #8]
 800c192:	4421      	add	r1, r4
 800c194:	9101      	str	r1, [sp, #4]
 800c196:	dba2      	blt.n	800c0de <_Z22DecodeandProcessAndRGBiiPaPti+0xfe>
  while (JpegDec.read()) {
 800c198:	480a      	ldr	r0, [pc, #40]	; (800c1c4 <_Z22DecodeandProcessAndRGBiiPaPti+0x1e4>)
 800c19a:	f7ff fc65 	bl	800ba68 <_ZN11JPEGDecoder4readEv>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	f47f af69 	bne.w	800c076 <_Z22DecodeandProcessAndRGBiiPaPti+0x96>
      }
    }
  }
}
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	b00f      	add	sp, #60	; 0x3c
 800c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ac:	3880      	subs	r0, #128	; 0x80
 800c1ae:	3a80      	subs	r2, #128	; 0x80
 800c1b0:	3980      	subs	r1, #128	; 0x80
 800c1b2:	b240      	sxtb	r0, r0
 800c1b4:	b252      	sxtb	r2, r2
 800c1b6:	b249      	sxtb	r1, r1
 800c1b8:	e7d5      	b.n	800c166 <_Z22DecodeandProcessAndRGBiiPaPti+0x186>
 800c1ba:	bf00      	nop
 800c1bc:	200020cc 	.word	0x200020cc
 800c1c0:	20000ccc 	.word	0x20000ccc
 800c1c4:	20000c3c 	.word	0x20000c3c

0800c1c8 <_Z12StartCapturev>:
  read_fifo_burst();

  return 0;
}

int StartCapture() {
 800c1c8:	b508      	push	{r3, lr}
void flush_fifo(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	2004      	movs	r0, #4
 800c1ce:	f000 f9e3 	bl	800c598 <_Z11camWriteReghh>

  flush_fifo();
  HAL_Delay(1);
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	f7fd f84a 	bl	800926c <HAL_Delay>
void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800c1d8:	2101      	movs	r1, #1
 800c1da:	2004      	movs	r0, #4
 800c1dc:	f000 f9dc 	bl	800c598 <_Z11camWriteReghh>
  clear_fifo_flag();
  HAL_Delay(1);
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	f7fd f843 	bl	800926c <HAL_Delay>
void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }
 800c1e6:	2102      	movs	r1, #2
 800c1e8:	2004      	movs	r0, #4
 800c1ea:	f000 f9d5 	bl	800c598 <_Z11camWriteReghh>

  start_capture();

  return 0;
}
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	bd08      	pop	{r3, pc}
 800c1f2:	bf00      	nop

0800c1f4 <_Z15read_fifo_burstv>:
  read_fifo_burst();

  return 0;
}

uint8_t read_fifo_burst() {
 800c1f4:	b570      	push	{r4, r5, r6, lr}
  len1 = camReadReg(FIFO_SIZE1);
 800c1f6:	2042      	movs	r0, #66	; 0x42
uint8_t read_fifo_burst() {
 800c1f8:	b082      	sub	sp, #8
  len1 = camReadReg(FIFO_SIZE1);
 800c1fa:	f000 fa25 	bl	800c648 <_Z10camReadRegh>
 800c1fe:	4604      	mov	r4, r0
  len2 = camReadReg(FIFO_SIZE2);
 800c200:	2043      	movs	r0, #67	; 0x43
 800c202:	f000 fa21 	bl	800c648 <_Z10camReadRegh>
 800c206:	4605      	mov	r5, r0
  len3 = camReadReg(FIFO_SIZE3) & 0x7f;
 800c208:	2044      	movs	r0, #68	; 0x44
 800c20a:	f000 fa1d 	bl	800c648 <_Z10camReadRegh>
 800c20e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800c212:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  uint32_t length = read_fifo_length();
  if (length >= MAX_FIFO_SIZE) {

    return 0;
  }
  if (length == 0) {
 800c216:	4b18      	ldr	r3, [pc, #96]	; (800c278 <_Z15read_fifo_burstv+0x84>)
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800c218:	ea44 4500 	orr.w	r5, r4, r0, lsl #16
  if (length == 0) {
 800c21c:	1e6c      	subs	r4, r5, #1
 800c21e:	429c      	cmp	r4, r3
 800c220:	d902      	bls.n	800c228 <_Z15read_fifo_burstv+0x34>

    return 0;
 800c222:	2000      	movs	r0, #0

  ARDUCAM_CS_HIGH;

  is_header = false;
  return 1;
}
 800c224:	b002      	add	sp, #8
 800c226:	bd70      	pop	{r4, r5, r6, pc}
  ARDUCAM_CS_LOW;
 800c228:	2200      	movs	r2, #0
 800c22a:	2101      	movs	r1, #1
 800c22c:	4813      	ldr	r0, [pc, #76]	; (800c27c <_Z15read_fifo_burstv+0x88>)
 800c22e:	f7fd fc09 	bl	8009a44 <HAL_GPIO_WritePin>
  camTransfers(imgBuf, length);
 800c232:	4e13      	ldr	r6, [pc, #76]	; (800c280 <_Z15read_fifo_burstv+0x8c>)
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 800c234:	203c      	movs	r0, #60	; 0x3c
 800c236:	f000 f9d1 	bl	800c5dc <_Z11camTransferh>
 800c23a:	4603      	mov	r3, r0
  camTransfers(imgBuf, length);
 800c23c:	4629      	mov	r1, r5
 800c23e:	4630      	mov	r0, r6
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 800c240:	f88d 3007 	strb.w	r3, [sp, #7]
  camTransfers(imgBuf, length);
 800c244:	f000 f9e0 	bl	800c608 <_Z12camTransfersPhm>
  for (index = length - 1; index >= 0; index--) {
 800c248:	4623      	mov	r3, r4
 800c24a:	1930      	adds	r0, r6, r4
    if (imgBuf[index] != 0) {
 800c24c:	f810 2901 	ldrb.w	r2, [r0], #-1
 800c250:	b982      	cbnz	r2, 800c274 <_Z15read_fifo_burstv+0x80>
  for (index = length - 1; index >= 0; index--) {
 800c252:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800c256:	d2f9      	bcs.n	800c24c <_Z15read_fifo_burstv+0x58>
 800c258:	4613      	mov	r3, r2
  ARDUCAM_CS_HIGH;
 800c25a:	2201      	movs	r2, #1
  imgLength = index + 1;
 800c25c:	4c09      	ldr	r4, [pc, #36]	; (800c284 <_Z15read_fifo_burstv+0x90>)
  ARDUCAM_CS_HIGH;
 800c25e:	4807      	ldr	r0, [pc, #28]	; (800c27c <_Z15read_fifo_burstv+0x88>)
 800c260:	4611      	mov	r1, r2
  imgLength = index + 1;
 800c262:	6023      	str	r3, [r4, #0]
  ARDUCAM_CS_HIGH;
 800c264:	f7fd fbee 	bl	8009a44 <HAL_GPIO_WritePin>
  is_header = false;
 800c268:	4b07      	ldr	r3, [pc, #28]	; (800c288 <_Z15read_fifo_burstv+0x94>)
 800c26a:	2200      	movs	r2, #0
  return 1;
 800c26c:	2001      	movs	r0, #1
  is_header = false;
 800c26e:	701a      	strb	r2, [r3, #0]
}
 800c270:	b002      	add	sp, #8
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	3301      	adds	r3, #1
 800c276:	e7f0      	b.n	800c25a <_Z15read_fifo_burstv+0x66>
 800c278:	0005fffd 	.word	0x0005fffd
 800c27c:	40022000 	.word	0x40022000
 800c280:	20000ccc 	.word	0x20000ccc
 800c284:	200020cc 	.word	0x200020cc
 800c288:	200020d0 	.word	0x200020d0

0800c28c <_Z11ReadCapturev>:
int ReadCapture() {
 800c28c:	b508      	push	{r3, lr}
  while (!camReadRegBit(ARDUCHIP_TRIG, CAP_DONE_MASK)) {
 800c28e:	2108      	movs	r1, #8
 800c290:	2041      	movs	r0, #65	; 0x41
 800c292:	f000 f9fb 	bl	800c68c <_Z13camReadRegBithh>
 800c296:	2800      	cmp	r0, #0
 800c298:	d0f9      	beq.n	800c28e <_Z11ReadCapturev+0x2>
void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800c29a:	2101      	movs	r1, #1
 800c29c:	2004      	movs	r0, #4
 800c29e:	f000 f97b 	bl	800c598 <_Z11camWriteReghh>
  read_fifo_burst();
 800c2a2:	f7ff ffa7 	bl	800c1f4 <_Z15read_fifo_burstv>
}
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	bd08      	pop	{r3, pc}
 800c2aa:	bf00      	nop

0800c2ac <_Z11camI2CSetupv>:
  while (cycleCount--)
    ;
}

static I2C_HandleTypeDef I2cHandle;
int camI2CSetup() {
 800c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int error = 0;

  I2cHandle.Instance = I2Cx;
 800c2b0:	4c37      	ldr	r4, [pc, #220]	; (800c390 <_Z11camI2CSetupv+0xe4>)
  I2cHandle.Init.Timing = I2C_TIMING;
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
 800c2b2:	220f      	movs	r2, #15
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800c2b4:	23ff      	movs	r3, #255	; 0xff
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c2b6:	2600      	movs	r6, #0
  I2cHandle.Init.Timing = I2C_TIMING;
 800c2b8:	4936      	ldr	r1, [pc, #216]	; (800c394 <_Z11camI2CSetupv+0xe8>)
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c2ba:	2701      	movs	r7, #1
  I2cHandle.Instance = I2Cx;
 800c2bc:	4d36      	ldr	r5, [pc, #216]	; (800c398 <_Z11camI2CSetupv+0xec>)
int camI2CSetup() {
 800c2be:	b084      	sub	sp, #16
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c2c0:	4620      	mov	r0, r4
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
 800c2c2:	60a2      	str	r2, [r4, #8]
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800c2c4:	6163      	str	r3, [r4, #20]
#define TEST
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
  uint8_t tx_buffer[2];
  tx_buffer[0] = regID & 0xFF;
  tx_buffer[1] = regDat & 0xFF;
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c2c6:	f04f 080a 	mov.w	r8, #10
  I2cHandle.Instance = I2Cx;
 800c2ca:	6025      	str	r5, [r4, #0]
  tx_buffer[0] = regID & 0xFF;
 800c2cc:	ad04      	add	r5, sp, #16
  I2cHandle.Init.Timing = I2C_TIMING;
 800c2ce:	6061      	str	r1, [r4, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c2d0:	e9c4 7603 	strd	r7, r6, [r4, #12]
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c2d4:	e9c4 6607 	strd	r6, r6, [r4, #28]
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c2d8:	f7fd fcfe 	bl	8009cd8 <HAL_I2C_Init>
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800c2dc:	4631      	mov	r1, r6
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c2de:	1b86      	subs	r6, r0, r6
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800c2e0:	4620      	mov	r0, r4
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800c2e2:	bf18      	it	ne
 800c2e4:	2601      	movne	r6, #1
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800c2e6:	f7fd fee9 	bl	800a0bc <HAL_I2CEx_ConfigAnalogFilter>
  tx_buffer[0] = regID & 0xFF;
 800c2ea:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c2ee:	2160      	movs	r1, #96	; 0x60
 800c2f0:	f8cd 8000 	str.w	r8, [sp]
 800c2f4:	4620      	mov	r0, r4
  tx_buffer[0] = regID & 0xFF;
 800c2f6:	f825 3d04 	strh.w	r3, [r5, #-4]!
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	462a      	mov	r2, r5
 800c2fe:	f7fd fd3f 	bl	8009d80 <HAL_I2C_Master_Transmit>
                          sizeof(tx_buffer), SSCB_TIMEOUT);

  HAL_Delay(1);
 800c302:	4638      	mov	r0, r7
 800c304:	f7fc ffb2 	bl	800926c <HAL_Delay>

  return 1;
}

int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 800c308:	462a      	mov	r2, r5
 800c30a:	f8cd 8000 	str.w	r8, [sp]
 800c30e:	463b      	mov	r3, r7
 800c310:	4620      	mov	r0, r4
 800c312:	2160      	movs	r1, #96	; 0x60
 800c314:	f88d 800c 	strb.w	r8, [sp, #12]
 800c318:	f7fd fd32 	bl	8009d80 <HAL_I2C_Master_Transmit>
 800c31c:	b1a0      	cbz	r0, 800c348 <_Z11camI2CSetupv+0x9c>
 800c31e:	210b      	movs	r1, #11
 800c320:	aa04      	add	r2, sp, #16
 800c322:	240a      	movs	r4, #10
 800c324:	2301      	movs	r3, #1
 800c326:	f802 1d05 	strb.w	r1, [r2, #-5]!
 800c32a:	2160      	movs	r1, #96	; 0x60
 800c32c:	9400      	str	r4, [sp, #0]
 800c32e:	4818      	ldr	r0, [pc, #96]	; (800c390 <_Z11camI2CSetupv+0xe4>)
 800c330:	f7fd fd26 	bl	8009d80 <HAL_I2C_Master_Transmit>
 800c334:	b1d0      	cbz	r0, 800c36c <_Z11camI2CSetupv+0xc0>
  if ((vid != 0x26) && ((pid != 0x41) || (pid != 0x42))) {
 800c336:	f89d 0009 	ldrb.w	r0, [sp, #9]
}
 800c33a:	2826      	cmp	r0, #38	; 0x26
 800c33c:	bf0c      	ite	eq
 800c33e:	4630      	moveq	r0, r6
 800c340:	1c70      	addne	r0, r6, #1
 800c342:	b004      	add	sp, #16
 800c344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                              SSCB_TIMEOUT) != HAL_OK)
    return false;

  HAL_Delay(1);
 800c348:	4638      	mov	r0, r7
 800c34a:	f7fc ff8f 	bl	800926c <HAL_Delay>

  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800c34e:	f8cd 8000 	str.w	r8, [sp]
 800c352:	4620      	mov	r0, r4
 800c354:	463b      	mov	r3, r7
 800c356:	f10d 0209 	add.w	r2, sp, #9
 800c35a:	2161      	movs	r1, #97	; 0x61
 800c35c:	f7fd fde0 	bl	8009f20 <HAL_I2C_Master_Receive>
 800c360:	2800      	cmp	r0, #0
 800c362:	d1dc      	bne.n	800c31e <_Z11camI2CSetupv+0x72>
                             SSCB_TIMEOUT) != HAL_OK)
    return false;

  HAL_Delay(1);
 800c364:	4638      	mov	r0, r7
 800c366:	f7fc ff81 	bl	800926c <HAL_Delay>
 800c36a:	e7d8      	b.n	800c31e <_Z11camI2CSetupv+0x72>
  HAL_Delay(1);
 800c36c:	2001      	movs	r0, #1
 800c36e:	f7fc ff7d 	bl	800926c <HAL_Delay>
  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800c372:	9400      	str	r4, [sp, #0]
 800c374:	2301      	movs	r3, #1
 800c376:	eb0d 0204 	add.w	r2, sp, r4
 800c37a:	2161      	movs	r1, #97	; 0x61
 800c37c:	4804      	ldr	r0, [pc, #16]	; (800c390 <_Z11camI2CSetupv+0xe4>)
 800c37e:	f7fd fdcf 	bl	8009f20 <HAL_I2C_Master_Receive>
 800c382:	2800      	cmp	r0, #0
 800c384:	d1d7      	bne.n	800c336 <_Z11camI2CSetupv+0x8a>
  HAL_Delay(1);
 800c386:	2001      	movs	r0, #1
 800c388:	f7fc ff70 	bl	800926c <HAL_Delay>
 800c38c:	e7d3      	b.n	800c336 <_Z11camI2CSetupv+0x8a>
 800c38e:	bf00      	nop
 800c390:	200020d4 	.word	0x200020d4
 800c394:	40912732 	.word	0x40912732
 800c398:	40005400 	.word	0x40005400

0800c39c <_Z14wrSensorReg8_8hh>:
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 800c39c:	b500      	push	{lr}
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c39e:	220a      	movs	r2, #10
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 800c3a0:	b085      	sub	sp, #20
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c3a2:	2302      	movs	r3, #2
  tx_buffer[0] = regID & 0xFF;
 800c3a4:	f88d 000c 	strb.w	r0, [sp, #12]
  tx_buffer[1] = regDat & 0xFF;
 800c3a8:	f88d 100d 	strb.w	r1, [sp, #13]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c3ac:	2160      	movs	r1, #96	; 0x60
 800c3ae:	9200      	str	r2, [sp, #0]
 800c3b0:	aa03      	add	r2, sp, #12
 800c3b2:	4805      	ldr	r0, [pc, #20]	; (800c3c8 <_Z14wrSensorReg8_8hh+0x2c>)
 800c3b4:	f7fd fce4 	bl	8009d80 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	f7fc ff57 	bl	800926c <HAL_Delay>
}
 800c3be:	2001      	movs	r0, #1
 800c3c0:	b005      	add	sp, #20
 800c3c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3c6:	bf00      	nop
 800c3c8:	200020d4 	.word	0x200020d4

0800c3cc <_Z15wrSensorRegs8_8PK10sensor_reg>:
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 800c3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d0:	1c84      	adds	r4, r0, #2
 800c3d2:	b084      	sub	sp, #16
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c3d4:	f04f 080a 	mov.w	r8, #10
 800c3d8:	4f0e      	ldr	r7, [pc, #56]	; (800c414 <_Z15wrSensorRegs8_8PK10sensor_reg+0x48>)
    reg_addr = next->reg;
 800c3da:	f814 5c02 	ldrb.w	r5, [r4, #-2]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c3de:	2302      	movs	r3, #2
    reg_val = next->val;
 800c3e0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c3e4:	aa03      	add	r2, sp, #12
 800c3e6:	2160      	movs	r1, #96	; 0x60
 800c3e8:	f8cd 8000 	str.w	r8, [sp]
 800c3ec:	4638      	mov	r0, r7
  tx_buffer[0] = regID & 0xFF;
 800c3ee:	f88d 500c 	strb.w	r5, [sp, #12]
  tx_buffer[1] = regDat & 0xFF;
 800c3f2:	f88d 600d 	strb.w	r6, [sp, #13]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800c3f6:	f7fd fcc3 	bl	8009d80 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	3402      	adds	r4, #2
 800c3fe:	f7fc ff35 	bl	800926c <HAL_Delay>
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 800c402:	2dff      	cmp	r5, #255	; 0xff
 800c404:	d1e9      	bne.n	800c3da <_Z15wrSensorRegs8_8PK10sensor_reg+0xe>
 800c406:	2eff      	cmp	r6, #255	; 0xff
 800c408:	d1e7      	bne.n	800c3da <_Z15wrSensorRegs8_8PK10sensor_reg+0xe>
}
 800c40a:	2001      	movs	r0, #1
 800c40c:	b004      	add	sp, #16
 800c40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c412:	bf00      	nop
 800c414:	200020d4 	.word	0x200020d4

0800c418 <_Z15camSPIErrorTestv>:
  camSPIReset();
  error += camSPIErrorTest();
  return error;
}

int camSPIErrorTest() {
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t val = 0x55;
  volatile uint8_t rval;
  int error = 0;
 800c41a:	2700      	movs	r7, #0
int camSPIErrorTest() {
 800c41c:	b087      	sub	sp, #28
  uint8_t val = 0x55;
 800c41e:	2455      	movs	r4, #85	; 0x55
  HAL_Delay(100);
}

void camWriteReg(const uint8_t reg, const uint8_t val) {
  uint8_t buff[2] = {reg | 0x80, val};
  ARDUCAM_CS_LOW;
 800c420:	4d22      	ldr	r5, [pc, #136]	; (800c4ac <_Z15camSPIErrorTestv+0x94>)
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c422:	4e23      	ldr	r6, [pc, #140]	; (800c4b0 <_Z15camSPIErrorTestv+0x98>)
    val++;
 800c424:	3401      	adds	r4, #1
  uint8_t buff[2] = {reg | 0x80, val};
 800c426:	2380      	movs	r3, #128	; 0x80
  ARDUCAM_CS_LOW;
 800c428:	2200      	movs	r2, #0
 800c42a:	2101      	movs	r1, #1
    val++;
 800c42c:	b2e4      	uxtb	r4, r4
  ARDUCAM_CS_LOW;
 800c42e:	4628      	mov	r0, r5
  uint8_t buff[2] = {reg | 0x80, val};
 800c430:	f88d 3014 	strb.w	r3, [sp, #20]
 800c434:	f88d 4015 	strb.w	r4, [sp, #21]
  ARDUCAM_CS_LOW;
 800c438:	f7fd fb04 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c43c:	2364      	movs	r3, #100	; 0x64
 800c43e:	2202      	movs	r2, #2
 800c440:	a905      	add	r1, sp, #20
 800c442:	4630      	mov	r0, r6
 800c444:	f7fe ff24 	bl	800b290 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c448:	2201      	movs	r2, #1
 800c44a:	4628      	mov	r0, r5
 800c44c:	4611      	mov	r1, r2
 800c44e:	f7fd faf9 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c452:	2001      	movs	r0, #1
 800c454:	f7fc ff0a 	bl	800926c <HAL_Delay>

  return ret;
}

uint8_t camReadReg(const uint8_t reg) {
  uint8_t buff[2] = {reg, 0x00};
 800c458:	2300      	movs	r3, #0
  uint8_t rbuff[2];
  ARDUCAM_CS_LOW;
 800c45a:	2101      	movs	r1, #1
 800c45c:	4628      	mov	r0, r5
 800c45e:	461a      	mov	r2, r3
  uint8_t buff[2] = {reg, 0x00};
 800c460:	f8ad 3010 	strh.w	r3, [sp, #16]
  ARDUCAM_CS_LOW;
 800c464:	f7fd faee 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800c468:	2164      	movs	r1, #100	; 0x64
 800c46a:	2302      	movs	r3, #2
 800c46c:	aa05      	add	r2, sp, #20
 800c46e:	9100      	str	r1, [sp, #0]
 800c470:	4630      	mov	r0, r6
 800c472:	a904      	add	r1, sp, #16
 800c474:	f7ff f83a 	bl	800b4ec <HAL_SPI_TransmitReceive>
                          100);
  ARDUCAM_CS_HIGH;
 800c478:	2201      	movs	r2, #1
 800c47a:	4628      	mov	r0, r5
 800c47c:	4611      	mov	r1, r2
 800c47e:	f7fd fae1 	bl	8009a44 <HAL_GPIO_WritePin>

  return rbuff[1];
 800c482:	f89d 3015 	ldrb.w	r3, [sp, #21]
    rval = camReadReg(0x00);
 800c486:	f88d 300f 	strb.w	r3, [sp, #15]
    if (rval != val)
 800c48a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c48e:	42a3      	cmp	r3, r4
 800c490:	d006      	beq.n	800c4a0 <_Z15camSPIErrorTestv+0x88>
  for (int i = 0; i < 10; i++) {
 800c492:	2c5f      	cmp	r4, #95	; 0x5f
      error++;
 800c494:	f107 0701 	add.w	r7, r7, #1
  for (int i = 0; i < 10; i++) {
 800c498:	d1c4      	bne.n	800c424 <_Z15camSPIErrorTestv+0xc>
}
 800c49a:	4638      	mov	r0, r7
 800c49c:	b007      	add	sp, #28
 800c49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (int i = 0; i < 10; i++) {
 800c4a0:	2c5f      	cmp	r4, #95	; 0x5f
 800c4a2:	d1bf      	bne.n	800c424 <_Z15camSPIErrorTestv+0xc>
}
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	b007      	add	sp, #28
 800c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	40022000 	.word	0x40022000
 800c4b0:	20002120 	.word	0x20002120

0800c4b4 <_Z11camSPISetupv>:
int camSPISetup() {
 800c4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SpiHandle.Instance = SPIx;
 800c4b8:	4c34      	ldr	r4, [pc, #208]	; (800c58c <_Z11camSPISetupv+0xd8>)
int camSPISetup() {
 800c4ba:	b086      	sub	sp, #24
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c4bc:	f04f 0e10 	mov.w	lr, #16
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800c4c0:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800c4c4:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c4c6:	4f32      	ldr	r7, [pc, #200]	; (800c590 <_Z11camSPISetupv+0xdc>)
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800c4c8:	f44f 7200 	mov.w	r2, #512	; 0x200
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800c4cc:	f44f 7382 	mov.w	r3, #260	; 0x104
  SpiHandle.Init.CRCPolynomial = 7;
 800c4d0:	2107      	movs	r1, #7
  SpiHandle.Instance = SPIx;
 800c4d2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c594 <_Z11camSPISetupv+0xe0>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c4d6:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800c4d8:	f04f 0902 	mov.w	r9, #2
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800c4dc:	4620      	mov	r0, r4
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c4de:	f8c4 e01c 	str.w	lr, [r4, #28]
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800c4e2:	f8c4 c00c 	str.w	ip, [r4, #12]
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800c4e6:	61a2      	str	r2, [r4, #24]
  SpiHandle.Instance = SPIx;
 800c4e8:	f8c4 8000 	str.w	r8, [r4]
  uint8_t buff[2] = {reg | 0x80, val};
 800c4ec:	f10d 0818 	add.w	r8, sp, #24
  SpiHandle.Init.CRCPolynomial = 7;
 800c4f0:	62e1      	str	r1, [r4, #44]	; 0x2c
  SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4f2:	62a6      	str	r6, [r4, #40]	; 0x28
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800c4f4:	e9c4 3601 	strd	r3, r6, [r4, #4]
  SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c4f8:	e9c4 6604 	strd	r6, r6, [r4, #16]
  SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800c4fc:	e9c4 6608 	strd	r6, r6, [r4, #32]
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800c500:	f7fe fe5c 	bl	800b1bc <HAL_SPI_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c504:	a901      	add	r1, sp, #4
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800c506:	4682      	mov	sl, r0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c508:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c50a:	e9cd 5501 	strd	r5, r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800c50e:	e9cd 5903 	strd	r5, r9, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c512:	f7fd f979 	bl	8009808 <HAL_GPIO_Init>
  uint8_t buff[2] = {reg | 0x80, val};
 800c516:	f248 0387 	movw	r3, #32903	; 0x8087
  ARDUCAM_CS_LOW;
 800c51a:	4632      	mov	r2, r6
 800c51c:	4629      	mov	r1, r5
  uint8_t buff[2] = {reg | 0x80, val};
 800c51e:	f828 3d18 	strh.w	r3, [r8, #-24]!
  ARDUCAM_CS_LOW;
 800c522:	4638      	mov	r0, r7
 800c524:	f7fd fa8e 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c528:	2364      	movs	r3, #100	; 0x64
 800c52a:	4641      	mov	r1, r8
 800c52c:	464a      	mov	r2, r9
 800c52e:	4620      	mov	r0, r4
 800c530:	f7fe feae 	bl	800b290 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c534:	462a      	mov	r2, r5
 800c536:	4629      	mov	r1, r5
 800c538:	4638      	mov	r0, r7
 800c53a:	f7fd fa83 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c53e:	4628      	mov	r0, r5
 800c540:	f7fc fe94 	bl	800926c <HAL_Delay>
  HAL_Delay(100);
 800c544:	2064      	movs	r0, #100	; 0x64
 800c546:	f7fc fe91 	bl	800926c <HAL_Delay>
  uint8_t buff[2] = {reg | 0x80, val};
 800c54a:	2387      	movs	r3, #135	; 0x87
  ARDUCAM_CS_LOW;
 800c54c:	4632      	mov	r2, r6
 800c54e:	4629      	mov	r1, r5
 800c550:	4638      	mov	r0, r7
  uint8_t buff[2] = {reg | 0x80, val};
 800c552:	f8ad 3000 	strh.w	r3, [sp]
  ARDUCAM_CS_LOW;
 800c556:	f7fd fa75 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c55a:	2364      	movs	r3, #100	; 0x64
 800c55c:	4641      	mov	r1, r8
 800c55e:	464a      	mov	r2, r9
 800c560:	4620      	mov	r0, r4
 800c562:	f7fe fe95 	bl	800b290 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c566:	462a      	mov	r2, r5
 800c568:	4629      	mov	r1, r5
 800c56a:	4638      	mov	r0, r7
 800c56c:	f7fd fa6a 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c570:	4628      	mov	r0, r5
 800c572:	f7fc fe7b 	bl	800926c <HAL_Delay>
  HAL_Delay(100);
 800c576:	2064      	movs	r0, #100	; 0x64
 800c578:	f7fc fe78 	bl	800926c <HAL_Delay>
  error += camSPIErrorTest();
 800c57c:	f7ff ff4c 	bl	800c418 <_Z15camSPIErrorTestv>
}
 800c580:	45b2      	cmp	sl, r6
 800c582:	bf18      	it	ne
 800c584:	3001      	addne	r0, #1
 800c586:	b006      	add	sp, #24
 800c588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58c:	20002120 	.word	0x20002120
 800c590:	40022000 	.word	0x40022000
 800c594:	40003800 	.word	0x40003800

0800c598 <_Z11camWriteReghh>:
void camWriteReg(const uint8_t reg, const uint8_t val) {
 800c598:	b510      	push	{r4, lr}
  ARDUCAM_CS_LOW;
 800c59a:	4c0e      	ldr	r4, [pc, #56]	; (800c5d4 <_Z11camWriteReghh+0x3c>)
void camWriteReg(const uint8_t reg, const uint8_t val) {
 800c59c:	b082      	sub	sp, #8
  uint8_t buff[2] = {reg | 0x80, val};
 800c59e:	f060 037f 	orn	r3, r0, #127	; 0x7f
  ARDUCAM_CS_LOW;
 800c5a2:	2200      	movs	r2, #0
  uint8_t buff[2] = {reg | 0x80, val};
 800c5a4:	f88d 1005 	strb.w	r1, [sp, #5]
  ARDUCAM_CS_LOW;
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg | 0x80, val};
 800c5ac:	f88d 3004 	strb.w	r3, [sp, #4]
  ARDUCAM_CS_LOW;
 800c5b0:	f7fd fa48 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800c5b4:	2364      	movs	r3, #100	; 0x64
 800c5b6:	a901      	add	r1, sp, #4
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	4807      	ldr	r0, [pc, #28]	; (800c5d8 <_Z11camWriteReghh+0x40>)
 800c5bc:	f7fe fe68 	bl	800b290 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	f7fd fa3d 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800c5ca:	2001      	movs	r0, #1
 800c5cc:	f7fc fe4e 	bl	800926c <HAL_Delay>
}
 800c5d0:	b002      	add	sp, #8
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	40022000 	.word	0x40022000
 800c5d8:	20002120 	.word	0x20002120

0800c5dc <_Z11camTransferh>:
uint8_t camTransfer(const uint8_t val) {
 800c5dc:	b500      	push	{lr}
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800c5de:	2164      	movs	r1, #100	; 0x64
uint8_t camTransfer(const uint8_t val) {
 800c5e0:	b087      	sub	sp, #28
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800c5e2:	2301      	movs	r3, #1
uint8_t camTransfer(const uint8_t val) {
 800c5e4:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800c5e8:	f10d 0217 	add.w	r2, sp, #23
 800c5ec:	9100      	str	r1, [sp, #0]
 800c5ee:	f10d 010f 	add.w	r1, sp, #15
 800c5f2:	4804      	ldr	r0, [pc, #16]	; (800c604 <_Z11camTransferh+0x28>)
 800c5f4:	f7fe ff7a 	bl	800b4ec <HAL_SPI_TransmitReceive>
}
 800c5f8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800c5fc:	b007      	add	sp, #28
 800c5fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800c602:	bf00      	nop
 800c604:	20002120 	.word	0x20002120

0800c608 <_Z12camTransfersPhm>:
uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 800c608:	b570      	push	{r4, r5, r6, lr}
  if (!dummyinit) {
 800c60a:	4c0c      	ldr	r4, [pc, #48]	; (800c63c <_Z12camTransfersPhm+0x34>)
uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 800c60c:	460e      	mov	r6, r1
 800c60e:	b082      	sub	sp, #8
 800c610:	4605      	mov	r5, r0
  if (!dummyinit) {
 800c612:	6821      	ldr	r1, [r4, #0]
 800c614:	b931      	cbnz	r1, 800c624 <_Z12camTransfersPhm+0x1c>
 800c616:	f44f 52fd 	mov.w	r2, #8096	; 0x1fa0
 800c61a:	4809      	ldr	r0, [pc, #36]	; (800c640 <_Z12camTransfersPhm+0x38>)
 800c61c:	f00c fa43 	bl	8018aa6 <memset>
    dummyinit = 1;
 800c620:	2301      	movs	r3, #1
 800c622:	6023      	str	r3, [r4, #0]
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)dummy, (uint8_t *)buf, length,
 800c624:	2064      	movs	r0, #100	; 0x64
 800c626:	b2b3      	uxth	r3, r6
 800c628:	462a      	mov	r2, r5
 800c62a:	4905      	ldr	r1, [pc, #20]	; (800c640 <_Z12camTransfersPhm+0x38>)
 800c62c:	9000      	str	r0, [sp, #0]
 800c62e:	4805      	ldr	r0, [pc, #20]	; (800c644 <_Z12camTransfersPhm+0x3c>)
 800c630:	f7fe ff5c 	bl	800b4ec <HAL_SPI_TransmitReceive>
}
 800c634:	2000      	movs	r0, #0
 800c636:	b002      	add	sp, #8
 800c638:	bd70      	pop	{r4, r5, r6, pc}
 800c63a:	bf00      	nop
 800c63c:	20002184 	.word	0x20002184
 800c640:	20002188 	.word	0x20002188
 800c644:	20002120 	.word	0x20002120

0800c648 <_Z10camReadRegh>:
uint8_t camReadReg(const uint8_t reg) {
 800c648:	b510      	push	{r4, lr}
  uint8_t buff[2] = {reg, 0x00};
 800c64a:	2200      	movs	r2, #0
uint8_t camReadReg(const uint8_t reg) {
 800c64c:	b084      	sub	sp, #16
  ARDUCAM_CS_LOW;
 800c64e:	4c0d      	ldr	r4, [pc, #52]	; (800c684 <_Z10camReadRegh+0x3c>)
 800c650:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg, 0x00};
 800c652:	f8ad 2008 	strh.w	r2, [sp, #8]
 800c656:	f88d 0008 	strb.w	r0, [sp, #8]
  ARDUCAM_CS_LOW;
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7fd f9f2 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800c660:	2164      	movs	r1, #100	; 0x64
 800c662:	2302      	movs	r3, #2
 800c664:	aa03      	add	r2, sp, #12
 800c666:	9100      	str	r1, [sp, #0]
 800c668:	a902      	add	r1, sp, #8
 800c66a:	4807      	ldr	r0, [pc, #28]	; (800c688 <_Z10camReadRegh+0x40>)
 800c66c:	f7fe ff3e 	bl	800b4ec <HAL_SPI_TransmitReceive>
  ARDUCAM_CS_HIGH;
 800c670:	2201      	movs	r2, #1
 800c672:	4620      	mov	r0, r4
 800c674:	4611      	mov	r1, r2
 800c676:	f7fd f9e5 	bl	8009a44 <HAL_GPIO_WritePin>
}
 800c67a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800c67e:	b004      	add	sp, #16
 800c680:	bd10      	pop	{r4, pc}
 800c682:	bf00      	nop
 800c684:	40022000 	.word	0x40022000
 800c688:	20002120 	.word	0x20002120

0800c68c <_Z13camReadRegBithh>:

uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800c68c:	b530      	push	{r4, r5, lr}
  uint8_t buff[2] = {reg, 0x00};
 800c68e:	2200      	movs	r2, #0
uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800c690:	b085      	sub	sp, #20
  ARDUCAM_CS_LOW;
 800c692:	4c0e      	ldr	r4, [pc, #56]	; (800c6cc <_Z13camReadRegBithh+0x40>)
uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800c694:	460d      	mov	r5, r1
  uint8_t buff[2] = {reg, 0x00};
 800c696:	f8ad 2008 	strh.w	r2, [sp, #8]
  ARDUCAM_CS_LOW;
 800c69a:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg, 0x00};
 800c69c:	f88d 0008 	strb.w	r0, [sp, #8]
  ARDUCAM_CS_LOW;
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f7fd f9cf 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800c6a6:	2164      	movs	r1, #100	; 0x64
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	aa03      	add	r2, sp, #12
 800c6ac:	9100      	str	r1, [sp, #0]
 800c6ae:	a902      	add	r1, sp, #8
 800c6b0:	4807      	ldr	r0, [pc, #28]	; (800c6d0 <_Z13camReadRegBithh+0x44>)
 800c6b2:	f7fe ff1b 	bl	800b4ec <HAL_SPI_TransmitReceive>
  ARDUCAM_CS_HIGH;
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	f7fd f9c2 	bl	8009a44 <HAL_GPIO_WritePin>
  return rbuff[1];
 800c6c0:	f89d 000d 	ldrb.w	r0, [sp, #13]
  uint8_t temp;
  temp = camReadReg(addr);
  temp = temp & bit;
  return temp;
}
 800c6c4:	4028      	ands	r0, r5
 800c6c6:	b005      	add	sp, #20
 800c6c8:	bd30      	pop	{r4, r5, pc}
 800c6ca:	bf00      	nop
 800c6cc:	40022000 	.word	0x40022000
 800c6d0:	20002120 	.word	0x20002120

0800c6d4 <_Z13loadRGB565LCDmmmmPth>:
#include "stm32f7xx_hal.h"

#define TRANS 128

void loadRGB565LCD(uint32_t x, uint32_t y, uint32_t width, uint32_t height,
                   uint16_t *src, uint8_t resize) {
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	b08b      	sub	sp, #44	; 0x2c
 800c6da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c6dc:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
  for (int i = 0; i < height; i++) {
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d052      	beq.n	800c78a <_Z13loadRGB565LCDmmmmPth+0xb6>
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	d050      	beq.n	800c78a <_Z13loadRGB565LCDmmmmPth+0xb6>
 800c6e8:	f1bb 0f00 	cmp.w	fp, #0
 800c6ec:	d04d      	beq.n	800c78a <_Z13loadRGB565LCDmmmmPth+0xb6>
 800c6ee:	2500      	movs	r5, #0
 800c6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	fa1f f08b 	uxth.w	r0, fp
 800c6fa:	9504      	str	r5, [sp, #16]
 800c6fc:	ebc3 75c3 	rsb	r5, r3, r3, lsl #31
 800c700:	4402      	add	r2, r0
 800c702:	9002      	str	r0, [sp, #8]
 800c704:	ebc3 7083 	rsb	r0, r3, r3, lsl #30
 800c708:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c70c:	fa1f f981 	uxth.w	r9, r1
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	b293      	uxth	r3, r2
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	006b      	lsls	r3, r5, #1
 800c718:	9306      	str	r3, [sp, #24]
 800c71a:	0083      	lsls	r3, r0, #2
 800c71c:	9308      	str	r3, [sp, #32]
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	9a06      	ldr	r2, [sp, #24]
 800c722:	9d07      	ldr	r5, [sp, #28]
 800c724:	4413      	add	r3, r2
 800c726:	9305      	str	r3, [sp, #20]
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	9b02      	ldr	r3, [sp, #8]
    for (int j = 0; j < width; j++) {

      uint16_t color = src[i * width + j];

      for (int ti = 0; ti < resize; ti++) {
 800c72c:	2700      	movs	r7, #0
 800c72e:	eba5 0803 	sub.w	r8, r5, r3
      uint16_t color = src[i * width + j];
 800c732:	9b01      	ldr	r3, [sp, #4]
 800c734:	fa1f f888 	uxth.w	r8, r8
 800c738:	f833 6b02 	ldrh.w	r6, [r3], #2
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	eb09 0a07 	add.w	sl, r9, r7
      for (int ti = 0; ti < resize; ti++) {
 800c742:	4644      	mov	r4, r8
 800c744:	fa1f fa8a 	uxth.w	sl, sl
        for (int tj = 0; tj < resize; tj++) {
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800c748:	4620      	mov	r0, r4
 800c74a:	3401      	adds	r4, #1
 800c74c:	4632      	mov	r2, r6
 800c74e:	4651      	mov	r1, sl
 800c750:	b2a4      	uxth	r4, r4
 800c752:	f7fc faad 	bl	8008cb0 <BSP_LCD_DrawPixel>
        for (int tj = 0; tj < resize; tj++) {
 800c756:	42a5      	cmp	r5, r4
 800c758:	d1f6      	bne.n	800c748 <_Z13loadRGB565LCDmmmmPth+0x74>
      for (int ti = 0; ti < resize; ti++) {
 800c75a:	3701      	adds	r7, #1
 800c75c:	455f      	cmp	r7, fp
 800c75e:	d1ee      	bne.n	800c73e <_Z13loadRGB565LCDmmmmPth+0x6a>
 800c760:	9b02      	ldr	r3, [sp, #8]
    for (int j = 0; j < width; j++) {
 800c762:	9a03      	ldr	r2, [sp, #12]
 800c764:	441d      	add	r5, r3
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	4293      	cmp	r3, r2
 800c76a:	b2ad      	uxth	r5, r5
 800c76c:	d1dd      	bne.n	800c72a <_Z13loadRGB565LCDmmmmPth+0x56>
 800c76e:	9b02      	ldr	r3, [sp, #8]
 800c770:	9a05      	ldr	r2, [sp, #20]
 800c772:	9908      	ldr	r1, [sp, #32]
 800c774:	4499      	add	r9, r3
  for (int i = 0; i < height; i++) {
 800c776:	9b04      	ldr	r3, [sp, #16]
 800c778:	1a52      	subs	r2, r2, r1
 800c77a:	fa1f f989 	uxth.w	r9, r9
 800c77e:	3301      	adds	r3, #1
 800c780:	9203      	str	r2, [sp, #12]
 800c782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	429a      	cmp	r2, r3
 800c788:	d1c9      	bne.n	800c71e <_Z13loadRGB565LCDmmmmPth+0x4a>
        }
      }
    }
  }
}
 800c78a:	b00b      	add	sp, #44	; 0x2c
 800c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c790 <_Z13displaystringPcii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, black);
    }
}

void displaystring(char *buf, int x, int y) {
 800c790:	b430      	push	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800c792:	b295      	uxth	r5, r2
 800c794:	2303      	movs	r3, #3
 800c796:	b28c      	uxth	r4, r1
 800c798:	4602      	mov	r2, r0
 800c79a:	4629      	mov	r1, r5
 800c79c:	4620      	mov	r0, r4
}
 800c79e:	bc30      	pop	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800c7a0:	f7fc ba2a 	b.w	8008bf8 <BSP_LCD_DisplayStringAt>

0800c7a4 <_Z14detectResponseifiii>:
#define USENEW
int unper_cnt = 0;

#ifdef USENEW
void detectResponse(int person, float ms, int training_mode, int pred,
                    int label) {
 800c7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a8:	4616      	mov	r6, r2
 800c7aa:	461d      	mov	r5, r3
 800c7ac:	ed2d 8b02 	vpush	{d8}
 800c7b0:	eeb0 8a40 	vmov.f32	s16, s0
 800c7b4:	b088      	sub	sp, #32
  char buf[20];
  if (person) {
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d05b      	beq.n	800c872 <_Z14detectResponseifiii+0xce>
    unper_cnt = 0;
 800c7ba:	4bc0      	ldr	r3, [pc, #768]	; (800cabc <_Z14detectResponseifiii+0x318>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
    if (training_mode) {
 800c7c0:	2900      	cmp	r1, #0
 800c7c2:	f000 813d 	beq.w	800ca40 <_Z14detectResponseifiii+0x29c>
  for (int i = x1 - 1; i < x2; i++)
 800c7c6:	f240 180d 	movw	r8, #269	; 0x10d
 800c7ca:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800c7ce:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, green);
 800c7d0:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c7d2:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800c7d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800c7d8:	4638      	mov	r0, r7
 800c7da:	f7fc fa69 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c7de:	2c64      	cmp	r4, #100	; 0x64
 800c7e0:	d1f6      	bne.n	800c7d0 <_Z14detectResponseifiii+0x2c>
  for (int i = x1 - 1; i < x2; i++)
 800c7e2:	f108 0801 	add.w	r8, r8, #1
 800c7e6:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800c7ea:	d1ee      	bne.n	800c7ca <_Z14detectResponseifiii+0x26>
 800c7ec:	f240 180d 	movw	r8, #269	; 0x10d
 800c7f0:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800c7f4:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, green);
 800c7f6:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c7f8:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800c7fa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800c7fe:	4638      	mov	r0, r7
 800c800:	f7fc fa56 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c804:	2cb4      	cmp	r4, #180	; 0xb4
 800c806:	d1f6      	bne.n	800c7f6 <_Z14detectResponseifiii+0x52>
  for (int i = x1 - 1; i < x2; i++)
 800c808:	f108 0801 	add.w	r8, r8, #1
 800c80c:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800c810:	d1ee      	bne.n	800c7f0 <_Z14detectResponseifiii+0x4c>
 800c812:	f240 180d 	movw	r8, #269	; 0x10d
 800c816:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800c81a:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, green);
 800c81c:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c81e:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800c820:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800c824:	4638      	mov	r0, r7
 800c826:	f7fc fa43 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c82a:	2cfa      	cmp	r4, #250	; 0xfa
 800c82c:	d1f6      	bne.n	800c81c <_Z14detectResponseifiii+0x78>
  for (int i = x1 - 1; i < x2; i++)
 800c82e:	f108 0801 	add.w	r8, r8, #1
 800c832:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800c836:	d1ee      	bne.n	800c816 <_Z14detectResponseifiii+0x72>
      drawGreenBackground(270, 480, 40, 100);
      drawGreenBackground(270, 480, 125, 180);
      drawGreenBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c838:	48a1      	ldr	r0, [pc, #644]	; (800cac0 <_Z14detectResponseifiii+0x31c>)
      sprintf(buf, " Prediction:");
 800c83a:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c83c:	f7fc f910 	bl	8008a60 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 800c840:	4ba0      	ldr	r3, [pc, #640]	; (800cac4 <_Z14detectResponseifiii+0x320>)
 800c842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c844:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c846:	aa03      	add	r2, sp, #12
      sprintf(buf, " Prediction:");
 800c848:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c84a:	2150      	movs	r1, #80	; 0x50
 800c84c:	2303      	movs	r3, #3
 800c84e:	f240 1011 	movw	r0, #273	; 0x111
 800c852:	f7fc f9d1 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d  ", pred);
 800c856:	4632      	mov	r2, r6
 800c858:	499b      	ldr	r1, [pc, #620]	; (800cac8 <_Z14detectResponseifiii+0x324>)
 800c85a:	a803      	add	r0, sp, #12
 800c85c:	f00c fb72 	bl	8018f44 <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 800c860:	2303      	movs	r3, #3
 800c862:	aa03      	add	r2, sp, #12
 800c864:	2164      	movs	r1, #100	; 0x64
 800c866:	f240 1011 	movw	r0, #273	; 0x111
 800c86a:	f7fc f9c5 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground True:");
 800c86e:	4b97      	ldr	r3, [pc, #604]	; (800cacc <_Z14detectResponseifiii+0x328>)
 800c870:	e057      	b.n	800c922 <_Z14detectResponseifiii+0x17e>
      drawBlueBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
    }
  } else {
    if (training_mode) {
 800c872:	2900      	cmp	r1, #0
 800c874:	f000 80a0 	beq.w	800c9b8 <_Z14detectResponseifiii+0x214>
  for (int i = x1 - 1; i < x2; i++)
 800c878:	f240 180d 	movw	r8, #269	; 0x10d
 800c87c:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800c880:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, red);
 800c882:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c884:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800c886:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800c88a:	4638      	mov	r0, r7
 800c88c:	f7fc fa10 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c890:	2c64      	cmp	r4, #100	; 0x64
 800c892:	d1f6      	bne.n	800c882 <_Z14detectResponseifiii+0xde>
  for (int i = x1 - 1; i < x2; i++)
 800c894:	f108 0801 	add.w	r8, r8, #1
 800c898:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800c89c:	d1ee      	bne.n	800c87c <_Z14detectResponseifiii+0xd8>
 800c89e:	f240 180d 	movw	r8, #269	; 0x10d
 800c8a2:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800c8a6:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, red);
 800c8a8:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c8aa:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800c8ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f7fc f9fd 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c8b6:	2cb4      	cmp	r4, #180	; 0xb4
 800c8b8:	d1f6      	bne.n	800c8a8 <_Z14detectResponseifiii+0x104>
  for (int i = x1 - 1; i < x2; i++)
 800c8ba:	f108 0801 	add.w	r8, r8, #1
 800c8be:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800c8c2:	d1ee      	bne.n	800c8a2 <_Z14detectResponseifiii+0xfe>
 800c8c4:	f240 180d 	movw	r8, #269	; 0x10d
 800c8c8:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800c8cc:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, red);
 800c8ce:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c8d0:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800c8d2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	f7fc f9ea 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c8dc:	2cfa      	cmp	r4, #250	; 0xfa
 800c8de:	d1f6      	bne.n	800c8ce <_Z14detectResponseifiii+0x12a>
  for (int i = x1 - 1; i < x2; i++)
 800c8e0:	f108 0801 	add.w	r8, r8, #1
 800c8e4:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800c8e8:	d1ee      	bne.n	800c8c8 <_Z14detectResponseifiii+0x124>
      drawRedBackground(270, 480, 40, 100);
      drawRedBackground(270, 480, 125, 180);
      drawRedBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c8ea:	4875      	ldr	r0, [pc, #468]	; (800cac0 <_Z14detectResponseifiii+0x31c>)
      sprintf(buf, " Prediction:");
 800c8ec:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c8ee:	f7fc f8b7 	bl	8008a60 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 800c8f2:	4b74      	ldr	r3, [pc, #464]	; (800cac4 <_Z14detectResponseifiii+0x320>)
 800c8f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8f6:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c8f8:	aa03      	add	r2, sp, #12
      sprintf(buf, " Prediction:");
 800c8fa:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800c8fc:	2150      	movs	r1, #80	; 0x50
 800c8fe:	2303      	movs	r3, #3
 800c900:	f240 1011 	movw	r0, #273	; 0x111
 800c904:	f7fc f978 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", pred);
 800c908:	4632      	mov	r2, r6
 800c90a:	4971      	ldr	r1, [pc, #452]	; (800cad0 <_Z14detectResponseifiii+0x32c>)
 800c90c:	a803      	add	r0, sp, #12
 800c90e:	f00c fb19 	bl	8018f44 <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 800c912:	2303      	movs	r3, #3
 800c914:	aa03      	add	r2, sp, #12
 800c916:	2164      	movs	r1, #100	; 0x64
 800c918:	f240 1011 	movw	r0, #273	; 0x111
 800c91c:	f7fc f96c 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground-Truth");
 800c920:	4b6c      	ldr	r3, [pc, #432]	; (800cad4 <_Z14detectResponseifiii+0x330>)
 800c922:	ae03      	add	r6, sp, #12
 800c924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c926:	c607      	stmia	r6!, {r0, r1, r2}
 800c928:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 120, buf, LEFT_MODE);
 800c92a:	aa03      	add	r2, sp, #12
 800c92c:	2303      	movs	r3, #3
 800c92e:	2178      	movs	r1, #120	; 0x78
 800c930:	f240 1011 	movw	r0, #273	; 0x111
 800c934:	f7fc f960 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", label);
 800c938:	462a      	mov	r2, r5
 800c93a:	4965      	ldr	r1, [pc, #404]	; (800cad0 <_Z14detectResponseifiii+0x32c>)
 800c93c:	a803      	add	r0, sp, #12
 800c93e:	f00c fb01 	bl	8018f44 <sprintf>
      BSP_LCD_DisplayStringAt(273, 140, buf, LEFT_MODE);
 800c942:	aa03      	add	r2, sp, #12
 800c944:	2303      	movs	r3, #3
 800c946:	218c      	movs	r1, #140	; 0x8c
 800c948:	f240 1011 	movw	r0, #273	; 0x111
 800c94c:	f7fc f954 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
    }
  }

  if (ms == 0)
 800c950:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c958:	d06d      	beq.n	800ca36 <_Z14detectResponseifiii+0x292>
    return;
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c95a:	485f      	ldr	r0, [pc, #380]	; (800cad8 <_Z14detectResponseifiii+0x334>)
 800c95c:	f7fc f880 	bl	8008a60 <BSP_LCD_SetTextColor>
  volatile float rate = 1000 / ms;
 800c960:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cadc <_Z14detectResponseifiii+0x338>
  volatile int decimal = (int)rate;
  volatile int floating = (int)((rate - (float)decimal) * 1000);
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 800c964:	a803      	add	r0, sp, #12
 800c966:	495e      	ldr	r1, [pc, #376]	; (800cae0 <_Z14detectResponseifiii+0x33c>)
  volatile float rate = 1000 / ms;
 800c968:	eec6 7a88 	vdiv.f32	s15, s13, s16
 800c96c:	edcd 7a00 	vstr	s15, [sp]
  volatile int decimal = (int)rate;
 800c970:	eddd 7a00 	vldr	s15, [sp]
 800c974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c978:	edcd 7a01 	vstr	s15, [sp, #4]
  volatile int floating = (int)((rate - (float)decimal) * 1000);
 800c97c:	ed9d 7a00 	vldr	s14, [sp]
 800c980:	eddd 7a01 	vldr	s15, [sp, #4]
 800c984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c98c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c994:	edcd 7a02 	vstr	s15, [sp, #8]
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 800c998:	9a01      	ldr	r2, [sp, #4]
 800c99a:	9b02      	ldr	r3, [sp, #8]
 800c99c:	f00c fad2 	bl	8018f44 <sprintf>
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
 800c9a0:	aa03      	add	r2, sp, #12
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	21b4      	movs	r1, #180	; 0xb4
 800c9a6:	f240 1011 	movw	r0, #273	; 0x111
 800c9aa:	f7fc f925 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
}
 800c9ae:	b008      	add	sp, #32
 800c9b0:	ecbd 8b02 	vpop	{d8}
 800c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = x1 - 1; i < x2; i++)
 800c9b8:	f240 160d 	movw	r6, #269	; 0x10d
 800c9bc:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800c9be:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, black);
 800c9c0:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c9c2:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f7fc f972 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c9cc:	2c64      	cmp	r4, #100	; 0x64
 800c9ce:	d1f7      	bne.n	800c9c0 <_Z14detectResponseifiii+0x21c>
  for (int i = x1 - 1; i < x2; i++)
 800c9d0:	3601      	adds	r6, #1
 800c9d2:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800c9d6:	d1f1      	bne.n	800c9bc <_Z14detectResponseifiii+0x218>
 800c9d8:	f240 160d 	movw	r6, #269	; 0x10d
 800c9dc:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800c9de:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, black);
 800c9e0:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800c9e2:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f7fc f962 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800c9ec:	2cb4      	cmp	r4, #180	; 0xb4
 800c9ee:	d1f7      	bne.n	800c9e0 <_Z14detectResponseifiii+0x23c>
  for (int i = x1 - 1; i < x2; i++)
 800c9f0:	3601      	adds	r6, #1
 800c9f2:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800c9f6:	d1f1      	bne.n	800c9dc <_Z14detectResponseifiii+0x238>
 800c9f8:	f240 160d 	movw	r6, #269	; 0x10d
 800c9fc:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800c9fe:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, black);
 800ca00:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800ca02:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800ca04:	2200      	movs	r2, #0
 800ca06:	4628      	mov	r0, r5
 800ca08:	f7fc f952 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800ca0c:	2cfa      	cmp	r4, #250	; 0xfa
 800ca0e:	d1f7      	bne.n	800ca00 <_Z14detectResponseifiii+0x25c>
  for (int i = x1 - 1; i < x2; i++)
 800ca10:	3601      	adds	r6, #1
 800ca12:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800ca16:	d1f1      	bne.n	800c9fc <_Z14detectResponseifiii+0x258>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800ca18:	4829      	ldr	r0, [pc, #164]	; (800cac0 <_Z14detectResponseifiii+0x31c>)
 800ca1a:	f7fc f821 	bl	8008a60 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
 800ca1e:	2303      	movs	r3, #3
 800ca20:	4a30      	ldr	r2, [pc, #192]	; (800cae4 <_Z14detectResponseifiii+0x340>)
 800ca22:	2164      	movs	r1, #100	; 0x64
 800ca24:	f240 1011 	movw	r0, #273	; 0x111
 800ca28:	f7fc f8e6 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
  if (ms == 0)
 800ca2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca34:	d191      	bne.n	800c95a <_Z14detectResponseifiii+0x1b6>
}
 800ca36:	b008      	add	sp, #32
 800ca38:	ecbd 8b02 	vpop	{d8}
 800ca3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = x1 - 1; i < x2; i++)
 800ca40:	f240 160d 	movw	r6, #269	; 0x10d
 800ca44:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800ca46:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, blue);
 800ca48:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800ca4a:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800ca4c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800ca50:	4628      	mov	r0, r5
 800ca52:	f7fc f92d 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800ca56:	2c64      	cmp	r4, #100	; 0x64
 800ca58:	d1f6      	bne.n	800ca48 <_Z14detectResponseifiii+0x2a4>
  for (int i = x1 - 1; i < x2; i++)
 800ca5a:	3601      	adds	r6, #1
 800ca5c:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800ca60:	d1f0      	bne.n	800ca44 <_Z14detectResponseifiii+0x2a0>
 800ca62:	f240 160d 	movw	r6, #269	; 0x10d
 800ca66:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800ca68:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, blue);
 800ca6a:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800ca6c:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800ca6e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800ca72:	4628      	mov	r0, r5
 800ca74:	f7fc f91c 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800ca78:	2cb4      	cmp	r4, #180	; 0xb4
 800ca7a:	d1f6      	bne.n	800ca6a <_Z14detectResponseifiii+0x2c6>
  for (int i = x1 - 1; i < x2; i++)
 800ca7c:	3601      	adds	r6, #1
 800ca7e:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800ca82:	d1f0      	bne.n	800ca66 <_Z14detectResponseifiii+0x2c2>
 800ca84:	f240 160d 	movw	r6, #269	; 0x10d
 800ca88:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800ca8a:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, blue);
 800ca8c:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800ca8e:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800ca90:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800ca94:	4628      	mov	r0, r5
 800ca96:	f7fc f90b 	bl	8008cb0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800ca9a:	2cfa      	cmp	r4, #250	; 0xfa
 800ca9c:	d1f6      	bne.n	800ca8c <_Z14detectResponseifiii+0x2e8>
  for (int i = x1 - 1; i < x2; i++)
 800ca9e:	3601      	adds	r6, #1
 800caa0:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800caa4:	d1f0      	bne.n	800ca88 <_Z14detectResponseifiii+0x2e4>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800caa6:	4806      	ldr	r0, [pc, #24]	; (800cac0 <_Z14detectResponseifiii+0x31c>)
 800caa8:	f7fb ffda 	bl	8008a60 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
 800caac:	2303      	movs	r3, #3
 800caae:	4a0e      	ldr	r2, [pc, #56]	; (800cae8 <_Z14detectResponseifiii+0x344>)
 800cab0:	2164      	movs	r1, #100	; 0x64
 800cab2:	f240 1011 	movw	r0, #273	; 0x111
 800cab6:	f7fc f89f 	bl	8008bf8 <BSP_LCD_DisplayStringAt>
 800caba:	e7b7      	b.n	800ca2c <_Z14detectResponseifiii+0x288>
 800cabc:	20004128 	.word	0x20004128
 800cac0:	ffff0000 	.word	0xffff0000
 800cac4:	0801cd8c 	.word	0x0801cd8c
 800cac8:	0801cd9c 	.word	0x0801cd9c
 800cacc:	0801cdac 	.word	0x0801cdac
 800cad0:	0801cdbc 	.word	0x0801cdbc
 800cad4:	0801cddc 	.word	0x0801cddc
 800cad8:	ff0000ff 	.word	0xff0000ff
 800cadc:	447a0000 	.word	0x447a0000
 800cae0:	0801cdfc 	.word	0x0801cdfc
 800cae4:	0801cdec 	.word	0x0801cdec
 800cae8:	0801cdcc 	.word	0x0801cdcc

0800caec <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 800caec:	b510      	push	{r4, lr}
 800caee:	b0a2      	sub	sp, #136	; 0x88
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800caf0:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800caf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800caf6:	21c0      	movs	r1, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800caf8:	2408      	movs	r4, #8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800cafa:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800cafc:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800cafe:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800cb00:	9106      	str	r1, [sp, #24]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800cb02:	9401      	str	r4, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800cb04:	f7fd ffe6 	bl	800aad4 <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 800cb08:	f7fc f9c4 	bl	8008e94 <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 800cb0c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800cb10:	2000      	movs	r0, #0
 800cb12:	f7fb ff59 	bl	80089c8 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 800cb16:	f7fb ff3f 	bl	8008998 <BSP_LCD_GetXSize>
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	f7fb ff48 	bl	80089b0 <BSP_LCD_GetYSize>
 800cb20:	fb00 f104 	mul.w	r1, r0, r4
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 800cb24:	2001      	movs	r0, #1
 800cb26:	f101 5140 	add.w	r1, r1, #805306368	; 0x30000000
 800cb2a:	0089      	lsls	r1, r1, #2
 800cb2c:	f7fb ff4c 	bl	80089c8 <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 800cb30:	f7fc f8da 	bl	8008ce8 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 800cb34:	2000      	movs	r0, #0
 800cb36:	f7fb ff87 	bl	8008a48 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800cb3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cb3e:	f7fb ff9b 	bl	8008a78 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 800cb42:	2001      	movs	r0, #1
 800cb44:	f7fb ff80 	bl	8008a48 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800cb48:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cb4c:	f7fb ff94 	bl	8008a78 <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 800cb50:	2100      	movs	r1, #0
 800cb52:	4608      	mov	r0, r1
 800cb54:	f7fb ff7e 	bl	8008a54 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 800cb58:	2164      	movs	r1, #100	; 0x64
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	f7fb ff7a 	bl	8008a54 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800cb60:	4802      	ldr	r0, [pc, #8]	; (800cb6c <_Z8lcdsetupv+0x80>)
 800cb62:	f7fb ff7d 	bl	8008a60 <BSP_LCD_SetTextColor>
}
 800cb66:	b022      	add	sp, #136	; 0x88
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	bf00      	nop
 800cb6c:	ff0000ff 	.word	0xff0000ff

0800cb70 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800cb70:	4b3b      	ldr	r3, [pc, #236]	; (800cc60 <main+0xf0>)
#define BUTTON2_Pin GPIO_PIN_10
#define BUTTON2_GPIO_Port GPIOF

uint16_t *RGBbuf;

int main(void) {
 800cb72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb76:	695a      	ldr	r2, [r3, #20]
 800cb78:	b0bb      	sub	sp, #236	; 0xec
 800cb7a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800cb7e:	d111      	bne.n	800cba4 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cb80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cb84:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cb88:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800cb8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cb90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cb94:	695a      	ldr	r2, [r3, #20]
 800cb96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cb9a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cb9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cba0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800cba4:	4a2e      	ldr	r2, [pc, #184]	; (800cc60 <main+0xf0>)
 800cba6:	6953      	ldr	r3, [r2, #20]
 800cba8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800cbac:	d128      	bne.n	800cc00 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800cbae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cbb2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800cbb6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cbba:	f643 77e0 	movw	r7, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cbbe:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cbc2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800cbc6:	07ae      	lsls	r6, r5, #30
 800cbc8:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cbca:	ea03 0c07 	and.w	ip, r3, r7
 800cbce:	4630      	mov	r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cbd0:	4629      	mov	r1, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cbd2:	ea4c 0400 	orr.w	r4, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800cbd6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cbd8:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 800cbdc:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800cbe0:	1c4c      	adds	r4, r1, #1
 800cbe2:	d1f6      	bne.n	800cbd2 <main+0x62>
 800cbe4:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 800cbe6:	f113 0f20 	cmn.w	r3, #32
 800cbea:	d1ee      	bne.n	800cbca <main+0x5a>
 800cbec:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cbf0:	6953      	ldr	r3, [r2, #20]
 800cbf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbf6:	6153      	str	r3, [r2, #20]
 800cbf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cbfc:	f3bf 8f6f 	isb	sy
  char buf[150];
  char showbuf[150];

  CPU_CACHE_Enable();
  HAL_Init();
 800cc00:	f7fc fb0c 	bl	800921c <HAL_Init>
void SystemClock_Config(void) {
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cc04:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cc06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800cc0a:	ad14      	add	r5, sp, #80	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cc0c:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cc0e:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 800cc12:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLN = 432;
 800cc14:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800cc18:	4628      	mov	r0, r5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cc1a:	961a      	str	r6, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cc1c:	961e      	str	r6, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 432;
 800cc1e:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cc20:	e9cd 7314 	strd	r7, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800cc24:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 800cc26:	e9cd 411b 	strd	r4, r1, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800cc2a:	931f      	str	r3, [sp, #124]	; 0x7c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800cc2c:	f7fd fcbc 	bl	800a5a8 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
 800cc30:	b100      	cbz	r0, 800cc34 <main+0xc4>
 800cc32:	e7fe      	b.n	800cc32 <main+0xc2>
    while (1) {
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 800cc34:	f7fd fc7c 	bl	800a530 <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
 800cc38:	b100      	cbz	r0, 800cc3c <main+0xcc>
 800cc3a:	e7fe      	b.n	800cc3a <main+0xca>
    while (1) {
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800cc3c:	220f      	movs	r2, #15
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cc3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cc42:	f44f 5a80 	mov.w	sl, #4096	; 0x1000

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800cc46:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800cc48:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cc4a:	e9cd 6010 	strd	r6, r0, [sp, #64]	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800cc4e:	a80f      	add	r0, sp, #60	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cc50:	e9cd 3a12 	strd	r3, sl, [sp, #72]	; 0x48
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800cc54:	f7fd fe74 	bl	800a940 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
 800cc58:	4604      	mov	r4, r0
 800cc5a:	b118      	cbz	r0, 800cc64 <main+0xf4>
 800cc5c:	e7fe      	b.n	800cc5c <main+0xec>
 800cc5e:	bf00      	nop
 800cc60:	e000ed00 	.word	0xe000ed00
}

static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc64:	4bd8      	ldr	r3, [pc, #864]	; (800cfc8 <main+0x458>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800cc66:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc68:	6028      	str	r0, [r5, #0]
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800cc6a:	463a      	mov	r2, r7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc6c:	60e8      	str	r0, [r5, #12]
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc6e:	f04f 0803 	mov.w	r8, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc72:	6128      	str	r0, [r5, #16]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cc74:	f04f 0b0b 	mov.w	fp, #11
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
                        ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cc78:	f04f 090a 	mov.w	r9, #10
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc7c:	e9c5 0001 	strd	r0, r0, [r5, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cc82:	f040 0c10 	orr.w	ip, r0, #16
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800cc86:	48d1      	ldr	r0, [pc, #836]	; (800cfcc <main+0x45c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc88:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cc8c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cc90:	f00c 0c10 	and.w	ip, ip, #16
 800cc94:	f8cd c014 	str.w	ip, [sp, #20]
 800cc98:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cc9c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cca0:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800cca4:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cca8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800ccac:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 800ccb0:	f8cd c018 	str.w	ip, [sp, #24]
 800ccb4:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccb8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800ccbc:	f04c 0c02 	orr.w	ip, ip, #2
 800ccc0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800ccc4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800ccc8:	f00c 0c02 	and.w	ip, ip, #2
 800cccc:	f8cd c01c 	str.w	ip, [sp, #28]
 800ccd0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ccd4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800ccd8:	f04c 0c08 	orr.w	ip, ip, #8
 800ccdc:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cce0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cce4:	f00c 0c08 	and.w	ip, ip, #8
 800cce8:	f8cd c020 	str.w	ip, [sp, #32]
 800ccec:	f8dd c020 	ldr.w	ip, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccf0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800ccf4:	f04c 0c04 	orr.w	ip, ip, #4
 800ccf8:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800ccfc:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd00:	f00c 0c04 	and.w	ip, ip, #4
 800cd04:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cd08:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd0c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd10:	f04c 0c01 	orr.w	ip, ip, #1
 800cd14:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cd18:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd1c:	f00c 0c01 	and.w	ip, ip, #1
 800cd20:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800cd24:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800cd28:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd2c:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 800cd30:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cd34:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd38:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
 800cd3c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800cd40:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800cd44:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd48:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800cd4c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cd50:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd54:	f40c 7c80 	and.w	ip, ip, #256	; 0x100
 800cd58:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800cd5c:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800cd60:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd64:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 800cd68:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cd6c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd70:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800cd74:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800cd78:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800cd7c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd80:	ea4c 0c01 	orr.w	ip, ip, r1
 800cd84:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cd88:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd8c:	ea0c 0c01 	and.w	ip, ip, r1
 800cd90:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800cd94:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cd98:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800cd9c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800cda0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800cda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800cdae:	f7fc fe49 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	210c      	movs	r1, #12
 800cdb6:	4886      	ldr	r0, [pc, #536]	; (800cfd0 <main+0x460>)
 800cdb8:	f7fc fe44 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800cdbc:	463a      	mov	r2, r7
 800cdbe:	2108      	movs	r1, #8
 800cdc0:	4884      	ldr	r0, [pc, #528]	; (800cfd4 <main+0x464>)
 800cdc2:	f7fc fe3f 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800cdc6:	463a      	mov	r2, r7
 800cdc8:	4651      	mov	r1, sl
 800cdca:	4881      	ldr	r0, [pc, #516]	; (800cfd0 <main+0x460>)
 800cdcc:	f7fc fe3a 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cdd6:	4880      	ldr	r0, [pc, #512]	; (800cfd8 <main+0x468>)
 800cdd8:	f7fc fe34 	bl	8009a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800cddc:	4622      	mov	r2, r4
 800cdde:	21c8      	movs	r1, #200	; 0xc8
 800cde0:	487e      	ldr	r0, [pc, #504]	; (800cfdc <main+0x46c>)
 800cde2:	f7fc fe2f 	bl	8009a44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800cde6:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800cde8:	4629      	mov	r1, r5
 800cdea:	487d      	ldr	r0, [pc, #500]	; (800cfe0 <main+0x470>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800cdec:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdee:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800cdf2:	f7fc fd09 	bl	8009808 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800cdf6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	4877      	ldr	r0, [pc, #476]	; (800cfdc <main+0x46c>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800cdfe:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce00:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ce04:	e9cd 8b17 	strd	r8, fp, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ce08:	f7fc fcfe 	bl	8009808 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800ce0c:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce10:	4629      	mov	r1, r5
 800ce12:	4874      	ldr	r0, [pc, #464]	; (800cfe4 <main+0x474>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800ce18:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ce1a:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce1e:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce22:	f7fc fcf1 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800ce26:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800ce28:	2208      	movs	r2, #8
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	4867      	ldr	r0, [pc, #412]	; (800cfcc <main+0x45c>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800ce2e:	9218      	str	r2, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800ce30:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce32:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce34:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800ce38:	f7fc fce6 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	486a      	ldr	r0, [pc, #424]	; (800cfe8 <main+0x478>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce40:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce42:	e9cd a414 	strd	sl, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ce46:	f7fc fcdf 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = Audio_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ce4a:	4b68      	ldr	r3, [pc, #416]	; (800cfec <main+0x47c>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800ce4c:	2240      	movs	r2, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800ce4e:	4629      	mov	r1, r5
 800ce50:	485e      	ldr	r0, [pc, #376]	; (800cfcc <main+0x45c>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ce52:	9315      	str	r3, [sp, #84]	; 0x54
 800ce54:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce56:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800ce58:	9214      	str	r2, [sp, #80]	; 0x50
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800ce5a:	f7fc fcd5 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800ce5e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce62:	4629      	mov	r1, r5
 800ce64:	4862      	ldr	r0, [pc, #392]	; (800cff0 <main+0x480>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800ce66:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce68:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce6c:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce70:	f7fc fcca 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800ce74:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800ce76:	4629      	mov	r1, r5
 800ce78:	4854      	ldr	r0, [pc, #336]	; (800cfcc <main+0x45c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce7a:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800ce7c:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce7e:	e9cd 7415 	strd	r7, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800ce82:	f7fc fcc1 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800ce86:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4850      	ldr	r0, [pc, #320]	; (800cfd0 <main+0x460>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800ce8e:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce90:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce92:	e9cd 7415 	strd	r7, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ce96:	f7fc fcb7 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800ce9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800ce9e:	4629      	mov	r1, r5
 800cea0:	4854      	ldr	r0, [pc, #336]	; (800cff4 <main+0x484>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800cea2:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cea4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800cea8:	f7fc fcae 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800ceac:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ceae:	4629      	mov	r1, r5
 800ceb0:	4848      	ldr	r0, [pc, #288]	; (800cfd4 <main+0x464>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ceb2:	e9cd 3714 	strd	r3, r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ceb6:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ceba:	f7fc fca5 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800cebe:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800cec0:	4629      	mov	r1, r5
 800cec2:	4842      	ldr	r0, [pc, #264]	; (800cfcc <main+0x45c>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800cec4:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cec6:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ceca:	f7fc fc9d 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800cece:	f248 0204 	movw	r2, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ced2:	4629      	mov	r1, r5
 800ced4:	4840      	ldr	r0, [pc, #256]	; (800cfd8 <main+0x468>)
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800ced6:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ced8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cedc:	f7fc fc94 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cee0:	2305      	movs	r3, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800cee2:	4629      	mov	r1, r5
 800cee4:	483a      	ldr	r0, [pc, #232]	; (800cfd0 <main+0x460>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cee6:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cee8:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceec:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800cef0:	f7fc fc8a 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800cef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800cef8:	4629      	mov	r1, r5
 800cefa:	4837      	ldr	r0, [pc, #220]	; (800cfd8 <main+0x468>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cefc:	e9cd 3714 	strd	r3, r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf00:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800cf04:	f7fc fc80 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800cf08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4830      	ldr	r0, [pc, #192]	; (800cfd0 <main+0x460>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800cf10:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf12:	e9cd 8415 	strd	r8, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cf16:	f7fc fc77 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800cf1a:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	482c      	ldr	r0, [pc, #176]	; (800cfd0 <main+0x460>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800cf20:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800cf22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf26:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800cf28:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800cf2a:	f7fc fc6d 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800cf2e:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800cf30:	4629      	mov	r1, r5
 800cf32:	4829      	ldr	r0, [pc, #164]	; (800cfd8 <main+0x468>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800cf34:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cf36:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf3a:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800cf3e:	f7fc fc63 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800cf42:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cf44:	4629      	mov	r1, r5
 800cf46:	4825      	ldr	r0, [pc, #148]	; (800cfdc <main+0x46c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf48:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800cf4a:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf4c:	e9cd 7415 	strd	r7, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cf50:	f7fc fc5a 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800cf54:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf56:	4629      	mov	r1, r5
 800cf58:	4826      	ldr	r0, [pc, #152]	; (800cff4 <main+0x484>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800cf5a:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800cf5c:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf60:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf64:	f7fc fc50 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800cf68:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	4821      	ldr	r0, [pc, #132]	; (800cff4 <main+0x484>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800cf6e:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf70:	e9cd 8b17 	strd	r8, fp, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf74:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf78:	f7fc fc46 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800cf7c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800cf7e:	4629      	mov	r1, r5
 800cf80:	4816      	ldr	r0, [pc, #88]	; (800cfdc <main+0x46c>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800cf82:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf84:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800cf88:	f7fc fc3e 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800cf8c:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4817      	ldr	r0, [pc, #92]	; (800cff0 <main+0x480>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800cf92:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf94:	e9cd 8b17 	strd	r8, fp, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf98:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf9c:	f7fc fc34 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800cfa0:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	4812      	ldr	r0, [pc, #72]	; (800cff0 <main+0x480>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800cfa6:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfa8:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfac:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfb0:	f7fc fc2a 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cfb4:	2205      	movs	r2, #5
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800cfb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfba:	4629      	mov	r1, r5
 800cfbc:	4809      	ldr	r0, [pc, #36]	; (800cfe4 <main+0x474>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cfbe:	9218      	str	r2, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800cfc0:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfc2:	9417      	str	r4, [sp, #92]	; 0x5c
 800cfc4:	e018      	b.n	800cff8 <main+0x488>
 800cfc6:	bf00      	nop
 800cfc8:	40023800 	.word	0x40023800
 800cfcc:	40020c00 	.word	0x40020c00
 800cfd0:	40022000 	.word	0x40022000
 800cfd4:	40022800 	.word	0x40022800
 800cfd8:	40021c00 	.word	0x40021c00
 800cfdc:	40021800 	.word	0x40021800
 800cfe0:	40021000 	.word	0x40021000
 800cfe4:	40020400 	.word	0x40020400
 800cfe8:	40022400 	.word	0x40022400
 800cfec:	10120000 	.word	0x10120000
 800cff0:	40020000 	.word	0x40020000
 800cff4:	40020800 	.word	0x40020800
  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 800cff8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800d134 <main+0x5c4>
 800cffc:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800d138 <main+0x5c8>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d000:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d004:	f7fc fc00 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800d008:	4629      	mov	r1, r5
 800d00a:	4846      	ldr	r0, [pc, #280]	; (800d124 <main+0x5b4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d00c:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d00e:	e9cd 7414 	strd	r7, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800d012:	f7fc fbf9 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800d016:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800d01a:	4629      	mov	r1, r5
 800d01c:	4842      	ldr	r0, [pc, #264]	; (800d128 <main+0x5b8>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800d01e:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d020:	e9cd 4715 	strd	r4, r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800d024:	f7fc fbf0 	bl	8009808 <HAL_GPIO_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800d028:	4621      	mov	r1, r4
 800d02a:	4630      	mov	r0, r6
 800d02c:	f7fb fc5c 	bl	80088e8 <BSP_PB_Init>
  lcdsetup();
 800d030:	f7ff fd5c 	bl	800caec <_Z8lcdsetupv>
  int camErr = initCamera();
 800d034:	f7fe ff8c 	bl	800bf50 <_Z10initCamerav>
  StartCapture();
 800d038:	f7ff f8c6 	bl	800c1c8 <_Z12StartCapturev>
  signed char *input = getInput();
 800d03c:	f006 fe9e 	bl	8013d7c <getInput>
  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 800d040:	f500 43c8 	add.w	r3, r0, #25600	; 0x6400
  signed char *input = getInput();
 800d044:	4607      	mov	r7, r0
 800d046:	f500 4496 	add.w	r4, r0, #19200	; 0x4b00
  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 800d04a:	f8c8 3000 	str.w	r3, [r8]
    start = HAL_GetTick();
 800d04e:	f7fc f907 	bl	8009260 <HAL_GetTick>
 800d052:	4606      	mov	r6, r0
    ReadCapture();
 800d054:	f7ff f91a 	bl	800c28c <_Z11ReadCapturev>
    StartCapture();
 800d058:	f7ff f8b6 	bl	800c1c8 <_Z12StartCapturev>
    DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800d05c:	2150      	movs	r1, #80	; 0x50
 800d05e:	2201      	movs	r2, #1
 800d060:	f8d8 3000 	ldr.w	r3, [r8]
 800d064:	4608      	mov	r0, r1
 800d066:	9200      	str	r2, [sp, #0]
 800d068:	463a      	mov	r2, r7
 800d06a:	f7fe ffb9 	bl	800bfe0 <_Z22DecodeandProcessAndRGBiiPaPti>
        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800d06e:	f8d8 c000 	ldr.w	ip, [r8]
 800d072:	4639      	mov	r1, r7
 800d074:	f1ac 0a02 	sub.w	sl, ip, #2
 800d078:	f101 0ef0 	add.w	lr, r1, #240	; 0xf0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d07c:	4650      	mov	r0, sl
        uint8_t red = (int32_t)input[(80 * i + j) * 3] + 128;
 800d07e:	780b      	ldrb	r3, [r1, #0]
 800d080:	3103      	adds	r1, #3
        uint8_t green = (int32_t)input[(80 * i + j) * 3 + 1] + 128;
 800d082:	f811 bc02 	ldrb.w	fp, [r1, #-2]
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d086:	f083 0380 	eor.w	r3, r3, #128	; 0x80
        uint8_t blue = (int32_t)input[(80 * i + j) * 3 + 2] + 128;
 800d08a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
        uint16_t g = ((green >> 2) & 0x3f) << 5;
 800d08e:	f08b 0b80 	eor.w	fp, fp, #128	; 0x80
      for (int j = 0; j < RES_W; j++) {
 800d092:	458e      	cmp	lr, r1
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d094:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        uint16_t b = (blue >> 3) & 0x1f;
 800d098:	f082 0280 	eor.w	r2, r2, #128	; 0x80
        uint16_t g = ((green >> 2) & 0x3f) << 5;
 800d09c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d0a0:	ea4f 23c3 	mov.w	r3, r3, lsl #11
        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800d0a4:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
 800d0a8:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800d0ac:	f820 3f02 	strh.w	r3, [r0, #2]!
      for (int j = 0; j < RES_W; j++) {
 800d0b0:	d1e5      	bne.n	800d07e <main+0x50e>
    for (int i = 0; i < RES_W; i++) {
 800d0b2:	4574      	cmp	r4, lr
 800d0b4:	f10a 0aa0 	add.w	sl, sl, #160	; 0xa0
 800d0b8:	d1de      	bne.n	800d078 <main+0x508>
    loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 3);
 800d0ba:	2350      	movs	r3, #80	; 0x50
 800d0bc:	210a      	movs	r1, #10
 800d0be:	2203      	movs	r2, #3
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	e9cd c200 	strd	ip, r2, [sp]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	f7ff fb04 	bl	800c6d4 <_Z13loadRGB565LCDmmmmPth>
  invoke(labels);
 800d0cc:	4817      	ldr	r0, [pc, #92]	; (800d12c <main+0x5bc>)
 800d0ce:	f006 fe5d 	bl	8013d8c <invoke>
  signed char *output = (signed char *)getOutput();
 800d0d2:	f006 fe57 	bl	8013d84 <getOutput>
    out_int8[i] = output[i];
 800d0d6:	f990 b000 	ldrsb.w	fp, [r0]
 800d0da:	f990 a001 	ldrsb.w	sl, [r0, #1]
 800d0de:	f889 b000 	strb.w	fp, [r9]
 800d0e2:	f889 a001 	strb.w	sl, [r9, #1]
  	end = HAL_GetTick();
 800d0e6:	f7fc f8bb 	bl	8009260 <HAL_GetTick>
  	sprintf(showbuf, " Inference ");
 800d0ea:	4b11      	ldr	r3, [pc, #68]	; (800d130 <main+0x5c0>)
  	end = HAL_GetTick();
 800d0ec:	9003      	str	r0, [sp, #12]
  	sprintf(showbuf, " Inference ");
 800d0ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  	displaystring(showbuf, 273, 10);
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	220a      	movs	r2, #10
 800d0fa:	f240 1111 	movw	r1, #273	; 0x111
 800d0fe:	f7ff fb47 	bl	800c790 <_Z13displaystringPcii>
  	detectResponse(person, end - start, t_mode, 0, 0);
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	45d3      	cmp	fp, sl
 800d106:	eba3 0306 	sub.w	r3, r3, r6
 800d10a:	bfcc      	ite	gt
 800d10c:	2000      	movgt	r0, #0
 800d10e:	2001      	movle	r0, #1
 800d110:	ee00 3a10 	vmov	s0, r3
 800d114:	2300      	movs	r3, #0
 800d116:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800d11a:	461a      	mov	r2, r3
 800d11c:	4619      	mov	r1, r3
 800d11e:	f7ff fb41 	bl	800c7a4 <_Z14detectResponseifiii>
  }
 800d122:	e794      	b.n	800d04e <main+0x4de>
 800d124:	40020000 	.word	0x40020000
 800d128:	40021400 	.word	0x40021400
 800d12c:	20004130 	.word	0x20004130
 800d130:	0801ce0c 	.word	0x0801ce0c
 800d134:	2000412c 	.word	0x2000412c
 800d138:	20004158 	.word	0x20004158

0800d13c <upsampleCb>:
  return (uint8)b;
}
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d13c:	4a75      	ldr	r2, [pc, #468]	; (800d314 <upsampleCb+0x1d8>)
 800d13e:	3102      	adds	r1, #2
 800d140:	4b75      	ldr	r3, [pc, #468]	; (800d318 <upsampleCb+0x1dc>)
 800d142:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800d146:	eb03 0c01 	add.w	ip, r3, r1
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {
 800d14a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d14e:	4f73      	ldr	r7, [pc, #460]	; (800d31c <upsampleCb+0x1e0>)
 800d150:	f100 0840 	add.w	r8, r0, #64	; 0x40
 800d154:	440f      	add	r7, r1
 800d156:	4686      	mov	lr, r0
 800d158:	f100 0608 	add.w	r6, r0, #8
 800d15c:	463d      	mov	r5, r7
 800d15e:	4664      	mov	r4, ip
  uint8 *pDstG = gMCUBufG + dstOfs;
  uint8 *pDstB = gMCUBufB + dstOfs;
  for (y = 0; y < 4; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cb = (uint8)*pSrc++;
 800d160:	f930 3b02 	ldrsh.w	r3, [r0], #2
  b = a - b;
 800d164:	f814 9c02 	ldrb.w	r9, [r4, #-2]
      uint8 cb = (uint8)*pSrc++;
 800d168:	b2db      	uxtb	r3, r3
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800d16a:	b219      	sxth	r1, r3
 800d16c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800d170:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d174:	0952      	lsrs	r2, r2, #5
 800d176:	3a2c      	subs	r2, #44	; 0x2c
 800d178:	b292      	uxth	r2, r2
  b = a - b;
 800d17a:	eba9 0902 	sub.w	r9, r9, r2
 800d17e:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800d182:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d186:	f240 80ad 	bls.w	800d2e4 <upsampleCb+0x1a8>
  b = a - b;
 800d18a:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800d18e:	f1ba 0f00 	cmp.w	sl, #0
 800d192:	f2c0 80ad 	blt.w	800d2f0 <upsampleCb+0x1b4>
    else if (b > 255)
 800d196:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d19a:	f340 80a3 	ble.w	800d2e4 <upsampleCb+0x1a8>
      return 255;
 800d19e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  b = a - b;
 800d1a2:	f814 9c01 	ldrb.w	r9, [r4, #-1]
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800d1a6:	f804 ac02 	strb.w	sl, [r4, #-2]
  b = a - b;
 800d1aa:	eba9 0902 	sub.w	r9, r9, r2
 800d1ae:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800d1b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d1b6:	f240 8092 	bls.w	800d2de <upsampleCb+0x1a2>
  b = a - b;
 800d1ba:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800d1be:	f1ba 0f00 	cmp.w	sl, #0
 800d1c2:	f2c0 8092 	blt.w	800d2ea <upsampleCb+0x1ae>
    else if (b > 255)
 800d1c6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d1ca:	f340 8088 	ble.w	800d2de <upsampleCb+0x1a2>
      return 255;
 800d1ce:	f04f 0aff 	mov.w	sl, #255	; 0xff
  b = a - b;
 800d1d2:	f894 9006 	ldrb.w	r9, [r4, #6]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 800d1d6:	f804 ac01 	strb.w	sl, [r4, #-1]
  b = a - b;
 800d1da:	eba9 0902 	sub.w	r9, r9, r2
 800d1de:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800d1e2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d1e6:	d977      	bls.n	800d2d8 <upsampleCb+0x19c>
  b = a - b;
 800d1e8:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800d1ec:	f1ba 0f00 	cmp.w	sl, #0
 800d1f0:	f2c0 8084 	blt.w	800d2fc <upsampleCb+0x1c0>
    else if (b > 255)
 800d1f4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d1f8:	dd6e      	ble.n	800d2d8 <upsampleCb+0x19c>
      return 255;
 800d1fa:	f04f 09ff 	mov.w	r9, #255	; 0xff
  b = a - b;
 800d1fe:	f894 a007 	ldrb.w	sl, [r4, #7]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 800d202:	f884 9006 	strb.w	r9, [r4, #6]
  b = a - b;
 800d206:	ebaa 0202 	sub.w	r2, sl, r2
 800d20a:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d20c:	2aff      	cmp	r2, #255	; 0xff
 800d20e:	d960      	bls.n	800d2d2 <upsampleCb+0x196>
  b = a - b;
 800d210:	fa0f f982 	sxth.w	r9, r2
    if (b < 0)
 800d214:	f1b9 0f00 	cmp.w	r9, #0
 800d218:	db6d      	blt.n	800d2f6 <upsampleCb+0x1ba>
    else if (b > 255)
 800d21a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d21e:	dd58      	ble.n	800d2d2 <upsampleCb+0x196>
      return 255;
 800d220:	f04f 09ff 	mov.w	r9, #255	; 0xff
      pDstG[9] = subAndClamp(pDstG[9], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d224:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d228:	3be3      	subs	r3, #227	; 0xe3
  b = a + b;
 800d22a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d22e:	eb01 1141 	add.w	r1, r1, r1, lsl #5
      pDstG[9] = subAndClamp(pDstG[9], cbG);
 800d232:	f884 9007 	strb.w	r9, [r4, #7]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d236:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 800d23a:	b28b      	uxth	r3, r1
  b = a + b;
 800d23c:	441a      	add	r2, r3
 800d23e:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d240:	2aff      	cmp	r2, #255	; 0xff
 800d242:	d944      	bls.n	800d2ce <upsampleCb+0x192>
  b = a + b;
 800d244:	b211      	sxth	r1, r2
    if (b < 0)
 800d246:	2900      	cmp	r1, #0
 800d248:	db5d      	blt.n	800d306 <upsampleCb+0x1ca>
    else if (b > 255)
 800d24a:	29ff      	cmp	r1, #255	; 0xff
 800d24c:	dd3f      	ble.n	800d2ce <upsampleCb+0x192>
      return 255;
 800d24e:	21ff      	movs	r1, #255	; 0xff
  b = a + b;
 800d250:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800d254:	f805 1c02 	strb.w	r1, [r5, #-2]
  b = a + b;
 800d258:	441a      	add	r2, r3
 800d25a:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d25c:	2aff      	cmp	r2, #255	; 0xff
 800d25e:	d934      	bls.n	800d2ca <upsampleCb+0x18e>
  b = a + b;
 800d260:	b211      	sxth	r1, r2
    if (b < 0)
 800d262:	2900      	cmp	r1, #0
 800d264:	db4d      	blt.n	800d302 <upsampleCb+0x1c6>
    else if (b > 255)
 800d266:	29ff      	cmp	r1, #255	; 0xff
 800d268:	dd2f      	ble.n	800d2ca <upsampleCb+0x18e>
      return 255;
 800d26a:	21ff      	movs	r1, #255	; 0xff
  b = a + b;
 800d26c:	79aa      	ldrb	r2, [r5, #6]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 800d26e:	f805 1c01 	strb.w	r1, [r5, #-1]
  b = a + b;
 800d272:	441a      	add	r2, r3
 800d274:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d276:	2aff      	cmp	r2, #255	; 0xff
 800d278:	d925      	bls.n	800d2c6 <upsampleCb+0x18a>
  b = a + b;
 800d27a:	b211      	sxth	r1, r2
    if (b < 0)
 800d27c:	2900      	cmp	r1, #0
 800d27e:	db46      	blt.n	800d30e <upsampleCb+0x1d2>
    else if (b > 255)
 800d280:	29ff      	cmp	r1, #255	; 0xff
 800d282:	dd20      	ble.n	800d2c6 <upsampleCb+0x18a>
      return 255;
 800d284:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 800d286:	79e9      	ldrb	r1, [r5, #7]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800d288:	71aa      	strb	r2, [r5, #6]
  b = a + b;
 800d28a:	440b      	add	r3, r1
 800d28c:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800d28e:	2bff      	cmp	r3, #255	; 0xff
 800d290:	d917      	bls.n	800d2c2 <upsampleCb+0x186>
  b = a + b;
 800d292:	b21a      	sxth	r2, r3
    if (b < 0)
 800d294:	2a00      	cmp	r2, #0
 800d296:	db38      	blt.n	800d30a <upsampleCb+0x1ce>
    else if (b > 255)
 800d298:	2aff      	cmp	r2, #255	; 0xff
 800d29a:	dd12      	ble.n	800d2c2 <upsampleCb+0x186>
      return 255;
 800d29c:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800d29e:	4286      	cmp	r6, r0
      pDstB[9] = addAndClamp(pDstB[9], cbB);
 800d2a0:	71eb      	strb	r3, [r5, #7]
 800d2a2:	f104 0402 	add.w	r4, r4, #2
 800d2a6:	f105 0502 	add.w	r5, r5, #2
    for (x = 0; x < 4; x++) {
 800d2aa:	f47f af59 	bne.w	800d160 <upsampleCb+0x24>
 800d2ae:	f10e 0010 	add.w	r0, lr, #16
 800d2b2:	f10c 0c10 	add.w	ip, ip, #16
 800d2b6:	3710      	adds	r7, #16
  for (y = 0; y < 4; y++) {
 800d2b8:	4580      	cmp	r8, r0
 800d2ba:	f47f af4c 	bne.w	800d156 <upsampleCb+0x1a>

    pSrc = pSrc - 4 + 8;
    pDstG = pDstG - 8 + 16;
    pDstB = pDstB - 8 + 16;
  }
}
 800d2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint8)b;
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	e7eb      	b.n	800d29e <upsampleCb+0x162>
 800d2c6:	b2d2      	uxtb	r2, r2
 800d2c8:	e7dd      	b.n	800d286 <upsampleCb+0x14a>
 800d2ca:	b2d1      	uxtb	r1, r2
 800d2cc:	e7ce      	b.n	800d26c <upsampleCb+0x130>
 800d2ce:	b2d1      	uxtb	r1, r2
 800d2d0:	e7be      	b.n	800d250 <upsampleCb+0x114>
  return (uint8)b;
 800d2d2:	fa5f f982 	uxtb.w	r9, r2
 800d2d6:	e7a5      	b.n	800d224 <upsampleCb+0xe8>
 800d2d8:	fa5f f989 	uxtb.w	r9, r9
 800d2dc:	e78f      	b.n	800d1fe <upsampleCb+0xc2>
 800d2de:	fa5f fa89 	uxtb.w	sl, r9
 800d2e2:	e776      	b.n	800d1d2 <upsampleCb+0x96>
 800d2e4:	fa5f fa89 	uxtb.w	sl, r9
 800d2e8:	e75b      	b.n	800d1a2 <upsampleCb+0x66>
      return 0;
 800d2ea:	f04f 0a00 	mov.w	sl, #0
 800d2ee:	e770      	b.n	800d1d2 <upsampleCb+0x96>
 800d2f0:	f04f 0a00 	mov.w	sl, #0
 800d2f4:	e755      	b.n	800d1a2 <upsampleCb+0x66>
 800d2f6:	f04f 0900 	mov.w	r9, #0
 800d2fa:	e793      	b.n	800d224 <upsampleCb+0xe8>
 800d2fc:	f04f 0900 	mov.w	r9, #0
 800d300:	e77d      	b.n	800d1fe <upsampleCb+0xc2>
      return 0;
 800d302:	2100      	movs	r1, #0
 800d304:	e7b2      	b.n	800d26c <upsampleCb+0x130>
 800d306:	2100      	movs	r1, #0
 800d308:	e7a2      	b.n	800d250 <upsampleCb+0x114>
 800d30a:	2300      	movs	r3, #0
 800d30c:	e7c7      	b.n	800d29e <upsampleCb+0x162>
 800d30e:	2200      	movs	r2, #0
 800d310:	e7b9      	b.n	800d286 <upsampleCb+0x14a>
 800d312:	bf00      	nop
 800d314:	20004160 	.word	0x20004160
 800d318:	20004770 	.word	0x20004770
 800d31c:	20004670 	.word	0x20004670

0800d320 <upsampleCbH>:

static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d320:	4b49      	ldr	r3, [pc, #292]	; (800d448 <upsampleCbH+0x128>)
 800d322:	3102      	adds	r1, #2
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 800d324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d328:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d32c:	4f47      	ldr	r7, [pc, #284]	; (800d44c <upsampleCbH+0x12c>)
 800d32e:	4e48      	ldr	r6, [pc, #288]	; (800d450 <upsampleCbH+0x130>)
 800d330:	440f      	add	r7, r1
 800d332:	f100 0e80 	add.w	lr, r0, #128	; 0x80
 800d336:	440e      	add	r6, r1
 800d338:	4684      	mov	ip, r0
 800d33a:	f100 0508 	add.w	r5, r0, #8
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 800d33e:	4634      	mov	r4, r6
 800d340:	4639      	mov	r1, r7
  uint8 *pDstG = gMCUBufG + dstOfs;
  uint8 *pDstB = gMCUBufB + dstOfs;
  for (y = 0; y < 8; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cb = (uint8)*pSrc++;
 800d342:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a - b;
 800d346:	f811 9c02 	ldrb.w	r9, [r1, #-2]
      uint8 cb = (uint8)*pSrc++;
 800d34a:	b2d2      	uxtb	r2, r2
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800d34c:	b213      	sxth	r3, r2
 800d34e:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 800d352:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 800d356:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800d35a:	f1a8 082c 	sub.w	r8, r8, #44	; 0x2c
 800d35e:	fa1f f888 	uxth.w	r8, r8
  b = a - b;
 800d362:	eba9 0908 	sub.w	r9, r9, r8
 800d366:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800d36a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d36e:	d95d      	bls.n	800d42c <upsampleCbH+0x10c>
  b = a - b;
 800d370:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800d374:	f1ba 0f00 	cmp.w	sl, #0
 800d378:	db5e      	blt.n	800d438 <upsampleCbH+0x118>
    else if (b > 255)
 800d37a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d37e:	dd55      	ble.n	800d42c <upsampleCbH+0x10c>
      return 255;
 800d380:	f04f 09ff 	mov.w	r9, #255	; 0xff
  b = a - b;
 800d384:	f811 ac01 	ldrb.w	sl, [r1, #-1]
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800d388:	f801 9c02 	strb.w	r9, [r1, #-2]
  b = a - b;
 800d38c:	ebaa 0808 	sub.w	r8, sl, r8
 800d390:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800d394:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d398:	d945      	bls.n	800d426 <upsampleCbH+0x106>
  b = a - b;
 800d39a:	fa0f f988 	sxth.w	r9, r8
    if (b < 0)
 800d39e:	f1b9 0f00 	cmp.w	r9, #0
 800d3a2:	db46      	blt.n	800d432 <upsampleCbH+0x112>
    else if (b > 255)
 800d3a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d3a8:	dd3d      	ble.n	800d426 <upsampleCbH+0x106>
      return 255;
 800d3aa:	f04f 08ff 	mov.w	r8, #255	; 0xff
      pDstG[1] = subAndClamp(pDstG[1], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d3ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3b2:	f1a2 09e3 	sub.w	r9, r2, #227	; 0xe3
  b = a + b;
 800d3b6:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d3ba:	eb03 1343 	add.w	r3, r3, r3, lsl #5
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 800d3be:	f801 8c01 	strb.w	r8, [r1, #-1]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d3c2:	eb09 13d3 	add.w	r3, r9, r3, lsr #7
 800d3c6:	b29b      	uxth	r3, r3
  b = a + b;
 800d3c8:	441a      	add	r2, r3
 800d3ca:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d3cc:	2aff      	cmp	r2, #255	; 0xff
 800d3ce:	d928      	bls.n	800d422 <upsampleCbH+0x102>
  b = a + b;
 800d3d0:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800d3d4:	f1b8 0f00 	cmp.w	r8, #0
 800d3d8:	db33      	blt.n	800d442 <upsampleCbH+0x122>
    else if (b > 255)
 800d3da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d3de:	dd20      	ble.n	800d422 <upsampleCbH+0x102>
      return 255;
 800d3e0:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 800d3e2:	f814 8c01 	ldrb.w	r8, [r4, #-1]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800d3e6:	f804 2c02 	strb.w	r2, [r4, #-2]
  b = a + b;
 800d3ea:	4443      	add	r3, r8
 800d3ec:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800d3ee:	2bff      	cmp	r3, #255	; 0xff
 800d3f0:	d915      	bls.n	800d41e <upsampleCbH+0xfe>
  b = a + b;
 800d3f2:	b21a      	sxth	r2, r3
    if (b < 0)
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	db22      	blt.n	800d43e <upsampleCbH+0x11e>
    else if (b > 255)
 800d3f8:	2aff      	cmp	r2, #255	; 0xff
 800d3fa:	dd10      	ble.n	800d41e <upsampleCbH+0xfe>
      return 255;
 800d3fc:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800d3fe:	4285      	cmp	r5, r0
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 800d400:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d404:	f101 0102 	add.w	r1, r1, #2
 800d408:	f104 0402 	add.w	r4, r4, #2
    for (x = 0; x < 4; x++) {
 800d40c:	d199      	bne.n	800d342 <upsampleCbH+0x22>
 800d40e:	f10c 0010 	add.w	r0, ip, #16
 800d412:	3708      	adds	r7, #8
 800d414:	3608      	adds	r6, #8
  for (y = 0; y < 8; y++) {
 800d416:	4586      	cmp	lr, r0
 800d418:	d18e      	bne.n	800d338 <upsampleCbH+0x18>
      pDstB += 2;
    }

    pSrc = pSrc - 4 + 8;
  }
}
 800d41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint8)b;
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	e7ed      	b.n	800d3fe <upsampleCbH+0xde>
 800d422:	b2d2      	uxtb	r2, r2
 800d424:	e7dd      	b.n	800d3e2 <upsampleCbH+0xc2>
  return (uint8)b;
 800d426:	fa5f f888 	uxtb.w	r8, r8
 800d42a:	e7c0      	b.n	800d3ae <upsampleCbH+0x8e>
 800d42c:	fa5f f989 	uxtb.w	r9, r9
 800d430:	e7a8      	b.n	800d384 <upsampleCbH+0x64>
      return 0;
 800d432:	f04f 0800 	mov.w	r8, #0
 800d436:	e7ba      	b.n	800d3ae <upsampleCbH+0x8e>
 800d438:	f04f 0900 	mov.w	r9, #0
 800d43c:	e7a2      	b.n	800d384 <upsampleCbH+0x64>
      return 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	e7dd      	b.n	800d3fe <upsampleCbH+0xde>
 800d442:	2200      	movs	r2, #0
 800d444:	e7cd      	b.n	800d3e2 <upsampleCbH+0xc2>
 800d446:	bf00      	nop
 800d448:	20004160 	.word	0x20004160
 800d44c:	20004770 	.word	0x20004770
 800d450:	20004670 	.word	0x20004670

0800d454 <upsampleCbV>:

static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d454:	4b4a      	ldr	r3, [pc, #296]	; (800d580 <upsampleCbV+0x12c>)
  uint8 *pDstG = gMCUBufG + dstOfs;
  uint8 *pDstB = gMCUBufB + dstOfs;
 800d456:	4a4b      	ldr	r2, [pc, #300]	; (800d584 <upsampleCbV+0x130>)
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d458:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d45c:	4b4a      	ldr	r3, [pc, #296]	; (800d588 <upsampleCbV+0x134>)
static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
 800d45e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8 *pDstB = gMCUBufB + dstOfs;
 800d462:	eb02 0e01 	add.w	lr, r2, r1
 800d466:	f100 0840 	add.w	r8, r0, #64	; 0x40
 800d46a:	4419      	add	r1, r3
 800d46c:	f101 0709 	add.w	r7, r1, #9
 800d470:	f10e 0608 	add.w	r6, lr, #8
 800d474:	f100 0c10 	add.w	ip, r0, #16
static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
 800d478:	4675      	mov	r5, lr
 800d47a:	460c      	mov	r4, r1
 800d47c:	e048      	b.n	800d510 <upsampleCbV+0xbc>
  b = a - b;
 800d47e:	fa0f fb8a 	sxth.w	fp, sl
    if (b < 0)
 800d482:	f1bb 0f00 	cmp.w	fp, #0
 800d486:	db70      	blt.n	800d56a <upsampleCbV+0x116>
    else if (b > 255)
 800d488:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800d48c:	dd57      	ble.n	800d53e <upsampleCbV+0xea>
      return 255;
 800d48e:	f04f 0aff 	mov.w	sl, #255	; 0xff
    for (x = 0; x < 8; x++) {
      uint8 cb = (uint8)*pSrc++;
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800d492:	f884 a000 	strb.w	sl, [r4]
  b = a - b;
 800d496:	f897 a000 	ldrb.w	sl, [r7]
 800d49a:	ebaa 0909 	sub.w	r9, sl, r9
 800d49e:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800d4a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d4a6:	d95d      	bls.n	800d564 <upsampleCbV+0x110>
  b = a - b;
 800d4a8:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800d4ac:	f1ba 0f00 	cmp.w	sl, #0
 800d4b0:	db62      	blt.n	800d578 <upsampleCbV+0x124>
    else if (b > 255)
 800d4b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d4b6:	dd55      	ble.n	800d564 <upsampleCbV+0x110>
      return 255;
 800d4b8:	f04f 09ff 	mov.w	r9, #255	; 0xff
      pDstG[8] = subAndClamp(pDstG[8], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d4c0:	f1a2 0ae3 	sub.w	sl, r2, #227	; 0xe3
  b = a + b;
 800d4c4:	782a      	ldrb	r2, [r5, #0]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d4c6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 800d4ca:	f807 9b01 	strb.w	r9, [r7], #1
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800d4ce:	eb0a 13d3 	add.w	r3, sl, r3, lsr #7
 800d4d2:	b29b      	uxth	r3, r3
  b = a + b;
 800d4d4:	441a      	add	r2, r3
 800d4d6:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d4d8:	2aff      	cmp	r2, #255	; 0xff
 800d4da:	d941      	bls.n	800d560 <upsampleCbV+0x10c>
  b = a + b;
 800d4dc:	fa0f f982 	sxth.w	r9, r2
    if (b < 0)
 800d4e0:	f1b9 0f00 	cmp.w	r9, #0
 800d4e4:	db46      	blt.n	800d574 <upsampleCbV+0x120>
    else if (b > 255)
 800d4e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d4ea:	dd39      	ble.n	800d560 <upsampleCbV+0x10c>
      return 255;
 800d4ec:	22ff      	movs	r2, #255	; 0xff
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800d4ee:	f805 2b01 	strb.w	r2, [r5], #1
  b = a + b;
 800d4f2:	7832      	ldrb	r2, [r6, #0]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800d4f8:	2bff      	cmp	r3, #255	; 0xff
 800d4fa:	d923      	bls.n	800d544 <upsampleCbV+0xf0>
  b = a + b;
 800d4fc:	b21a      	sxth	r2, r3
    if (b < 0)
 800d4fe:	2a00      	cmp	r2, #0
 800d500:	db36      	blt.n	800d570 <upsampleCbV+0x11c>
    else if (b > 255)
 800d502:	2aff      	cmp	r2, #255	; 0xff
 800d504:	dd1e      	ble.n	800d544 <upsampleCbV+0xf0>
      return 255;
 800d506:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 8; x++) {
 800d508:	4584      	cmp	ip, r0
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800d50a:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800d50e:	d01e      	beq.n	800d54e <upsampleCbV+0xfa>
      uint8 cb = (uint8)*pSrc++;
 800d510:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a - b;
 800d514:	f814 af01 	ldrb.w	sl, [r4, #1]!
      uint8 cb = (uint8)*pSrc++;
 800d518:	b2d2      	uxtb	r2, r2
      cbG = ((cb * 88U) >> 8U) - 44U;
 800d51a:	b213      	sxth	r3, r2
 800d51c:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 800d520:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 800d524:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800d528:	f1a9 092c 	sub.w	r9, r9, #44	; 0x2c
 800d52c:	fa1f f989 	uxth.w	r9, r9
  b = a - b;
 800d530:	ebaa 0a09 	sub.w	sl, sl, r9
 800d534:	fa1f fa8a 	uxth.w	sl, sl
  if ((uint16)b > 255U) {
 800d538:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d53c:	d89f      	bhi.n	800d47e <upsampleCbV+0x2a>
  return (uint8)b;
 800d53e:	fa5f fa8a 	uxtb.w	sl, sl
 800d542:	e7a6      	b.n	800d492 <upsampleCbV+0x3e>
  return (uint8)b;
 800d544:	b2db      	uxtb	r3, r3
    for (x = 0; x < 8; x++) {
 800d546:	4584      	cmp	ip, r0
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800d548:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800d54c:	d1e0      	bne.n	800d510 <upsampleCbV+0xbc>
  for (y = 0; y < 4; y++) {
 800d54e:	45c4      	cmp	ip, r8
 800d550:	f101 0110 	add.w	r1, r1, #16
      ++pDstG;
      ++pDstB;
    }

    pDstG = pDstG - 8 + 16;
    pDstB = pDstB - 8 + 16;
 800d554:	f10e 0e10 	add.w	lr, lr, #16
 800d558:	4660      	mov	r0, ip
  for (y = 0; y < 4; y++) {
 800d55a:	d187      	bne.n	800d46c <upsampleCbV+0x18>
  }
}
 800d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return (uint8)b;
 800d560:	b2d2      	uxtb	r2, r2
 800d562:	e7c4      	b.n	800d4ee <upsampleCbV+0x9a>
  return (uint8)b;
 800d564:	fa5f f989 	uxtb.w	r9, r9
 800d568:	e7a8      	b.n	800d4bc <upsampleCbV+0x68>
      return 0;
 800d56a:	f04f 0a00 	mov.w	sl, #0
 800d56e:	e790      	b.n	800d492 <upsampleCbV+0x3e>
      return 0;
 800d570:	2300      	movs	r3, #0
 800d572:	e7c9      	b.n	800d508 <upsampleCbV+0xb4>
 800d574:	2200      	movs	r2, #0
 800d576:	e7ba      	b.n	800d4ee <upsampleCbV+0x9a>
      return 0;
 800d578:	f04f 0900 	mov.w	r9, #0
 800d57c:	e79e      	b.n	800d4bc <upsampleCbV+0x68>
 800d57e:	bf00      	nop
 800d580:	20004160 	.word	0x20004160
 800d584:	20004670 	.word	0x20004670
 800d588:	2000476f 	.word	0x2000476f

0800d58c <upsampleCr>:
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d58c:	4b76      	ldr	r3, [pc, #472]	; (800d768 <upsampleCr+0x1dc>)
 800d58e:	3102      	adds	r1, #2
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 800d590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d594:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d598:	4f74      	ldr	r7, [pc, #464]	; (800d76c <upsampleCr+0x1e0>)
 800d59a:	4e75      	ldr	r6, [pc, #468]	; (800d770 <upsampleCr+0x1e4>)
 800d59c:	440f      	add	r7, r1
 800d59e:	f100 0e40 	add.w	lr, r0, #64	; 0x40
 800d5a2:	440e      	add	r6, r1
 800d5a4:	4684      	mov	ip, r0
 800d5a6:	f100 0508 	add.w	r5, r0, #8
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 800d5aa:	4634      	mov	r4, r6
 800d5ac:	4639      	mov	r1, r7
  uint8 *pDstR = gMCUBufR + dstOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
  for (y = 0; y < 4; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cr = (uint8)*pSrc++;
 800d5ae:	f930 3b02 	ldrsh.w	r3, [r0], #2
  b = a + b;
 800d5b2:	f811 2c02 	ldrb.w	r2, [r1, #-2]
      uint8 cr = (uint8)*pSrc++;
 800d5b6:	b2db      	uxtb	r3, r3
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800d5b8:	fa0f f983 	sxth.w	r9, r3
 800d5bc:	3bb3      	subs	r3, #179	; 0xb3
 800d5be:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800d5c2:	eb08 1808 	add.w	r8, r8, r8, lsl #4
 800d5c6:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 800d5ca:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 800d5ce:	b29b      	uxth	r3, r3
  b = a + b;
 800d5d0:	441a      	add	r2, r3
 800d5d2:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d5d4:	2aff      	cmp	r2, #255	; 0xff
 800d5d6:	f240 80af 	bls.w	800d738 <upsampleCr+0x1ac>
  b = a + b;
 800d5da:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800d5de:	f1b8 0f00 	cmp.w	r8, #0
 800d5e2:	f2c0 80af 	blt.w	800d744 <upsampleCr+0x1b8>
    else if (b > 255)
 800d5e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d5ea:	f340 80a5 	ble.w	800d738 <upsampleCr+0x1ac>
      return 255;
 800d5ee:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a + b;
 800d5f2:	f811 2c01 	ldrb.w	r2, [r1, #-1]
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800d5f6:	f801 8c02 	strb.w	r8, [r1, #-2]
  b = a + b;
 800d5fa:	441a      	add	r2, r3
 800d5fc:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d5fe:	2aff      	cmp	r2, #255	; 0xff
 800d600:	f240 8097 	bls.w	800d732 <upsampleCr+0x1a6>
  b = a + b;
 800d604:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800d608:	f1b8 0f00 	cmp.w	r8, #0
 800d60c:	f2c0 8097 	blt.w	800d73e <upsampleCr+0x1b2>
    else if (b > 255)
 800d610:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d614:	f340 808d 	ble.w	800d732 <upsampleCr+0x1a6>
      return 255;
 800d618:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a + b;
 800d61c:	798a      	ldrb	r2, [r1, #6]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 800d61e:	f801 8c01 	strb.w	r8, [r1, #-1]
  b = a + b;
 800d622:	441a      	add	r2, r3
 800d624:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d626:	2aff      	cmp	r2, #255	; 0xff
 800d628:	f240 8081 	bls.w	800d72e <upsampleCr+0x1a2>
  b = a + b;
 800d62c:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800d630:	f1b8 0f00 	cmp.w	r8, #0
 800d634:	f2c0 808b 	blt.w	800d74e <upsampleCr+0x1c2>
    else if (b > 255)
 800d638:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d63c:	dd77      	ble.n	800d72e <upsampleCr+0x1a2>
      return 255;
 800d63e:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 800d640:	f891 8007 	ldrb.w	r8, [r1, #7]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 800d644:	718a      	strb	r2, [r1, #6]
  b = a + b;
 800d646:	eb03 0208 	add.w	r2, r3, r8
 800d64a:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d64c:	2aff      	cmp	r2, #255	; 0xff
 800d64e:	d96c      	bls.n	800d72a <upsampleCr+0x19e>
  b = a + b;
 800d650:	b213      	sxth	r3, r2
    if (b < 0)
 800d652:	2b00      	cmp	r3, #0
 800d654:	db79      	blt.n	800d74a <upsampleCr+0x1be>
    else if (b > 255)
 800d656:	2bff      	cmp	r3, #255	; 0xff
 800d658:	dd67      	ble.n	800d72a <upsampleCr+0x19e>
      return 255;
 800d65a:	22ff      	movs	r2, #255	; 0xff
      pDstR[9] = addAndClamp(pDstR[9], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 800d65c:	ebc9 1309 	rsb	r3, r9, r9, lsl #4
  b = a - b;
 800d660:	f814 8c02 	ldrb.w	r8, [r4, #-2]
      pDstR[9] = addAndClamp(pDstR[9], crR);
 800d664:	71ca      	strb	r2, [r1, #7]
      crG = ((cr * 183U) >> 8U) - 91;
 800d666:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d66a:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800d66e:	0a1b      	lsrs	r3, r3, #8
 800d670:	3b5b      	subs	r3, #91	; 0x5b
 800d672:	b29b      	uxth	r3, r3
  b = a - b;
 800d674:	eba8 0803 	sub.w	r8, r8, r3
 800d678:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800d67c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d680:	d950      	bls.n	800d724 <upsampleCr+0x198>
  b = a - b;
 800d682:	fa0f f288 	sxth.w	r2, r8
    if (b < 0)
 800d686:	2a00      	cmp	r2, #0
 800d688:	db66      	blt.n	800d758 <upsampleCr+0x1cc>
    else if (b > 255)
 800d68a:	2aff      	cmp	r2, #255	; 0xff
 800d68c:	dd4a      	ble.n	800d724 <upsampleCr+0x198>
      return 255;
 800d68e:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800d692:	f814 2c01 	ldrb.w	r2, [r4, #-1]
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800d696:	f804 8c02 	strb.w	r8, [r4, #-2]
  b = a - b;
 800d69a:	1ad2      	subs	r2, r2, r3
 800d69c:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d69e:	2aff      	cmp	r2, #255	; 0xff
 800d6a0:	d93d      	bls.n	800d71e <upsampleCr+0x192>
  b = a - b;
 800d6a2:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800d6a6:	f1b8 0f00 	cmp.w	r8, #0
 800d6aa:	db52      	blt.n	800d752 <upsampleCr+0x1c6>
    else if (b > 255)
 800d6ac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d6b0:	dd35      	ble.n	800d71e <upsampleCr+0x192>
      return 255;
 800d6b2:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800d6b6:	79a2      	ldrb	r2, [r4, #6]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 800d6b8:	f804 8c01 	strb.w	r8, [r4, #-1]
  b = a - b;
 800d6bc:	1ad2      	subs	r2, r2, r3
 800d6be:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d6c0:	2aff      	cmp	r2, #255	; 0xff
 800d6c2:	d929      	bls.n	800d718 <upsampleCr+0x18c>
  b = a - b;
 800d6c4:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800d6c8:	f1b8 0f00 	cmp.w	r8, #0
 800d6cc:	db49      	blt.n	800d762 <upsampleCr+0x1d6>
    else if (b > 255)
 800d6ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d6d2:	dd21      	ble.n	800d718 <upsampleCr+0x18c>
      return 255;
 800d6d4:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800d6d8:	79e2      	ldrb	r2, [r4, #7]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800d6da:	f884 8006 	strb.w	r8, [r4, #6]
  b = a - b;
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800d6e2:	2bff      	cmp	r3, #255	; 0xff
 800d6e4:	d916      	bls.n	800d714 <upsampleCr+0x188>
  b = a - b;
 800d6e6:	b21a      	sxth	r2, r3
    if (b < 0)
 800d6e8:	2a00      	cmp	r2, #0
 800d6ea:	db38      	blt.n	800d75e <upsampleCr+0x1d2>
    else if (b > 255)
 800d6ec:	2aff      	cmp	r2, #255	; 0xff
 800d6ee:	dd11      	ble.n	800d714 <upsampleCr+0x188>
      return 255;
 800d6f0:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800d6f2:	4285      	cmp	r5, r0
      pDstG[9] = subAndClamp(pDstG[9], crG);
 800d6f4:	71e3      	strb	r3, [r4, #7]
 800d6f6:	f101 0102 	add.w	r1, r1, #2
 800d6fa:	f104 0402 	add.w	r4, r4, #2
    for (x = 0; x < 4; x++) {
 800d6fe:	f47f af56 	bne.w	800d5ae <upsampleCr+0x22>
 800d702:	f10c 0010 	add.w	r0, ip, #16
 800d706:	3710      	adds	r7, #16
 800d708:	3610      	adds	r6, #16
  for (y = 0; y < 4; y++) {
 800d70a:	4586      	cmp	lr, r0
 800d70c:	f47f af4a 	bne.w	800d5a4 <upsampleCr+0x18>

    pSrc = pSrc - 4 + 8;
    pDstR = pDstR - 8 + 16;
    pDstG = pDstG - 8 + 16;
  }
}
 800d710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (uint8)b;
 800d714:	b2db      	uxtb	r3, r3
 800d716:	e7ec      	b.n	800d6f2 <upsampleCr+0x166>
 800d718:	fa5f f882 	uxtb.w	r8, r2
 800d71c:	e7dc      	b.n	800d6d8 <upsampleCr+0x14c>
 800d71e:	fa5f f882 	uxtb.w	r8, r2
 800d722:	e7c8      	b.n	800d6b6 <upsampleCr+0x12a>
 800d724:	fa5f f888 	uxtb.w	r8, r8
 800d728:	e7b3      	b.n	800d692 <upsampleCr+0x106>
  return (uint8)b;
 800d72a:	b2d2      	uxtb	r2, r2
 800d72c:	e796      	b.n	800d65c <upsampleCr+0xd0>
 800d72e:	b2d2      	uxtb	r2, r2
 800d730:	e786      	b.n	800d640 <upsampleCr+0xb4>
 800d732:	fa5f f882 	uxtb.w	r8, r2
 800d736:	e771      	b.n	800d61c <upsampleCr+0x90>
 800d738:	fa5f f882 	uxtb.w	r8, r2
 800d73c:	e759      	b.n	800d5f2 <upsampleCr+0x66>
      return 0;
 800d73e:	f04f 0800 	mov.w	r8, #0
 800d742:	e76b      	b.n	800d61c <upsampleCr+0x90>
 800d744:	f04f 0800 	mov.w	r8, #0
 800d748:	e753      	b.n	800d5f2 <upsampleCr+0x66>
 800d74a:	2200      	movs	r2, #0
 800d74c:	e786      	b.n	800d65c <upsampleCr+0xd0>
 800d74e:	2200      	movs	r2, #0
 800d750:	e776      	b.n	800d640 <upsampleCr+0xb4>
      return 0;
 800d752:	f04f 0800 	mov.w	r8, #0
 800d756:	e7ae      	b.n	800d6b6 <upsampleCr+0x12a>
 800d758:	f04f 0800 	mov.w	r8, #0
 800d75c:	e799      	b.n	800d692 <upsampleCr+0x106>
 800d75e:	2300      	movs	r3, #0
 800d760:	e7c7      	b.n	800d6f2 <upsampleCr+0x166>
 800d762:	f04f 0800 	mov.w	r8, #0
 800d766:	e7b7      	b.n	800d6d8 <upsampleCr+0x14c>
 800d768:	20004160 	.word	0x20004160
 800d76c:	20004870 	.word	0x20004870
 800d770:	20004770 	.word	0x20004770

0800d774 <upsampleCrH>:

static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d774:	4b47      	ldr	r3, [pc, #284]	; (800d894 <upsampleCrH+0x120>)
 800d776:	3102      	adds	r1, #2
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 800d778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d77c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d780:	4f45      	ldr	r7, [pc, #276]	; (800d898 <upsampleCrH+0x124>)
 800d782:	4e46      	ldr	r6, [pc, #280]	; (800d89c <upsampleCrH+0x128>)
 800d784:	440f      	add	r7, r1
 800d786:	f100 0e80 	add.w	lr, r0, #128	; 0x80
 800d78a:	440e      	add	r6, r1
 800d78c:	4684      	mov	ip, r0
 800d78e:	f100 0508 	add.w	r5, r0, #8
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 800d792:	4634      	mov	r4, r6
 800d794:	4639      	mov	r1, r7
  uint8 *pDstR = gMCUBufR + dstOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
  for (y = 0; y < 8; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cr = (uint8)*pSrc++;
 800d796:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a + b;
 800d79a:	f811 8c02 	ldrb.w	r8, [r1, #-2]
      uint8 cr = (uint8)*pSrc++;
 800d79e:	b2d2      	uxtb	r2, r2
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800d7a0:	b213      	sxth	r3, r2
 800d7a2:	3ab3      	subs	r2, #179	; 0xb3
 800d7a4:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 800d7a8:	eb09 1909 	add.w	r9, r9, r9, lsl #4
 800d7ac:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 800d7b0:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 800d7b4:	b292      	uxth	r2, r2
  b = a + b;
 800d7b6:	4490      	add	r8, r2
 800d7b8:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800d7bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d7c0:	d95b      	bls.n	800d87a <upsampleCrH+0x106>
  b = a + b;
 800d7c2:	fa0f f988 	sxth.w	r9, r8
    if (b < 0)
 800d7c6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ca:	db5b      	blt.n	800d884 <upsampleCrH+0x110>
    else if (b > 255)
 800d7cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d7d0:	dd53      	ble.n	800d87a <upsampleCrH+0x106>
      return 255;
 800d7d2:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a + b;
 800d7d6:	f811 9c01 	ldrb.w	r9, [r1, #-1]
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800d7da:	f801 8c02 	strb.w	r8, [r1, #-2]
  b = a + b;
 800d7de:	444a      	add	r2, r9
 800d7e0:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d7e2:	2aff      	cmp	r2, #255	; 0xff
 800d7e4:	d947      	bls.n	800d876 <upsampleCrH+0x102>
  b = a + b;
 800d7e6:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800d7ea:	f1b8 0f00 	cmp.w	r8, #0
 800d7ee:	db47      	blt.n	800d880 <upsampleCrH+0x10c>
    else if (b > 255)
 800d7f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d7f4:	dd3f      	ble.n	800d876 <upsampleCrH+0x102>
      return 255;
 800d7f6:	22ff      	movs	r2, #255	; 0xff
      pDstR[1] = addAndClamp(pDstR[1], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 800d7f8:	ebc3 1903 	rsb	r9, r3, r3, lsl #4
  b = a - b;
 800d7fc:	f814 8c02 	ldrb.w	r8, [r4, #-2]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 800d800:	f801 2c01 	strb.w	r2, [r1, #-1]
      crG = ((cr * 183U) >> 8U) - 91;
 800d804:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d808:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800d80c:	0a1b      	lsrs	r3, r3, #8
 800d80e:	3b5b      	subs	r3, #91	; 0x5b
 800d810:	b29b      	uxth	r3, r3
  b = a - b;
 800d812:	eba8 0803 	sub.w	r8, r8, r3
 800d816:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800d81a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d81e:	d927      	bls.n	800d870 <upsampleCrH+0xfc>
  b = a - b;
 800d820:	fa0f f288 	sxth.w	r2, r8
    if (b < 0)
 800d824:	2a00      	cmp	r2, #0
 800d826:	db32      	blt.n	800d88e <upsampleCrH+0x11a>
    else if (b > 255)
 800d828:	2aff      	cmp	r2, #255	; 0xff
 800d82a:	dd21      	ble.n	800d870 <upsampleCrH+0xfc>
      return 255;
 800d82c:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800d830:	f814 2c01 	ldrb.w	r2, [r4, #-1]
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800d834:	f804 8c02 	strb.w	r8, [r4, #-2]
  b = a - b;
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800d83c:	2bff      	cmp	r3, #255	; 0xff
 800d83e:	d915      	bls.n	800d86c <upsampleCrH+0xf8>
  b = a - b;
 800d840:	b21a      	sxth	r2, r3
    if (b < 0)
 800d842:	2a00      	cmp	r2, #0
 800d844:	db21      	blt.n	800d88a <upsampleCrH+0x116>
    else if (b > 255)
 800d846:	2aff      	cmp	r2, #255	; 0xff
 800d848:	dd10      	ble.n	800d86c <upsampleCrH+0xf8>
      return 255;
 800d84a:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800d84c:	4285      	cmp	r5, r0
      pDstG[1] = subAndClamp(pDstG[1], crG);
 800d84e:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d852:	f101 0102 	add.w	r1, r1, #2
 800d856:	f104 0402 	add.w	r4, r4, #2
    for (x = 0; x < 4; x++) {
 800d85a:	d19c      	bne.n	800d796 <upsampleCrH+0x22>
 800d85c:	f10c 0010 	add.w	r0, ip, #16
 800d860:	3708      	adds	r7, #8
 800d862:	3608      	adds	r6, #8
  for (y = 0; y < 8; y++) {
 800d864:	4586      	cmp	lr, r0
 800d866:	d191      	bne.n	800d78c <upsampleCrH+0x18>
      pDstG += 2;
    }

    pSrc = pSrc - 4 + 8;
  }
}
 800d868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (uint8)b;
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	e7ed      	b.n	800d84c <upsampleCrH+0xd8>
 800d870:	fa5f f888 	uxtb.w	r8, r8
 800d874:	e7dc      	b.n	800d830 <upsampleCrH+0xbc>
  return (uint8)b;
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	e7be      	b.n	800d7f8 <upsampleCrH+0x84>
 800d87a:	fa5f f888 	uxtb.w	r8, r8
 800d87e:	e7aa      	b.n	800d7d6 <upsampleCrH+0x62>
      return 0;
 800d880:	2200      	movs	r2, #0
 800d882:	e7b9      	b.n	800d7f8 <upsampleCrH+0x84>
 800d884:	f04f 0800 	mov.w	r8, #0
 800d888:	e7a5      	b.n	800d7d6 <upsampleCrH+0x62>
      return 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	e7de      	b.n	800d84c <upsampleCrH+0xd8>
 800d88e:	f04f 0800 	mov.w	r8, #0
 800d892:	e7cd      	b.n	800d830 <upsampleCrH+0xbc>
 800d894:	20004160 	.word	0x20004160
 800d898:	20004870 	.word	0x20004870
 800d89c:	20004770 	.word	0x20004770

0800d8a0 <upsampleCrV>:

static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d8a0:	4b49      	ldr	r3, [pc, #292]	; (800d9c8 <upsampleCrV+0x128>)
  uint8 *pDstR = gMCUBufR + dstOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
 800d8a2:	4a4a      	ldr	r2, [pc, #296]	; (800d9cc <upsampleCrV+0x12c>)
  int16 *pSrc = gCoeffBuf + srcOfs;
 800d8a4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d8a8:	4b49      	ldr	r3, [pc, #292]	; (800d9d0 <upsampleCrV+0x130>)
static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
 800d8aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8 *pDstG = gMCUBufG + dstOfs;
 800d8ae:	eb02 0e01 	add.w	lr, r2, r1
 800d8b2:	f100 0840 	add.w	r8, r0, #64	; 0x40
 800d8b6:	4419      	add	r1, r3
 800d8b8:	f101 0709 	add.w	r7, r1, #9
 800d8bc:	f10e 0608 	add.w	r6, lr, #8
 800d8c0:	f100 0c10 	add.w	ip, r0, #16
static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
 800d8c4:	4675      	mov	r5, lr
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	e047      	b.n	800d95a <upsampleCrV+0xba>
  b = a + b;
 800d8ca:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800d8ce:	f1ba 0f00 	cmp.w	sl, #0
 800d8d2:	db6e      	blt.n	800d9b2 <upsampleCrV+0x112>
    else if (b > 255)
 800d8d4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d8d8:	dd55      	ble.n	800d986 <upsampleCrV+0xe6>
      return 255;
 800d8da:	f04f 09ff 	mov.w	r9, #255	; 0xff
    for (x = 0; x < 8; x++) {
      uint8 cr = (uint8)*pSrc++;
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800d8de:	f884 9000 	strb.w	r9, [r4]
  b = a + b;
 800d8e2:	f897 9000 	ldrb.w	r9, [r7]
 800d8e6:	444a      	add	r2, r9
 800d8e8:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800d8ea:	2aff      	cmp	r2, #255	; 0xff
 800d8ec:	d95f      	bls.n	800d9ae <upsampleCrV+0x10e>
  b = a + b;
 800d8ee:	fa0f f982 	sxth.w	r9, r2
    if (b < 0)
 800d8f2:	f1b9 0f00 	cmp.w	r9, #0
 800d8f6:	db64      	blt.n	800d9c2 <upsampleCrV+0x122>
    else if (b > 255)
 800d8f8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d8fc:	dd57      	ble.n	800d9ae <upsampleCrV+0x10e>
      return 255;
 800d8fe:	22ff      	movs	r2, #255	; 0xff
      pDstR[8] = addAndClamp(pDstR[8], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 800d900:	ebc3 1a03 	rsb	sl, r3, r3, lsl #4
  b = a - b;
 800d904:	f895 9000 	ldrb.w	r9, [r5]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 800d908:	f807 2b01 	strb.w	r2, [r7], #1
      crG = ((cr * 183U) >> 8U) - 91;
 800d90c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d910:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800d914:	0a1b      	lsrs	r3, r3, #8
 800d916:	3b5b      	subs	r3, #91	; 0x5b
 800d918:	b29b      	uxth	r3, r3
  b = a - b;
 800d91a:	eba9 0903 	sub.w	r9, r9, r3
 800d91e:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800d922:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d926:	d93f      	bls.n	800d9a8 <upsampleCrV+0x108>
  b = a - b;
 800d928:	fa0f f289 	sxth.w	r2, r9
    if (b < 0)
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	db45      	blt.n	800d9bc <upsampleCrV+0x11c>
    else if (b > 255)
 800d930:	2aff      	cmp	r2, #255	; 0xff
 800d932:	dd39      	ble.n	800d9a8 <upsampleCrV+0x108>
      return 255;
 800d934:	f04f 09ff 	mov.w	r9, #255	; 0xff
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800d938:	f805 9b01 	strb.w	r9, [r5], #1
  b = a - b;
 800d93c:	7832      	ldrb	r2, [r6, #0]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800d942:	2bff      	cmp	r3, #255	; 0xff
 800d944:	d922      	bls.n	800d98c <upsampleCrV+0xec>
  b = a - b;
 800d946:	b21a      	sxth	r2, r3
    if (b < 0)
 800d948:	2a00      	cmp	r2, #0
 800d94a:	db35      	blt.n	800d9b8 <upsampleCrV+0x118>
    else if (b > 255)
 800d94c:	2aff      	cmp	r2, #255	; 0xff
 800d94e:	dd1d      	ble.n	800d98c <upsampleCrV+0xec>
      return 255;
 800d950:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 8; x++) {
 800d952:	4584      	cmp	ip, r0
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800d954:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800d958:	d01d      	beq.n	800d996 <upsampleCrV+0xf6>
      uint8 cr = (uint8)*pSrc++;
 800d95a:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a + b;
 800d95e:	f814 9f01 	ldrb.w	r9, [r4, #1]!
      uint8 cr = (uint8)*pSrc++;
 800d962:	b2d2      	uxtb	r2, r2
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800d964:	b213      	sxth	r3, r2
 800d966:	3ab3      	subs	r2, #179	; 0xb3
 800d968:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 800d96c:	eb0a 1a0a 	add.w	sl, sl, sl, lsl #4
 800d970:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 800d974:	eb02 221a 	add.w	r2, r2, sl, lsr #8
 800d978:	b292      	uxth	r2, r2
  b = a + b;
 800d97a:	4491      	add	r9, r2
 800d97c:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800d980:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d984:	d8a1      	bhi.n	800d8ca <upsampleCrV+0x2a>
  return (uint8)b;
 800d986:	fa5f f989 	uxtb.w	r9, r9
 800d98a:	e7a8      	b.n	800d8de <upsampleCrV+0x3e>
  return (uint8)b;
 800d98c:	b2db      	uxtb	r3, r3
    for (x = 0; x < 8; x++) {
 800d98e:	4584      	cmp	ip, r0
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800d990:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800d994:	d1e1      	bne.n	800d95a <upsampleCrV+0xba>
  for (y = 0; y < 4; y++) {
 800d996:	45e0      	cmp	r8, ip
 800d998:	f101 0110 	add.w	r1, r1, #16
      ++pDstR;
      ++pDstG;
    }

    pDstR = pDstR - 8 + 16;
    pDstG = pDstG - 8 + 16;
 800d99c:	f10e 0e10 	add.w	lr, lr, #16
 800d9a0:	4660      	mov	r0, ip
  for (y = 0; y < 4; y++) {
 800d9a2:	d189      	bne.n	800d8b8 <upsampleCrV+0x18>
  }
}
 800d9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint8)b;
 800d9a8:	fa5f f989 	uxtb.w	r9, r9
 800d9ac:	e7c4      	b.n	800d938 <upsampleCrV+0x98>
  return (uint8)b;
 800d9ae:	b2d2      	uxtb	r2, r2
 800d9b0:	e7a6      	b.n	800d900 <upsampleCrV+0x60>
      return 0;
 800d9b2:	f04f 0900 	mov.w	r9, #0
 800d9b6:	e792      	b.n	800d8de <upsampleCrV+0x3e>
      return 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e7ca      	b.n	800d952 <upsampleCrV+0xb2>
 800d9bc:	f04f 0900 	mov.w	r9, #0
 800d9c0:	e7ba      	b.n	800d938 <upsampleCrV+0x98>
      return 0;
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	e79c      	b.n	800d900 <upsampleCrV+0x60>
 800d9c6:	bf00      	nop
 800d9c8:	20004160 	.word	0x20004160
 800d9cc:	20004770 	.word	0x20004770
 800d9d0:	2000486f 	.word	0x2000486f

0800d9d4 <huffDecode>:
                                    const uint8 *pHuffVal) {
 800d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!gBitsLeft) {
 800d9d8:	4ab0      	ldr	r2, [pc, #704]	; (800dc9c <huffDecode+0x2c8>)
                                    const uint8 *pHuffVal) {
 800d9da:	b087      	sub	sp, #28
  if (gBitBuf & 0x8000)
 800d9dc:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 800dcbc <huffDecode+0x2e8>
                                    const uint8 *pHuffVal) {
 800d9e0:	9003      	str	r0, [sp, #12]
  if (gBitBuf & 0x8000)
 800d9e2:	f8bb 3000 	ldrh.w	r3, [fp]
  if (!gBitsLeft) {
 800d9e6:	7810      	ldrb	r0, [r2, #0]
                                    const uint8 *pHuffVal) {
 800d9e8:	9105      	str	r1, [sp, #20]
  if (gBitBuf & 0x8000)
 800d9ea:	0bdc      	lsrs	r4, r3, #15
  if (!gBitsLeft) {
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	f000 80ca 	beq.w	800db86 <huffDecode+0x1b2>
 800d9f2:	9a03      	ldr	r2, [sp, #12]
  gBitsLeft--;
 800d9f4:	3801      	subs	r0, #1
  gBitBuf <<= 1;
 800d9f6:	005b      	lsls	r3, r3, #1
  uint16 code = getBit();
 800d9f8:	2600      	movs	r6, #0
 800d9fa:	f102 081e 	add.w	r8, r2, #30
  gBitsLeft--;
 800d9fe:	b2c0      	uxtb	r0, r0
  gBitBuf <<= 1;
 800da00:	b29b      	uxth	r3, r3
  gBitsLeft--;
 800da02:	4aa6      	ldr	r2, [pc, #664]	; (800dc9c <huffDecode+0x2c8>)
  uint16 code = getBit();
 800da04:	b2a4      	uxth	r4, r4
  if (!gInBufLeft) {
 800da06:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 800dcb8 <huffDecode+0x2e4>
  gBitsLeft--;
 800da0a:	7010      	strb	r0, [r2, #0]
  gBitBuf <<= 1;
 800da0c:	f8ab 3000 	strh.w	r3, [fp]
 800da10:	e00c      	b.n	800da2c <huffDecode+0x58>
  gBitsLeft--;
 800da12:	3801      	subs	r0, #1
  gBitBuf <<= 1;
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	3601      	adds	r6, #1
  gBitsLeft--;
 800da18:	4aa0      	ldr	r2, [pc, #640]	; (800dc9c <huffDecode+0x2c8>)
 800da1a:	b2c0      	uxtb	r0, r0
    code |= getBit();
 800da1c:	432c      	orrs	r4, r5
  gBitBuf <<= 1;
 800da1e:	b29b      	uxth	r3, r3
    if (i == 16)
 800da20:	2e10      	cmp	r6, #16
  gBitsLeft--;
 800da22:	7010      	strb	r0, [r2, #0]
  gBitBuf <<= 1;
 800da24:	f8ab 3000 	strh.w	r3, [fp]
    if (i == 16)
 800da28:	f000 80a9 	beq.w	800db7e <huffDecode+0x1aa>
    maxCode = pHuffTable->mMaxCode[i];
 800da2c:	f838 2f02 	ldrh.w	r2, [r8, #2]!
    if ((code <= maxCode) && (maxCode != 0xFFFF))
 800da30:	42a2      	cmp	r2, r4
 800da32:	d303      	bcc.n	800da3c <huffDecode+0x68>
 800da34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da38:	428a      	cmp	r2, r1
 800da3a:	d178      	bne.n	800db2e <huffDecode+0x15a>
    code <<= 1;
 800da3c:	0064      	lsls	r4, r4, #1
  if (gBitBuf & 0x8000)
 800da3e:	0bdd      	lsrs	r5, r3, #15
    code <<= 1;
 800da40:	b2a4      	uxth	r4, r4
  if (!gBitsLeft) {
 800da42:	2800      	cmp	r0, #0
 800da44:	d1e5      	bne.n	800da12 <huffDecode+0x3e>
  if (!gInBufLeft) {
 800da46:	f89a 3000 	ldrb.w	r3, [sl]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d155      	bne.n	800dafa <huffDecode+0x126>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800da4e:	4a94      	ldr	r2, [pc, #592]	; (800dca0 <huffDecode+0x2cc>)
  gInBufOfs = 4;
 800da50:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800da54:	4b93      	ldr	r3, [pc, #588]	; (800dca4 <huffDecode+0x2d0>)
 800da56:	21fc      	movs	r1, #252	; 0xfc
 800da58:	4617      	mov	r7, r2
  gInBufLeft = 0;
 800da5a:	f88a 0000 	strb.w	r0, [sl]
  gInBufOfs = 4;
 800da5e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 800dcc0 <huffDecode+0x2ec>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800da62:	6838      	ldr	r0, [r7, #0]
 800da64:	9302      	str	r3, [sp, #8]
 800da66:	9201      	str	r2, [sp, #4]
 800da68:	4607      	mov	r7, r0
 800da6a:	4652      	mov	r2, sl
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	488e      	ldr	r0, [pc, #568]	; (800dca8 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800da70:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800da74:	47b8      	blx	r7
  if (status) {
 800da76:	b108      	cbz	r0, 800da7c <huffDecode+0xa8>
    gCallbackStatus = status;
 800da78:	4b8c      	ldr	r3, [pc, #560]	; (800dcac <huffDecode+0x2d8>)
 800da7a:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800da7c:	f89a 3000 	ldrb.w	r3, [sl]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d13c      	bne.n	800dafe <huffDecode+0x12a>
      gTemFlag = ~gTemFlag;
 800da84:	4a8a      	ldr	r2, [pc, #552]	; (800dcb0 <huffDecode+0x2dc>)
 800da86:	7813      	ldrb	r3, [r2, #0]
 800da88:	43db      	mvns	r3, r3
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d05c      	beq.n	800db4c <huffDecode+0x178>
 800da92:	4b88      	ldr	r3, [pc, #544]	; (800dcb4 <huffDecode+0x2e0>)
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	9b01      	ldr	r3, [sp, #4]
  gInBufLeft = 0;
 800da98:	2000      	movs	r0, #0
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800da9a:	681f      	ldr	r7, [r3, #0]
 800da9c:	9b02      	ldr	r3, [sp, #8]
  gInBufOfs = 4;
 800da9e:	f04f 0c04 	mov.w	ip, #4
  gInBufLeft = 0;
 800daa2:	f88a 0000 	strb.w	r0, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800daa6:	4652      	mov	r2, sl
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	21fc      	movs	r1, #252	; 0xfc
 800daac:	487e      	ldr	r0, [pc, #504]	; (800dca8 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800daae:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dab2:	47b8      	blx	r7
  if (status) {
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d14b      	bne.n	800db50 <huffDecode+0x17c>
    if (!gInBufLeft) {
 800dab8:	f89a 3000 	ldrb.w	r3, [sl]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d14d      	bne.n	800db5c <huffDecode+0x188>
      gTemFlag = ~gTemFlag;
 800dac0:	487b      	ldr	r0, [pc, #492]	; (800dcb0 <huffDecode+0x2dc>)
 800dac2:	f899 2000 	ldrb.w	r2, [r9]
 800dac6:	7801      	ldrb	r1, [r0, #0]
 800dac8:	43c9      	mvns	r1, r1
 800daca:	b2c9      	uxtb	r1, r1
 800dacc:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800dace:	2900      	cmp	r1, #0
 800dad0:	f040 80c4 	bne.w	800dc5c <huffDecode+0x288>
 800dad4:	20d9      	movs	r0, #217	; 0xd9
 800dad6:	9f04      	ldr	r7, [sp, #16]
  gInBufOfs--;
 800dad8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
  gInBufLeft++;
 800dadc:	1c8b      	adds	r3, r1, #2
  gInBufOfs--;
 800dade:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800dae0:	fa5f f18c 	uxtb.w	r1, ip
  gInBufLeft++;
 800dae4:	f88a 3000 	strb.w	r3, [sl]
  gInBufOfs--;
 800dae8:	b2d2      	uxtb	r2, r2
  gInBufLeft++;
 800daea:	23ff      	movs	r3, #255	; 0xff
  gInBuf[gInBufOfs] = i;
 800daec:	5478      	strb	r0, [r7, r1]
 800daee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  gInBufOfs--;
 800daf2:	f889 2000 	strb.w	r2, [r9]
  gInBuf[gInBufOfs] = i;
 800daf6:	54b9      	strb	r1, [r7, r2]
 800daf8:	e011      	b.n	800db1e <huffDecode+0x14a>
 800dafa:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800dcc0 <huffDecode+0x2ec>
  return gInBuf[gInBufOfs++];
 800dafe:	f899 2000 	ldrb.w	r2, [r9]
  gInBufLeft--;
 800db02:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 800db04:	486b      	ldr	r0, [pc, #428]	; (800dcb4 <huffDecode+0x2e0>)
 800db06:	1c51      	adds	r1, r2, #1
  gInBufLeft--;
 800db08:	b2db      	uxtb	r3, r3
  return gInBuf[gInBufOfs++];
 800db0a:	5c82      	ldrb	r2, [r0, r2]
 800db0c:	9004      	str	r0, [sp, #16]
  if ((FFCheck) && (c == 0xFF)) {
 800db0e:	2aff      	cmp	r2, #255	; 0xff
  gInBufLeft--;
 800db10:	f88a 3000 	strb.w	r3, [sl]
  return gInBuf[gInBufOfs++];
 800db14:	f889 1000 	strb.w	r1, [r9]
  if ((FFCheck) && (c == 0xFF)) {
 800db18:	f000 80d4 	beq.w	800dcc4 <huffDecode+0x2f0>
 800db1c:	b293      	uxth	r3, r2
    gBitsLeft += 8;
 800db1e:	4a5f      	ldr	r2, [pc, #380]	; (800dc9c <huffDecode+0x2c8>)
 800db20:	7810      	ldrb	r0, [r2, #0]
    gBitBuf |= getOctet(1);
 800db22:	f8bb 2000 	ldrh.w	r2, [fp]
    gBitsLeft += 8;
 800db26:	3008      	adds	r0, #8
    gBitBuf |= getOctet(1);
 800db28:	4313      	orrs	r3, r2
    gBitsLeft += 8;
 800db2a:	b2c0      	uxtb	r0, r0
 800db2c:	e771      	b.n	800da12 <huffDecode+0x3e>
  j = pHuffTable->mValPtr[i];
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	199a      	adds	r2, r3, r6
  j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
 800db32:	f813 3016 	ldrb.w	r3, [r3, r6, lsl #1]
 800db36:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
 800db3a:	442c      	add	r4, r5
 800db3c:	1ae4      	subs	r4, r4, r3
  return pHuffVal[j];
 800db3e:	9b05      	ldr	r3, [sp, #20]
 800db40:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800db44:	5d18      	ldrb	r0, [r3, r4]
}
 800db46:	b007      	add	sp, #28
 800db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return gTemFlag ? 0xFF : 0xD9;
 800db4c:	23d9      	movs	r3, #217	; 0xd9
 800db4e:	e7e6      	b.n	800db1e <huffDecode+0x14a>
    gCallbackStatus = status;
 800db50:	4b56      	ldr	r3, [pc, #344]	; (800dcac <huffDecode+0x2d8>)
 800db52:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800db54:	f89a 3000 	ldrb.w	r3, [sl]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d0b1      	beq.n	800dac0 <huffDecode+0xec>
  return gInBuf[gInBufOfs++];
 800db5c:	f899 0000 	ldrb.w	r0, [r9]
  gInBufLeft--;
 800db60:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 800db62:	1c42      	adds	r2, r0, #1
  gInBufLeft--;
 800db64:	b2d9      	uxtb	r1, r3
  return gInBuf[gInBufOfs++];
 800db66:	9b04      	ldr	r3, [sp, #16]
 800db68:	b2d2      	uxtb	r2, r2
  gInBufLeft--;
 800db6a:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800db6e:	5c18      	ldrb	r0, [r3, r0]
 800db70:	f889 2000 	strb.w	r2, [r9]
    if (n) {
 800db74:	2800      	cmp	r0, #0
 800db76:	f040 808c 	bne.w	800dc92 <huffDecode+0x2be>
 800db7a:	23ff      	movs	r3, #255	; 0xff
 800db7c:	e7cf      	b.n	800db1e <huffDecode+0x14a>
      return 0;
 800db7e:	2000      	movs	r0, #0
}
 800db80:	b007      	add	sp, #28
 800db82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800db86:	4e4c      	ldr	r6, [pc, #304]	; (800dcb8 <huffDecode+0x2e4>)
 800db88:	7833      	ldrb	r3, [r6, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d14f      	bne.n	800dc2e <huffDecode+0x25a>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800db8e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800dca4 <huffDecode+0x2d0>
  gInBufOfs = 4;
 800db92:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800db96:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800dca0 <huffDecode+0x2cc>
 800db9a:	4632      	mov	r2, r6
  gInBufOfs = 4;
 800db9c:	f8df a120 	ldr.w	sl, [pc, #288]	; 800dcc0 <huffDecode+0x2ec>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dba0:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800dba2:	7033      	strb	r3, [r6, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dba4:	f8d8 5000 	ldr.w	r5, [r8]
 800dba8:	f8d9 3000 	ldr.w	r3, [r9]
 800dbac:	483e      	ldr	r0, [pc, #248]	; (800dca8 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800dbae:	f88a c000 	strb.w	ip, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dbb2:	47a8      	blx	r5
  if (status) {
 800dbb4:	b108      	cbz	r0, 800dbba <huffDecode+0x1e6>
    gCallbackStatus = status;
 800dbb6:	4b3d      	ldr	r3, [pc, #244]	; (800dcac <huffDecode+0x2d8>)
 800dbb8:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800dbba:	7833      	ldrb	r3, [r6, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d138      	bne.n	800dc32 <huffDecode+0x25e>
      gTemFlag = ~gTemFlag;
 800dbc0:	4a3b      	ldr	r2, [pc, #236]	; (800dcb0 <huffDecode+0x2dc>)
 800dbc2:	7813      	ldrb	r3, [r2, #0]
 800dbc4:	43db      	mvns	r3, r3
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d04a      	beq.n	800dc64 <huffDecode+0x290>
 800dbce:	4d39      	ldr	r5, [pc, #228]	; (800dcb4 <huffDecode+0x2e0>)
  gInBufLeft = 0;
 800dbd0:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800dbd2:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dbd6:	f8d8 8000 	ldr.w	r8, [r8]
 800dbda:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800dbdc:	7032      	strb	r2, [r6, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dbde:	f8d9 3000 	ldr.w	r3, [r9]
 800dbe2:	4a35      	ldr	r2, [pc, #212]	; (800dcb8 <huffDecode+0x2e4>)
 800dbe4:	4830      	ldr	r0, [pc, #192]	; (800dca8 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800dbe6:	f88a c000 	strb.w	ip, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dbea:	47c0      	blx	r8
  if (status) {
 800dbec:	b108      	cbz	r0, 800dbf2 <huffDecode+0x21e>
    gCallbackStatus = status;
 800dbee:	4b2f      	ldr	r3, [pc, #188]	; (800dcac <huffDecode+0x2d8>)
 800dbf0:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800dbf2:	7832      	ldrb	r2, [r6, #0]
 800dbf4:	2a00      	cmp	r2, #0
 800dbf6:	d137      	bne.n	800dc68 <huffDecode+0x294>
      gTemFlag = ~gTemFlag;
 800dbf8:	492d      	ldr	r1, [pc, #180]	; (800dcb0 <huffDecode+0x2dc>)
 800dbfa:	f89a 0000 	ldrb.w	r0, [sl]
 800dbfe:	780b      	ldrb	r3, [r1, #0]
 800dc00:	43db      	mvns	r3, r3
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	700b      	strb	r3, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d045      	beq.n	800dc96 <huffDecode+0x2c2>
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	21ff      	movs	r1, #255	; 0xff
  gInBufOfs--;
 800dc0e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800dc12:	1e82      	subs	r2, r0, #2
  gInBufLeft++;
 800dc14:	3302      	adds	r3, #2
  gInBuf[gInBufOfs] = i;
 800dc16:	20ff      	movs	r0, #255	; 0xff
  gInBufOfs--;
 800dc18:	b2d2      	uxtb	r2, r2
  gInBuf[gInBufOfs] = i;
 800dc1a:	fa5f fc8c 	uxtb.w	ip, ip
  gInBufLeft++;
 800dc1e:	7033      	strb	r3, [r6, #0]
  gInBufOfs--;
 800dc20:	f88a 2000 	strb.w	r2, [sl]
  gInBufLeft++;
 800dc24:	4603      	mov	r3, r0
  gInBuf[gInBufOfs] = i;
 800dc26:	f805 100c 	strb.w	r1, [r5, ip]
 800dc2a:	54a8      	strb	r0, [r5, r2]
 800dc2c:	e00e      	b.n	800dc4c <huffDecode+0x278>
 800dc2e:	f8df a090 	ldr.w	sl, [pc, #144]	; 800dcc0 <huffDecode+0x2ec>
  return gInBuf[gInBufOfs++];
 800dc32:	f89a 1000 	ldrb.w	r1, [sl]
  gInBufLeft--;
 800dc36:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 800dc38:	4d1e      	ldr	r5, [pc, #120]	; (800dcb4 <huffDecode+0x2e0>)
  gInBufLeft--;
 800dc3a:	b2da      	uxtb	r2, r3
  return gInBuf[gInBufOfs++];
 800dc3c:	1c48      	adds	r0, r1, #1
 800dc3e:	5c6b      	ldrb	r3, [r5, r1]
  gInBufLeft--;
 800dc40:	7032      	strb	r2, [r6, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800dc42:	2bff      	cmp	r3, #255	; 0xff
  return gInBuf[gInBufOfs++];
 800dc44:	f88a 0000 	strb.w	r0, [sl]
  if ((FFCheck) && (c == 0xFF)) {
 800dc48:	d01c      	beq.n	800dc84 <huffDecode+0x2b0>
 800dc4a:	b29b      	uxth	r3, r3
    gBitsLeft += 8;
 800dc4c:	4a13      	ldr	r2, [pc, #76]	; (800dc9c <huffDecode+0x2c8>)
 800dc4e:	7810      	ldrb	r0, [r2, #0]
    gBitBuf |= getOctet(1);
 800dc50:	f8bb 2000 	ldrh.w	r2, [fp]
    gBitsLeft += 8;
 800dc54:	3008      	adds	r0, #8
    gBitBuf |= getOctet(1);
 800dc56:	4313      	orrs	r3, r2
    gBitsLeft += 8;
 800dc58:	b2c0      	uxtb	r0, r0
 800dc5a:	e6ca      	b.n	800d9f2 <huffDecode+0x1e>
      return gTemFlag ? 0xFF : 0xD9;
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	20ff      	movs	r0, #255	; 0xff
 800dc60:	9f04      	ldr	r7, [sp, #16]
 800dc62:	e739      	b.n	800dad8 <huffDecode+0x104>
 800dc64:	23d9      	movs	r3, #217	; 0xd9
 800dc66:	e7f1      	b.n	800dc4c <huffDecode+0x278>
  return gInBuf[gInBufOfs++];
 800dc68:	f89a 1000 	ldrb.w	r1, [sl]
  gInBufLeft--;
 800dc6c:	3a01      	subs	r2, #1
  return gInBuf[gInBufOfs++];
 800dc6e:	1c48      	adds	r0, r1, #1
  gInBufLeft--;
 800dc70:	b2d3      	uxtb	r3, r2
  return gInBuf[gInBufOfs++];
 800dc72:	5c69      	ldrb	r1, [r5, r1]
 800dc74:	b2c0      	uxtb	r0, r0
  gInBufLeft--;
 800dc76:	7033      	strb	r3, [r6, #0]
  return gInBuf[gInBufOfs++];
 800dc78:	f88a 0000 	strb.w	r0, [sl]
    if (n) {
 800dc7c:	2900      	cmp	r1, #0
 800dc7e:	d1c6      	bne.n	800dc0e <huffDecode+0x23a>
 800dc80:	23ff      	movs	r3, #255	; 0xff
 800dc82:	e7e3      	b.n	800dc4c <huffDecode+0x278>
  if (!gInBufLeft) {
 800dc84:	2a00      	cmp	r2, #0
 800dc86:	d1ef      	bne.n	800dc68 <huffDecode+0x294>
 800dc88:	f8df 9018 	ldr.w	r9, [pc, #24]	; 800dca4 <huffDecode+0x2d0>
 800dc8c:	f8df 8010 	ldr.w	r8, [pc, #16]	; 800dca0 <huffDecode+0x2cc>
 800dc90:	e79e      	b.n	800dbd0 <huffDecode+0x1fc>
 800dc92:	461f      	mov	r7, r3
 800dc94:	e720      	b.n	800dad8 <huffDecode+0x104>
      return gTemFlag ? 0xFF : 0xD9;
 800dc96:	21d9      	movs	r1, #217	; 0xd9
 800dc98:	e7b9      	b.n	800dc0e <huffDecode+0x23a>
 800dc9a:	bf00      	nop
 800dc9c:	2000415c 	.word	0x2000415c
 800dca0:	20004a94 	.word	0x20004a94
 800dca4:	20004a90 	.word	0x20004a90
 800dca8:	20004568 	.word	0x20004568
 800dcac:	2000415d 	.word	0x2000415d
 800dcb0:	20004a8b 	.word	0x20004a8b
 800dcb4:	20004564 	.word	0x20004564
 800dcb8:	20004664 	.word	0x20004664
 800dcbc:	2000415a 	.word	0x2000415a
 800dcc0:	20004665 	.word	0x20004665
  if (!gInBufLeft) {
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f47f af49 	bne.w	800db5c <huffDecode+0x188>
 800dcca:	4b02      	ldr	r3, [pc, #8]	; (800dcd4 <huffDecode+0x300>)
 800dccc:	9302      	str	r3, [sp, #8]
 800dcce:	4b02      	ldr	r3, [pc, #8]	; (800dcd8 <huffDecode+0x304>)
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	e6e1      	b.n	800da98 <huffDecode+0xc4>
 800dcd4:	20004a90 	.word	0x20004a90
 800dcd8:	20004a94 	.word	0x20004a94

0800dcdc <getBits.constprop.6>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800dcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (numBits > 8) {
 800dce0:	2808      	cmp	r0, #8
  uint16 ret = gBitBuf;
 800dce2:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 800dfd0 <getBits.constprop.6+0x2f4>
 800dce6:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 800dfd4 <getBits.constprop.6+0x2f8>
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800dcea:	b085      	sub	sp, #20
 800dcec:	4605      	mov	r5, r0
  uint16 ret = gBitBuf;
 800dcee:	f8b8 4000 	ldrh.w	r4, [r8]
 800dcf2:	f89a 1000 	ldrb.w	r1, [sl]
  if (numBits > 8) {
 800dcf6:	d812      	bhi.n	800dd1e <getBits.constprop.6+0x42>
 800dcf8:	4623      	mov	r3, r4
 800dcfa:	4606      	mov	r6, r0
  if (gBitsLeft < numBits) {
 800dcfc:	428e      	cmp	r6, r1
 800dcfe:	d86a      	bhi.n	800ddd6 <getBits.constprop.6+0xfa>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800dd00:	1b89      	subs	r1, r1, r6
    gBitBuf <<= numBits;
 800dd02:	fa03 f606 	lsl.w	r6, r3, r6
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800dd06:	f88a 1000 	strb.w	r1, [sl]
    gBitBuf <<= numBits;
 800dd0a:	f8a8 6000 	strh.w	r6, [r8]
  return ret >> (16 - origBits);
 800dd0e:	f1c5 0510 	rsb	r5, r5, #16
 800dd12:	fa44 f505 	asr.w	r5, r4, r5
}
 800dd16:	b2a8      	uxth	r0, r5
 800dd18:	b005      	add	sp, #20
 800dd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800dd1e:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 800dfcc <getBits.constprop.6+0x2f0>
    numBits -= 8;
 800dd22:	f1a0 0608 	sub.w	r6, r0, #8
    gBitBuf <<= gBitsLeft;
 800dd26:	fa04 f301 	lsl.w	r3, r4, r1
  if (!gInBufLeft) {
 800dd2a:	f899 0000 	ldrb.w	r0, [r9]
    numBits -= 8;
 800dd2e:	b2f6      	uxtb	r6, r6
    gBitBuf <<= gBitsLeft;
 800dd30:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800dd34:	2800      	cmp	r0, #0
 800dd36:	f040 80b2 	bne.w	800de9e <getBits.constprop.6+0x1c2>
  gInBufOfs = 4;
 800dd3a:	4f9e      	ldr	r7, [pc, #632]	; (800dfb4 <getBits.constprop.6+0x2d8>)
 800dd3c:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dd40:	4b9d      	ldr	r3, [pc, #628]	; (800dfb8 <getBits.constprop.6+0x2dc>)
 800dd42:	464a      	mov	r2, r9
 800dd44:	f8df b290 	ldr.w	fp, [pc, #656]	; 800dfd8 <getBits.constprop.6+0x2fc>
 800dd48:	21fc      	movs	r1, #252	; 0xfc
 800dd4a:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800dd4c:	9701      	str	r7, [sp, #4]
  gInBufLeft = 0;
 800dd4e:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800dd52:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4898      	ldr	r0, [pc, #608]	; (800dfbc <getBits.constprop.6+0x2e0>)
 800dd5a:	f8db 7000 	ldr.w	r7, [fp]
 800dd5e:	47b8      	blx	r7
  if (status) {
 800dd60:	b108      	cbz	r0, 800dd66 <getBits.constprop.6+0x8a>
    gCallbackStatus = status;
 800dd62:	4b97      	ldr	r3, [pc, #604]	; (800dfc0 <getBits.constprop.6+0x2e4>)
 800dd64:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800dd66:	f899 0000 	ldrb.w	r0, [r9]
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	f040 8099 	bne.w	800dea2 <getBits.constprop.6+0x1c6>
      gTemFlag = ~gTemFlag;
 800dd70:	4a94      	ldr	r2, [pc, #592]	; (800dfc4 <getBits.constprop.6+0x2e8>)
 800dd72:	7813      	ldrb	r3, [r2, #0]
 800dd74:	43db      	mvns	r3, r3
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f000 80ce 	beq.w	800df1c <getBits.constprop.6+0x240>
 800dd80:	4b91      	ldr	r3, [pc, #580]	; (800dfc8 <getBits.constprop.6+0x2ec>)
 800dd82:	9303      	str	r3, [sp, #12]
 800dd84:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
  gInBufLeft = 0;
 800dd88:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800dd8a:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dd8e:	f8db b000 	ldr.w	fp, [fp]
 800dd92:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800dd94:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a8c      	ldr	r2, [pc, #560]	; (800dfcc <getBits.constprop.6+0x2f0>)
 800dd9c:	4887      	ldr	r0, [pc, #540]	; (800dfbc <getBits.constprop.6+0x2e0>)
  gInBufOfs = 4;
 800dd9e:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dda2:	47d8      	blx	fp
  if (status) {
 800dda4:	b108      	cbz	r0, 800ddaa <getBits.constprop.6+0xce>
    gCallbackStatus = status;
 800dda6:	4b86      	ldr	r3, [pc, #536]	; (800dfc0 <getBits.constprop.6+0x2e4>)
 800dda8:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ddaa:	f899 0000 	ldrb.w	r0, [r9]
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	f000 80b6 	beq.w	800df20 <getBits.constprop.6+0x244>
 800ddb4:	9b01      	ldr	r3, [sp, #4]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
  gInBufLeft--;
 800ddb8:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	9903      	ldr	r1, [sp, #12]
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	5cc9      	ldrb	r1, [r1, r3]
  gInBufLeft--;
 800ddc2:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800ddc4:	9801      	ldr	r0, [sp, #4]
  gInBufLeft--;
 800ddc6:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800ddca:	7002      	strb	r2, [r0, #0]
    if (n) {
 800ddcc:	2900      	cmp	r1, #0
 800ddce:	f040 80b3 	bne.w	800df38 <getBits.constprop.6+0x25c>
 800ddd2:	22ff      	movs	r2, #255	; 0xff
 800ddd4:	e074      	b.n	800dec0 <getBits.constprop.6+0x1e4>
  if (!gInBufLeft) {
 800ddd6:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800dfcc <getBits.constprop.6+0x2f0>
    gBitBuf <<= gBitsLeft;
 800ddda:	408b      	lsls	r3, r1
  if (!gInBufLeft) {
 800dddc:	f899 0000 	ldrb.w	r0, [r9]
    gBitBuf <<= gBitsLeft;
 800dde0:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d17a      	bne.n	800dede <getBits.constprop.6+0x202>
  gInBufOfs = 4;
 800dde8:	4f72      	ldr	r7, [pc, #456]	; (800dfb4 <getBits.constprop.6+0x2d8>)
 800ddea:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ddee:	4b72      	ldr	r3, [pc, #456]	; (800dfb8 <getBits.constprop.6+0x2dc>)
 800ddf0:	464a      	mov	r2, r9
 800ddf2:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800dfd8 <getBits.constprop.6+0x2fc>
 800ddf6:	21fc      	movs	r1, #252	; 0xfc
 800ddf8:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800ddfa:	9701      	str	r7, [sp, #4]
  gInBufLeft = 0;
 800ddfc:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800de00:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	486d      	ldr	r0, [pc, #436]	; (800dfbc <getBits.constprop.6+0x2e0>)
 800de08:	f8db 7000 	ldr.w	r7, [fp]
 800de0c:	47b8      	blx	r7
  if (status) {
 800de0e:	b108      	cbz	r0, 800de14 <getBits.constprop.6+0x138>
    gCallbackStatus = status;
 800de10:	4b6b      	ldr	r3, [pc, #428]	; (800dfc0 <getBits.constprop.6+0x2e4>)
 800de12:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800de14:	f899 0000 	ldrb.w	r0, [r9]
 800de18:	2800      	cmp	r0, #0
 800de1a:	d162      	bne.n	800dee2 <getBits.constprop.6+0x206>
      gTemFlag = ~gTemFlag;
 800de1c:	4a69      	ldr	r2, [pc, #420]	; (800dfc4 <getBits.constprop.6+0x2e8>)
 800de1e:	7813      	ldrb	r3, [r2, #0]
 800de20:	43db      	mvns	r3, r3
 800de22:	b2db      	uxtb	r3, r3
 800de24:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 809a 	beq.w	800df60 <getBits.constprop.6+0x284>
 800de2c:	4b66      	ldr	r3, [pc, #408]	; (800dfc8 <getBits.constprop.6+0x2ec>)
 800de2e:	9303      	str	r3, [sp, #12]
 800de30:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
  gInBufLeft = 0;
 800de34:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800de36:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800de3a:	f8db b000 	ldr.w	fp, [fp]
 800de3e:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800de40:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a61      	ldr	r2, [pc, #388]	; (800dfcc <getBits.constprop.6+0x2f0>)
 800de48:	485c      	ldr	r0, [pc, #368]	; (800dfbc <getBits.constprop.6+0x2e0>)
  gInBufOfs = 4;
 800de4a:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800de4e:	47d8      	blx	fp
  if (status) {
 800de50:	b108      	cbz	r0, 800de56 <getBits.constprop.6+0x17a>
    gCallbackStatus = status;
 800de52:	4b5b      	ldr	r3, [pc, #364]	; (800dfc0 <getBits.constprop.6+0x2e4>)
 800de54:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800de56:	f899 0000 	ldrb.w	r0, [r9]
 800de5a:	2800      	cmp	r0, #0
 800de5c:	f040 8082 	bne.w	800df64 <getBits.constprop.6+0x288>
      gTemFlag = ~gTemFlag;
 800de60:	4958      	ldr	r1, [pc, #352]	; (800dfc4 <getBits.constprop.6+0x2e8>)
 800de62:	9b01      	ldr	r3, [sp, #4]
 800de64:	781a      	ldrb	r2, [r3, #0]
 800de66:	780b      	ldrb	r3, [r1, #0]
 800de68:	43db      	mvns	r3, r3
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	700b      	strb	r3, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 809d 	beq.w	800dfae <getBits.constprop.6+0x2d2>
 800de74:	4603      	mov	r3, r0
 800de76:	21ff      	movs	r1, #255	; 0xff
  gInBufLeft++;
 800de78:	1c98      	adds	r0, r3, #2
  gInBufOfs--;
 800de7a:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800de7e:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800de80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800de84:	fa5f f38e 	uxtb.w	r3, lr
  gInBufLeft++;
 800de88:	f889 0000 	strb.w	r0, [r9]
  gInBuf[gInBufOfs] = i;
 800de8c:	9803      	ldr	r0, [sp, #12]
  gInBufOfs--;
 800de8e:	b2d2      	uxtb	r2, r2
  gInBuf[gInBufOfs] = i;
 800de90:	54c1      	strb	r1, [r0, r3]
  gInBufLeft++;
 800de92:	4663      	mov	r3, ip
  gInBufOfs--;
 800de94:	9901      	ldr	r1, [sp, #4]
  gInBuf[gInBufOfs] = i;
 800de96:	f800 c002 	strb.w	ip, [r0, r2]
  gInBufOfs--;
 800de9a:	700a      	strb	r2, [r1, #0]
 800de9c:	e030      	b.n	800df00 <getBits.constprop.6+0x224>
 800de9e:	4b45      	ldr	r3, [pc, #276]	; (800dfb4 <getBits.constprop.6+0x2d8>)
 800dea0:	9301      	str	r3, [sp, #4]
  return gInBuf[gInBufOfs++];
 800dea2:	9f01      	ldr	r7, [sp, #4]
  gInBufLeft--;
 800dea4:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800dea6:	4948      	ldr	r1, [pc, #288]	; (800dfc8 <getBits.constprop.6+0x2ec>)
 800dea8:	783a      	ldrb	r2, [r7, #0]
  gInBufLeft--;
 800deaa:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800deac:	9103      	str	r1, [sp, #12]
 800deae:	1c53      	adds	r3, r2, #1
 800deb0:	5c8a      	ldrb	r2, [r1, r2]
  gInBufLeft--;
 800deb2:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800deb6:	b2db      	uxtb	r3, r3
  if ((FFCheck) && (c == 0xFF)) {
 800deb8:	2aff      	cmp	r2, #255	; 0xff
  return gInBuf[gInBufOfs++];
 800deba:	703b      	strb	r3, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800debc:	d068      	beq.n	800df90 <getBits.constprop.6+0x2b4>
 800debe:	b292      	uxth	r2, r2
    gBitBuf <<= (8 - gBitsLeft);
 800dec0:	f89a 1000 	ldrb.w	r1, [sl]
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800dec4:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    gBitBuf |= getOctet(FFCheck);
 800dec8:	f8b8 3000 	ldrh.w	r3, [r8]
    gBitBuf <<= (8 - gBitsLeft);
 800decc:	f1c1 0008 	rsb	r0, r1, #8
 800ded0:	4313      	orrs	r3, r2
 800ded2:	4083      	lsls	r3, r0
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800ded4:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4304      	orrs	r4, r0
 800dedc:	e70e      	b.n	800dcfc <getBits.constprop.6+0x20>
 800dede:	4b35      	ldr	r3, [pc, #212]	; (800dfb4 <getBits.constprop.6+0x2d8>)
 800dee0:	9301      	str	r3, [sp, #4]
  return gInBuf[gInBufOfs++];
 800dee2:	9f01      	ldr	r7, [sp, #4]
  gInBufLeft--;
 800dee4:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800dee6:	4938      	ldr	r1, [pc, #224]	; (800dfc8 <getBits.constprop.6+0x2ec>)
 800dee8:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800deea:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800deec:	9103      	str	r1, [sp, #12]
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	5ccb      	ldrb	r3, [r1, r3]
  gInBufLeft--;
 800def2:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800def6:	b2d2      	uxtb	r2, r2
  if ((FFCheck) && (c == 0xFF)) {
 800def8:	2bff      	cmp	r3, #255	; 0xff
  return gInBuf[gInBufOfs++];
 800defa:	703a      	strb	r2, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800defc:	d050      	beq.n	800dfa0 <getBits.constprop.6+0x2c4>
 800defe:	b29b      	uxth	r3, r3
    gBitBuf <<= (numBits - gBitsLeft);
 800df00:	f89a 2000 	ldrb.w	r2, [sl]
    gBitBuf |= getOctet(FFCheck);
 800df04:	f8b8 0000 	ldrh.w	r0, [r8]
    gBitBuf <<= (numBits - gBitsLeft);
 800df08:	1ab1      	subs	r1, r6, r2
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800df0a:	3208      	adds	r2, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800df0c:	4303      	orrs	r3, r0
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800df0e:	1b96      	subs	r6, r2, r6
    gBitBuf <<= (numBits - gBitsLeft);
 800df10:	408b      	lsls	r3, r1
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800df12:	f88a 6000 	strb.w	r6, [sl]
    gBitBuf <<= (numBits - gBitsLeft);
 800df16:	f8a8 3000 	strh.w	r3, [r8]
 800df1a:	e6f8      	b.n	800dd0e <getBits.constprop.6+0x32>
      return gTemFlag ? 0xFF : 0xD9;
 800df1c:	22d9      	movs	r2, #217	; 0xd9
 800df1e:	e7cf      	b.n	800dec0 <getBits.constprop.6+0x1e4>
      gTemFlag = ~gTemFlag;
 800df20:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800dfc4 <getBits.constprop.6+0x2e8>
 800df24:	9b01      	ldr	r3, [sp, #4]
 800df26:	781a      	ldrb	r2, [r3, #0]
 800df28:	f89c 3000 	ldrb.w	r3, [ip]
 800df2c:	43d9      	mvns	r1, r3
 800df2e:	b2cb      	uxtb	r3, r1
 800df30:	f88c 3000 	strb.w	r3, [ip]
      return gTemFlag ? 0xFF : 0xD9;
 800df34:	bb4b      	cbnz	r3, 800df8a <getBits.constprop.6+0x2ae>
 800df36:	21d9      	movs	r1, #217	; 0xd9
  gInBufLeft++;
 800df38:	1c98      	adds	r0, r3, #2
  gInBufOfs--;
 800df3a:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800df3e:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800df40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800df44:	fa5f fe8e 	uxtb.w	lr, lr
  gInBufLeft++;
 800df48:	f889 0000 	strb.w	r0, [r9]
  gInBuf[gInBufOfs] = i;
 800df4c:	9803      	ldr	r0, [sp, #12]
  gInBufOfs--;
 800df4e:	b2d3      	uxtb	r3, r2
  gInBufLeft++;
 800df50:	4662      	mov	r2, ip
  gInBuf[gInBufOfs] = i;
 800df52:	f800 100e 	strb.w	r1, [r0, lr]
  gInBufOfs--;
 800df56:	9901      	ldr	r1, [sp, #4]
  gInBuf[gInBufOfs] = i;
 800df58:	f800 c003 	strb.w	ip, [r0, r3]
  gInBufOfs--;
 800df5c:	700b      	strb	r3, [r1, #0]
 800df5e:	e7af      	b.n	800dec0 <getBits.constprop.6+0x1e4>
      return gTemFlag ? 0xFF : 0xD9;
 800df60:	23d9      	movs	r3, #217	; 0xd9
 800df62:	e7cd      	b.n	800df00 <getBits.constprop.6+0x224>
 800df64:	9b01      	ldr	r3, [sp, #4]
 800df66:	781a      	ldrb	r2, [r3, #0]
  gInBufLeft--;
 800df68:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800df6a:	9b03      	ldr	r3, [sp, #12]
 800df6c:	f102 0c01 	add.w	ip, r2, #1
 800df70:	5c99      	ldrb	r1, [r3, r2]
  gInBufLeft--;
 800df72:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800df74:	fa5f f28c 	uxtb.w	r2, ip
 800df78:	9801      	ldr	r0, [sp, #4]
  gInBufLeft--;
 800df7a:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800df7e:	7002      	strb	r2, [r0, #0]
    if (n) {
 800df80:	2900      	cmp	r1, #0
 800df82:	f47f af79 	bne.w	800de78 <getBits.constprop.6+0x19c>
 800df86:	23ff      	movs	r3, #255	; 0xff
 800df88:	e7ba      	b.n	800df00 <getBits.constprop.6+0x224>
      return gTemFlag ? 0xFF : 0xD9;
 800df8a:	4603      	mov	r3, r0
 800df8c:	21ff      	movs	r1, #255	; 0xff
 800df8e:	e7d3      	b.n	800df38 <getBits.constprop.6+0x25c>
  if (!gInBufLeft) {
 800df90:	2800      	cmp	r0, #0
 800df92:	f47f af11 	bne.w	800ddb8 <getBits.constprop.6+0xdc>
 800df96:	4b08      	ldr	r3, [pc, #32]	; (800dfb8 <getBits.constprop.6+0x2dc>)
 800df98:	f8df b03c 	ldr.w	fp, [pc, #60]	; 800dfd8 <getBits.constprop.6+0x2fc>
 800df9c:	9302      	str	r3, [sp, #8]
 800df9e:	e6f3      	b.n	800dd88 <getBits.constprop.6+0xac>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d1e1      	bne.n	800df68 <getBits.constprop.6+0x28c>
 800dfa4:	4b04      	ldr	r3, [pc, #16]	; (800dfb8 <getBits.constprop.6+0x2dc>)
 800dfa6:	f8df b030 	ldr.w	fp, [pc, #48]	; 800dfd8 <getBits.constprop.6+0x2fc>
 800dfaa:	9302      	str	r3, [sp, #8]
 800dfac:	e742      	b.n	800de34 <getBits.constprop.6+0x158>
      return gTemFlag ? 0xFF : 0xD9;
 800dfae:	21d9      	movs	r1, #217	; 0xd9
 800dfb0:	e762      	b.n	800de78 <getBits.constprop.6+0x19c>
 800dfb2:	bf00      	nop
 800dfb4:	20004665 	.word	0x20004665
 800dfb8:	20004a90 	.word	0x20004a90
 800dfbc:	20004568 	.word	0x20004568
 800dfc0:	2000415d 	.word	0x2000415d
 800dfc4:	20004a8b 	.word	0x20004a8b
 800dfc8:	20004564 	.word	0x20004564
 800dfcc:	20004664 	.word	0x20004664
 800dfd0:	2000415a 	.word	0x2000415a
 800dfd4:	2000415c 	.word	0x2000415c
 800dfd8:	20004a94 	.word	0x20004a94

0800dfdc <getBits.constprop.4>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800dfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16 ret = gBitBuf;
 800dfe0:	4d46      	ldr	r5, [pc, #280]	; (800e0fc <getBits.constprop.4+0x120>)
    gBitBuf <<= gBitsLeft;
 800dfe2:	4e47      	ldr	r6, [pc, #284]	; (800e100 <getBits.constprop.4+0x124>)
  uint16 ret = gBitBuf;
 800dfe4:	f8b5 8000 	ldrh.w	r8, [r5]
    gBitBuf <<= gBitsLeft;
 800dfe8:	7831      	ldrb	r1, [r6, #0]
  if (!gInBufLeft) {
 800dfea:	4c46      	ldr	r4, [pc, #280]	; (800e104 <getBits.constprop.4+0x128>)
    gBitBuf <<= gBitsLeft;
 800dfec:	fa08 f301 	lsl.w	r3, r8, r1
  if (!gInBufLeft) {
 800dff0:	7820      	ldrb	r0, [r4, #0]
    gBitBuf <<= gBitsLeft;
 800dff2:	fa1f fc83 	uxth.w	ip, r3
 800dff6:	f8a5 c000 	strh.w	ip, [r5]
  if (!gInBufLeft) {
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d17c      	bne.n	800e0f8 <getBits.constprop.4+0x11c>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800dffe:	4b42      	ldr	r3, [pc, #264]	; (800e108 <getBits.constprop.4+0x12c>)
  gInBufOfs = 4;
 800e000:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e004:	f8df e114 	ldr.w	lr, [pc, #276]	; 800e11c <getBits.constprop.4+0x140>
 800e008:	4622      	mov	r2, r4
  gInBufOfs = 4;
 800e00a:	4f40      	ldr	r7, [pc, #256]	; (800e10c <getBits.constprop.4+0x130>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e00c:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e00e:	7020      	strb	r0, [r4, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f8de 9000 	ldr.w	r9, [lr]
 800e016:	483e      	ldr	r0, [pc, #248]	; (800e110 <getBits.constprop.4+0x134>)
  gInBufOfs = 4;
 800e018:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e01c:	47c8      	blx	r9
  if (status) {
 800e01e:	b108      	cbz	r0, 800e024 <getBits.constprop.4+0x48>
    gCallbackStatus = status;
 800e020:	4b3c      	ldr	r3, [pc, #240]	; (800e114 <getBits.constprop.4+0x138>)
 800e022:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e024:	7820      	ldrb	r0, [r4, #0]
 800e026:	b308      	cbz	r0, 800e06c <getBits.constprop.4+0x90>
 800e028:	f8b5 c000 	ldrh.w	ip, [r5]
 800e02c:	7831      	ldrb	r1, [r6, #0]
  return gInBuf[gInBufOfs++];
 800e02e:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800e030:	1e42      	subs	r2, r0, #1
  return gInBuf[gInBufOfs++];
 800e032:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 800e120 <getBits.constprop.4+0x144>
 800e036:	1c58      	adds	r0, r3, #1
  gInBufLeft--;
 800e038:	b2d2      	uxtb	r2, r2
 800e03a:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800e03e:	7022      	strb	r2, [r4, #0]
  return gInBuf[gInBufOfs++];
 800e040:	7038      	strb	r0, [r7, #0]
    gBitBuf <<= (8 - gBitsLeft);
 800e042:	ea43 030c 	orr.w	r3, r3, ip
 800e046:	f1c1 0008 	rsb	r0, r1, #8
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800e04a:	f028 08ff 	bic.w	r8, r8, #255	; 0xff
  if (gBitsLeft < numBits) {
 800e04e:	2907      	cmp	r1, #7
    gBitBuf <<= (8 - gBitsLeft);
 800e050:	fa03 f300 	lsl.w	r3, r3, r0
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800e054:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800e058:	ea48 080c 	orr.w	r8, r8, ip
  if (gBitsLeft < numBits) {
 800e05c:	d912      	bls.n	800e084 <getBits.constprop.4+0xa8>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e05e:	3908      	subs	r1, #8
    gBitBuf <<= numBits;
 800e060:	021b      	lsls	r3, r3, #8
}
 800e062:	4640      	mov	r0, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e064:	7031      	strb	r1, [r6, #0]
    gBitBuf <<= numBits;
 800e066:	802b      	strh	r3, [r5, #0]
}
 800e068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      gTemFlag = ~gTemFlag;
 800e06c:	4b2a      	ldr	r3, [pc, #168]	; (800e118 <getBits.constprop.4+0x13c>)
 800e06e:	f8b5 c000 	ldrh.w	ip, [r5]
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	7831      	ldrb	r1, [r6, #0]
 800e076:	43d2      	mvns	r2, r2
 800e078:	b2d2      	uxtb	r2, r2
 800e07a:	701a      	strb	r2, [r3, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e07c:	b362      	cbz	r2, 800e0d8 <getBits.constprop.4+0xfc>
 800e07e:	4602      	mov	r2, r0
 800e080:	23ff      	movs	r3, #255	; 0xff
 800e082:	e7de      	b.n	800e042 <getBits.constprop.4+0x66>
    gBitBuf <<= gBitsLeft;
 800e084:	b29b      	uxth	r3, r3
 800e086:	408b      	lsls	r3, r1
 800e088:	b29b      	uxth	r3, r3
 800e08a:	802b      	strh	r3, [r5, #0]
  if (!gInBufLeft) {
 800e08c:	b9b2      	cbnz	r2, 800e0bc <getBits.constprop.4+0xe0>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e08e:	4823      	ldr	r0, [pc, #140]	; (800e11c <getBits.constprop.4+0x140>)
  gInBufOfs = 4;
 800e090:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e094:	4b1c      	ldr	r3, [pc, #112]	; (800e108 <getBits.constprop.4+0x12c>)
 800e096:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e098:	7022      	strb	r2, [r4, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e09a:	f8d0 9000 	ldr.w	r9, [r0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a18      	ldr	r2, [pc, #96]	; (800e104 <getBits.constprop.4+0x128>)
 800e0a2:	481b      	ldr	r0, [pc, #108]	; (800e110 <getBits.constprop.4+0x134>)
  gInBufOfs = 4;
 800e0a4:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e0a8:	47c8      	blx	r9
  if (status) {
 800e0aa:	b108      	cbz	r0, 800e0b0 <getBits.constprop.4+0xd4>
    gCallbackStatus = status;
 800e0ac:	4b19      	ldr	r3, [pc, #100]	; (800e114 <getBits.constprop.4+0x138>)
 800e0ae:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e0b0:	7822      	ldrb	r2, [r4, #0]
 800e0b2:	b19a      	cbz	r2, 800e0dc <getBits.constprop.4+0x100>
 800e0b4:	7830      	ldrb	r0, [r6, #0]
 800e0b6:	882b      	ldrh	r3, [r5, #0]
 800e0b8:	f1c0 0008 	rsb	r0, r0, #8
  return gInBuf[gInBufOfs++];
 800e0bc:	7839      	ldrb	r1, [r7, #0]
  gInBufLeft--;
 800e0be:	3a01      	subs	r2, #1
  return gInBuf[gInBufOfs++];
 800e0c0:	4e17      	ldr	r6, [pc, #92]	; (800e120 <getBits.constprop.4+0x144>)
  gInBufLeft--;
 800e0c2:	7022      	strb	r2, [r4, #0]
  return gInBuf[gInBufOfs++];
 800e0c4:	1c4c      	adds	r4, r1, #1
 800e0c6:	5c72      	ldrb	r2, [r6, r1]
 800e0c8:	703c      	strb	r4, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	fa03 f000 	lsl.w	r0, r3, r0
 800e0d0:	8028      	strh	r0, [r5, #0]
}
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return gTemFlag ? 0xFF : 0xD9;
 800e0d8:	23d9      	movs	r3, #217	; 0xd9
 800e0da:	e7b2      	b.n	800e042 <getBits.constprop.4+0x66>
      gTemFlag = ~gTemFlag;
 800e0dc:	490e      	ldr	r1, [pc, #56]	; (800e118 <getBits.constprop.4+0x13c>)
 800e0de:	7830      	ldrb	r0, [r6, #0]
 800e0e0:	780a      	ldrb	r2, [r1, #0]
 800e0e2:	f1c0 0008 	rsb	r0, r0, #8
 800e0e6:	882b      	ldrh	r3, [r5, #0]
 800e0e8:	43d2      	mvns	r2, r2
 800e0ea:	b2d2      	uxtb	r2, r2
      return gTemFlag ? 0xFF : 0xD9;
 800e0ec:	2a00      	cmp	r2, #0
      gTemFlag = ~gTemFlag;
 800e0ee:	700a      	strb	r2, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e0f0:	bf0c      	ite	eq
 800e0f2:	22d9      	moveq	r2, #217	; 0xd9
 800e0f4:	22ff      	movne	r2, #255	; 0xff
 800e0f6:	e7e8      	b.n	800e0ca <getBits.constprop.4+0xee>
 800e0f8:	4f04      	ldr	r7, [pc, #16]	; (800e10c <getBits.constprop.4+0x130>)
 800e0fa:	e798      	b.n	800e02e <getBits.constprop.4+0x52>
 800e0fc:	2000415a 	.word	0x2000415a
 800e100:	2000415c 	.word	0x2000415c
 800e104:	20004664 	.word	0x20004664
 800e108:	20004a90 	.word	0x20004a90
 800e10c:	20004665 	.word	0x20004665
 800e110:	20004568 	.word	0x20004568
 800e114:	2000415d 	.word	0x2000415d
 800e118:	20004a8b 	.word	0x20004a8b
 800e11c:	20004a94 	.word	0x20004a94
 800e120:	20004564 	.word	0x20004564

0800e124 <getBits.constprop.5>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800e124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (gBitsLeft < numBits) {
 800e128:	4e55      	ldr	r6, [pc, #340]	; (800e280 <getBits.constprop.5+0x15c>)
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800e12a:	b083      	sub	sp, #12
  uint16 ret = gBitBuf;
 800e12c:	4d55      	ldr	r5, [pc, #340]	; (800e284 <getBits.constprop.5+0x160>)
  if (gBitsLeft < numBits) {
 800e12e:	7833      	ldrb	r3, [r6, #0]
 800e130:	882c      	ldrh	r4, [r5, #0]
 800e132:	2b07      	cmp	r3, #7
 800e134:	d907      	bls.n	800e146 <getBits.constprop.5+0x22>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e136:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e138:	0222      	lsls	r2, r4, #8
  return ret >> (16 - origBits);
 800e13a:	0a20      	lsrs	r0, r4, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e13c:	7033      	strb	r3, [r6, #0]
    gBitBuf <<= numBits;
 800e13e:	802a      	strh	r2, [r5, #0]
}
 800e140:	b003      	add	sp, #12
 800e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800e146:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800e294 <getBits.constprop.5+0x170>
    gBitBuf <<= gBitsLeft;
 800e14a:	fa04 f303 	lsl.w	r3, r4, r3
 800e14e:	9001      	str	r0, [sp, #4]
  if (!gInBufLeft) {
 800e150:	f898 0000 	ldrb.w	r0, [r8]
    gBitBuf <<= gBitsLeft;
 800e154:	802b      	strh	r3, [r5, #0]
  if (!gInBufLeft) {
 800e156:	2800      	cmp	r0, #0
 800e158:	f040 808d 	bne.w	800e276 <getBits.constprop.5+0x152>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e15c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800e29c <getBits.constprop.5+0x178>
  gInBufOfs = 4;
 800e160:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e164:	f8df b138 	ldr.w	fp, [pc, #312]	; 800e2a0 <getBits.constprop.5+0x17c>
 800e168:	4642      	mov	r2, r8
  gInBufOfs = 4;
 800e16a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800e2a4 <getBits.constprop.5+0x180>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e16e:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e170:	f888 0000 	strb.w	r0, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e174:	f8da 3000 	ldr.w	r3, [sl]
 800e178:	f8db 7000 	ldr.w	r7, [fp]
 800e17c:	4842      	ldr	r0, [pc, #264]	; (800e288 <getBits.constprop.5+0x164>)
  gInBufOfs = 4;
 800e17e:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e182:	47b8      	blx	r7
  if (status) {
 800e184:	b108      	cbz	r0, 800e18a <getBits.constprop.5+0x66>
    gCallbackStatus = status;
 800e186:	4b41      	ldr	r3, [pc, #260]	; (800e28c <getBits.constprop.5+0x168>)
 800e188:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e18a:	f898 0000 	ldrb.w	r0, [r8]
 800e18e:	2800      	cmp	r0, #0
 800e190:	d04b      	beq.n	800e22a <getBits.constprop.5+0x106>
  return gInBuf[gInBufOfs++];
 800e192:	f899 3000 	ldrb.w	r3, [r9]
  gInBufLeft--;
 800e196:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800e198:	4f3d      	ldr	r7, [pc, #244]	; (800e290 <getBits.constprop.5+0x16c>)
 800e19a:	1c5a      	adds	r2, r3, #1
  gInBufLeft--;
 800e19c:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800e19e:	5cfb      	ldrb	r3, [r7, r3]
 800e1a0:	b2d2      	uxtb	r2, r2
  gInBufLeft--;
 800e1a2:	f888 0000 	strb.w	r0, [r8]
  if ((FFCheck) && (c == 0xFF)) {
 800e1a6:	2bff      	cmp	r3, #255	; 0xff
 800e1a8:	b299      	uxth	r1, r3
  return gInBuf[gInBufOfs++];
 800e1aa:	f889 2000 	strb.w	r2, [r9]
  if ((FFCheck) && (c == 0xFF)) {
 800e1ae:	d143      	bne.n	800e238 <getBits.constprop.5+0x114>
 800e1b0:	9b01      	ldr	r3, [sp, #4]
 800e1b2:	07db      	lsls	r3, r3, #31
 800e1b4:	d540      	bpl.n	800e238 <getBits.constprop.5+0x114>
  if (!gInBufLeft) {
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d14f      	bne.n	800e25a <getBits.constprop.5+0x136>
 800e1ba:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800e29c <getBits.constprop.5+0x178>
 800e1be:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 800e2a0 <getBits.constprop.5+0x17c>
  gInBufLeft = 0;
 800e1c2:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800e1c4:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e1c8:	f8db b000 	ldr.w	fp, [fp]
 800e1cc:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e1ce:	f888 2000 	strb.w	r2, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e1d2:	f8da 3000 	ldr.w	r3, [sl]
 800e1d6:	4a2f      	ldr	r2, [pc, #188]	; (800e294 <getBits.constprop.5+0x170>)
 800e1d8:	482b      	ldr	r0, [pc, #172]	; (800e288 <getBits.constprop.5+0x164>)
  gInBufOfs = 4;
 800e1da:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e1de:	47d8      	blx	fp
  if (status) {
 800e1e0:	b108      	cbz	r0, 800e1e6 <getBits.constprop.5+0xc2>
    gCallbackStatus = status;
 800e1e2:	4b2a      	ldr	r3, [pc, #168]	; (800e28c <getBits.constprop.5+0x168>)
 800e1e4:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e1e6:	f898 0000 	ldrb.w	r0, [r8]
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d133      	bne.n	800e256 <getBits.constprop.5+0x132>
      gTemFlag = ~gTemFlag;
 800e1ee:	492a      	ldr	r1, [pc, #168]	; (800e298 <getBits.constprop.5+0x174>)
 800e1f0:	f899 3000 	ldrb.w	r3, [r9]
 800e1f4:	780a      	ldrb	r2, [r1, #0]
 800e1f6:	43d2      	mvns	r2, r2
 800e1f8:	b2d2      	uxtb	r2, r2
 800e1fa:	700a      	strb	r2, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e1fc:	2a00      	cmp	r2, #0
 800e1fe:	d03d      	beq.n	800e27c <getBits.constprop.5+0x158>
 800e200:	4602      	mov	r2, r0
 800e202:	21ff      	movs	r1, #255	; 0xff
  gInBufOfs--;
 800e204:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800e208:	3b02      	subs	r3, #2
  gInBufLeft++;
 800e20a:	1c90      	adds	r0, r2, #2
  gInBuf[gInBufOfs] = i;
 800e20c:	f04f 0eff 	mov.w	lr, #255	; 0xff
  gInBufOfs--;
 800e210:	b2da      	uxtb	r2, r3
  gInBuf[gInBufOfs] = i;
 800e212:	fa5f fc8c 	uxtb.w	ip, ip
  gInBufLeft++;
 800e216:	f888 0000 	strb.w	r0, [r8]
  gInBufOfs--;
 800e21a:	f889 2000 	strb.w	r2, [r9]
  gInBuf[gInBufOfs] = i;
 800e21e:	f807 100c 	strb.w	r1, [r7, ip]
  gInBufLeft++;
 800e222:	4671      	mov	r1, lr
  gInBuf[gInBufOfs] = i;
 800e224:	f807 e002 	strb.w	lr, [r7, r2]
 800e228:	e006      	b.n	800e238 <getBits.constprop.5+0x114>
      gTemFlag = ~gTemFlag;
 800e22a:	4a1b      	ldr	r2, [pc, #108]	; (800e298 <getBits.constprop.5+0x174>)
 800e22c:	7813      	ldrb	r3, [r2, #0]
 800e22e:	43db      	mvns	r3, r3
 800e230:	b2db      	uxtb	r3, r3
 800e232:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e234:	b95b      	cbnz	r3, 800e24e <getBits.constprop.5+0x12a>
 800e236:	21d9      	movs	r1, #217	; 0xd9
    gBitBuf |= getOctet(FFCheck);
 800e238:	882b      	ldrh	r3, [r5, #0]
  return ret >> (16 - origBits);
 800e23a:	0a20      	lsrs	r0, r4, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800e23c:	7832      	ldrb	r2, [r6, #0]
 800e23e:	430b      	orrs	r3, r1
 800e240:	f1c2 0208 	rsb	r2, r2, #8
 800e244:	4093      	lsls	r3, r2
 800e246:	802b      	strh	r3, [r5, #0]
}
 800e248:	b003      	add	sp, #12
 800e24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((FFCheck) && (c == 0xFF)) {
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	b97b      	cbnz	r3, 800e272 <getBits.constprop.5+0x14e>
    if (n) {
 800e252:	21ff      	movs	r1, #255	; 0xff
 800e254:	e7f0      	b.n	800e238 <getBits.constprop.5+0x114>
 800e256:	f899 2000 	ldrb.w	r2, [r9]
  return gInBuf[gInBufOfs++];
 800e25a:	1c53      	adds	r3, r2, #1
  gInBufLeft--;
 800e25c:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800e25e:	5cb9      	ldrb	r1, [r7, r2]
 800e260:	b2db      	uxtb	r3, r3
  gInBufLeft--;
 800e262:	b2c2      	uxtb	r2, r0
  return gInBuf[gInBufOfs++];
 800e264:	f889 3000 	strb.w	r3, [r9]
  gInBufLeft--;
 800e268:	f888 2000 	strb.w	r2, [r8]
    if (n) {
 800e26c:	2900      	cmp	r1, #0
 800e26e:	d0f0      	beq.n	800e252 <getBits.constprop.5+0x12e>
 800e270:	e7c8      	b.n	800e204 <getBits.constprop.5+0xe0>
 800e272:	4f07      	ldr	r7, [pc, #28]	; (800e290 <getBits.constprop.5+0x16c>)
 800e274:	e7a5      	b.n	800e1c2 <getBits.constprop.5+0x9e>
 800e276:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800e2a4 <getBits.constprop.5+0x180>
 800e27a:	e78a      	b.n	800e192 <getBits.constprop.5+0x6e>
      return gTemFlag ? 0xFF : 0xD9;
 800e27c:	21d9      	movs	r1, #217	; 0xd9
 800e27e:	e7c1      	b.n	800e204 <getBits.constprop.5+0xe0>
 800e280:	2000415c 	.word	0x2000415c
 800e284:	2000415a 	.word	0x2000415a
 800e288:	20004568 	.word	0x20004568
 800e28c:	2000415d 	.word	0x2000415d
 800e290:	20004564 	.word	0x20004564
 800e294:	20004664 	.word	0x20004664
 800e298:	20004a8b 	.word	0x20004a8b
 800e29c:	20004a90 	.word	0x20004a90
 800e2a0:	20004a94 	.word	0x20004a94
 800e2a4:	20004665 	.word	0x20004665

0800e2a8 <processMarkers>:
static uint8 processMarkers(uint8 *pMarker) {
 800e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	f8df b34c 	ldr.w	fp, [pc, #844]	; 800e5fc <processMarkers+0x354>
 800e2b0:	b08b      	sub	sp, #44	; 0x2c
 800e2b2:	f8df 934c 	ldr.w	r9, [pc, #844]	; 800e600 <processMarkers+0x358>
 800e2b6:	f8bb 8000 	ldrh.w	r8, [fp]
 800e2ba:	f899 3000 	ldrb.w	r3, [r9]
  if (!gInBufLeft) {
 800e2be:	f8df a344 	ldr.w	sl, [pc, #836]	; 800e604 <processMarkers+0x35c>
static uint8 processMarkers(uint8 *pMarker) {
 800e2c2:	9005      	str	r0, [sp, #20]
  if (gBitsLeft < numBits) {
 800e2c4:	2b07      	cmp	r3, #7
 800e2c6:	4644      	mov	r4, r8
 800e2c8:	d90d      	bls.n	800e2e6 <processMarkers+0x3e>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e2ca:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e2cc:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e2d0:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800e2d2:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e2d6:	f889 3000 	strb.w	r3, [r9]
  return ret >> (16 - origBits);
 800e2da:	1224      	asrs	r4, r4, #8
    } while (c != 0xFF);
 800e2dc:	2cff      	cmp	r4, #255	; 0xff
 800e2de:	d046      	beq.n	800e36e <processMarkers+0xc6>
  if (gBitsLeft < numBits) {
 800e2e0:	2b07      	cmp	r3, #7
 800e2e2:	4644      	mov	r4, r8
 800e2e4:	d8f1      	bhi.n	800e2ca <processMarkers+0x22>
    gBitBuf <<= gBitsLeft;
 800e2e6:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800e2ea:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800e2ee:	fa1f f288 	uxth.w	r2, r8
 800e2f2:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800e2f6:	b9d1      	cbnz	r1, 800e32e <processMarkers+0x86>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e2f8:	4bb6      	ldr	r3, [pc, #728]	; (800e5d4 <processMarkers+0x32c>)
  gInBufOfs = 4;
 800e2fa:	f04f 0c04 	mov.w	ip, #4
 800e2fe:	4fb6      	ldr	r7, [pc, #728]	; (800e5d8 <processMarkers+0x330>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e300:	4652      	mov	r2, sl
 800e302:	681d      	ldr	r5, [r3, #0]
 800e304:	4bb5      	ldr	r3, [pc, #724]	; (800e5dc <processMarkers+0x334>)
  gInBufLeft = 0;
 800e306:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e30a:	21fc      	movs	r1, #252	; 0xfc
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	48b4      	ldr	r0, [pc, #720]	; (800e5e0 <processMarkers+0x338>)
  gInBufOfs = 4;
 800e310:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e314:	47a8      	blx	r5
  if (status) {
 800e316:	b108      	cbz	r0, 800e31c <processMarkers+0x74>
    gCallbackStatus = status;
 800e318:	4bb2      	ldr	r3, [pc, #712]	; (800e5e4 <processMarkers+0x33c>)
 800e31a:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e31c:	f89a 1000 	ldrb.w	r1, [sl]
 800e320:	2900      	cmp	r1, #0
 800e322:	f000 8089 	beq.w	800e438 <processMarkers+0x190>
 800e326:	f8bb 2000 	ldrh.w	r2, [fp]
 800e32a:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e32e:	4faa      	ldr	r7, [pc, #680]	; (800e5d8 <processMarkers+0x330>)
  gInBufLeft--;
 800e330:	3901      	subs	r1, #1
 800e332:	4ead      	ldr	r6, [pc, #692]	; (800e5e8 <processMarkers+0x340>)
  return gInBuf[gInBufOfs++];
 800e334:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800e336:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800e33a:	1c45      	adds	r5, r0, #1
 800e33c:	f816 8000 	ldrb.w	r8, [r6, r0]
 800e340:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800e342:	ea48 0802 	orr.w	r8, r8, r2
 800e346:	f1c3 0208 	rsb	r2, r3, #8
 800e34a:	fa08 f802 	lsl.w	r8, r8, r2
 800e34e:	fa1f f888 	uxth.w	r8, r8
 800e352:	e7c2      	b.n	800e2da <processMarkers+0x32>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e354:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e356:	ea4f 2808 	mov.w	r8, r8, lsl #8
  return ret >> (16 - origBits);
 800e35a:	1224      	asrs	r4, r4, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e35c:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800e35e:	fa1f f888 	uxth.w	r8, r8
    } while (c == 0xFF);
 800e362:	2cff      	cmp	r4, #255	; 0xff
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e364:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800e368:	f8ab 8000 	strh.w	r8, [fp]
    } while (c == 0xFF);
 800e36c:	d13b      	bne.n	800e3e6 <processMarkers+0x13e>
  if (gBitsLeft < numBits) {
 800e36e:	2b07      	cmp	r3, #7
 800e370:	4644      	mov	r4, r8
 800e372:	d8ef      	bhi.n	800e354 <processMarkers+0xac>
    gBitBuf <<= gBitsLeft;
 800e374:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800e378:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800e37c:	fa1f f288 	uxth.w	r2, r8
 800e380:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800e384:	b9c1      	cbnz	r1, 800e3b8 <processMarkers+0x110>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e386:	4b93      	ldr	r3, [pc, #588]	; (800e5d4 <processMarkers+0x32c>)
  gInBufOfs = 4;
 800e388:	f04f 0c04 	mov.w	ip, #4
 800e38c:	4f92      	ldr	r7, [pc, #584]	; (800e5d8 <processMarkers+0x330>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e38e:	4652      	mov	r2, sl
 800e390:	681d      	ldr	r5, [r3, #0]
 800e392:	4b92      	ldr	r3, [pc, #584]	; (800e5dc <processMarkers+0x334>)
  gInBufLeft = 0;
 800e394:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e398:	21fc      	movs	r1, #252	; 0xfc
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4890      	ldr	r0, [pc, #576]	; (800e5e0 <processMarkers+0x338>)
  gInBufOfs = 4;
 800e39e:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e3a2:	47a8      	blx	r5
  if (status) {
 800e3a4:	b108      	cbz	r0, 800e3aa <processMarkers+0x102>
    gCallbackStatus = status;
 800e3a6:	4b8f      	ldr	r3, [pc, #572]	; (800e5e4 <processMarkers+0x33c>)
 800e3a8:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e3aa:	f89a 1000 	ldrb.w	r1, [sl]
 800e3ae:	b399      	cbz	r1, 800e418 <processMarkers+0x170>
 800e3b0:	f8bb 2000 	ldrh.w	r2, [fp]
 800e3b4:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e3b8:	4f87      	ldr	r7, [pc, #540]	; (800e5d8 <processMarkers+0x330>)
  gInBufLeft--;
 800e3ba:	3901      	subs	r1, #1
 800e3bc:	4e8a      	ldr	r6, [pc, #552]	; (800e5e8 <processMarkers+0x340>)
  return gInBuf[gInBufOfs++];
 800e3be:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800e3c0:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800e3c4:	1c45      	adds	r5, r0, #1
 800e3c6:	f816 8000 	ldrb.w	r8, [r6, r0]
 800e3ca:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800e3cc:	ea48 0802 	orr.w	r8, r8, r2
 800e3d0:	f1c3 0208 	rsb	r2, r3, #8
  return ret >> (16 - origBits);
 800e3d4:	1224      	asrs	r4, r4, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800e3d6:	fa08 f802 	lsl.w	r8, r8, r2
    } while (c == 0xFF);
 800e3da:	2cff      	cmp	r4, #255	; 0xff
    gBitBuf <<= (numBits - gBitsLeft);
 800e3dc:	fa1f f888 	uxth.w	r8, r8
 800e3e0:	f8ab 8000 	strh.w	r8, [fp]
    } while (c == 0xFF);
 800e3e4:	d0c3      	beq.n	800e36e <processMarkers+0xc6>
      c = (uint8)getBits1(8);
 800e3e6:	b2e2      	uxtb	r2, r4
  } while (c == 0);
 800e3e8:	2c00      	cmp	r4, #0
 800e3ea:	f43f af6b 	beq.w	800e2c4 <processMarkers+0x1c>
    switch (c) {
 800e3ee:	2acb      	cmp	r2, #203	; 0xcb
 800e3f0:	d932      	bls.n	800e458 <processMarkers+0x1b0>
 800e3f2:	2ad7      	cmp	r2, #215	; 0xd7
 800e3f4:	d93c      	bls.n	800e470 <processMarkers+0x1c8>
 800e3f6:	2adb      	cmp	r2, #219	; 0xdb
 800e3f8:	d042      	beq.n	800e480 <processMarkers+0x1d8>
 800e3fa:	f0c0 8095 	bcc.w	800e528 <processMarkers+0x280>
 800e3fe:	2add      	cmp	r2, #221	; 0xdd
 800e400:	f040 819b 	bne.w	800e73a <processMarkers+0x492>
  return getBits(numBits, 0);
 800e404:	f7ff fdea 	bl	800dfdc <getBits.constprop.4>
  if (getBits1(16) != 4)
 800e408:	2804      	cmp	r0, #4
 800e40a:	f000 84b0 	beq.w	800ed6e <processMarkers+0xac6>
 800e40e:	f8bb 8000 	ldrh.w	r8, [fp]
 800e412:	f899 3000 	ldrb.w	r3, [r9]
 800e416:	e755      	b.n	800e2c4 <processMarkers+0x1c>
      gTemFlag = ~gTemFlag;
 800e418:	4874      	ldr	r0, [pc, #464]	; (800e5ec <processMarkers+0x344>)
 800e41a:	f8bb 2000 	ldrh.w	r2, [fp]
 800e41e:	7801      	ldrb	r1, [r0, #0]
 800e420:	f899 3000 	ldrb.w	r3, [r9]
 800e424:	43c9      	mvns	r1, r1
 800e426:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800e428:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800e42a:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e42c:	bf14      	ite	ne
 800e42e:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800e432:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800e436:	e7c9      	b.n	800e3cc <processMarkers+0x124>
      gTemFlag = ~gTemFlag;
 800e438:	486c      	ldr	r0, [pc, #432]	; (800e5ec <processMarkers+0x344>)
 800e43a:	f8bb 2000 	ldrh.w	r2, [fp]
 800e43e:	7801      	ldrb	r1, [r0, #0]
 800e440:	f899 3000 	ldrb.w	r3, [r9]
 800e444:	43c9      	mvns	r1, r1
 800e446:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800e448:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800e44a:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e44c:	bf14      	ite	ne
 800e44e:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800e452:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800e456:	e774      	b.n	800e342 <processMarkers+0x9a>
    switch (c) {
 800e458:	2ac9      	cmp	r2, #201	; 0xc9
 800e45a:	d265      	bcs.n	800e528 <processMarkers+0x280>
 800e45c:	2ac4      	cmp	r2, #196	; 0xc4
 800e45e:	f000 817e 	beq.w	800e75e <processMarkers+0x4b6>
 800e462:	d95a      	bls.n	800e51a <processMarkers+0x272>
 800e464:	2ac7      	cmp	r2, #199	; 0xc7
 800e466:	d95f      	bls.n	800e528 <processMarkers+0x280>
      return PJPG_UNEXPECTED_MARKER;
 800e468:	2012      	movs	r0, #18
}
 800e46a:	b00b      	add	sp, #44	; 0x2c
 800e46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (c) {
 800e470:	2ad0      	cmp	r2, #208	; 0xd0
 800e472:	d2f9      	bcs.n	800e468 <processMarkers+0x1c0>
 800e474:	2acc      	cmp	r2, #204	; 0xcc
 800e476:	d157      	bne.n	800e528 <processMarkers+0x280>
      return PJPG_NO_ARITHMITIC_SUPPORT;
 800e478:	2011      	movs	r0, #17
}
 800e47a:	b00b      	add	sp, #44	; 0x2c
 800e47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return getBits(numBits, 0);
 800e480:	f7ff fdac 	bl	800dfdc <getBits.constprop.4>
  if (left < 2)
 800e484:	2801      	cmp	r0, #1
 800e486:	d9c2      	bls.n	800e40e <processMarkers+0x166>
  left -= 2;
 800e488:	3802      	subs	r0, #2
 800e48a:	b283      	uxth	r3, r0
 800e48c:	9303      	str	r3, [sp, #12]
  while (left) {
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0bd      	beq.n	800e40e <processMarkers+0x166>
 800e492:	f899 3000 	ldrb.w	r3, [r9]
 800e496:	f8bb 8000 	ldrh.w	r8, [fp]
  if (gBitsLeft < numBits) {
 800e49a:	2b07      	cmp	r3, #7
 800e49c:	4644      	mov	r4, r8
 800e49e:	f240 8118 	bls.w	800e6d2 <processMarkers+0x42a>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e4a2:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e4a4:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e4a8:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800e4aa:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e4ae:	f889 3000 	strb.w	r3, [r9]
    uint8 n = (uint8)getBits1(8);
 800e4b2:	0a22      	lsrs	r2, r4, #8
    n &= 0x0F;
 800e4b4:	f002 070f 	and.w	r7, r2, #15
    uint8 prec = n >> 4;
 800e4b8:	0912      	lsrs	r2, r2, #4
    if (n > 1)
 800e4ba:	2f01      	cmp	r7, #1
    uint8 prec = n >> 4;
 800e4bc:	9201      	str	r2, [sp, #4]
    if (n > 1)
 800e4be:	f63f af01 	bhi.w	800e2c4 <processMarkers+0x1c>
    gValidQuantTables |= (n ? 2 : 1);
 800e4c2:	2f00      	cmp	r7, #0
 800e4c4:	494a      	ldr	r1, [pc, #296]	; (800e5f0 <processMarkers+0x348>)
 800e4c6:	f04f 0600 	mov.w	r6, #0
 800e4ca:	9702      	str	r7, [sp, #8]
 800e4cc:	7808      	ldrb	r0, [r1, #0]
 800e4ce:	bf0c      	ite	eq
 800e4d0:	2201      	moveq	r2, #1
 800e4d2:	2202      	movne	r2, #2
 800e4d4:	4302      	orrs	r2, r0
 800e4d6:	700a      	strb	r2, [r1, #0]
 800e4d8:	e009      	b.n	800e4ee <processMarkers+0x246>
        gQuant1[i] = (int16)temp;
 800e4da:	4946      	ldr	r1, [pc, #280]	; (800e5f4 <processMarkers+0x34c>)
 800e4dc:	f8bb 8000 	ldrh.w	r8, [fp]
        gQuant0[i] = (int16)temp;
 800e4e0:	538c      	strh	r4, [r1, r6]
 800e4e2:	3602      	adds	r6, #2
 800e4e4:	f899 3000 	ldrb.w	r3, [r9]
    for (i = 0; i < 64; i++) {
 800e4e8:	2e80      	cmp	r6, #128	; 0x80
 800e4ea:	f000 80cf 	beq.w	800e68c <processMarkers+0x3e4>
  if (gBitsLeft < numBits) {
 800e4ee:	2b07      	cmp	r3, #7
 800e4f0:	d932      	bls.n	800e558 <processMarkers+0x2b0>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e4f2:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e4f4:	ea4f 2408 	mov.w	r4, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e4f8:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800e4fa:	b2a4      	uxth	r4, r4
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e4fc:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800e500:	f8ab 4000 	strh.w	r4, [fp]
      if (prec)
 800e504:	9a01      	ldr	r2, [sp, #4]
  return ret >> (16 - origBits);
 800e506:	ea4f 2818 	mov.w	r8, r8, lsr #8
      if (prec)
 800e50a:	b99a      	cbnz	r2, 800e534 <processMarkers+0x28c>
      if (n)
 800e50c:	9b02      	ldr	r3, [sp, #8]
 800e50e:	fa0f f488 	sxth.w	r4, r8
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1e1      	bne.n	800e4da <processMarkers+0x232>
        gQuant0[i] = (int16)temp;
 800e516:	4938      	ldr	r1, [pc, #224]	; (800e5f8 <processMarkers+0x350>)
 800e518:	e7e0      	b.n	800e4dc <processMarkers+0x234>
    switch (c) {
 800e51a:	2a01      	cmp	r2, #1
 800e51c:	d0a4      	beq.n	800e468 <processMarkers+0x1c0>
 800e51e:	f0c0 810c 	bcc.w	800e73a <processMarkers+0x492>
 800e522:	2ac0      	cmp	r2, #192	; 0xc0
 800e524:	f0c0 8109 	bcc.w	800e73a <processMarkers+0x492>
      *pMarker = c;
 800e528:	9b05      	ldr	r3, [sp, #20]
      return 0;
 800e52a:	2000      	movs	r0, #0
      *pMarker = c;
 800e52c:	701a      	strb	r2, [r3, #0]
}
 800e52e:	b00b      	add	sp, #44	; 0x2c
 800e530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = (temp << 8) + getBits1(8);
 800e534:	ea4f 2808 	mov.w	r8, r8, lsl #8
  if (gBitsLeft < numBits) {
 800e538:	2b07      	cmp	r3, #7
        temp = (temp << 8) + getBits1(8);
 800e53a:	fa1f f888 	uxth.w	r8, r8
  if (gBitsLeft < numBits) {
 800e53e:	d963      	bls.n	800e608 <processMarkers+0x360>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e540:	f1a3 0208 	sub.w	r2, r3, #8
    gBitBuf <<= numBits;
 800e544:	0223      	lsls	r3, r4, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e546:	f889 2000 	strb.w	r2, [r9]
    gBitBuf <<= numBits;
 800e54a:	f8ab 3000 	strh.w	r3, [fp]
        temp = (temp << 8) + getBits1(8);
 800e54e:	eb08 2814 	add.w	r8, r8, r4, lsr #8
 800e552:	fa1f f888 	uxth.w	r8, r8
 800e556:	e7d9      	b.n	800e50c <processMarkers+0x264>
    gBitBuf <<= gBitsLeft;
 800e558:	fa08 f203 	lsl.w	r2, r8, r3
  if (!gInBufLeft) {
 800e55c:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800e560:	b292      	uxth	r2, r2
 800e562:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800e566:	b9b1      	cbnz	r1, 800e596 <processMarkers+0x2ee>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e568:	4b1a      	ldr	r3, [pc, #104]	; (800e5d4 <processMarkers+0x32c>)
  gInBufOfs = 4;
 800e56a:	2504      	movs	r5, #4
 800e56c:	4f1a      	ldr	r7, [pc, #104]	; (800e5d8 <processMarkers+0x330>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e56e:	4652      	mov	r2, sl
 800e570:	681c      	ldr	r4, [r3, #0]
 800e572:	4b1a      	ldr	r3, [pc, #104]	; (800e5dc <processMarkers+0x334>)
  gInBufLeft = 0;
 800e574:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e578:	21fc      	movs	r1, #252	; 0xfc
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4818      	ldr	r0, [pc, #96]	; (800e5e0 <processMarkers+0x338>)
  gInBufOfs = 4;
 800e57e:	703d      	strb	r5, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e580:	47a0      	blx	r4
  if (status) {
 800e582:	b108      	cbz	r0, 800e588 <processMarkers+0x2e0>
    gCallbackStatus = status;
 800e584:	4b17      	ldr	r3, [pc, #92]	; (800e5e4 <processMarkers+0x33c>)
 800e586:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e588:	f89a 1000 	ldrb.w	r1, [sl]
 800e58c:	b1a1      	cbz	r1, 800e5b8 <processMarkers+0x310>
 800e58e:	f8bb 2000 	ldrh.w	r2, [fp]
 800e592:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e596:	4f10      	ldr	r7, [pc, #64]	; (800e5d8 <processMarkers+0x330>)
  gInBufLeft--;
 800e598:	3901      	subs	r1, #1
 800e59a:	4c13      	ldr	r4, [pc, #76]	; (800e5e8 <processMarkers+0x340>)
  return gInBuf[gInBufOfs++];
 800e59c:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800e59e:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800e5a2:	1c45      	adds	r5, r0, #1
 800e5a4:	5c24      	ldrb	r4, [r4, r0]
 800e5a6:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800e5a8:	4314      	orrs	r4, r2
 800e5aa:	f1c3 0208 	rsb	r2, r3, #8
 800e5ae:	4094      	lsls	r4, r2
 800e5b0:	b2a4      	uxth	r4, r4
 800e5b2:	f8ab 4000 	strh.w	r4, [fp]
 800e5b6:	e7a5      	b.n	800e504 <processMarkers+0x25c>
      gTemFlag = ~gTemFlag;
 800e5b8:	480c      	ldr	r0, [pc, #48]	; (800e5ec <processMarkers+0x344>)
 800e5ba:	f8bb 2000 	ldrh.w	r2, [fp]
 800e5be:	7801      	ldrb	r1, [r0, #0]
 800e5c0:	f899 3000 	ldrb.w	r3, [r9]
 800e5c4:	43c9      	mvns	r1, r1
 800e5c6:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800e5c8:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800e5ca:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e5cc:	bf14      	ite	ne
 800e5ce:	24ff      	movne	r4, #255	; 0xff
 800e5d0:	24d9      	moveq	r4, #217	; 0xd9
 800e5d2:	e7e9      	b.n	800e5a8 <processMarkers+0x300>
 800e5d4:	20004a94 	.word	0x20004a94
 800e5d8:	20004665 	.word	0x20004665
 800e5dc:	20004a90 	.word	0x20004a90
 800e5e0:	20004568 	.word	0x20004568
 800e5e4:	2000415d 	.word	0x2000415d
 800e5e8:	20004564 	.word	0x20004564
 800e5ec:	20004a8b 	.word	0x20004a8b
 800e5f0:	20004a8d 	.word	0x20004a8d
 800e5f4:	20004a04 	.word	0x20004a04
 800e5f8:	20004984 	.word	0x20004984
 800e5fc:	2000415a 	.word	0x2000415a
 800e600:	2000415c 	.word	0x2000415c
 800e604:	20004664 	.word	0x20004664
    gBitBuf <<= gBitsLeft;
 800e608:	fa04 f003 	lsl.w	r0, r4, r3
  if (!gInBufLeft) {
 800e60c:	f89a 2000 	ldrb.w	r2, [sl]
    gBitBuf <<= gBitsLeft;
 800e610:	b280      	uxth	r0, r0
 800e612:	f8ab 0000 	strh.w	r0, [fp]
  if (!gInBufLeft) {
 800e616:	b9c2      	cbnz	r2, 800e64a <processMarkers+0x3a2>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e618:	4baa      	ldr	r3, [pc, #680]	; (800e8c4 <processMarkers+0x61c>)
  gInBufOfs = 4;
 800e61a:	f04f 0c04 	mov.w	ip, #4
 800e61e:	4faa      	ldr	r7, [pc, #680]	; (800e8c8 <processMarkers+0x620>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e620:	21fc      	movs	r1, #252	; 0xfc
 800e622:	681d      	ldr	r5, [r3, #0]
 800e624:	4ba9      	ldr	r3, [pc, #676]	; (800e8cc <processMarkers+0x624>)
  gInBufLeft = 0;
 800e626:	f88a 2000 	strb.w	r2, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e62a:	4652      	mov	r2, sl
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	48a8      	ldr	r0, [pc, #672]	; (800e8d0 <processMarkers+0x628>)
  gInBufOfs = 4;
 800e630:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e634:	47a8      	blx	r5
  if (status) {
 800e636:	b108      	cbz	r0, 800e63c <processMarkers+0x394>
    gCallbackStatus = status;
 800e638:	4ba6      	ldr	r3, [pc, #664]	; (800e8d4 <processMarkers+0x62c>)
 800e63a:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e63c:	f89a 2000 	ldrb.w	r2, [sl]
 800e640:	b1b2      	cbz	r2, 800e670 <processMarkers+0x3c8>
 800e642:	f8bb 0000 	ldrh.w	r0, [fp]
 800e646:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e64a:	4f9f      	ldr	r7, [pc, #636]	; (800e8c8 <processMarkers+0x620>)
  gInBufLeft--;
 800e64c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800e650:	4aa1      	ldr	r2, [pc, #644]	; (800e8d8 <processMarkers+0x630>)
  return gInBuf[gInBufOfs++];
 800e652:	7839      	ldrb	r1, [r7, #0]
  gInBufLeft--;
 800e654:	f88a c000 	strb.w	ip, [sl]
  return gInBuf[gInBufOfs++];
 800e658:	1c4d      	adds	r5, r1, #1
 800e65a:	5c51      	ldrb	r1, [r2, r1]
 800e65c:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800e65e:	ea41 0200 	orr.w	r2, r1, r0
 800e662:	f1c3 0308 	rsb	r3, r3, #8
 800e666:	fa02 f303 	lsl.w	r3, r2, r3
 800e66a:	f8ab 3000 	strh.w	r3, [fp]
 800e66e:	e76e      	b.n	800e54e <processMarkers+0x2a6>
      gTemFlag = ~gTemFlag;
 800e670:	499a      	ldr	r1, [pc, #616]	; (800e8dc <processMarkers+0x634>)
 800e672:	f8bb 0000 	ldrh.w	r0, [fp]
 800e676:	780a      	ldrb	r2, [r1, #0]
 800e678:	f899 3000 	ldrb.w	r3, [r9]
 800e67c:	43d2      	mvns	r2, r2
 800e67e:	b2d2      	uxtb	r2, r2
      return gTemFlag ? 0xFF : 0xD9;
 800e680:	2a00      	cmp	r2, #0
      gTemFlag = ~gTemFlag;
 800e682:	700a      	strb	r2, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e684:	bf14      	ite	ne
 800e686:	21ff      	movne	r1, #255	; 0xff
 800e688:	21d9      	moveq	r1, #217	; 0xd9
 800e68a:	e7e8      	b.n	800e65e <processMarkers+0x3b6>
 800e68c:	4894      	ldr	r0, [pc, #592]	; (800e8e0 <processMarkers+0x638>)
 800e68e:	3902      	subs	r1, #2
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 800e690:	2504      	movs	r5, #4
 800e692:	f100 0440 	add.w	r4, r0, #64	; 0x40
 800e696:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800e69a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  for (i = 0; i < 64; i++) {
 800e69e:	4284      	cmp	r4, r0
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 800e6a0:	fb12 5206 	smlabb	r2, r2, r6, r5
                                    PJPG_DCT_SCALE_BITS - 1))) >>
 800e6a4:	ea4f 02e2 	mov.w	r2, r2, asr #3
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 800e6a8:	800a      	strh	r2, [r1, #0]
  for (i = 0; i < 64; i++) {
 800e6aa:	d1f4      	bne.n	800e696 <processMarkers+0x3ee>
    totalRead = 64 + 1;
 800e6ac:	9a01      	ldr	r2, [sp, #4]
    if (left < totalRead)
 800e6ae:	9903      	ldr	r1, [sp, #12]
    totalRead = 64 + 1;
 800e6b0:	2a00      	cmp	r2, #0
 800e6b2:	bf14      	ite	ne
 800e6b4:	2281      	movne	r2, #129	; 0x81
 800e6b6:	2241      	moveq	r2, #65	; 0x41
    if (left < totalRead)
 800e6b8:	4291      	cmp	r1, r2
 800e6ba:	f4ff ae03 	bcc.w	800e2c4 <processMarkers+0x1c>
    left = (uint16)(left - totalRead);
 800e6be:	1a8a      	subs	r2, r1, r2
 800e6c0:	b292      	uxth	r2, r2
 800e6c2:	9203      	str	r2, [sp, #12]
  while (left) {
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	f43f adfd 	beq.w	800e2c4 <processMarkers+0x1c>
  if (gBitsLeft < numBits) {
 800e6ca:	2b07      	cmp	r3, #7
 800e6cc:	4644      	mov	r4, r8
 800e6ce:	f63f aee8 	bhi.w	800e4a2 <processMarkers+0x1fa>
    gBitBuf <<= gBitsLeft;
 800e6d2:	fa08 f203 	lsl.w	r2, r8, r3
  if (!gInBufLeft) {
 800e6d6:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800e6da:	b292      	uxth	r2, r2
 800e6dc:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800e6e0:	b9c1      	cbnz	r1, 800e714 <processMarkers+0x46c>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e6e2:	4b78      	ldr	r3, [pc, #480]	; (800e8c4 <processMarkers+0x61c>)
  gInBufOfs = 4;
 800e6e4:	2604      	movs	r6, #4
 800e6e6:	4f78      	ldr	r7, [pc, #480]	; (800e8c8 <processMarkers+0x620>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e6e8:	4652      	mov	r2, sl
 800e6ea:	681d      	ldr	r5, [r3, #0]
 800e6ec:	4b77      	ldr	r3, [pc, #476]	; (800e8cc <processMarkers+0x624>)
  gInBufLeft = 0;
 800e6ee:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e6f2:	21fc      	movs	r1, #252	; 0xfc
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4876      	ldr	r0, [pc, #472]	; (800e8d0 <processMarkers+0x628>)
  gInBufOfs = 4;
 800e6f8:	703e      	strb	r6, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e6fa:	47a8      	blx	r5
  if (status) {
 800e6fc:	b108      	cbz	r0, 800e702 <processMarkers+0x45a>
    gCallbackStatus = status;
 800e6fe:	4b75      	ldr	r3, [pc, #468]	; (800e8d4 <processMarkers+0x62c>)
 800e700:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e702:	f89a 1000 	ldrb.w	r1, [sl]
 800e706:	2900      	cmp	r1, #0
 800e708:	f000 8311 	beq.w	800ed2e <processMarkers+0xa86>
 800e70c:	f8bb 2000 	ldrh.w	r2, [fp]
 800e710:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e714:	4e6c      	ldr	r6, [pc, #432]	; (800e8c8 <processMarkers+0x620>)
  gInBufLeft--;
 800e716:	3901      	subs	r1, #1
 800e718:	4f6f      	ldr	r7, [pc, #444]	; (800e8d8 <processMarkers+0x630>)
  return gInBuf[gInBufOfs++];
 800e71a:	7830      	ldrb	r0, [r6, #0]
  gInBufLeft--;
 800e71c:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800e720:	1c45      	adds	r5, r0, #1
 800e722:	f817 8000 	ldrb.w	r8, [r7, r0]
 800e726:	7035      	strb	r5, [r6, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800e728:	ea48 0802 	orr.w	r8, r8, r2
 800e72c:	f1c3 0208 	rsb	r2, r3, #8
 800e730:	fa08 f802 	lsl.w	r8, r8, r2
 800e734:	fa1f f888 	uxth.w	r8, r8
 800e738:	e6bb      	b.n	800e4b2 <processMarkers+0x20a>
  return getBits(numBits, 0);
 800e73a:	f7ff fc4f 	bl	800dfdc <getBits.constprop.4>
  if (left < 2)
 800e73e:	2801      	cmp	r0, #1
 800e740:	f67f ae65 	bls.w	800e40e <processMarkers+0x166>
  left -= 2;
 800e744:	3802      	subs	r0, #2
 800e746:	b284      	uxth	r4, r0
  while (left) {
 800e748:	2c00      	cmp	r4, #0
 800e74a:	f43f ae60 	beq.w	800e40e <processMarkers+0x166>
    left--;
 800e74e:	3c01      	subs	r4, #1
  return getBits(numBits, 0);
 800e750:	2000      	movs	r0, #0
 800e752:	f7ff fce7 	bl	800e124 <getBits.constprop.5>
    left--;
 800e756:	b2a4      	uxth	r4, r4
  while (left) {
 800e758:	2c00      	cmp	r4, #0
 800e75a:	d1f8      	bne.n	800e74e <processMarkers+0x4a6>
 800e75c:	e657      	b.n	800e40e <processMarkers+0x166>
  return getBits(numBits, 0);
 800e75e:	f7ff fc3d 	bl	800dfdc <getBits.constprop.4>
  if (left < 2)
 800e762:	2801      	cmp	r0, #1
 800e764:	f67f ae53 	bls.w	800e40e <processMarkers+0x166>
  left -= 2;
 800e768:	3802      	subs	r0, #2
 800e76a:	b283      	uxth	r3, r0
 800e76c:	9302      	str	r3, [sp, #8]
  while (left) {
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f43f ae4d 	beq.w	800e40e <processMarkers+0x166>
  if (gBitsLeft < numBits) {
 800e774:	f899 3000 	ldrb.w	r3, [r9]
 800e778:	f8bb 4000 	ldrh.w	r4, [fp]
 800e77c:	2b07      	cmp	r3, #7
 800e77e:	f240 8212 	bls.w	800eba6 <processMarkers+0x8fe>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e782:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e784:	ea4f 2804 	mov.w	r8, r4, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e788:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800e78a:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e78e:	f889 3000 	strb.w	r3, [r9]
  return ret >> (16 - origBits);
 800e792:	1224      	asrs	r4, r4, #8
    index = (uint8)getBits1(8);
 800e794:	b2e2      	uxtb	r2, r4
    if (((index & 0xF) > 1) || ((index & 0xF0) > 0x10))
 800e796:	f002 010f 	and.w	r1, r2, #15
 800e79a:	2901      	cmp	r1, #1
 800e79c:	f63f ad92 	bhi.w	800e2c4 <processMarkers+0x1c>
 800e7a0:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800e7a4:	2910      	cmp	r1, #16
 800e7a6:	f63f ad8d 	bhi.w	800e2c4 <processMarkers+0x1c>
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800e7aa:	08d2      	lsrs	r2, r2, #3
 800e7ac:	f004 0401 	and.w	r4, r4, #1
    gValidHuffTables |= (1 << tableIndex);
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	494c      	ldr	r1, [pc, #304]	; (800e8e4 <processMarkers+0x63c>)
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800e7b4:	f002 0702 	and.w	r7, r2, #2
 800e7b8:	4d4b      	ldr	r5, [pc, #300]	; (800e8e8 <processMarkers+0x640>)
    gValidHuffTables |= (1 << tableIndex);
 800e7ba:	780a      	ldrb	r2, [r1, #0]
 800e7bc:	f10d 0617 	add.w	r6, sp, #23
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800e7c0:	433c      	orrs	r4, r7
 800e7c2:	4627      	mov	r7, r4
 800e7c4:	4c49      	ldr	r4, [pc, #292]	; (800e8ec <processMarkers+0x644>)
    gValidHuffTables |= (1 << tableIndex);
 800e7c6:	9703      	str	r7, [sp, #12]
 800e7c8:	fa00 f707 	lsl.w	r7, r0, r7
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800e7cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
    gValidHuffTables |= (1 << tableIndex);
 800e7d0:	433a      	orrs	r2, r7
 800e7d2:	f855 7020 	ldr.w	r7, [r5, r0, lsl #2]
    count = 0;
 800e7d6:	2500      	movs	r5, #0
 800e7d8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    gValidHuffTables |= (1 << tableIndex);
 800e7dc:	700a      	strb	r2, [r1, #0]
 800e7de:	9001      	str	r0, [sp, #4]
    count = 0;
 800e7e0:	9704      	str	r7, [sp, #16]
 800e7e2:	e012      	b.n	800e80a <processMarkers+0x562>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e7e4:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e7e6:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e7ea:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800e7ec:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e7f0:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800e7f4:	f8ab 8000 	strh.w	r8, [fp]
  return ret >> (16 - origBits);
 800e7f8:	1224      	asrs	r4, r4, #8
    for (i = 0; i <= 15; i++) {
 800e7fa:	f10d 0227 	add.w	r2, sp, #39	; 0x27
      count = (uint16)(count + n);
 800e7fe:	4425      	add	r5, r4
      uint8 n = (uint8)getBits1(8);
 800e800:	f806 4f01 	strb.w	r4, [r6, #1]!
    for (i = 0; i <= 15; i++) {
 800e804:	42b2      	cmp	r2, r6
      count = (uint16)(count + n);
 800e806:	b2ad      	uxth	r5, r5
    for (i = 0; i <= 15; i++) {
 800e808:	d04d      	beq.n	800e8a6 <processMarkers+0x5fe>
  if (gBitsLeft < numBits) {
 800e80a:	2b07      	cmp	r3, #7
 800e80c:	4644      	mov	r4, r8
 800e80e:	d8e9      	bhi.n	800e7e4 <processMarkers+0x53c>
    gBitBuf <<= gBitsLeft;
 800e810:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800e814:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800e818:	fa1f f288 	uxth.w	r2, r8
 800e81c:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800e820:	b9c9      	cbnz	r1, 800e856 <processMarkers+0x5ae>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e822:	4b28      	ldr	r3, [pc, #160]	; (800e8c4 <processMarkers+0x61c>)
  gInBufOfs = 4;
 800e824:	f04f 0c04 	mov.w	ip, #4
 800e828:	4f27      	ldr	r7, [pc, #156]	; (800e8c8 <processMarkers+0x620>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e82a:	4652      	mov	r2, sl
 800e82c:	f8d3 8000 	ldr.w	r8, [r3]
 800e830:	4b26      	ldr	r3, [pc, #152]	; (800e8cc <processMarkers+0x624>)
  gInBufLeft = 0;
 800e832:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e836:	21fc      	movs	r1, #252	; 0xfc
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4825      	ldr	r0, [pc, #148]	; (800e8d0 <processMarkers+0x628>)
  gInBufOfs = 4;
 800e83c:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e840:	47c0      	blx	r8
  if (status) {
 800e842:	b108      	cbz	r0, 800e848 <processMarkers+0x5a0>
    gCallbackStatus = status;
 800e844:	4b23      	ldr	r3, [pc, #140]	; (800e8d4 <processMarkers+0x62c>)
 800e846:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e848:	f89a 1000 	ldrb.w	r1, [sl]
 800e84c:	b1d9      	cbz	r1, 800e886 <processMarkers+0x5de>
 800e84e:	f8bb 2000 	ldrh.w	r2, [fp]
 800e852:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e856:	4f1c      	ldr	r7, [pc, #112]	; (800e8c8 <processMarkers+0x620>)
  gInBufLeft--;
 800e858:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800e85c:	491e      	ldr	r1, [pc, #120]	; (800e8d8 <processMarkers+0x630>)
  return gInBuf[gInBufOfs++];
 800e85e:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800e860:	f88a e000 	strb.w	lr, [sl]
  return gInBuf[gInBufOfs++];
 800e864:	f100 0c01 	add.w	ip, r0, #1
 800e868:	f811 8000 	ldrb.w	r8, [r1, r0]
 800e86c:	f887 c000 	strb.w	ip, [r7]
    gBitBuf <<= (numBits - gBitsLeft);
 800e870:	ea48 0802 	orr.w	r8, r8, r2
 800e874:	f1c3 0208 	rsb	r2, r3, #8
 800e878:	fa08 f802 	lsl.w	r8, r8, r2
 800e87c:	fa1f f888 	uxth.w	r8, r8
 800e880:	f8ab 8000 	strh.w	r8, [fp]
 800e884:	e7b8      	b.n	800e7f8 <processMarkers+0x550>
      gTemFlag = ~gTemFlag;
 800e886:	4815      	ldr	r0, [pc, #84]	; (800e8dc <processMarkers+0x634>)
 800e888:	f8bb 2000 	ldrh.w	r2, [fp]
 800e88c:	7801      	ldrb	r1, [r0, #0]
 800e88e:	f899 3000 	ldrb.w	r3, [r9]
 800e892:	43c9      	mvns	r1, r1
 800e894:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800e896:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800e898:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e89a:	bf14      	ite	ne
 800e89c:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800e8a0:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800e8a4:	e7e4      	b.n	800e870 <processMarkers+0x5c8>
static uint16 getMaxHuffCodes(uint8 index) { return (index < 2) ? 12 : 255; }
 800e8a6:	e9dd 2703 	ldrd	r2, r7, [sp, #12]
 800e8aa:	2a01      	cmp	r2, #1
 800e8ac:	bfcc      	ite	gt
 800e8ae:	22ff      	movgt	r2, #255	; 0xff
 800e8b0:	220c      	movle	r2, #12
    if (count > getMaxHuffCodes(tableIndex))
 800e8b2:	4295      	cmp	r5, r2
 800e8b4:	f63f ad06 	bhi.w	800e2c4 <processMarkers+0x1c>
    for (i = 0; i < count; i++)
 800e8b8:	2d00      	cmp	r5, #0
 800e8ba:	d06b      	beq.n	800e994 <processMarkers+0x6ec>
 800e8bc:	2600      	movs	r6, #0
 800e8be:	9703      	str	r7, [sp, #12]
 800e8c0:	e027      	b.n	800e912 <processMarkers+0x66a>
 800e8c2:	bf00      	nop
 800e8c4:	20004a94 	.word	0x20004a94
 800e8c8:	20004665 	.word	0x20004665
 800e8cc:	20004a90 	.word	0x20004a90
 800e8d0:	20004568 	.word	0x20004568
 800e8d4:	2000415d 	.word	0x2000415d
 800e8d8:	20004564 	.word	0x20004564
 800e8dc:	20004a8b 	.word	0x20004a8b
 800e8e0:	0801ceb7 	.word	0x0801ceb7
 800e8e4:	20004a8c 	.word	0x20004a8c
 800e8e8:	0801ce58 	.word	0x0801ce58
 800e8ec:	0801ce68 	.word	0x0801ce68
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e8f0:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800e8f2:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e8f6:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800e8f8:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e8fc:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800e900:	f8ab 8000 	strh.w	r8, [fp]
  return ret >> (16 - origBits);
 800e904:	1224      	asrs	r4, r4, #8
    for (i = 0; i < count; i++)
 800e906:	1c72      	adds	r2, r6, #1
      pHuffVal[i] = (uint8)getBits1(8);
 800e908:	9901      	ldr	r1, [sp, #4]
 800e90a:	558c      	strb	r4, [r1, r6]
    for (i = 0; i < count; i++)
 800e90c:	b2d6      	uxtb	r6, r2
 800e90e:	42b5      	cmp	r5, r6
 800e910:	d93f      	bls.n	800e992 <processMarkers+0x6ea>
  if (gBitsLeft < numBits) {
 800e912:	2b07      	cmp	r3, #7
 800e914:	4644      	mov	r4, r8
 800e916:	d8eb      	bhi.n	800e8f0 <processMarkers+0x648>
    gBitBuf <<= gBitsLeft;
 800e918:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800e91c:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800e920:	fa1f f288 	uxth.w	r2, r8
 800e924:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800e928:	b9d9      	cbnz	r1, 800e962 <processMarkers+0x6ba>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e92a:	4bb9      	ldr	r3, [pc, #740]	; (800ec10 <processMarkers+0x968>)
  gInBufOfs = 4;
 800e92c:	f04f 0c04 	mov.w	ip, #4
 800e930:	4fb8      	ldr	r7, [pc, #736]	; (800ec14 <processMarkers+0x96c>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e932:	4652      	mov	r2, sl
 800e934:	f8d3 8000 	ldr.w	r8, [r3]
 800e938:	4bb7      	ldr	r3, [pc, #732]	; (800ec18 <processMarkers+0x970>)
  gInBufLeft = 0;
 800e93a:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e93e:	21fc      	movs	r1, #252	; 0xfc
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	48b6      	ldr	r0, [pc, #728]	; (800ec1c <processMarkers+0x974>)
  gInBufOfs = 4;
 800e944:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e948:	47c0      	blx	r8
  if (status) {
 800e94a:	b108      	cbz	r0, 800e950 <processMarkers+0x6a8>
    gCallbackStatus = status;
 800e94c:	4bb4      	ldr	r3, [pc, #720]	; (800ec20 <processMarkers+0x978>)
 800e94e:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e950:	f89a 1000 	ldrb.w	r1, [sl]
 800e954:	2900      	cmp	r1, #0
 800e956:	f000 8167 	beq.w	800ec28 <processMarkers+0x980>
 800e95a:	f8bb 2000 	ldrh.w	r2, [fp]
 800e95e:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e962:	4fac      	ldr	r7, [pc, #688]	; (800ec14 <processMarkers+0x96c>)
  gInBufLeft--;
 800e964:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800e968:	49ae      	ldr	r1, [pc, #696]	; (800ec24 <processMarkers+0x97c>)
  return gInBuf[gInBufOfs++];
 800e96a:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800e96c:	f88a e000 	strb.w	lr, [sl]
  return gInBuf[gInBufOfs++];
 800e970:	f100 0c01 	add.w	ip, r0, #1
 800e974:	f811 8000 	ldrb.w	r8, [r1, r0]
 800e978:	f887 c000 	strb.w	ip, [r7]
    gBitBuf <<= (numBits - gBitsLeft);
 800e97c:	ea48 0802 	orr.w	r8, r8, r2
 800e980:	f1c3 0208 	rsb	r2, r3, #8
 800e984:	fa08 f802 	lsl.w	r8, r8, r2
 800e988:	fa1f f888 	uxth.w	r8, r8
 800e98c:	f8ab 8000 	strh.w	r8, [fp]
 800e990:	e7b8      	b.n	800e904 <processMarkers+0x65c>
 800e992:	9f03      	ldr	r7, [sp, #12]
    totalRead = 1 + 16 + count;
 800e994:	f105 0211 	add.w	r2, r5, #17
    if (left < totalRead)
 800e998:	9902      	ldr	r1, [sp, #8]
    totalRead = 1 + 16 + count;
 800e99a:	b292      	uxth	r2, r2
    if (left < totalRead)
 800e99c:	428a      	cmp	r2, r1
 800e99e:	f63f ac91 	bhi.w	800e2c4 <processMarkers+0x1c>
    left = (uint16)(left - totalRead);
 800e9a2:	1a8b      	subs	r3, r1, r2
    uint8 num = pBits[i];
 800e9a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    left = (uint16)(left - totalRead);
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	9302      	str	r3, [sp, #8]
    if (!num) {
 800e9ac:	2a00      	cmp	r2, #0
 800e9ae:	f000 81b6 	beq.w	800ed1e <processMarkers+0xa76>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9b2:	b293      	uxth	r3, r2
      pHuffTable->mMinCode[i] = code;
 800e9b4:	2100      	movs	r1, #0
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9b6:	1e58      	subs	r0, r3, #1
 800e9b8:	005b      	lsls	r3, r3, #1
      pHuffTable->mMinCode[i] = code;
 800e9ba:	8039      	strh	r1, [r7, #0]
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9bc:	8438      	strh	r0, [r7, #32]
      pHuffTable->mValPtr[i] = j;
 800e9be:	f887 1040 	strb.w	r1, [r7, #64]	; 0x40
    uint8 num = pBits[i];
 800e9c2:	f89d 1019 	ldrb.w	r1, [sp, #25]
    if (!num) {
 800e9c6:	2900      	cmp	r1, #0
 800e9c8:	f000 81a2 	beq.w	800ed10 <processMarkers+0xa68>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9cc:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800e9ce:	807b      	strh	r3, [r7, #2]
      j = (uint8)(j + num);
 800e9d0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800e9d2:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9d6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800e9d8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9da:	1e59      	subs	r1, r3, #1
 800e9dc:	8479      	strh	r1, [r7, #34]	; 0x22
    code <<= 1;
 800e9de:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800e9e0:	f89d 101a 	ldrb.w	r1, [sp, #26]
    code <<= 1;
 800e9e4:	b29b      	uxth	r3, r3
    if (!num) {
 800e9e6:	2900      	cmp	r1, #0
 800e9e8:	f000 818b 	beq.w	800ed02 <processMarkers+0xa5a>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9ec:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800e9ee:	80bb      	strh	r3, [r7, #4]
      j = (uint8)(j + num);
 800e9f0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800e9f2:	f887 2042 	strb.w	r2, [r7, #66]	; 0x42
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9f6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800e9f8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800e9fa:	1e59      	subs	r1, r3, #1
 800e9fc:	84b9      	strh	r1, [r7, #36]	; 0x24
    code <<= 1;
 800e9fe:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800ea00:	f89d 101b 	ldrb.w	r1, [sp, #27]
    code <<= 1;
 800ea04:	b29b      	uxth	r3, r3
    if (!num) {
 800ea06:	2900      	cmp	r1, #0
 800ea08:	f000 8174 	beq.w	800ecf4 <processMarkers+0xa4c>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea0c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800ea0e:	80fb      	strh	r3, [r7, #6]
      j = (uint8)(j + num);
 800ea10:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800ea12:	f887 2043 	strb.w	r2, [r7, #67]	; 0x43
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea16:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800ea18:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea1a:	1e59      	subs	r1, r3, #1
 800ea1c:	84f9      	strh	r1, [r7, #38]	; 0x26
    code <<= 1;
 800ea1e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800ea20:	f89d 101c 	ldrb.w	r1, [sp, #28]
    code <<= 1;
 800ea24:	b29b      	uxth	r3, r3
    if (!num) {
 800ea26:	2900      	cmp	r1, #0
 800ea28:	f000 815d 	beq.w	800ece6 <processMarkers+0xa3e>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea2c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800ea2e:	813b      	strh	r3, [r7, #8]
      j = (uint8)(j + num);
 800ea30:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800ea32:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea36:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800ea38:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea3a:	1e59      	subs	r1, r3, #1
 800ea3c:	8539      	strh	r1, [r7, #40]	; 0x28
    code <<= 1;
 800ea3e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800ea40:	f89d 101d 	ldrb.w	r1, [sp, #29]
    code <<= 1;
 800ea44:	b29b      	uxth	r3, r3
    if (!num) {
 800ea46:	2900      	cmp	r1, #0
 800ea48:	f000 8146 	beq.w	800ecd8 <processMarkers+0xa30>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea4c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800ea4e:	817b      	strh	r3, [r7, #10]
      j = (uint8)(j + num);
 800ea50:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800ea52:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea56:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800ea58:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea5a:	1e59      	subs	r1, r3, #1
 800ea5c:	8579      	strh	r1, [r7, #42]	; 0x2a
    code <<= 1;
 800ea5e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800ea60:	f89d 101e 	ldrb.w	r1, [sp, #30]
    code <<= 1;
 800ea64:	b29b      	uxth	r3, r3
    if (!num) {
 800ea66:	2900      	cmp	r1, #0
 800ea68:	f000 812f 	beq.w	800ecca <processMarkers+0xa22>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea6c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800ea6e:	81bb      	strh	r3, [r7, #12]
      j = (uint8)(j + num);
 800ea70:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800ea72:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea76:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800ea78:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea7a:	1e59      	subs	r1, r3, #1
 800ea7c:	85b9      	strh	r1, [r7, #44]	; 0x2c
    code <<= 1;
 800ea7e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800ea80:	f89d 101f 	ldrb.w	r1, [sp, #31]
    code <<= 1;
 800ea84:	b29b      	uxth	r3, r3
    if (!num) {
 800ea86:	2900      	cmp	r1, #0
 800ea88:	f000 8118 	beq.w	800ecbc <processMarkers+0xa14>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea8c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800ea8e:	81fb      	strh	r3, [r7, #14]
      j = (uint8)(j + num);
 800ea90:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800ea92:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea96:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800ea98:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ea9a:	1e59      	subs	r1, r3, #1
 800ea9c:	85f9      	strh	r1, [r7, #46]	; 0x2e
    code <<= 1;
 800ea9e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800eaa0:	f89d 1020 	ldrb.w	r1, [sp, #32]
    code <<= 1;
 800eaa4:	b29b      	uxth	r3, r3
    if (!num) {
 800eaa6:	2900      	cmp	r1, #0
 800eaa8:	f000 8101 	beq.w	800ecae <processMarkers+0xa06>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eaac:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800eaae:	823b      	strh	r3, [r7, #16]
      j = (uint8)(j + num);
 800eab0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800eab2:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eab6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800eab8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eaba:	1e59      	subs	r1, r3, #1
 800eabc:	8639      	strh	r1, [r7, #48]	; 0x30
    code <<= 1;
 800eabe:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800eac0:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    code <<= 1;
 800eac4:	b29b      	uxth	r3, r3
    if (!num) {
 800eac6:	2900      	cmp	r1, #0
 800eac8:	f000 80ea 	beq.w	800eca0 <processMarkers+0x9f8>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eacc:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800eace:	827b      	strh	r3, [r7, #18]
      j = (uint8)(j + num);
 800ead0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800ead2:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ead6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800ead8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eada:	1e59      	subs	r1, r3, #1
 800eadc:	8679      	strh	r1, [r7, #50]	; 0x32
    code <<= 1;
 800eade:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800eae0:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    code <<= 1;
 800eae4:	b29b      	uxth	r3, r3
    if (!num) {
 800eae6:	2900      	cmp	r1, #0
 800eae8:	f000 80d3 	beq.w	800ec92 <processMarkers+0x9ea>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eaec:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800eaee:	82bb      	strh	r3, [r7, #20]
      j = (uint8)(j + num);
 800eaf0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800eaf2:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eaf6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800eaf8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eafa:	1e59      	subs	r1, r3, #1
 800eafc:	86b9      	strh	r1, [r7, #52]	; 0x34
    code <<= 1;
 800eafe:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800eb00:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
    code <<= 1;
 800eb04:	b29b      	uxth	r3, r3
    if (!num) {
 800eb06:	2900      	cmp	r1, #0
 800eb08:	f000 80bc 	beq.w	800ec84 <processMarkers+0x9dc>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb0c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800eb0e:	82fb      	strh	r3, [r7, #22]
      j = (uint8)(j + num);
 800eb10:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800eb12:	f887 204b 	strb.w	r2, [r7, #75]	; 0x4b
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb16:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800eb18:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb1a:	1e59      	subs	r1, r3, #1
 800eb1c:	86f9      	strh	r1, [r7, #54]	; 0x36
    code <<= 1;
 800eb1e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800eb20:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    code <<= 1;
 800eb24:	b29b      	uxth	r3, r3
    if (!num) {
 800eb26:	2900      	cmp	r1, #0
 800eb28:	f000 80a5 	beq.w	800ec76 <processMarkers+0x9ce>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb2c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800eb2e:	833b      	strh	r3, [r7, #24]
      j = (uint8)(j + num);
 800eb30:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800eb32:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb36:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800eb38:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb3a:	1e59      	subs	r1, r3, #1
 800eb3c:	8739      	strh	r1, [r7, #56]	; 0x38
    code <<= 1;
 800eb3e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800eb40:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    code <<= 1;
 800eb44:	b29b      	uxth	r3, r3
    if (!num) {
 800eb46:	2900      	cmp	r1, #0
 800eb48:	f000 808e 	beq.w	800ec68 <processMarkers+0x9c0>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb4c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800eb4e:	837b      	strh	r3, [r7, #26]
      j = (uint8)(j + num);
 800eb50:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800eb52:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb56:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800eb58:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb5a:	1e59      	subs	r1, r3, #1
 800eb5c:	8779      	strh	r1, [r7, #58]	; 0x3a
    code <<= 1;
 800eb5e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800eb60:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    code <<= 1;
 800eb64:	b29b      	uxth	r3, r3
    if (!num) {
 800eb66:	2900      	cmp	r1, #0
 800eb68:	d077      	beq.n	800ec5a <processMarkers+0x9b2>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb6a:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800eb6c:	83bb      	strh	r3, [r7, #28]
      j = (uint8)(j + num);
 800eb6e:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800eb70:	f887 204e 	strb.w	r2, [r7, #78]	; 0x4e
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb74:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800eb76:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800eb78:	1e59      	subs	r1, r3, #1
 800eb7a:	87b9      	strh	r1, [r7, #60]	; 0x3c
    uint8 num = pBits[i];
 800eb7c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    if (!num) {
 800eb80:	2900      	cmp	r1, #0
 800eb82:	d161      	bne.n	800ec48 <processMarkers+0x9a0>
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800eb84:	f64f 73ff 	movw	r3, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800eb88:	83f9      	strh	r1, [r7, #30]
      pHuffTable->mValPtr[i] = 0;
 800eb8a:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800eb8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  while (left) {
 800eb90:	9b02      	ldr	r3, [sp, #8]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f43f ac3b 	beq.w	800e40e <processMarkers+0x166>
  if (gBitsLeft < numBits) {
 800eb98:	f899 3000 	ldrb.w	r3, [r9]
 800eb9c:	f8bb 4000 	ldrh.w	r4, [fp]
 800eba0:	2b07      	cmp	r3, #7
 800eba2:	f63f adee 	bhi.w	800e782 <processMarkers+0x4da>
    gBitBuf <<= gBitsLeft;
 800eba6:	fa04 f203 	lsl.w	r2, r4, r3
  if (!gInBufLeft) {
 800ebaa:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800ebae:	b292      	uxth	r2, r2
 800ebb0:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800ebb4:	b9c1      	cbnz	r1, 800ebe8 <processMarkers+0x940>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ebb6:	4b16      	ldr	r3, [pc, #88]	; (800ec10 <processMarkers+0x968>)
  gInBufOfs = 4;
 800ebb8:	2604      	movs	r6, #4
 800ebba:	4f16      	ldr	r7, [pc, #88]	; (800ec14 <processMarkers+0x96c>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ebbc:	4652      	mov	r2, sl
 800ebbe:	681d      	ldr	r5, [r3, #0]
 800ebc0:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <processMarkers+0x970>)
  gInBufLeft = 0;
 800ebc2:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ebc6:	21fc      	movs	r1, #252	; 0xfc
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4814      	ldr	r0, [pc, #80]	; (800ec1c <processMarkers+0x974>)
  gInBufOfs = 4;
 800ebcc:	703e      	strb	r6, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ebce:	47a8      	blx	r5
  if (status) {
 800ebd0:	b108      	cbz	r0, 800ebd6 <processMarkers+0x92e>
    gCallbackStatus = status;
 800ebd2:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <processMarkers+0x978>)
 800ebd4:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ebd6:	f89a 1000 	ldrb.w	r1, [sl]
 800ebda:	2900      	cmp	r1, #0
 800ebdc:	f000 80b7 	beq.w	800ed4e <processMarkers+0xaa6>
 800ebe0:	f8bb 2000 	ldrh.w	r2, [fp]
 800ebe4:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800ebe8:	4e0a      	ldr	r6, [pc, #40]	; (800ec14 <processMarkers+0x96c>)
  gInBufLeft--;
 800ebea:	3901      	subs	r1, #1
 800ebec:	4f0d      	ldr	r7, [pc, #52]	; (800ec24 <processMarkers+0x97c>)
  return gInBuf[gInBufOfs++];
 800ebee:	7830      	ldrb	r0, [r6, #0]
  gInBufLeft--;
 800ebf0:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800ebf4:	1c45      	adds	r5, r0, #1
 800ebf6:	f817 8000 	ldrb.w	r8, [r7, r0]
 800ebfa:	7035      	strb	r5, [r6, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800ebfc:	ea48 0802 	orr.w	r8, r8, r2
 800ec00:	f1c3 0208 	rsb	r2, r3, #8
 800ec04:	fa08 f802 	lsl.w	r8, r8, r2
 800ec08:	fa1f f888 	uxth.w	r8, r8
 800ec0c:	e5c1      	b.n	800e792 <processMarkers+0x4ea>
 800ec0e:	bf00      	nop
 800ec10:	20004a94 	.word	0x20004a94
 800ec14:	20004665 	.word	0x20004665
 800ec18:	20004a90 	.word	0x20004a90
 800ec1c:	20004568 	.word	0x20004568
 800ec20:	2000415d 	.word	0x2000415d
 800ec24:	20004564 	.word	0x20004564
      gTemFlag = ~gTemFlag;
 800ec28:	4856      	ldr	r0, [pc, #344]	; (800ed84 <processMarkers+0xadc>)
 800ec2a:	f8bb 2000 	ldrh.w	r2, [fp]
 800ec2e:	7801      	ldrb	r1, [r0, #0]
 800ec30:	f899 3000 	ldrb.w	r3, [r9]
 800ec34:	43c9      	mvns	r1, r1
 800ec36:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800ec38:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800ec3a:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800ec3c:	bf14      	ite	ne
 800ec3e:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800ec42:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800ec46:	e699      	b.n	800e97c <processMarkers+0x6d4>
    code <<= 1;
 800ec48:	005b      	lsls	r3, r3, #1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ec4a:	3901      	subs	r1, #1
      pHuffTable->mValPtr[i] = j;
 800ec4c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
    code <<= 1;
 800ec50:	b29b      	uxth	r3, r3
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ec52:	185a      	adds	r2, r3, r1
      pHuffTable->mMinCode[i] = code;
 800ec54:	83fb      	strh	r3, [r7, #30]
      pHuffTable->mMaxCode[i] = code + num - 1;
 800ec56:	87fa      	strh	r2, [r7, #62]	; 0x3e
 800ec58:	e79a      	b.n	800eb90 <processMarkers+0x8e8>
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ec5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ec5e:	83b9      	strh	r1, [r7, #28]
      pHuffTable->mValPtr[i] = 0;
 800ec60:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ec64:	87b8      	strh	r0, [r7, #60]	; 0x3c
 800ec66:	e789      	b.n	800eb7c <processMarkers+0x8d4>
 800ec68:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ec6c:	8379      	strh	r1, [r7, #26]
      pHuffTable->mValPtr[i] = 0;
 800ec6e:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ec72:	8778      	strh	r0, [r7, #58]	; 0x3a
 800ec74:	e773      	b.n	800eb5e <processMarkers+0x8b6>
 800ec76:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ec7a:	8339      	strh	r1, [r7, #24]
      pHuffTable->mValPtr[i] = 0;
 800ec7c:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ec80:	8738      	strh	r0, [r7, #56]	; 0x38
 800ec82:	e75c      	b.n	800eb3e <processMarkers+0x896>
 800ec84:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ec88:	82f9      	strh	r1, [r7, #22]
      pHuffTable->mValPtr[i] = 0;
 800ec8a:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ec8e:	86f8      	strh	r0, [r7, #54]	; 0x36
 800ec90:	e745      	b.n	800eb1e <processMarkers+0x876>
 800ec92:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ec96:	82b9      	strh	r1, [r7, #20]
      pHuffTable->mValPtr[i] = 0;
 800ec98:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ec9c:	86b8      	strh	r0, [r7, #52]	; 0x34
 800ec9e:	e72e      	b.n	800eafe <processMarkers+0x856>
 800eca0:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800eca4:	8279      	strh	r1, [r7, #18]
      pHuffTable->mValPtr[i] = 0;
 800eca6:	f887 1049 	strb.w	r1, [r7, #73]	; 0x49
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ecaa:	8678      	strh	r0, [r7, #50]	; 0x32
 800ecac:	e717      	b.n	800eade <processMarkers+0x836>
 800ecae:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ecb2:	8239      	strh	r1, [r7, #16]
      pHuffTable->mValPtr[i] = 0;
 800ecb4:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ecb8:	8638      	strh	r0, [r7, #48]	; 0x30
 800ecba:	e700      	b.n	800eabe <processMarkers+0x816>
 800ecbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ecc0:	81f9      	strh	r1, [r7, #14]
      pHuffTable->mValPtr[i] = 0;
 800ecc2:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ecc6:	85f8      	strh	r0, [r7, #46]	; 0x2e
 800ecc8:	e6e9      	b.n	800ea9e <processMarkers+0x7f6>
 800ecca:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ecce:	81b9      	strh	r1, [r7, #12]
      pHuffTable->mValPtr[i] = 0;
 800ecd0:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ecd4:	85b8      	strh	r0, [r7, #44]	; 0x2c
 800ecd6:	e6d2      	b.n	800ea7e <processMarkers+0x7d6>
 800ecd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ecdc:	8179      	strh	r1, [r7, #10]
      pHuffTable->mValPtr[i] = 0;
 800ecde:	f887 1045 	strb.w	r1, [r7, #69]	; 0x45
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ece2:	8578      	strh	r0, [r7, #42]	; 0x2a
 800ece4:	e6bb      	b.n	800ea5e <processMarkers+0x7b6>
 800ece6:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ecea:	8139      	strh	r1, [r7, #8]
      pHuffTable->mValPtr[i] = 0;
 800ecec:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ecf0:	8538      	strh	r0, [r7, #40]	; 0x28
 800ecf2:	e6a4      	b.n	800ea3e <processMarkers+0x796>
 800ecf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ecf8:	80f9      	strh	r1, [r7, #6]
      pHuffTable->mValPtr[i] = 0;
 800ecfa:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ecfe:	84f8      	strh	r0, [r7, #38]	; 0x26
 800ed00:	e68d      	b.n	800ea1e <processMarkers+0x776>
 800ed02:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ed06:	80b9      	strh	r1, [r7, #4]
      pHuffTable->mValPtr[i] = 0;
 800ed08:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ed0c:	84b8      	strh	r0, [r7, #36]	; 0x24
 800ed0e:	e676      	b.n	800e9fe <processMarkers+0x756>
 800ed10:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800ed14:	8079      	strh	r1, [r7, #2]
      pHuffTable->mValPtr[i] = 0;
 800ed16:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ed1a:	8478      	strh	r0, [r7, #34]	; 0x22
 800ed1c:	e65f      	b.n	800e9de <processMarkers+0x736>
 800ed1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
      pHuffTable->mValPtr[i] = 0;
 800ed22:	4613      	mov	r3, r2
      pHuffTable->mMinCode[i] = 0x0000;
 800ed24:	803a      	strh	r2, [r7, #0]
      pHuffTable->mValPtr[i] = 0;
 800ed26:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800ed2a:	8439      	strh	r1, [r7, #32]
 800ed2c:	e649      	b.n	800e9c2 <processMarkers+0x71a>
      gTemFlag = ~gTemFlag;
 800ed2e:	4815      	ldr	r0, [pc, #84]	; (800ed84 <processMarkers+0xadc>)
 800ed30:	f8bb 2000 	ldrh.w	r2, [fp]
 800ed34:	7801      	ldrb	r1, [r0, #0]
 800ed36:	f899 3000 	ldrb.w	r3, [r9]
 800ed3a:	43c9      	mvns	r1, r1
 800ed3c:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800ed3e:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800ed40:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800ed42:	bf0c      	ite	eq
 800ed44:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800ed48:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800ed4c:	e4ec      	b.n	800e728 <processMarkers+0x480>
      gTemFlag = ~gTemFlag;
 800ed4e:	480d      	ldr	r0, [pc, #52]	; (800ed84 <processMarkers+0xadc>)
 800ed50:	f8bb 2000 	ldrh.w	r2, [fp]
 800ed54:	7801      	ldrb	r1, [r0, #0]
 800ed56:	f899 3000 	ldrb.w	r3, [r9]
 800ed5a:	43c9      	mvns	r1, r1
 800ed5c:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800ed5e:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800ed60:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800ed62:	bf0c      	ite	eq
 800ed64:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800ed68:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800ed6c:	e746      	b.n	800ebfc <processMarkers+0x954>
  return getBits(numBits, 0);
 800ed6e:	f7ff f935 	bl	800dfdc <getBits.constprop.4>
  gRestartInterval = getBits1(16);
 800ed72:	4b05      	ldr	r3, [pc, #20]	; (800ed88 <processMarkers+0xae0>)
 800ed74:	f8bb 8000 	ldrh.w	r8, [fp]
 800ed78:	8018      	strh	r0, [r3, #0]
 800ed7a:	f899 3000 	ldrb.w	r3, [r9]
 800ed7e:	f7ff baa1 	b.w	800e2c4 <processMarkers+0x1c>
 800ed82:	bf00      	nop
 800ed84:	20004a8b 	.word	0x20004a8b
 800ed88:	20004a86 	.word	0x20004a86

0800ed8c <getBits>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (numBits > 8) {
 800ed90:	2808      	cmp	r0, #8
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800ed92:	b085      	sub	sp, #20
  uint16 ret = gBitBuf;
 800ed94:	f8df 8314 	ldr.w	r8, [pc, #788]	; 800f0ac <getBits+0x320>
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800ed98:	4604      	mov	r4, r0
 800ed9a:	f8df a314 	ldr.w	sl, [pc, #788]	; 800f0b0 <getBits+0x324>
 800ed9e:	9101      	str	r1, [sp, #4]
  uint16 ret = gBitBuf;
 800eda0:	f8b8 5000 	ldrh.w	r5, [r8]
 800eda4:	f89a 2000 	ldrb.w	r2, [sl]
  if (numBits > 8) {
 800eda8:	d812      	bhi.n	800edd0 <getBits+0x44>
 800edaa:	4606      	mov	r6, r0
 800edac:	462b      	mov	r3, r5
  if (gBitsLeft < numBits) {
 800edae:	4296      	cmp	r6, r2
 800edb0:	f200 808a 	bhi.w	800eec8 <getBits+0x13c>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800edb4:	1b92      	subs	r2, r2, r6
    gBitBuf <<= numBits;
 800edb6:	fa03 f606 	lsl.w	r6, r3, r6
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800edba:	f88a 2000 	strb.w	r2, [sl]
    gBitBuf <<= numBits;
 800edbe:	f8a8 6000 	strh.w	r6, [r8]
  return ret >> (16 - origBits);
 800edc2:	f1c4 0010 	rsb	r0, r4, #16
 800edc6:	4105      	asrs	r5, r0
 800edc8:	b2a8      	uxth	r0, r5
}
 800edca:	b005      	add	sp, #20
 800edcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800edd0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800f0a4 <getBits+0x318>
    numBits -= 8;
 800edd4:	f1a0 0608 	sub.w	r6, r0, #8
    gBitBuf <<= gBitsLeft;
 800edd8:	fa05 f302 	lsl.w	r3, r5, r2
  if (!gInBufLeft) {
 800eddc:	f899 0000 	ldrb.w	r0, [r9]
    numBits -= 8;
 800ede0:	b2f6      	uxtb	r6, r6
    gBitBuf <<= gBitsLeft;
 800ede2:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f040 814a 	bne.w	800f080 <getBits+0x2f4>
  gInBufOfs = 4;
 800edec:	4fa8      	ldr	r7, [pc, #672]	; (800f090 <getBits+0x304>)
 800edee:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800edf2:	4ba8      	ldr	r3, [pc, #672]	; (800f094 <getBits+0x308>)
 800edf4:	464a      	mov	r2, r9
 800edf6:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800f0b4 <getBits+0x328>
 800edfa:	21fc      	movs	r1, #252	; 0xfc
 800edfc:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800edfe:	9700      	str	r7, [sp, #0]
  gInBufLeft = 0;
 800ee00:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800ee04:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	48a3      	ldr	r0, [pc, #652]	; (800f098 <getBits+0x30c>)
 800ee0c:	f8db 7000 	ldr.w	r7, [fp]
 800ee10:	47b8      	blx	r7
  if (status) {
 800ee12:	b108      	cbz	r0, 800ee18 <getBits+0x8c>
    gCallbackStatus = status;
 800ee14:	4ba1      	ldr	r3, [pc, #644]	; (800f09c <getBits+0x310>)
 800ee16:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ee18:	f899 0000 	ldrb.w	r0, [r9]
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	f000 80c9 	beq.w	800efb4 <getBits+0x228>
  return gInBuf[gInBufOfs++];
 800ee22:	9f00      	ldr	r7, [sp, #0]
  gInBufLeft--;
 800ee24:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800ee26:	499e      	ldr	r1, [pc, #632]	; (800f0a0 <getBits+0x314>)
 800ee28:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800ee2a:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800ee2c:	9103      	str	r1, [sp, #12]
 800ee2e:	1c5a      	adds	r2, r3, #1
 800ee30:	5ccb      	ldrb	r3, [r1, r3]
  gInBufLeft--;
 800ee32:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800ee36:	b2d2      	uxtb	r2, r2
  if ((FFCheck) && (c == 0xFF)) {
 800ee38:	2bff      	cmp	r3, #255	; 0xff
 800ee3a:	b299      	uxth	r1, r3
  return gInBuf[gInBufOfs++];
 800ee3c:	703a      	strb	r2, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800ee3e:	d12f      	bne.n	800eea0 <getBits+0x114>
 800ee40:	9b01      	ldr	r3, [sp, #4]
 800ee42:	07db      	lsls	r3, r3, #31
 800ee44:	d52c      	bpl.n	800eea0 <getBits+0x114>
  if (!gInBufLeft) {
 800ee46:	b9d8      	cbnz	r0, 800ee80 <getBits+0xf4>
 800ee48:	4b92      	ldr	r3, [pc, #584]	; (800f094 <getBits+0x308>)
 800ee4a:	f8df b268 	ldr.w	fp, [pc, #616]	; 800f0b4 <getBits+0x328>
 800ee4e:	9302      	str	r3, [sp, #8]
  gInBufLeft = 0;
 800ee50:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800ee52:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee56:	f8db b000 	ldr.w	fp, [fp]
 800ee5a:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800ee5c:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a90      	ldr	r2, [pc, #576]	; (800f0a4 <getBits+0x318>)
 800ee64:	488c      	ldr	r0, [pc, #560]	; (800f098 <getBits+0x30c>)
  gInBufOfs = 4;
 800ee66:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee6a:	47d8      	blx	fp
  if (status) {
 800ee6c:	b108      	cbz	r0, 800ee72 <getBits+0xe6>
    gCallbackStatus = status;
 800ee6e:	4b8b      	ldr	r3, [pc, #556]	; (800f09c <getBits+0x310>)
 800ee70:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ee72:	f899 0000 	ldrb.w	r0, [r9]
 800ee76:	2800      	cmp	r0, #0
 800ee78:	f000 80c6 	beq.w	800f008 <getBits+0x27c>
 800ee7c:	9b00      	ldr	r3, [sp, #0]
 800ee7e:	781a      	ldrb	r2, [r3, #0]
  gInBufLeft--;
 800ee80:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800ee82:	9b03      	ldr	r3, [sp, #12]
 800ee84:	f102 0c01 	add.w	ip, r2, #1
 800ee88:	5c99      	ldrb	r1, [r3, r2]
  gInBufLeft--;
 800ee8a:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800ee8c:	fa5f f28c 	uxtb.w	r2, ip
 800ee90:	9800      	ldr	r0, [sp, #0]
  gInBufLeft--;
 800ee92:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800ee96:	7002      	strb	r2, [r0, #0]
    if (n) {
 800ee98:	2900      	cmp	r1, #0
 800ee9a:	f040 80c2 	bne.w	800f022 <getBits+0x296>
 800ee9e:	21ff      	movs	r1, #255	; 0xff
    gBitBuf <<= (8 - gBitsLeft);
 800eea0:	f89a 2000 	ldrb.w	r2, [sl]
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800eea4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
    gBitBuf |= getOctet(FFCheck);
 800eea8:	f8b8 3000 	ldrh.w	r3, [r8]
    gBitBuf <<= (8 - gBitsLeft);
 800eeac:	f1c2 0008 	rsb	r0, r2, #8
  if (gBitsLeft < numBits) {
 800eeb0:	4296      	cmp	r6, r2
    gBitBuf <<= (8 - gBitsLeft);
 800eeb2:	ea43 0301 	orr.w	r3, r3, r1
 800eeb6:	fa03 f300 	lsl.w	r3, r3, r0
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800eeba:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	ea45 0500 	orr.w	r5, r5, r0
  if (gBitsLeft < numBits) {
 800eec4:	f67f af76 	bls.w	800edb4 <getBits+0x28>
  if (!gInBufLeft) {
 800eec8:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800f0a4 <getBits+0x318>
    gBitBuf <<= gBitsLeft;
 800eecc:	4093      	lsls	r3, r2
  if (!gInBufLeft) {
 800eece:	f899 0000 	ldrb.w	r0, [r9]
    gBitBuf <<= gBitsLeft;
 800eed2:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800eed6:	2800      	cmp	r0, #0
 800eed8:	f040 80d5 	bne.w	800f086 <getBits+0x2fa>
  gInBufOfs = 4;
 800eedc:	4f6c      	ldr	r7, [pc, #432]	; (800f090 <getBits+0x304>)
 800eede:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eee2:	4b6c      	ldr	r3, [pc, #432]	; (800f094 <getBits+0x308>)
 800eee4:	464a      	mov	r2, r9
 800eee6:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 800f0b4 <getBits+0x328>
 800eeea:	21fc      	movs	r1, #252	; 0xfc
 800eeec:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800eeee:	9700      	str	r7, [sp, #0]
  gInBufLeft = 0;
 800eef0:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800eef4:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4867      	ldr	r0, [pc, #412]	; (800f098 <getBits+0x30c>)
 800eefc:	f8db 7000 	ldr.w	r7, [fp]
 800ef00:	47b8      	blx	r7
  if (status) {
 800ef02:	b108      	cbz	r0, 800ef08 <getBits+0x17c>
    gCallbackStatus = status;
 800ef04:	4b65      	ldr	r3, [pc, #404]	; (800f09c <getBits+0x310>)
 800ef06:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ef08:	f899 0000 	ldrb.w	r0, [r9]
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d059      	beq.n	800efc4 <getBits+0x238>
  return gInBuf[gInBufOfs++];
 800ef10:	9f00      	ldr	r7, [sp, #0]
  gInBufLeft--;
 800ef12:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800ef14:	4a62      	ldr	r2, [pc, #392]	; (800f0a0 <getBits+0x314>)
 800ef16:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800ef18:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800ef1a:	9203      	str	r2, [sp, #12]
 800ef1c:	1c59      	adds	r1, r3, #1
 800ef1e:	5cd3      	ldrb	r3, [r2, r3]
  gInBufLeft--;
 800ef20:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800ef24:	b2c9      	uxtb	r1, r1
  if ((FFCheck) && (c == 0xFF)) {
 800ef26:	2bff      	cmp	r3, #255	; 0xff
 800ef28:	fa1f fc83 	uxth.w	ip, r3
  return gInBuf[gInBufOfs++];
 800ef2c:	7039      	strb	r1, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800ef2e:	d152      	bne.n	800efd6 <getBits+0x24a>
 800ef30:	9b01      	ldr	r3, [sp, #4]
 800ef32:	07db      	lsls	r3, r3, #31
 800ef34:	d54f      	bpl.n	800efd6 <getBits+0x24a>
  if (!gInBufLeft) {
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f040 808e 	bne.w	800f058 <getBits+0x2cc>
 800ef3c:	4b55      	ldr	r3, [pc, #340]	; (800f094 <getBits+0x308>)
 800ef3e:	f8df b174 	ldr.w	fp, [pc, #372]	; 800f0b4 <getBits+0x328>
 800ef42:	9302      	str	r3, [sp, #8]
  gInBufLeft = 0;
 800ef44:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800ef46:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ef4a:	f8db b000 	ldr.w	fp, [fp]
 800ef4e:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800ef50:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4a53      	ldr	r2, [pc, #332]	; (800f0a4 <getBits+0x318>)
 800ef58:	484f      	ldr	r0, [pc, #316]	; (800f098 <getBits+0x30c>)
  gInBufOfs = 4;
 800ef5a:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ef5e:	47d8      	blx	fp
  if (status) {
 800ef60:	b108      	cbz	r0, 800ef66 <getBits+0x1da>
    gCallbackStatus = status;
 800ef62:	4b4e      	ldr	r3, [pc, #312]	; (800f09c <getBits+0x310>)
 800ef64:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ef66:	f899 0000 	ldrb.w	r0, [r9]
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d172      	bne.n	800f054 <getBits+0x2c8>
      gTemFlag = ~gTemFlag;
 800ef6e:	f8df c138 	ldr.w	ip, [pc, #312]	; 800f0a8 <getBits+0x31c>
 800ef72:	9b00      	ldr	r3, [sp, #0]
 800ef74:	781a      	ldrb	r2, [r3, #0]
 800ef76:	f89c 3000 	ldrb.w	r3, [ip]
 800ef7a:	43d9      	mvns	r1, r3
 800ef7c:	b2cb      	uxtb	r3, r1
 800ef7e:	f88c 3000 	strb.w	r3, [ip]
      return gTemFlag ? 0xFF : 0xD9;
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f000 8082 	beq.w	800f08c <getBits+0x300>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	21ff      	movs	r1, #255	; 0xff
  gInBufOfs--;
 800ef8c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800ef90:	3a02      	subs	r2, #2
  gInBufLeft++;
 800ef92:	1c98      	adds	r0, r3, #2
  gInBuf[gInBufOfs] = i;
 800ef94:	f04f 0eff 	mov.w	lr, #255	; 0xff
  gInBufOfs--;
 800ef98:	b2d3      	uxtb	r3, r2
  gInBuf[gInBufOfs] = i;
 800ef9a:	9a03      	ldr	r2, [sp, #12]
 800ef9c:	fa5f fc8c 	uxtb.w	ip, ip
  gInBufLeft++;
 800efa0:	f889 0000 	strb.w	r0, [r9]
  gInBuf[gInBufOfs] = i;
 800efa4:	f802 100c 	strb.w	r1, [r2, ip]
  gInBufLeft++;
 800efa8:	46f4      	mov	ip, lr
  gInBufOfs--;
 800efaa:	9900      	ldr	r1, [sp, #0]
  gInBuf[gInBufOfs] = i;
 800efac:	f802 e003 	strb.w	lr, [r2, r3]
  gInBufOfs--;
 800efb0:	700b      	strb	r3, [r1, #0]
 800efb2:	e010      	b.n	800efd6 <getBits+0x24a>
      gTemFlag = ~gTemFlag;
 800efb4:	4a3c      	ldr	r2, [pc, #240]	; (800f0a8 <getBits+0x31c>)
 800efb6:	7813      	ldrb	r3, [r2, #0]
 800efb8:	43db      	mvns	r3, r3
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800efbe:	b9d3      	cbnz	r3, 800eff6 <getBits+0x26a>
 800efc0:	21d9      	movs	r1, #217	; 0xd9
 800efc2:	e76d      	b.n	800eea0 <getBits+0x114>
      gTemFlag = ~gTemFlag;
 800efc4:	4a38      	ldr	r2, [pc, #224]	; (800f0a8 <getBits+0x31c>)
 800efc6:	7813      	ldrb	r3, [r2, #0]
 800efc8:	43db      	mvns	r3, r3
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d13b      	bne.n	800f04a <getBits+0x2be>
 800efd2:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
    gBitBuf <<= (numBits - gBitsLeft);
 800efd6:	f89a 3000 	ldrb.w	r3, [sl]
    gBitBuf |= getOctet(FFCheck);
 800efda:	f8b8 2000 	ldrh.w	r2, [r8]
    gBitBuf <<= (numBits - gBitsLeft);
 800efde:	1af1      	subs	r1, r6, r3
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800efe0:	3308      	adds	r3, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800efe2:	ea4c 0202 	orr.w	r2, ip, r2
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800efe6:	1b9e      	subs	r6, r3, r6
    gBitBuf <<= (numBits - gBitsLeft);
 800efe8:	fa02 f301 	lsl.w	r3, r2, r1
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800efec:	f88a 6000 	strb.w	r6, [sl]
    gBitBuf <<= (numBits - gBitsLeft);
 800eff0:	f8a8 3000 	strh.w	r3, [r8]
 800eff4:	e6e5      	b.n	800edc2 <getBits+0x36>
  if ((FFCheck) && (c == 0xFF)) {
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f43f af50 	beq.w	800ee9e <getBits+0x112>
 800effe:	4b28      	ldr	r3, [pc, #160]	; (800f0a0 <getBits+0x314>)
 800f000:	9f00      	ldr	r7, [sp, #0]
 800f002:	9303      	str	r3, [sp, #12]
 800f004:	9b02      	ldr	r3, [sp, #8]
 800f006:	e723      	b.n	800ee50 <getBits+0xc4>
      gTemFlag = ~gTemFlag;
 800f008:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800f0a8 <getBits+0x31c>
 800f00c:	9b00      	ldr	r3, [sp, #0]
 800f00e:	781a      	ldrb	r2, [r3, #0]
 800f010:	f89c 3000 	ldrb.w	r3, [ip]
 800f014:	43d9      	mvns	r1, r3
 800f016:	b2cb      	uxtb	r3, r1
 800f018:	f88c 3000 	strb.w	r3, [ip]
      return gTemFlag ? 0xFF : 0xD9;
 800f01c:	b373      	cbz	r3, 800f07c <getBits+0x2f0>
 800f01e:	4603      	mov	r3, r0
 800f020:	21ff      	movs	r1, #255	; 0xff
  gInBufLeft++;
 800f022:	1c98      	adds	r0, r3, #2
  gInBufOfs--;
 800f024:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800f028:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800f02a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800f02e:	fa5f fe8e 	uxtb.w	lr, lr
  gInBufLeft++;
 800f032:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs--;
 800f036:	b2d3      	uxtb	r3, r2
 800f038:	9800      	ldr	r0, [sp, #0]
  gInBuf[gInBufOfs] = i;
 800f03a:	9a03      	ldr	r2, [sp, #12]
  gInBufOfs--;
 800f03c:	7003      	strb	r3, [r0, #0]
  gInBuf[gInBufOfs] = i;
 800f03e:	f802 100e 	strb.w	r1, [r2, lr]
  gInBufLeft++;
 800f042:	4661      	mov	r1, ip
  gInBuf[gInBufOfs] = i;
 800f044:	f802 c003 	strb.w	ip, [r2, r3]
 800f048:	e72a      	b.n	800eea0 <getBits+0x114>
  if ((FFCheck) && (c == 0xFF)) {
 800f04a:	9b01      	ldr	r3, [sp, #4]
 800f04c:	b98b      	cbnz	r3, 800f072 <getBits+0x2e6>
    if (n) {
 800f04e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800f052:	e7c0      	b.n	800efd6 <getBits+0x24a>
 800f054:	9b00      	ldr	r3, [sp, #0]
 800f056:	7819      	ldrb	r1, [r3, #0]
  gInBufLeft--;
 800f058:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800f05a:	1c4a      	adds	r2, r1, #1
 800f05c:	9b03      	ldr	r3, [sp, #12]
 800f05e:	b2d2      	uxtb	r2, r2
 800f060:	5c59      	ldrb	r1, [r3, r1]
  gInBufLeft--;
 800f062:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800f064:	9800      	ldr	r0, [sp, #0]
  gInBufLeft--;
 800f066:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800f06a:	7002      	strb	r2, [r0, #0]
    if (n) {
 800f06c:	2900      	cmp	r1, #0
 800f06e:	d0ee      	beq.n	800f04e <getBits+0x2c2>
 800f070:	e78c      	b.n	800ef8c <getBits+0x200>
 800f072:	4b0b      	ldr	r3, [pc, #44]	; (800f0a0 <getBits+0x314>)
 800f074:	9f00      	ldr	r7, [sp, #0]
 800f076:	9303      	str	r3, [sp, #12]
 800f078:	9b02      	ldr	r3, [sp, #8]
 800f07a:	e763      	b.n	800ef44 <getBits+0x1b8>
      return gTemFlag ? 0xFF : 0xD9;
 800f07c:	21d9      	movs	r1, #217	; 0xd9
 800f07e:	e7d0      	b.n	800f022 <getBits+0x296>
 800f080:	4b03      	ldr	r3, [pc, #12]	; (800f090 <getBits+0x304>)
 800f082:	9300      	str	r3, [sp, #0]
 800f084:	e6cd      	b.n	800ee22 <getBits+0x96>
 800f086:	4b02      	ldr	r3, [pc, #8]	; (800f090 <getBits+0x304>)
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	e741      	b.n	800ef10 <getBits+0x184>
 800f08c:	21d9      	movs	r1, #217	; 0xd9
 800f08e:	e77d      	b.n	800ef8c <getBits+0x200>
 800f090:	20004665 	.word	0x20004665
 800f094:	20004a90 	.word	0x20004a90
 800f098:	20004568 	.word	0x20004568
 800f09c:	2000415d 	.word	0x2000415d
 800f0a0:	20004564 	.word	0x20004564
 800f0a4:	20004664 	.word	0x20004664
 800f0a8:	20004a8b 	.word	0x20004a8b
 800f0ac:	2000415a 	.word	0x2000415a
 800f0b0:	2000415c 	.word	0x2000415c
 800f0b4:	20004a94 	.word	0x20004a94

0800f0b8 <pjpeg_decode_mcu>:
}

unsigned char pjpeg_decode_mcu(void) {
  uint8 status;

  if (gCallbackStatus)
 800f0b8:	4bb1      	ldr	r3, [pc, #708]	; (800f380 <pjpeg_decode_mcu+0x2c8>)
 800f0ba:	7818      	ldrb	r0, [r3, #0]
 800f0bc:	b920      	cbnz	r0, 800f0c8 <pjpeg_decode_mcu+0x10>
    return gCallbackStatus;

  if (!gNumMCUSRemaining)
 800f0be:	4bb1      	ldr	r3, [pc, #708]	; (800f384 <pjpeg_decode_mcu+0x2cc>)
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	b913      	cbnz	r3, 800f0ca <pjpeg_decode_mcu+0x12>
    return PJPG_NO_MORE_BLOCKS;
 800f0c4:	2001      	movs	r0, #1
 800f0c6:	4770      	bx	lr
    return gCallbackStatus ? gCallbackStatus : status;

  gNumMCUSRemaining--;

  return 0;
}
 800f0c8:	4770      	bx	lr
  if (gRestartInterval) {
 800f0ca:	4aaf      	ldr	r2, [pc, #700]	; (800f388 <pjpeg_decode_mcu+0x2d0>)
 800f0cc:	8812      	ldrh	r2, [r2, #0]
unsigned char pjpeg_decode_mcu(void) {
 800f0ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d2:	b085      	sub	sp, #20
  if (gRestartInterval) {
 800f0d4:	2a00      	cmp	r2, #0
 800f0d6:	f000 851c 	beq.w	800fb12 <pjpeg_decode_mcu+0xa5a>
    if (gRestartsLeft == 0) {
 800f0da:	4bac      	ldr	r3, [pc, #688]	; (800f38c <pjpeg_decode_mcu+0x2d4>)
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f001 8141 	beq.w	8010366 <pjpeg_decode_mcu+0x12ae>
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800f0e4:	4aaa      	ldr	r2, [pc, #680]	; (800f390 <pjpeg_decode_mcu+0x2d8>)
    gRestartsLeft--;
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	49a8      	ldr	r1, [pc, #672]	; (800f38c <pjpeg_decode_mcu+0x2d4>)
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800f0ea:	9203      	str	r2, [sp, #12]
 800f0ec:	7812      	ldrb	r2, [r2, #0]
    gRestartsLeft--;
 800f0ee:	800b      	strh	r3, [r1, #0]
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800f0f0:	2a00      	cmp	r2, #0
 800f0f2:	f000 84db 	beq.w	800faac <pjpeg_decode_mcu+0x9f4>
  if (!gInBufLeft) {
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	9301      	str	r3, [sp, #4]
 800f0fa:	9a01      	ldr	r2, [sp, #4]
 800f0fc:	4ba5      	ldr	r3, [pc, #660]	; (800f394 <pjpeg_decode_mcu+0x2dc>)
 800f0fe:	9302      	str	r3, [sp, #8]
    uint8 compQuant = gCompQuant[componentID];
 800f100:	4ba5      	ldr	r3, [pc, #660]	; (800f398 <pjpeg_decode_mcu+0x2e0>)
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800f102:	48a6      	ldr	r0, [pc, #664]	; (800f39c <pjpeg_decode_mcu+0x2e4>)
    uint8 compQuant = gCompQuant[componentID];
 800f104:	5c9c      	ldrb	r4, [r3, r2]
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800f106:	4ba6      	ldr	r3, [pc, #664]	; (800f3a0 <pjpeg_decode_mcu+0x2e8>)
 800f108:	4aa6      	ldr	r2, [pc, #664]	; (800f3a4 <pjpeg_decode_mcu+0x2ec>)
 800f10a:	5d1e      	ldrb	r6, [r3, r4]
    uint8 compDCTab = gCompDCTab[componentID];
 800f10c:	4ba6      	ldr	r3, [pc, #664]	; (800f3a8 <pjpeg_decode_mcu+0x2f0>)
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800f10e:	2e00      	cmp	r6, #0
 800f110:	bf18      	it	ne
 800f112:	4602      	movne	r2, r0
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800f114:	49a5      	ldr	r1, [pc, #660]	; (800f3ac <pjpeg_decode_mcu+0x2f4>)
    uint8 compDCTab = gCompDCTab[componentID];
 800f116:	5d1b      	ldrb	r3, [r3, r4]
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800f118:	4616      	mov	r6, r2
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800f11a:	4aa5      	ldr	r2, [pc, #660]	; (800f3b0 <pjpeg_decode_mcu+0x2f8>)
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	4ba5      	ldr	r3, [pc, #660]	; (800f3b4 <pjpeg_decode_mcu+0x2fc>)
 800f120:	48a5      	ldr	r0, [pc, #660]	; (800f3b8 <pjpeg_decode_mcu+0x300>)
 800f122:	bf04      	itt	eq
 800f124:	4611      	moveq	r1, r2
 800f126:	4618      	moveq	r0, r3
 800f128:	f7fe fc54 	bl	800d9d4 <huffDecode>
 800f12c:	4605      	mov	r5, r0
    if (numExtraBits)
 800f12e:	f010 000f 	ands.w	r0, r0, #15
 800f132:	f040 84da 	bne.w	800faea <pjpeg_decode_mcu+0xa32>
 800f136:	3d01      	subs	r5, #1
 800f138:	b2ed      	uxtb	r5, r5
 800f13a:	2d0e      	cmp	r5, #14
 800f13c:	f200 83f5 	bhi.w	800f92a <pjpeg_decode_mcu+0x872>
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800f140:	4b9e      	ldr	r3, [pc, #632]	; (800f3bc <pjpeg_decode_mcu+0x304>)
 800f142:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800f146:	4283      	cmp	r3, r0
 800f148:	f240 83ef 	bls.w	800f92a <pjpeg_decode_mcu+0x872>
 800f14c:	4b9c      	ldr	r3, [pc, #624]	; (800f3c0 <pjpeg_decode_mcu+0x308>)
 800f14e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800f152:	4403      	add	r3, r0
 800f154:	b21b      	sxth	r3, r3
    dc = dc + gLastDC[componentID];
 800f156:	9d02      	ldr	r5, [sp, #8]
    gCoeffBuf[0] = dc * pQ[0];
 800f158:	8832      	ldrh	r2, [r6, #0]
    dc = dc + gLastDC[componentID];
 800f15a:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    if (gReduce) {
 800f15e:	4999      	ldr	r1, [pc, #612]	; (800f3c4 <pjpeg_decode_mcu+0x30c>)
    dc = dc + gLastDC[componentID];
 800f160:	fa10 f383 	uxtah	r3, r0, r3
    compACTab = gCompACTab[componentID];
 800f164:	4898      	ldr	r0, [pc, #608]	; (800f3c8 <pjpeg_decode_mcu+0x310>)
    if (gReduce) {
 800f166:	7809      	ldrb	r1, [r1, #0]
    dc = dc + gLastDC[componentID];
 800f168:	b29b      	uxth	r3, r3
    compACTab = gCompACTab[componentID];
 800f16a:	5d00      	ldrb	r0, [r0, r4]
    gCoeffBuf[0] = dc * pQ[0];
 800f16c:	fb12 f203 	smulbb	r2, r2, r3
    gLastDC[componentID] = dc;
 800f170:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    gCoeffBuf[0] = dc * pQ[0];
 800f174:	4b95      	ldr	r3, [pc, #596]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f176:	801a      	strh	r2, [r3, #0]
    if (gReduce) {
 800f178:	2900      	cmp	r1, #0
 800f17a:	d038      	beq.n	800f1ee <pjpeg_decode_mcu+0x136>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	4b94      	ldr	r3, [pc, #592]	; (800f3d0 <pjpeg_decode_mcu+0x318>)
 800f180:	4a94      	ldr	r2, [pc, #592]	; (800f3d4 <pjpeg_decode_mcu+0x31c>)
      for (k = 1; k < 64; k++) {
 800f182:	f04f 0401 	mov.w	r4, #1
 800f186:	bf18      	it	ne
 800f188:	461f      	movne	r7, r3
 800f18a:	4b93      	ldr	r3, [pc, #588]	; (800f3d8 <pjpeg_decode_mcu+0x320>)
 800f18c:	bf08      	it	eq
 800f18e:	4617      	moveq	r7, r2
 800f190:	4a92      	ldr	r2, [pc, #584]	; (800f3dc <pjpeg_decode_mcu+0x324>)
 800f192:	bf14      	ite	ne
 800f194:	461e      	movne	r6, r3
 800f196:	4616      	moveq	r6, r2
 800f198:	e00a      	b.n	800f1b0 <pjpeg_decode_mcu+0xf8>
          if (r == 15) {
 800f19a:	2b0f      	cmp	r3, #15
 800f19c:	f040 83c7 	bne.w	800f92e <pjpeg_decode_mcu+0x876>
            if ((k + 16) > 64)
 800f1a0:	2c30      	cmp	r4, #48	; 0x30
            k += (16 - 1);
 800f1a2:	b2d4      	uxtb	r4, r2
            if ((k + 16) > 64)
 800f1a4:	d81a      	bhi.n	800f1dc <pjpeg_decode_mcu+0x124>
      for (k = 1; k < 64; k++) {
 800f1a6:	3401      	adds	r4, #1
 800f1a8:	b2e4      	uxtb	r4, r4
 800f1aa:	2c3f      	cmp	r4, #63	; 0x3f
 800f1ac:	f200 83bf 	bhi.w	800f92e <pjpeg_decode_mcu+0x876>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f7fe fc0e 	bl	800d9d4 <huffDecode>
 800f1b8:	4605      	mov	r5, r0
          if (r == 15) {
 800f1ba:	f3c0 1307 	ubfx	r3, r0, #4, #8
        if (numExtraBits)
 800f1be:	f010 000f 	ands.w	r0, r0, #15
            k += (16 - 1);
 800f1c2:	f104 020f 	add.w	r2, r4, #15
        if (numExtraBits)
 800f1c6:	d0e8      	beq.n	800f19a <pjpeg_decode_mcu+0xe2>
        r = s >> 4;
 800f1c8:	f3c5 1507 	ubfx	r5, r5, #4, #8
  return getBits(numBits, 1);
 800f1cc:	f7fe fd86 	bl	800dcdc <getBits.constprop.6>
            if ((k + r) > 63)
 800f1d0:	1963      	adds	r3, r4, r5
          if (r) {
 800f1d2:	2d00      	cmp	r5, #0
 800f1d4:	d0e7      	beq.n	800f1a6 <pjpeg_decode_mcu+0xee>
            if ((k + r) > 63)
 800f1d6:	2b3f      	cmp	r3, #63	; 0x3f
            k = (uint8)(k + r);
 800f1d8:	b2dc      	uxtb	r4, r3
            if ((k + r) > 63)
 800f1da:	dde4      	ble.n	800f1a6 <pjpeg_decode_mcu+0xee>
  int16 *pSrc = gCoeffBuf;
 800f1dc:	201c      	movs	r0, #28
    return gCallbackStatus ? gCallbackStatus : status;
 800f1de:	4b68      	ldr	r3, [pc, #416]	; (800f380 <pjpeg_decode_mcu+0x2c8>)
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	bf18      	it	ne
 800f1e6:	4618      	movne	r0, r3
}
 800f1e8:	b005      	add	sp, #20
 800f1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	4b77      	ldr	r3, [pc, #476]	; (800f3d0 <pjpeg_decode_mcu+0x318>)
 800f1f2:	4a78      	ldr	r2, [pc, #480]	; (800f3d4 <pjpeg_decode_mcu+0x31c>)
      for (k = 1; k < 64; k++) {
 800f1f4:	f04f 0401 	mov.w	r4, #1
 800f1f8:	bf18      	it	ne
 800f1fa:	4698      	movne	r8, r3
 800f1fc:	4b76      	ldr	r3, [pc, #472]	; (800f3d8 <pjpeg_decode_mcu+0x320>)
 800f1fe:	bf08      	it	eq
 800f200:	4690      	moveq	r8, r2
 800f202:	4a76      	ldr	r2, [pc, #472]	; (800f3dc <pjpeg_decode_mcu+0x324>)
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800f204:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800f3bc <pjpeg_decode_mcu+0x304>
 800f208:	bf14      	ite	ne
 800f20a:	461f      	movne	r7, r3
 800f20c:	4617      	moveq	r7, r2
 800f20e:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800f3c0 <pjpeg_decode_mcu+0x308>
 800f212:	9600      	str	r6, [sp, #0]
 800f214:	e084      	b.n	800f320 <pjpeg_decode_mcu+0x268>
          if (r == 15) {
 800f216:	f3c0 1b07 	ubfx	fp, r0, #4, #8
 800f21a:	f1bb 0f0f 	cmp.w	fp, #15
 800f21e:	f040 847f 	bne.w	800fb20 <pjpeg_decode_mcu+0xa68>
            if ((k + 16) > 64)
 800f222:	2c30      	cmp	r4, #48	; 0x30
 800f224:	d8da      	bhi.n	800f1dc <pjpeg_decode_mcu+0x124>
              gCoeffBuf[ZAG[k++]] = 0;
 800f226:	496e      	ldr	r1, [pc, #440]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f228:	1c62      	adds	r2, r4, #1
 800f22a:	4e68      	ldr	r6, [pc, #416]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f22c:	1ca3      	adds	r3, r4, #2
 800f22e:	5709      	ldrsb	r1, [r1, r4]
 800f230:	b2d2      	uxtb	r2, r2
 800f232:	f104 0e03 	add.w	lr, r4, #3
 800f236:	f104 0c04 	add.w	ip, r4, #4
 800f23a:	f826 5011 	strh.w	r5, [r6, r1, lsl #1]
 800f23e:	1d60      	adds	r0, r4, #5
 800f240:	4967      	ldr	r1, [pc, #412]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f242:	b2db      	uxtb	r3, r3
 800f244:	fa5f fe8e 	uxtb.w	lr, lr
 800f248:	f104 0b07 	add.w	fp, r4, #7
 800f24c:	460e      	mov	r6, r1
 800f24e:	568a      	ldrsb	r2, [r1, r2]
 800f250:	1da1      	adds	r1, r4, #6
 800f252:	fa5f fc8c 	uxtb.w	ip, ip
 800f256:	b2c0      	uxtb	r0, r0
 800f258:	56f3      	ldrsb	r3, [r6, r3]
 800f25a:	b2c9      	uxtb	r1, r1
 800f25c:	f916 e00e 	ldrsb.w	lr, [r6, lr]
 800f260:	f916 c00c 	ldrsb.w	ip, [r6, ip]
 800f264:	fa5f fb8b 	uxtb.w	fp, fp
 800f268:	5630      	ldrsb	r0, [r6, r0]
 800f26a:	5671      	ldrsb	r1, [r6, r1]
 800f26c:	4e57      	ldr	r6, [pc, #348]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f26e:	f826 5012 	strh.w	r5, [r6, r2, lsl #1]
 800f272:	f104 0208 	add.w	r2, r4, #8
 800f276:	4e5a      	ldr	r6, [pc, #360]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f278:	b2d2      	uxtb	r2, r2
 800f27a:	f916 b00b 	ldrsb.w	fp, [r6, fp]
 800f27e:	4e53      	ldr	r6, [pc, #332]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f280:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
 800f284:	f104 0309 	add.w	r3, r4, #9
 800f288:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800f28c:	4e54      	ldr	r6, [pc, #336]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	f916 e002 	ldrsb.w	lr, [r6, r2]
 800f294:	f104 020a 	add.w	r2, r4, #10
 800f298:	4e4c      	ldr	r6, [pc, #304]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f29a:	b2d2      	uxtb	r2, r2
 800f29c:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 800f2a0:	4e4f      	ldr	r6, [pc, #316]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f2a2:	f916 c003 	ldrsb.w	ip, [r6, r3]
 800f2a6:	f104 030b 	add.w	r3, r4, #11
 800f2aa:	4e48      	ldr	r6, [pc, #288]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
 800f2b2:	4e4b      	ldr	r6, [pc, #300]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f2b4:	56b0      	ldrsb	r0, [r6, r2]
 800f2b6:	f104 020c 	add.w	r2, r4, #12
 800f2ba:	4e44      	ldr	r6, [pc, #272]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f2bc:	b2d2      	uxtb	r2, r2
 800f2be:	f826 5011 	strh.w	r5, [r6, r1, lsl #1]
 800f2c2:	4e47      	ldr	r6, [pc, #284]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f2c4:	56f1      	ldrsb	r1, [r6, r3]
 800f2c6:	f104 030d 	add.w	r3, r4, #13
 800f2ca:	4e40      	ldr	r6, [pc, #256]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f2cc:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800f2d0:	fa5f fb83 	uxtb.w	fp, r3
 800f2d4:	4e42      	ldr	r6, [pc, #264]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f2d6:	f104 030e 	add.w	r3, r4, #14
 800f2da:	340f      	adds	r4, #15
 800f2dc:	56b2      	ldrsb	r2, [r6, r2]
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	4e3a      	ldr	r6, [pc, #232]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f2e2:	b2e4      	uxtb	r4, r4
 800f2e4:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800f2e8:	4e3d      	ldr	r6, [pc, #244]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f2ea:	f916 e00b 	ldrsb.w	lr, [r6, fp]
 800f2ee:	4e37      	ldr	r6, [pc, #220]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f2f0:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 800f2f4:	4e3a      	ldr	r6, [pc, #232]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f2f6:	f916 c003 	ldrsb.w	ip, [r6, r3]
 800f2fa:	4b34      	ldr	r3, [pc, #208]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f2fc:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
 800f300:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
 800f304:	4619      	mov	r1, r3
 800f306:	f823 5012 	strh.w	r5, [r3, r2, lsl #1]
 800f30a:	5733      	ldrsb	r3, [r6, r4]
      for (k = 1; k < 64; k++) {
 800f30c:	3401      	adds	r4, #1
              gCoeffBuf[ZAG[k++]] = 0;
 800f30e:	f821 501e 	strh.w	r5, [r1, lr, lsl #1]
      for (k = 1; k < 64; k++) {
 800f312:	b2e4      	uxtb	r4, r4
              gCoeffBuf[ZAG[k++]] = 0;
 800f314:	f821 501c 	strh.w	r5, [r1, ip, lsl #1]
 800f318:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
      for (k = 1; k < 64; k++) {
 800f31c:	2c3f      	cmp	r4, #63	; 0x3f
 800f31e:	d828      	bhi.n	800f372 <pjpeg_decode_mcu+0x2ba>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800f320:	4641      	mov	r1, r8
 800f322:	4638      	mov	r0, r7
 800f324:	f7fe fb56 	bl	800d9d4 <huffDecode>
        if (numExtraBits)
 800f328:	f010 050f 	ands.w	r5, r0, #15
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800f32c:	4683      	mov	fp, r0
        if (numExtraBits)
 800f32e:	f43f af72 	beq.w	800f216 <pjpeg_decode_mcu+0x15e>
  return getBits(numBits, 1);
 800f332:	4628      	mov	r0, r5
 800f334:	f7fe fcd2 	bl	800dcdc <getBits.constprop.6>
        r = s >> 4;
 800f338:	f3cb 1307 	ubfx	r3, fp, #4, #8
          if (r) {
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f040 82dc 	bne.w	800f8fa <pjpeg_decode_mcu+0x842>
 800f342:	3d01      	subs	r5, #1
 800f344:	b2ed      	uxtb	r5, r5
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800f346:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 800f34a:	4283      	cmp	r3, r0
 800f34c:	bf84      	itt	hi
 800f34e:	f83a 3015 	ldrhhi.w	r3, [sl, r5, lsl #1]
 800f352:	18c0      	addhi	r0, r0, r3
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800f354:	9b00      	ldr	r3, [sp, #0]
 800f356:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800f35a:	b200      	sxth	r0, r0
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800f35c:	4b20      	ldr	r3, [pc, #128]	; (800f3e0 <pjpeg_decode_mcu+0x328>)
 800f35e:	fb12 f000 	smulbb	r0, r2, r0
 800f362:	4a1a      	ldr	r2, [pc, #104]	; (800f3cc <pjpeg_decode_mcu+0x314>)
 800f364:	571b      	ldrsb	r3, [r3, r4]
      for (k = 1; k < 64; k++) {
 800f366:	3401      	adds	r4, #1
 800f368:	b2e4      	uxtb	r4, r4
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800f36a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
      for (k = 1; k < 64; k++) {
 800f36e:	2c3f      	cmp	r4, #63	; 0x3f
 800f370:	d9d6      	bls.n	800f320 <pjpeg_decode_mcu+0x268>
 800f372:	4e1c      	ldr	r6, [pc, #112]	; (800f3e4 <pjpeg_decode_mcu+0x32c>)
  x += 128L;
 800f374:	2780      	movs	r7, #128	; 0x80
  x += 128L;
 800f376:	f44f 7eb5 	mov.w	lr, #362	; 0x16a
 800f37a:	eb06 0c07 	add.w	ip, r6, r7
 800f37e:	e045      	b.n	800f40c <pjpeg_decode_mcu+0x354>
 800f380:	2000415d 	.word	0x2000415d
 800f384:	20004980 	.word	0x20004980
 800f388:	20004a86 	.word	0x20004a86
 800f38c:	20004a88 	.word	0x20004a88
 800f390:	20004976 	.word	0x20004976
 800f394:	20004668 	.word	0x20004668
 800f398:	20004970 	.word	0x20004970
 800f39c:	20004a04 	.word	0x20004a04
 800f3a0:	200041f4 	.word	0x200041f4
 800f3a4:	20004984 	.word	0x20004984
 800f3a8:	200041e4 	.word	0x200041e4
 800f3ac:	20004350 	.word	0x20004350
 800f3b0:	20004340 	.word	0x20004340
 800f3b4:	20004200 	.word	0x20004200
 800f3b8:	20004250 	.word	0x20004250
 800f3bc:	0801ce18 	.word	0x0801ce18
 800f3c0:	0801ce38 	.word	0x0801ce38
 800f3c4:	20004a84 	.word	0x20004a84
 800f3c8:	200041e0 	.word	0x200041e0
 800f3cc:	20004160 	.word	0x20004160
 800f3d0:	20004460 	.word	0x20004460
 800f3d4:	20004360 	.word	0x20004360
 800f3d8:	200042f0 	.word	0x200042f0
 800f3dc:	200042a0 	.word	0x200042a0
 800f3e0:	0801ce78 	.word	0x0801ce78
 800f3e4:	20004170 	.word	0x20004170
      *(pSrc + 1) = src0;
 800f3e8:	f826 5c0e 	strh.w	r5, [r6, #-14]
 800f3ec:	3610      	adds	r6, #16
      *(pSrc + 2) = src0;
 800f3ee:	f826 5c1c 	strh.w	r5, [r6, #-28]
      *(pSrc + 3) = src0;
 800f3f2:	f826 5c1a 	strh.w	r5, [r6, #-26]
      *(pSrc + 4) = src0;
 800f3f6:	f826 5c18 	strh.w	r5, [r6, #-24]
      *(pSrc + 5) = src0;
 800f3fa:	f826 5c16 	strh.w	r5, [r6, #-22]
      *(pSrc + 6) = src0;
 800f3fe:	f826 5c14 	strh.w	r5, [r6, #-20]
      *(pSrc + 7) = src0;
 800f402:	f826 5c12 	strh.w	r5, [r6, #-18]
  for (i = 0; i < 8; i++) {
 800f406:	45b4      	cmp	ip, r6
 800f408:	f000 80b7 	beq.w	800f57a <pjpeg_decode_mcu+0x4c2>
    if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) ==
 800f40c:	f936 9c0e 	ldrsh.w	r9, [r6, #-14]
 800f410:	f936 8c0c 	ldrsh.w	r8, [r6, #-12]
 800f414:	f936 2c0a 	ldrsh.w	r2, [r6, #-10]
 800f418:	ea48 0309 	orr.w	r3, r8, r9
 800f41c:	f936 0c08 	ldrsh.w	r0, [r6, #-8]
 800f420:	f936 ac06 	ldrsh.w	sl, [r6, #-6]
 800f424:	4313      	orrs	r3, r2
 800f426:	f936 1c04 	ldrsh.w	r1, [r6, #-4]
 800f42a:	f936 4c02 	ldrsh.w	r4, [r6, #-2]
 800f42e:	4303      	orrs	r3, r0
 800f430:	f936 5c10 	ldrsh.w	r5, [r6, #-16]
 800f434:	ea4a 0303 	orr.w	r3, sl, r3
 800f438:	430b      	orrs	r3, r1
 800f43a:	4323      	orrs	r3, r4
 800f43c:	d0d4      	beq.n	800f3e8 <pjpeg_decode_mcu+0x330>
      int16 x4 = src4 - src7;
 800f43e:	fa1f fa8a 	uxth.w	sl, sl
  x += 128L;
 800f442:	f04f 0bc4 	mov.w	fp, #196	; 0xc4
      int16 x5 = src5 + src6;
 800f446:	fa1f f989 	uxth.w	r9, r9
 800f44a:	3610      	adds	r6, #16
      int16 x4 = src4 - src7;
 800f44c:	b293      	uxth	r3, r2
      int16 x5 = src5 + src6;
 800f44e:	b2a4      	uxth	r4, r4
      int16 x4 = src4 - src7;
 800f450:	ebaa 0203 	sub.w	r2, sl, r3
      int16 x7 = src4 + src7;
 800f454:	4453      	add	r3, sl
      int16 x6 = src5 - src6;
 800f456:	eba9 0a04 	sub.w	sl, r9, r4
      int16 x5 = src5 + src6;
 800f45a:	444c      	add	r4, r9
      int16 x4 = src4 - src7;
 800f45c:	b292      	uxth	r2, r2
      int16 x6 = src5 - src6;
 800f45e:	fa1f fa8a 	uxth.w	sl, sl
      int16 x5 = src5 + src6;
 800f462:	b2a4      	uxth	r4, r4
      int16 tmp1 = imul_b5(x4 - x6);
 800f464:	eba2 090a 	sub.w	r9, r2, sl
      int16 x6 = src5 - src6;
 800f468:	fa0f fa8a 	sxth.w	sl, sl
      int16 x4 = src4 - src7;
 800f46c:	b212      	sxth	r2, r2
  x += 128L;
 800f46e:	fb19 790b 	smlabb	r9, r9, fp, r7
      int16 x7 = src4 + src7;
 800f472:	b29b      	uxth	r3, r3
      int16 x12 = src2 - src3;
 800f474:	fa1f f888 	uxth.w	r8, r8
  long r = (unsigned long)x >> 8U;
 800f478:	ea4f 2b19 	mov.w	fp, r9, lsr #8
  if (x < 0)
 800f47c:	f1b9 0f00 	cmp.w	r9, #0
  x += 128L;
 800f480:	f240 1915 	movw	r9, #277	; 0x115
      int16 x12 = src2 - src3;
 800f484:	b289      	uxth	r1, r1
    r |= ~(~(unsigned long)0U >> 8U);
 800f486:	bfb8      	it	lt
 800f488:	f04b 4b7f 	orrlt.w	fp, fp, #4278190080	; 0xff000000
      int16 x30 = src0 + src1;
 800f48c:	b2ad      	uxth	r5, r5
  x += 128L;
 800f48e:	fb1a 7a09 	smlabb	sl, sl, r9, r7
      int16 x30 = src0 + src1;
 800f492:	b280      	uxth	r0, r0
      int16 stg26 = imul_b4(x6) - tmp1;
 800f494:	fa1f fb8b 	uxth.w	fp, fp
  long r = (unsigned long)x >> 8U;
 800f498:	ea4f 291a 	mov.w	r9, sl, lsr #8
  if (x < 0)
 800f49c:	f1ba 0f00 	cmp.w	sl, #0
  x += 128L;
 800f4a0:	f240 2a9d 	movw	sl, #669	; 0x29d
    r |= ~(~(unsigned long)0U >> 8U);
 800f4a4:	bfb8      	it	lt
 800f4a6:	f049 497f 	orrlt.w	r9, r9, #4278190080	; 0xff000000
  x += 128L;
 800f4aa:	fb12 720a 	smlabb	r2, r2, sl, r7
      int16 stg26 = imul_b4(x6) - tmp1;
 800f4ae:	eba9 090b 	sub.w	r9, r9, fp
  long r = (unsigned long)x >> 8U;
 800f4b2:	ea4f 2a12 	mov.w	sl, r2, lsr #8
  if (x < 0)
 800f4b6:	2a00      	cmp	r2, #0
      int16 x17 = x5 + x7;
 800f4b8:	eb04 0203 	add.w	r2, r4, r3
      int16 x15 = x5 - x7;
 800f4bc:	eba4 0303 	sub.w	r3, r4, r3
    r |= ~(~(unsigned long)0U >> 8U);
 800f4c0:	bfb8      	it	lt
 800f4c2:	f04a 4a7f 	orrlt.w	sl, sl, #4278190080	; 0xff000000
      int16 stg26 = imul_b4(x6) - tmp1;
 800f4c6:	fa1f f989 	uxth.w	r9, r9
  x += 128L;
 800f4ca:	fb13 730e 	smlabb	r3, r3, lr, r7
      int16 x24 = tmp1 - imul_b2(x4);
 800f4ce:	ebab 0b0a 	sub.w	fp, fp, sl
      int16 x17 = x5 + x7;
 800f4d2:	fa1f fa82 	uxth.w	sl, r2
  long r = (unsigned long)x >> 8U;
 800f4d6:	0a1c      	lsrs	r4, r3, #8
  if (x < 0)
 800f4d8:	2b00      	cmp	r3, #0
      int16 x12 = src2 - src3;
 800f4da:	eba8 0301 	sub.w	r3, r8, r1
      int16 x24 = tmp1 - imul_b2(x4);
 800f4de:	fa1f f28b 	uxth.w	r2, fp
      int16 tmp2 = stg26 - x17;
 800f4e2:	eba9 090a 	sub.w	r9, r9, sl
    r |= ~(~(unsigned long)0U >> 8U);
 800f4e6:	bfb8      	it	lt
 800f4e8:	f044 447f 	orrlt.w	r4, r4, #4278190080	; 0xff000000
  x += 128L;
 800f4ec:	fb13 7b0e 	smlabb	fp, r3, lr, r7
      int16 x13 = src2 + src3;
 800f4f0:	4441      	add	r1, r8
      int16 tmp2 = stg26 - x17;
 800f4f2:	fa1f f989 	uxth.w	r9, r9
      int16 x30 = src0 + src1;
 800f4f6:	eb00 0805 	add.w	r8, r0, r5
  long r = (unsigned long)x >> 8U;
 800f4fa:	ea4f 231b 	mov.w	r3, fp, lsr #8
  if (x < 0)
 800f4fe:	f1bb 0f00 	cmp.w	fp, #0
      int16 x13 = src2 + src3;
 800f502:	b289      	uxth	r1, r1
      int16 x31 = src0 - src1;
 800f504:	eba5 0000 	sub.w	r0, r5, r0
    r |= ~(~(unsigned long)0U >> 8U);
 800f508:	bfb8      	it	lt
 800f50a:	f043 437f 	orrlt.w	r3, r3, #4278190080	; 0xff000000
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 800f50e:	eba4 0409 	sub.w	r4, r4, r9
      int16 x30 = src0 + src1;
 800f512:	fa1f f888 	uxth.w	r8, r8
      int16 x32 = imul_b1_b3(x12) - x13;
 800f516:	1a5b      	subs	r3, r3, r1
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 800f518:	b2a4      	uxth	r4, r4
      int16 x31 = src0 - src1;
 800f51a:	b280      	uxth	r0, r0
      int16 x40 = x30 + x13;
 800f51c:	eb01 0508 	add.w	r5, r1, r8
      int16 x32 = imul_b1_b3(x12) - x13;
 800f520:	b29b      	uxth	r3, r3
      int16 x43 = x30 - x13;
 800f522:	eba8 0801 	sub.w	r8, r8, r1
      int16 x44 = tmp3 + x24;
 800f526:	4422      	add	r2, r4
      int16 x40 = x30 + x13;
 800f528:	b2ad      	uxth	r5, r5
      int16 x41 = x31 + x32;
 800f52a:	1819      	adds	r1, r3, r0
      int16 x42 = x31 - x32;
 800f52c:	1ac0      	subs	r0, r0, r3
      int16 x43 = x30 - x13;
 800f52e:	fa1f f888 	uxth.w	r8, r8
      *(pSrc + 0) = x40 + x17;
 800f532:	eb05 0b0a 	add.w	fp, r5, sl
      int16 x44 = tmp3 + x24;
 800f536:	b292      	uxth	r2, r2
      *(pSrc + 7) = x40 - x17;
 800f538:	eba5 050a 	sub.w	r5, r5, sl
      int16 x41 = x31 + x32;
 800f53c:	b289      	uxth	r1, r1
      *(pSrc + 0) = x40 + x17;
 800f53e:	f826 bc20 	strh.w	fp, [r6, #-32]
      int16 x42 = x31 - x32;
 800f542:	b280      	uxth	r0, r0
      *(pSrc + 3) = x43 - x44;
 800f544:	eba8 0302 	sub.w	r3, r8, r2
      *(pSrc + 1) = x41 + tmp2;
 800f548:	eb01 0a09 	add.w	sl, r1, r9
      *(pSrc + 4) = x43 + x44;
 800f54c:	4442      	add	r2, r8
      *(pSrc + 6) = x41 - tmp2;
 800f54e:	eba1 0109 	sub.w	r1, r1, r9
      *(pSrc + 2) = x42 + tmp3;
 800f552:	eb00 0804 	add.w	r8, r0, r4
      *(pSrc + 5) = x42 - tmp3;
 800f556:	1b00      	subs	r0, r0, r4
      *(pSrc + 1) = x41 + tmp2;
 800f558:	f826 ac1e 	strh.w	sl, [r6, #-30]
      *(pSrc + 6) = x41 - tmp2;
 800f55c:	f826 1c14 	strh.w	r1, [r6, #-20]
      *(pSrc + 2) = x42 + tmp3;
 800f560:	f826 8c1c 	strh.w	r8, [r6, #-28]
      *(pSrc + 5) = x42 - tmp3;
 800f564:	f826 0c16 	strh.w	r0, [r6, #-22]
      *(pSrc + 7) = x40 - x17;
 800f568:	f826 5c12 	strh.w	r5, [r6, #-18]
      *(pSrc + 3) = x43 - x44;
 800f56c:	f826 3c1a 	strh.w	r3, [r6, #-26]
      *(pSrc + 4) = x43 + x44;
 800f570:	f826 2c18 	strh.w	r2, [r6, #-24]
  for (i = 0; i < 8; i++) {
 800f574:	45b4      	cmp	ip, r6
 800f576:	f47f af49 	bne.w	800f40c <pjpeg_decode_mcu+0x354>
 800f57a:	4d03      	ldr	r5, [pc, #12]	; (800f588 <pjpeg_decode_mcu+0x4d0>)
  x += 128L;
 800f57c:	2680      	movs	r6, #128	; 0x80
  x += 128L;
 800f57e:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
 800f582:	f105 0710 	add.w	r7, r5, #16
 800f586:	e029      	b.n	800f5dc <pjpeg_decode_mcu+0x524>
 800f588:	2000415e 	.word	0x2000415e
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 800f58c:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800f590:	fa1f fe8e 	uxth.w	lr, lr
  if (x < 0)
 800f594:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 800f598:	ea4f 12de 	mov.w	r2, lr, lsr #7
  if (x < 0)
 800f59c:	d003      	beq.n	800f5a6 <pjpeg_decode_mcu+0x4ee>
    r |= replicateSignBit16(n);
 800f59e:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800f5a2:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 800f5a6:	3280      	adds	r2, #128	; 0x80
 800f5a8:	b292      	uxth	r2, r2
  if ((uint16)s > 255U) {
 800f5aa:	2aff      	cmp	r2, #255	; 0xff
 800f5ac:	f240 829b 	bls.w	800fae6 <pjpeg_decode_mcu+0xa2e>
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 800f5b0:	b211      	sxth	r1, r2
    if (s < 0)
 800f5b2:	2900      	cmp	r1, #0
 800f5b4:	db03      	blt.n	800f5be <pjpeg_decode_mcu+0x506>
    else if (s > 255)
 800f5b6:	29ff      	cmp	r1, #255	; 0xff
 800f5b8:	f340 8295 	ble.w	800fae6 <pjpeg_decode_mcu+0xa2e>
 800f5bc:	23ff      	movs	r3, #255	; 0xff
  for (i = 0; i < 8; i++) {
 800f5be:	42bd      	cmp	r5, r7
      *(pSrc + 0 * 8) = c;
 800f5c0:	802b      	strh	r3, [r5, #0]
      *(pSrc + 1 * 8) = c;
 800f5c2:	822b      	strh	r3, [r5, #16]
      *(pSrc + 2 * 8) = c;
 800f5c4:	842b      	strh	r3, [r5, #32]
      *(pSrc + 3 * 8) = c;
 800f5c6:	862b      	strh	r3, [r5, #48]	; 0x30
      *(pSrc + 4 * 8) = c;
 800f5c8:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
      *(pSrc + 5 * 8) = c;
 800f5cc:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
      *(pSrc + 6 * 8) = c;
 800f5d0:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
      *(pSrc + 7 * 8) = c;
 800f5d4:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
  for (i = 0; i < 8; i++) {
 800f5d8:	f000 8183 	beq.w	800f8e2 <pjpeg_decode_mcu+0x82a>
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 800f5dc:	f9b5 9012 	ldrsh.w	r9, [r5, #18]
 800f5e0:	f9b5 8022 	ldrsh.w	r8, [r5, #34]	; 0x22
 800f5e4:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 800f5e8:	ea48 0309 	orr.w	r3, r8, r9
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 800f5ec:	f9b5 4042 	ldrsh.w	r4, [r5, #66]	; 0x42
 800f5f0:	f9b5 a052 	ldrsh.w	sl, [r5, #82]	; 0x52
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	f9b5 0062 	ldrsh.w	r0, [r5, #98]	; 0x62
 800f5fa:	f9b5 1072 	ldrsh.w	r1, [r5, #114]	; 0x72
 800f5fe:	4323      	orrs	r3, r4
 800f600:	f835 ef02 	ldrh.w	lr, [r5, #2]!
 800f604:	ea4a 0303 	orr.w	r3, sl, r3
 800f608:	4303      	orrs	r3, r0
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 800f60a:	430b      	orrs	r3, r1
 800f60c:	d0be      	beq.n	800f58c <pjpeg_decode_mcu+0x4d4>
      int16 x4 = src4 - src7;
 800f60e:	fa1f fa8a 	uxth.w	sl, sl
      int16 x5 = src5 + src6;
 800f612:	fa1f f389 	uxth.w	r3, r9
 800f616:	fa1f fb81 	uxth.w	fp, r1
      int16 x4 = src4 - src7;
 800f61a:	b292      	uxth	r2, r2
      int16 x6 = src5 - src6;
 800f61c:	eba3 090b 	sub.w	r9, r3, fp
      int16 x5 = src5 + src6;
 800f620:	449b      	add	fp, r3
      int16 x4 = src4 - src7;
 800f622:	ebaa 0102 	sub.w	r1, sl, r2
      int16 x7 = src4 + src7;
 800f626:	4452      	add	r2, sl
      int16 x6 = src5 - src6;
 800f628:	fa1f f989 	uxth.w	r9, r9
  x += 128L;
 800f62c:	f04f 0ac4 	mov.w	sl, #196	; 0xc4
      int16 x4 = src4 - src7;
 800f630:	b289      	uxth	r1, r1
      int16 x5 = src5 + src6;
 800f632:	fa1f fb8b 	uxth.w	fp, fp
      int16 tmp1 = imul_b5(x4 - x6);
 800f636:	eba1 0309 	sub.w	r3, r1, r9
      int16 x6 = src5 - src6;
 800f63a:	fa0f f989 	sxth.w	r9, r9
      int16 x4 = src4 - src7;
 800f63e:	b209      	sxth	r1, r1
  x += 128L;
 800f640:	fb13 630a 	smlabb	r3, r3, sl, r6
      int16 x7 = src4 + src7;
 800f644:	b292      	uxth	r2, r2
      int16 x12 = src2 - src3;
 800f646:	fa1f f888 	uxth.w	r8, r8
  long r = (unsigned long)x >> 8U;
 800f64a:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  if (x < 0)
 800f64e:	2b00      	cmp	r3, #0
  x += 128L;
 800f650:	f240 1315 	movw	r3, #277	; 0x115
      int16 x12 = src2 - src3;
 800f654:	b280      	uxth	r0, r0
    r |= ~(~(unsigned long)0U >> 8U);
 800f656:	bfb8      	it	lt
 800f658:	f04a 4a7f 	orrlt.w	sl, sl, #4278190080	; 0xff000000
      int16 x30 = src0 + src1;
 800f65c:	b2a4      	uxth	r4, r4
  x += 128L;
 800f65e:	fb19 6903 	smlabb	r9, r9, r3, r6
      int16 stg26 = imul_b4(x6) - tmp1;
 800f662:	fa1f fa8a 	uxth.w	sl, sl
  long r = (unsigned long)x >> 8U;
 800f666:	ea4f 2319 	mov.w	r3, r9, lsr #8
  if (x < 0)
 800f66a:	f1b9 0f00 	cmp.w	r9, #0
  x += 128L;
 800f66e:	f240 299d 	movw	r9, #669	; 0x29d
    r |= ~(~(unsigned long)0U >> 8U);
 800f672:	bfb8      	it	lt
 800f674:	f043 437f 	orrlt.w	r3, r3, #4278190080	; 0xff000000
  x += 128L;
 800f678:	fb11 6109 	smlabb	r1, r1, r9, r6
      int16 stg26 = imul_b4(x6) - tmp1;
 800f67c:	eba3 030a 	sub.w	r3, r3, sl
  long r = (unsigned long)x >> 8U;
 800f680:	ea4f 2911 	mov.w	r9, r1, lsr #8
  if (x < 0)
 800f684:	2900      	cmp	r1, #0
      int16 x17 = x5 + x7;
 800f686:	eb0b 0102 	add.w	r1, fp, r2
      int16 x15 = x5 - x7;
 800f68a:	ebab 0202 	sub.w	r2, fp, r2
    r |= ~(~(unsigned long)0U >> 8U);
 800f68e:	bfb8      	it	lt
 800f690:	f049 497f 	orrlt.w	r9, r9, #4278190080	; 0xff000000
      int16 stg26 = imul_b4(x6) - tmp1;
 800f694:	b29b      	uxth	r3, r3
  x += 128L;
 800f696:	fb12 620c 	smlabb	r2, r2, ip, r6
      int16 x24 = tmp1 - imul_b2(x4);
 800f69a:	ebaa 0a09 	sub.w	sl, sl, r9
      int16 x17 = x5 + x7;
 800f69e:	fa1f f981 	uxth.w	r9, r1
  if (x < 0)
 800f6a2:	2a00      	cmp	r2, #0
  long r = (unsigned long)x >> 8U;
 800f6a4:	ea4f 2112 	mov.w	r1, r2, lsr #8
      int16 x12 = src2 - src3;
 800f6a8:	eba8 0200 	sub.w	r2, r8, r0
      int16 x13 = src2 + src3;
 800f6ac:	4440      	add	r0, r8
    r |= ~(~(unsigned long)0U >> 8U);
 800f6ae:	bfb8      	it	lt
 800f6b0:	f041 417f 	orrlt.w	r1, r1, #4278190080	; 0xff000000
      int16 tmp2 = stg26 - x17;
 800f6b4:	eba3 0309 	sub.w	r3, r3, r9
  x += 128L;
 800f6b8:	fb12 6b0c 	smlabb	fp, r2, ip, r6
      int16 x30 = src0 + src1;
 800f6bc:	eb04 020e 	add.w	r2, r4, lr
      int16 x13 = src2 + src3;
 800f6c0:	b280      	uxth	r0, r0
      int16 x31 = src0 - src1;
 800f6c2:	ebae 0404 	sub.w	r4, lr, r4
      int16 x30 = src0 + src1;
 800f6c6:	b292      	uxth	r2, r2
  if (x < 0)
 800f6c8:	f1bb 0f00 	cmp.w	fp, #0
  long r = (unsigned long)x >> 8U;
 800f6cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 800f6d0:	f109 0b40 	add.w	fp, r9, #64	; 0x40
      int16 x40 = x30 + x13;
 800f6d4:	eb00 0802 	add.w	r8, r0, r2
      int16 tmp2 = stg26 - x17;
 800f6d8:	b29b      	uxth	r3, r3
    r |= ~(~(unsigned long)0U >> 8U);
 800f6da:	bfb8      	it	lt
 800f6dc:	f04e 4e7f 	orrlt.w	lr, lr, #4278190080	; 0xff000000
      int16 x31 = src0 - src1;
 800f6e0:	b2a4      	uxth	r4, r4
      int16 x40 = x30 + x13;
 800f6e2:	fa1f f888 	uxth.w	r8, r8
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 800f6e6:	1ac9      	subs	r1, r1, r3
      int16 x32 = imul_b1_b3(x12) - x13;
 800f6e8:	ebae 0e00 	sub.w	lr, lr, r0
      int16 x24 = tmp1 - imul_b2(x4);
 800f6ec:	fa1f fa8a 	uxth.w	sl, sl
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 800f6f0:	44c3      	add	fp, r8
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 800f6f2:	b289      	uxth	r1, r1
      int16 x32 = imul_b1_b3(x12) - x13;
 800f6f4:	fa1f fe8e 	uxth.w	lr, lr
      int16 x43 = x30 - x13;
 800f6f8:	1a12      	subs	r2, r2, r0
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 800f6fa:	fa1f fb8b 	uxth.w	fp, fp
      int16 x44 = tmp3 + x24;
 800f6fe:	448a      	add	sl, r1
      int16 x41 = x31 + x32;
 800f700:	eb0e 0004 	add.w	r0, lr, r4
      int16 x42 = x31 - x32;
 800f704:	eba4 040e 	sub.w	r4, r4, lr
  if (x < 0)
 800f708:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
      int16 x44 = tmp3 + x24;
 800f70c:	fa1f fa8a 	uxth.w	sl, sl
      int16 x41 = x31 + x32;
 800f710:	fa1f fe80 	uxth.w	lr, r0
      int16 x43 = x30 - x13;
 800f714:	b292      	uxth	r2, r2
  int16 r = (uint16)x >> (uint8)n;
 800f716:	ea4f 10db 	mov.w	r0, fp, lsr #7
      int16 x42 = x31 - x32;
 800f71a:	b2a4      	uxth	r4, r4
  if (x < 0)
 800f71c:	d003      	beq.n	800f726 <pjpeg_decode_mcu+0x66e>
    r |= replicateSignBit16(n);
 800f71e:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 800f722:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 800f726:	3080      	adds	r0, #128	; 0x80
 800f728:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 800f72a:	28ff      	cmp	r0, #255	; 0xff
 800f72c:	f240 81d9 	bls.w	800fae2 <pjpeg_decode_mcu+0xa2a>
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 800f730:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 800f734:	f1bb 0f00 	cmp.w	fp, #0
 800f738:	f2c0 81e9 	blt.w	800fb0e <pjpeg_decode_mcu+0xa56>
    else if (s > 255)
 800f73c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800f740:	f340 81cf 	ble.w	800fae2 <pjpeg_decode_mcu+0xa2a>
 800f744:	20ff      	movs	r0, #255	; 0xff
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 800f746:	f103 0b40 	add.w	fp, r3, #64	; 0x40
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 800f74a:	8028      	strh	r0, [r5, #0]
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 800f74c:	44f3      	add	fp, lr
 800f74e:	fa1f fb8b 	uxth.w	fp, fp
  if (x < 0)
 800f752:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 800f756:	ea4f 10db 	mov.w	r0, fp, lsr #7
  if (x < 0)
 800f75a:	d003      	beq.n	800f764 <pjpeg_decode_mcu+0x6ac>
    r |= replicateSignBit16(n);
 800f75c:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 800f760:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 800f764:	3080      	adds	r0, #128	; 0x80
 800f766:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 800f768:	28ff      	cmp	r0, #255	; 0xff
 800f76a:	f240 81b8 	bls.w	800fade <pjpeg_decode_mcu+0xa26>
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 800f76e:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 800f772:	f1bb 0f00 	cmp.w	fp, #0
 800f776:	f2c0 81c8 	blt.w	800fb0a <pjpeg_decode_mcu+0xa52>
    else if (s > 255)
 800f77a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800f77e:	f340 81ae 	ble.w	800fade <pjpeg_decode_mcu+0xa26>
 800f782:	20ff      	movs	r0, #255	; 0xff
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 800f784:	f101 0b40 	add.w	fp, r1, #64	; 0x40
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 800f788:	8228      	strh	r0, [r5, #16]
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 800f78a:	44a3      	add	fp, r4
 800f78c:	fa1f fb8b 	uxth.w	fp, fp
  if (x < 0)
 800f790:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 800f794:	ea4f 10db 	mov.w	r0, fp, lsr #7
  if (x < 0)
 800f798:	d003      	beq.n	800f7a2 <pjpeg_decode_mcu+0x6ea>
    r |= replicateSignBit16(n);
 800f79a:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 800f79e:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 800f7a2:	3080      	adds	r0, #128	; 0x80
 800f7a4:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 800f7a6:	28ff      	cmp	r0, #255	; 0xff
 800f7a8:	f240 8197 	bls.w	800fada <pjpeg_decode_mcu+0xa22>
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 800f7ac:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 800f7b0:	f1bb 0f00 	cmp.w	fp, #0
 800f7b4:	f2c0 81a7 	blt.w	800fb06 <pjpeg_decode_mcu+0xa4e>
    else if (s > 255)
 800f7b8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800f7bc:	f340 818d 	ble.w	800fada <pjpeg_decode_mcu+0xa22>
 800f7c0:	20ff      	movs	r0, #255	; 0xff
 800f7c2:	3240      	adds	r2, #64	; 0x40
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 800f7c4:	8428      	strh	r0, [r5, #32]
 800f7c6:	b292      	uxth	r2, r2
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 800f7c8:	eba2 0b0a 	sub.w	fp, r2, sl
 800f7cc:	fa1f fb8b 	uxth.w	fp, fp
  if (x < 0)
 800f7d0:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 800f7d4:	ea4f 10db 	mov.w	r0, fp, lsr #7
  if (x < 0)
 800f7d8:	d003      	beq.n	800f7e2 <pjpeg_decode_mcu+0x72a>
    r |= replicateSignBit16(n);
 800f7da:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 800f7de:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 800f7e2:	3080      	adds	r0, #128	; 0x80
 800f7e4:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 800f7e6:	28ff      	cmp	r0, #255	; 0xff
 800f7e8:	f240 8175 	bls.w	800fad6 <pjpeg_decode_mcu+0xa1e>
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 800f7ec:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 800f7f0:	f1bb 0f00 	cmp.w	fp, #0
 800f7f4:	f2c0 8185 	blt.w	800fb02 <pjpeg_decode_mcu+0xa4a>
    else if (s > 255)
 800f7f8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800f7fc:	f340 816b 	ble.w	800fad6 <pjpeg_decode_mcu+0xa1e>
 800f800:	20ff      	movs	r0, #255	; 0xff
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 800f802:	4492      	add	sl, r2
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 800f804:	8628      	strh	r0, [r5, #48]	; 0x30
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 800f806:	fa1f fa8a 	uxth.w	sl, sl
  if (x < 0)
 800f80a:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 800f80e:	ea4f 12da 	mov.w	r2, sl, lsr #7
  if (x < 0)
 800f812:	d003      	beq.n	800f81c <pjpeg_decode_mcu+0x764>
    r |= replicateSignBit16(n);
 800f814:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800f818:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 800f81c:	3280      	adds	r2, #128	; 0x80
 800f81e:	b292      	uxth	r2, r2
  if ((uint16)s > 255U) {
 800f820:	2aff      	cmp	r2, #255	; 0xff
 800f822:	f240 8156 	bls.w	800fad2 <pjpeg_decode_mcu+0xa1a>
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 800f826:	b210      	sxth	r0, r2
    if (s < 0)
 800f828:	2800      	cmp	r0, #0
 800f82a:	f2c0 8168 	blt.w	800fafe <pjpeg_decode_mcu+0xa46>
    else if (s > 255)
 800f82e:	28ff      	cmp	r0, #255	; 0xff
 800f830:	f340 814f 	ble.w	800fad2 <pjpeg_decode_mcu+0xa1a>
 800f834:	22ff      	movs	r2, #255	; 0xff
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 800f836:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 800f83a:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 800f83e:	440c      	add	r4, r1
 800f840:	b2a4      	uxth	r4, r4
  if (x < 0)
 800f842:	0420      	lsls	r0, r4, #16
  int16 r = (uint16)x >> (uint8)n;
 800f844:	ea4f 12d4 	mov.w	r2, r4, lsr #7
  if (x < 0)
 800f848:	d503      	bpl.n	800f852 <pjpeg_decode_mcu+0x79a>
    r |= replicateSignBit16(n);
 800f84a:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800f84e:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 800f852:	3280      	adds	r2, #128	; 0x80
 800f854:	b292      	uxth	r2, r2
  if ((uint16)s > 255U) {
 800f856:	2aff      	cmp	r2, #255	; 0xff
 800f858:	f240 8139 	bls.w	800face <pjpeg_decode_mcu+0xa16>
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 800f85c:	b211      	sxth	r1, r2
    if (s < 0)
 800f85e:	2900      	cmp	r1, #0
 800f860:	f2c0 8149 	blt.w	800faf6 <pjpeg_decode_mcu+0xa3e>
    else if (s > 255)
 800f864:	29ff      	cmp	r1, #255	; 0xff
 800f866:	f340 8132 	ble.w	800face <pjpeg_decode_mcu+0xa16>
 800f86a:	22ff      	movs	r2, #255	; 0xff
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 800f86c:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 800f870:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 800f874:	4470      	add	r0, lr
 800f876:	b280      	uxth	r0, r0
  if (x < 0)
 800f878:	0401      	lsls	r1, r0, #16
  int16 r = (uint16)x >> (uint8)n;
 800f87a:	ea4f 13d0 	mov.w	r3, r0, lsr #7
  if (x < 0)
 800f87e:	d503      	bpl.n	800f888 <pjpeg_decode_mcu+0x7d0>
    r |= replicateSignBit16(n);
 800f880:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 800f884:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 800f888:	3380      	adds	r3, #128	; 0x80
 800f88a:	b29b      	uxth	r3, r3
  if ((uint16)s > 255U) {
 800f88c:	2bff      	cmp	r3, #255	; 0xff
 800f88e:	f240 811a 	bls.w	800fac6 <pjpeg_decode_mcu+0xa0e>
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 800f892:	b21a      	sxth	r2, r3
    if (s < 0)
 800f894:	2a00      	cmp	r2, #0
 800f896:	f2c0 812c 	blt.w	800faf2 <pjpeg_decode_mcu+0xa3a>
    else if (s > 255)
 800f89a:	2aff      	cmp	r2, #255	; 0xff
 800f89c:	f340 8113 	ble.w	800fac6 <pjpeg_decode_mcu+0xa0e>
 800f8a0:	23ff      	movs	r3, #255	; 0xff
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 800f8a2:	eba8 0809 	sub.w	r8, r8, r9
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 800f8a6:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 800f8aa:	f108 0240 	add.w	r2, r8, #64	; 0x40
 800f8ae:	b292      	uxth	r2, r2
  int16 r = (uint16)x >> (uint8)n;
 800f8b0:	09d3      	lsrs	r3, r2, #7
  if (x < 0)
 800f8b2:	0412      	lsls	r2, r2, #16
 800f8b4:	d503      	bpl.n	800f8be <pjpeg_decode_mcu+0x806>
    r |= replicateSignBit16(n);
 800f8b6:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 800f8ba:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 800f8be:	3380      	adds	r3, #128	; 0x80
 800f8c0:	b29b      	uxth	r3, r3
  if ((uint16)s > 255U) {
 800f8c2:	2bff      	cmp	r3, #255	; 0xff
 800f8c4:	f240 8101 	bls.w	800faca <pjpeg_decode_mcu+0xa12>
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 800f8c8:	b21a      	sxth	r2, r3
    if (s < 0)
 800f8ca:	2a00      	cmp	r2, #0
 800f8cc:	f2c0 8115 	blt.w	800fafa <pjpeg_decode_mcu+0xa42>
    else if (s > 255)
 800f8d0:	2aff      	cmp	r2, #255	; 0xff
 800f8d2:	f340 80fa 	ble.w	800faca <pjpeg_decode_mcu+0xa12>
 800f8d6:	23ff      	movs	r3, #255	; 0xff
  for (i = 0; i < 8; i++) {
 800f8d8:	42bd      	cmp	r5, r7
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 800f8da:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
  for (i = 0; i < 8; i++) {
 800f8de:	f47f ae7d 	bne.w	800f5dc <pjpeg_decode_mcu+0x524>
  switch (gScanType) {
 800f8e2:	4ba9      	ldr	r3, [pc, #676]	; (800fb88 <pjpeg_decode_mcu+0xad0>)
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	2b04      	cmp	r3, #4
 800f8e8:	f200 80d7 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800f8ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f8f0:	013d012b 	.word	0x013d012b
 800f8f4:	019b01a5 	.word	0x019b01a5
 800f8f8:	01af      	.short	0x01af
            if ((k + r) > 63)
 800f8fa:	1919      	adds	r1, r3, r4
 800f8fc:	293f      	cmp	r1, #63	; 0x3f
 800f8fe:	f73f ac6d 	bgt.w	800f1dc <pjpeg_decode_mcu+0x124>
        r = s >> 4;
 800f902:	b29b      	uxth	r3, r3
              gCoeffBuf[ZAG[k++]] = 0;
 800f904:	f04f 0c00 	mov.w	ip, #0
 800f908:	9e00      	ldr	r6, [sp, #0]
 800f90a:	468e      	mov	lr, r1
 800f90c:	499f      	ldr	r1, [pc, #636]	; (800fb8c <pjpeg_decode_mcu+0xad4>)
              r--;
 800f90e:	3b01      	subs	r3, #1
              gCoeffBuf[ZAG[k++]] = 0;
 800f910:	1c62      	adds	r2, r4, #1
              r--;
 800f912:	b29b      	uxth	r3, r3
              gCoeffBuf[ZAG[k++]] = 0;
 800f914:	570c      	ldrsb	r4, [r1, r4]
 800f916:	499e      	ldr	r1, [pc, #632]	; (800fb90 <pjpeg_decode_mcu+0xad8>)
 800f918:	f821 c014 	strh.w	ip, [r1, r4, lsl #1]
 800f91c:	b2d4      	uxtb	r4, r2
            while (r) {
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1f4      	bne.n	800f90c <pjpeg_decode_mcu+0x854>
 800f922:	9600      	str	r6, [sp, #0]
 800f924:	fa5f f48e 	uxtb.w	r4, lr
 800f928:	e50b      	b.n	800f342 <pjpeg_decode_mcu+0x28a>
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800f92a:	b203      	sxth	r3, r0
 800f92c:	e413      	b.n	800f156 <pjpeg_decode_mcu+0x9e>
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 800f92e:	4b98      	ldr	r3, [pc, #608]	; (800fb90 <pjpeg_decode_mcu+0xad8>)
 800f930:	881a      	ldrh	r2, [r3, #0]
 800f932:	3240      	adds	r2, #64	; 0x40
 800f934:	b292      	uxth	r2, r2
  if (x < 0)
 800f936:	0414      	lsls	r4, r2, #16
  int16 r = (uint16)x >> (uint8)n;
 800f938:	ea4f 13d2 	mov.w	r3, r2, lsr #7
  if (x < 0)
 800f93c:	d503      	bpl.n	800f946 <pjpeg_decode_mcu+0x88e>
    r |= replicateSignBit16(n);
 800f93e:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 800f942:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 800f946:	3380      	adds	r3, #128	; 0x80
 800f948:	b29b      	uxth	r3, r3
  if ((uint16)s > 255U) {
 800f94a:	2bff      	cmp	r3, #255	; 0xff
 800f94c:	d906      	bls.n	800f95c <pjpeg_decode_mcu+0x8a4>
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 800f94e:	b21a      	sxth	r2, r3
    if (s < 0)
 800f950:	2a00      	cmp	r2, #0
 800f952:	f2c0 8505 	blt.w	8010360 <pjpeg_decode_mcu+0x12a8>
    else if (s > 255)
 800f956:	2aff      	cmp	r2, #255	; 0xff
 800f958:	f300 81e9 	bgt.w	800fd2e <pjpeg_decode_mcu+0xc76>
  return (uint8)s;
 800f95c:	b2db      	uxtb	r3, r3
  switch (gScanType) {
 800f95e:	4a8a      	ldr	r2, [pc, #552]	; (800fb88 <pjpeg_decode_mcu+0xad0>)
 800f960:	7812      	ldrb	r2, [r2, #0]
 800f962:	2a04      	cmp	r2, #4
 800f964:	f200 8099 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800f968:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f96c:	01a401de 	.word	0x01a401de
 800f970:	0190019a 	.word	0x0190019a
 800f974:	017d      	.short	0x017d
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800f976:	b21a      	sxth	r2, r3
 800f978:	3bb3      	subs	r3, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800f97a:	4886      	ldr	r0, [pc, #536]	; (800fb94 <pjpeg_decode_mcu+0xadc>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800f97c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 800f980:	7801      	ldrb	r1, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800f982:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800f986:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800f98a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 800f98e:	b29b      	uxth	r3, r3
  b = a + b;
 800f990:	4419      	add	r1, r3
 800f992:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800f994:	29ff      	cmp	r1, #255	; 0xff
 800f996:	d906      	bls.n	800f9a6 <pjpeg_decode_mcu+0x8ee>
  b = a + b;
 800f998:	b20c      	sxth	r4, r1
    if (b < 0)
 800f99a:	2c00      	cmp	r4, #0
 800f99c:	f2c0 86c1 	blt.w	8010722 <pjpeg_decode_mcu+0x166a>
    else if (b > 255)
 800f9a0:	2cff      	cmp	r4, #255	; 0xff
 800f9a2:	f300 866e 	bgt.w	8010682 <pjpeg_decode_mcu+0x15ca>
  return (uint8)b;
 800f9a6:	b2c9      	uxtb	r1, r1
  b = a + b;
 800f9a8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800f9ac:	7001      	strb	r1, [r0, #0]
  b = a + b;
 800f9ae:	441c      	add	r4, r3
 800f9b0:	b2a4      	uxth	r4, r4
  if ((uint16)b > 255U) {
 800f9b2:	2cff      	cmp	r4, #255	; 0xff
 800f9b4:	d906      	bls.n	800f9c4 <pjpeg_decode_mcu+0x90c>
  b = a + b;
 800f9b6:	b221      	sxth	r1, r4
    if (b < 0)
 800f9b8:	2900      	cmp	r1, #0
 800f9ba:	f2c0 8683 	blt.w	80106c4 <pjpeg_decode_mcu+0x160c>
    else if (b > 255)
 800f9be:	29ff      	cmp	r1, #255	; 0xff
 800f9c0:	f300 8662 	bgt.w	8010688 <pjpeg_decode_mcu+0x15d0>
  return (uint8)b;
 800f9c4:	b2e4      	uxtb	r4, r4
  b = a + b;
 800f9c6:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 800f9ca:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  b = a + b;
 800f9ce:	4419      	add	r1, r3
 800f9d0:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800f9d2:	29ff      	cmp	r1, #255	; 0xff
 800f9d4:	d906      	bls.n	800f9e4 <pjpeg_decode_mcu+0x92c>
  b = a + b;
 800f9d6:	b20c      	sxth	r4, r1
    if (b < 0)
 800f9d8:	2c00      	cmp	r4, #0
 800f9da:	f2c0 8676 	blt.w	80106ca <pjpeg_decode_mcu+0x1612>
    else if (b > 255)
 800f9de:	2cff      	cmp	r4, #255	; 0xff
 800f9e0:	f300 8655 	bgt.w	801068e <pjpeg_decode_mcu+0x15d6>
  return (uint8)b;
 800f9e4:	b2c9      	uxtb	r1, r1
  b = a + b;
 800f9e6:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 800f9ea:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
  b = a + b;
 800f9ee:	4423      	add	r3, r4
 800f9f0:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800f9f2:	2bff      	cmp	r3, #255	; 0xff
 800f9f4:	d906      	bls.n	800fa04 <pjpeg_decode_mcu+0x94c>
  b = a + b;
 800f9f6:	b219      	sxth	r1, r3
    if (b < 0)
 800f9f8:	2900      	cmp	r1, #0
 800f9fa:	f2c0 8669 	blt.w	80106d0 <pjpeg_decode_mcu+0x1618>
    else if (b > 255)
 800f9fe:	29ff      	cmp	r1, #255	; 0xff
 800fa00:	f300 8648 	bgt.w	8010694 <pjpeg_decode_mcu+0x15dc>
  return (uint8)b;
 800fa04:	b2db      	uxtb	r3, r3
      crG = ((c * 183U) >> 8U) - 91;
 800fa06:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
      gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
 800fa0a:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800fa0e:	4c62      	ldr	r4, [pc, #392]	; (800fb98 <pjpeg_decode_mcu+0xae0>)
      crG = ((c * 183U) >> 8U) - 91;
 800fa10:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  b = a - b;
 800fa14:	7821      	ldrb	r1, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 800fa16:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800fa1a:	0a1b      	lsrs	r3, r3, #8
 800fa1c:	3b5b      	subs	r3, #91	; 0x5b
 800fa1e:	b29b      	uxth	r3, r3
  b = a - b;
 800fa20:	1ac9      	subs	r1, r1, r3
 800fa22:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800fa24:	29ff      	cmp	r1, #255	; 0xff
 800fa26:	d906      	bls.n	800fa36 <pjpeg_decode_mcu+0x97e>
  b = a - b;
 800fa28:	b20a      	sxth	r2, r1
    if (b < 0)
 800fa2a:	2a00      	cmp	r2, #0
 800fa2c:	f2c0 8653 	blt.w	80106d6 <pjpeg_decode_mcu+0x161e>
    else if (b > 255)
 800fa30:	2aff      	cmp	r2, #255	; 0xff
 800fa32:	f300 8632 	bgt.w	801069a <pjpeg_decode_mcu+0x15e2>
  return (uint8)b;
 800fa36:	b2c9      	uxtb	r1, r1
  b = a - b;
 800fa38:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800fa3c:	7021      	strb	r1, [r4, #0]
  b = a - b;
 800fa3e:	1ad2      	subs	r2, r2, r3
 800fa40:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800fa42:	2aff      	cmp	r2, #255	; 0xff
 800fa44:	d906      	bls.n	800fa54 <pjpeg_decode_mcu+0x99c>
  b = a - b;
 800fa46:	b211      	sxth	r1, r2
    if (b < 0)
 800fa48:	2900      	cmp	r1, #0
 800fa4a:	f2c0 8635 	blt.w	80106b8 <pjpeg_decode_mcu+0x1600>
    else if (b > 255)
 800fa4e:	29ff      	cmp	r1, #255	; 0xff
 800fa50:	f300 8626 	bgt.w	80106a0 <pjpeg_decode_mcu+0x15e8>
  return (uint8)b;
 800fa54:	b2d2      	uxtb	r2, r2
  b = a - b;
 800fa56:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 800fa5a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  b = a - b;
 800fa5e:	1ac9      	subs	r1, r1, r3
 800fa60:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800fa62:	29ff      	cmp	r1, #255	; 0xff
 800fa64:	d906      	bls.n	800fa74 <pjpeg_decode_mcu+0x9bc>
  b = a - b;
 800fa66:	b20a      	sxth	r2, r1
    if (b < 0)
 800fa68:	2a00      	cmp	r2, #0
 800fa6a:	f2c0 8628 	blt.w	80106be <pjpeg_decode_mcu+0x1606>
    else if (b > 255)
 800fa6e:	2aff      	cmp	r2, #255	; 0xff
 800fa70:	f300 8619 	bgt.w	80106a6 <pjpeg_decode_mcu+0x15ee>
  return (uint8)b;
 800fa74:	b2c9      	uxtb	r1, r1
  b = a - b;
 800fa76:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 800fa7a:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  b = a - b;
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800fa82:	2bff      	cmp	r3, #255	; 0xff
 800fa84:	d906      	bls.n	800fa94 <pjpeg_decode_mcu+0x9dc>
  b = a - b;
 800fa86:	b21a      	sxth	r2, r3
    if (b < 0)
 800fa88:	2a00      	cmp	r2, #0
 800fa8a:	f2c0 8612 	blt.w	80106b2 <pjpeg_decode_mcu+0x15fa>
    else if (b > 255)
 800fa8e:	2aff      	cmp	r2, #255	; 0xff
 800fa90:	f300 860c 	bgt.w	80106ac <pjpeg_decode_mcu+0x15f4>
  return (uint8)b;
 800fa94:	b2db      	uxtb	r3, r3
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
 800fa96:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800fa9a:	9a01      	ldr	r2, [sp, #4]
 800fa9c:	9b03      	ldr	r3, [sp, #12]
 800fa9e:	3201      	adds	r2, #1
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	b2d2      	uxtb	r2, r2
 800faa4:	4293      	cmp	r3, r2
 800faa6:	9201      	str	r2, [sp, #4]
 800faa8:	f63f ab2a 	bhi.w	800f100 <pjpeg_decode_mcu+0x48>
  if ((status) || (gCallbackStatus))
 800faac:	4b3b      	ldr	r3, [pc, #236]	; (800fb9c <pjpeg_decode_mcu+0xae4>)
 800faae:	7818      	ldrb	r0, [r3, #0]
 800fab0:	2800      	cmp	r0, #0
 800fab2:	f47f ab99 	bne.w	800f1e8 <pjpeg_decode_mcu+0x130>
 800fab6:	4b3a      	ldr	r3, [pc, #232]	; (800fba0 <pjpeg_decode_mcu+0xae8>)
 800fab8:	881b      	ldrh	r3, [r3, #0]
  gNumMCUSRemaining--;
 800faba:	3b01      	subs	r3, #1
 800fabc:	4a38      	ldr	r2, [pc, #224]	; (800fba0 <pjpeg_decode_mcu+0xae8>)
  return 0;
 800fabe:	2000      	movs	r0, #0
  gNumMCUSRemaining--;
 800fac0:	8013      	strh	r3, [r2, #0]
  return 0;
 800fac2:	f7ff bb91 	b.w	800f1e8 <pjpeg_decode_mcu+0x130>
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	e6eb      	b.n	800f8a2 <pjpeg_decode_mcu+0x7ea>
 800faca:	b2db      	uxtb	r3, r3
 800facc:	e704      	b.n	800f8d8 <pjpeg_decode_mcu+0x820>
 800face:	b2d2      	uxtb	r2, r2
 800fad0:	e6cc      	b.n	800f86c <pjpeg_decode_mcu+0x7b4>
 800fad2:	b2d2      	uxtb	r2, r2
 800fad4:	e6af      	b.n	800f836 <pjpeg_decode_mcu+0x77e>
 800fad6:	b2c0      	uxtb	r0, r0
 800fad8:	e693      	b.n	800f802 <pjpeg_decode_mcu+0x74a>
 800fada:	b2c0      	uxtb	r0, r0
 800fadc:	e671      	b.n	800f7c2 <pjpeg_decode_mcu+0x70a>
 800fade:	b2c0      	uxtb	r0, r0
 800fae0:	e650      	b.n	800f784 <pjpeg_decode_mcu+0x6cc>
 800fae2:	b2c0      	uxtb	r0, r0
 800fae4:	e62f      	b.n	800f746 <pjpeg_decode_mcu+0x68e>
 800fae6:	b2d3      	uxtb	r3, r2
 800fae8:	e569      	b.n	800f5be <pjpeg_decode_mcu+0x506>
  return getBits(numBits, 1);
 800faea:	f7fe f8f7 	bl	800dcdc <getBits.constprop.6>
 800faee:	f7ff bb22 	b.w	800f136 <pjpeg_decode_mcu+0x7e>
    if (s < 0)
 800faf2:	2300      	movs	r3, #0
 800faf4:	e6d5      	b.n	800f8a2 <pjpeg_decode_mcu+0x7ea>
 800faf6:	2200      	movs	r2, #0
 800faf8:	e6b8      	b.n	800f86c <pjpeg_decode_mcu+0x7b4>
 800fafa:	2300      	movs	r3, #0
 800fafc:	e6ec      	b.n	800f8d8 <pjpeg_decode_mcu+0x820>
 800fafe:	2200      	movs	r2, #0
 800fb00:	e699      	b.n	800f836 <pjpeg_decode_mcu+0x77e>
 800fb02:	2000      	movs	r0, #0
 800fb04:	e67d      	b.n	800f802 <pjpeg_decode_mcu+0x74a>
 800fb06:	2000      	movs	r0, #0
 800fb08:	e65b      	b.n	800f7c2 <pjpeg_decode_mcu+0x70a>
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	e63a      	b.n	800f784 <pjpeg_decode_mcu+0x6cc>
 800fb0e:	2000      	movs	r0, #0
 800fb10:	e619      	b.n	800f746 <pjpeg_decode_mcu+0x68e>
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800fb12:	4a24      	ldr	r2, [pc, #144]	; (800fba4 <pjpeg_decode_mcu+0xaec>)
 800fb14:	9203      	str	r2, [sp, #12]
 800fb16:	7812      	ldrb	r2, [r2, #0]
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	f47f aaec 	bne.w	800f0f6 <pjpeg_decode_mcu+0x3e>
 800fb1e:	e7cc      	b.n	800faba <pjpeg_decode_mcu+0xa02>
      while (k < 64)
 800fb20:	2c3f      	cmp	r4, #63	; 0x3f
 800fb22:	f63f ac26 	bhi.w	800f372 <pjpeg_decode_mcu+0x2ba>
 800fb26:	4b20      	ldr	r3, [pc, #128]	; (800fba8 <pjpeg_decode_mcu+0xaf0>)
 800fb28:	f1c4 023f 	rsb	r2, r4, #63	; 0x3f
 800fb2c:	4917      	ldr	r1, [pc, #92]	; (800fb8c <pjpeg_decode_mcu+0xad4>)
 800fb2e:	4423      	add	r3, r4
 800fb30:	440c      	add	r4, r1
 800fb32:	fa53 f282 	uxtab	r2, r3, r2
        gCoeffBuf[ZAG[k++]] = 0;
 800fb36:	f914 3b01 	ldrsb.w	r3, [r4], #1
 800fb3a:	4915      	ldr	r1, [pc, #84]	; (800fb90 <pjpeg_decode_mcu+0xad8>)
      while (k < 64)
 800fb3c:	42a2      	cmp	r2, r4
        gCoeffBuf[ZAG[k++]] = 0;
 800fb3e:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
      while (k < 64)
 800fb42:	d1f8      	bne.n	800fb36 <pjpeg_decode_mcu+0xa7e>
 800fb44:	e415      	b.n	800f372 <pjpeg_decode_mcu+0x2ba>
  int16 *pSrc = gCoeffBuf;
 800fb46:	4a12      	ldr	r2, [pc, #72]	; (800fb90 <pjpeg_decode_mcu+0xad8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 800fb48:	4d18      	ldr	r5, [pc, #96]	; (800fbac <pjpeg_decode_mcu+0xaf4>)
 800fb4a:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 800fb4e:	4c12      	ldr	r4, [pc, #72]	; (800fb98 <pjpeg_decode_mcu+0xae0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 800fb50:	4810      	ldr	r0, [pc, #64]	; (800fb94 <pjpeg_decode_mcu+0xadc>)
    uint8 c = (uint8)*pSrc++;
 800fb52:	f832 3b02 	ldrh.w	r3, [r2], #2
 800fb56:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 800fb58:	428a      	cmp	r2, r1
    *pRDst++ = c;
 800fb5a:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 800fb5e:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 800fb62:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 800fb66:	d1f4      	bne.n	800fb52 <pjpeg_decode_mcu+0xa9a>
 800fb68:	e797      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
    switch (mcuBlock) {
 800fb6a:	9b01      	ldr	r3, [sp, #4]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	f000 84f4 	beq.w	801055a <pjpeg_decode_mcu+0x14a2>
 800fb72:	f0c0 84df 	bcc.w	8010534 <pjpeg_decode_mcu+0x147c>
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d18f      	bne.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  uint8 *pDstG = gMCUBufG + dstOfs;
 800fb7a:	4807      	ldr	r0, [pc, #28]	; (800fb98 <pjpeg_decode_mcu+0xae0>)
 800fb7c:	4c0c      	ldr	r4, [pc, #48]	; (800fbb0 <pjpeg_decode_mcu+0xaf8>)
 800fb7e:	f100 0640 	add.w	r6, r0, #64	; 0x40
  int16 *pSrc = gCoeffBuf;
 800fb82:	4d03      	ldr	r5, [pc, #12]	; (800fb90 <pjpeg_decode_mcu+0xad8>)
 800fb84:	e03a      	b.n	800fbfc <pjpeg_decode_mcu+0xb44>
 800fb86:	bf00      	nop
 800fb88:	20004a8a 	.word	0x20004a8a
 800fb8c:	0801ce78 	.word	0x0801ce78
 800fb90:	20004160 	.word	0x20004160
 800fb94:	20004870 	.word	0x20004870
 800fb98:	20004770 	.word	0x20004770
 800fb9c:	2000415d 	.word	0x2000415d
 800fba0:	20004980 	.word	0x20004980
 800fba4:	20004976 	.word	0x20004976
 800fba8:	0801ce79 	.word	0x0801ce79
 800fbac:	20004670 	.word	0x20004670
 800fbb0:	2000486f 	.word	0x2000486f
  b = a + b;
 800fbb4:	b211      	sxth	r1, r2
    if (b < 0)
 800fbb6:	2900      	cmp	r1, #0
 800fbb8:	f2c0 83ce 	blt.w	8010358 <pjpeg_decode_mcu+0x12a0>
    else if (b > 255)
 800fbbc:	29ff      	cmp	r1, #255	; 0xff
 800fbbe:	dd30      	ble.n	800fc22 <pjpeg_decode_mcu+0xb6a>
      return 255;
 800fbc0:	22ff      	movs	r2, #255	; 0xff
    crG = ((cr * 183U) >> 8U) - 91;
 800fbc2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    pDstR[0] = addAndClamp(pDstR[0], crR);
 800fbc6:	7022      	strb	r2, [r4, #0]
  b = a - b;
 800fbc8:	7802      	ldrb	r2, [r0, #0]
    crG = ((cr * 183U) >> 8U) - 91;
 800fbca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fbce:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800fbd2:	0a1b      	lsrs	r3, r3, #8
  b = a - b;
 800fbd4:	f1c3 035b 	rsb	r3, r3, #91	; 0x5b
 800fbd8:	4413      	add	r3, r2
 800fbda:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800fbdc:	2bff      	cmp	r3, #255	; 0xff
 800fbde:	f240 83b9 	bls.w	8010354 <pjpeg_decode_mcu+0x129c>
  b = a - b;
 800fbe2:	b21a      	sxth	r2, r3
    if (b < 0)
 800fbe4:	2a00      	cmp	r2, #0
 800fbe6:	f2c0 83b9 	blt.w	801035c <pjpeg_decode_mcu+0x12a4>
    else if (b > 255)
 800fbea:	2aff      	cmp	r2, #255	; 0xff
 800fbec:	f340 83b2 	ble.w	8010354 <pjpeg_decode_mcu+0x129c>
      return 255;
 800fbf0:	23ff      	movs	r3, #255	; 0xff
    pDstG[0] = subAndClamp(pDstG[0], crG);
 800fbf2:	f800 3b01 	strb.w	r3, [r0], #1
  for (i = 64; i > 0; i--) {
 800fbf6:	42b0      	cmp	r0, r6
 800fbf8:	f43f af4f 	beq.w	800fa9a <pjpeg_decode_mcu+0x9e2>
    uint8 cr = (uint8)*pSrc++;
 800fbfc:	f935 1b02 	ldrsh.w	r1, [r5], #2
  b = a + b;
 800fc00:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    uint8 cr = (uint8)*pSrc++;
 800fc04:	b2c9      	uxtb	r1, r1
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800fc06:	b20b      	sxth	r3, r1
  b = a + b;
 800fc08:	440a      	add	r2, r1
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800fc0a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  b = a + b;
 800fc0e:	3ab3      	subs	r2, #179	; 0xb3
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800fc10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800fc14:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  b = a + b;
 800fc18:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 800fc1c:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800fc1e:	2aff      	cmp	r2, #255	; 0xff
 800fc20:	d8c8      	bhi.n	800fbb4 <pjpeg_decode_mcu+0xafc>
  return (uint8)b;
 800fc22:	b2d2      	uxtb	r2, r2
 800fc24:	e7cd      	b.n	800fbc2 <pjpeg_decode_mcu+0xb0a>
    switch (mcuBlock) {
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	2b03      	cmp	r3, #3
 800fc2a:	f63f af36 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800fc2e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fc32:	00ad      	.short	0x00ad
 800fc34:	01a8009b 	.word	0x01a8009b
 800fc38:	019f      	.short	0x019f
    switch (mcuBlock) {
 800fc3a:	9b01      	ldr	r3, [sp, #4]
 800fc3c:	2b03      	cmp	r3, #3
 800fc3e:	f63f af2c 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800fc42:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fc46:	00c7      	.short	0x00c7
 800fc48:	00e200b5 	.word	0x00e200b5
 800fc4c:	00d9      	.short	0x00d9
    switch (mcuBlock) {
 800fc4e:	9b01      	ldr	r3, [sp, #4]
 800fc50:	2b05      	cmp	r3, #5
 800fc52:	f63f af22 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800fc56:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fc5a:	0292      	.short	0x0292
 800fc5c:	026e0280 	.word	0x026e0280
 800fc60:	02b5025c 	.word	0x02b5025c
 800fc64:	02a4      	.short	0x02a4
    switch (mcuBlock) {
 800fc66:	9a01      	ldr	r2, [sp, #4]
 800fc68:	2a05      	cmp	r2, #5
 800fc6a:	f63f af16 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800fc6e:	a101      	add	r1, pc, #4	; (adr r1, 800fc74 <pjpeg_decode_mcu+0xbbc>)
 800fc70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fc74:	0800fd33 	.word	0x0800fd33
 800fc78:	0800fd41 	.word	0x0800fd41
 800fc7c:	0800fd55 	.word	0x0800fd55
 800fc80:	080101e7 	.word	0x080101e7
 800fc84:	08010231 	.word	0x08010231
 800fc88:	0800f977 	.word	0x0800f977
    switch (mcuBlock) {
 800fc8c:	9a01      	ldr	r2, [sp, #4]
 800fc8e:	2a03      	cmp	r2, #3
 800fc90:	f63f af03 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800fc94:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fc98:	005e004d 	.word	0x005e004d
 800fc9c:	00c20118 	.word	0x00c20118
    switch (mcuBlock) {
 800fca0:	9a01      	ldr	r2, [sp, #4]
 800fca2:	2a03      	cmp	r2, #3
 800fca4:	f63f aef9 	bhi.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 800fca8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fcac:	004a0043 	.word	0x004a0043
 800fcb0:	018801df 	.word	0x018801df
    switch (mcuBlock) {
 800fcb4:	9a01      	ldr	r2, [sp, #4]
 800fcb6:	2a01      	cmp	r2, #1
 800fcb8:	f000 83ee 	beq.w	8010498 <pjpeg_decode_mcu+0x13e0>
 800fcbc:	d339      	bcc.n	800fd32 <pjpeg_decode_mcu+0xc7a>
 800fcbe:	2a02      	cmp	r2, #2
 800fcc0:	f47f aeeb 	bne.w	800fa9a <pjpeg_decode_mcu+0x9e2>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800fcc4:	b21a      	sxth	r2, r3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800fcc6:	48b3      	ldr	r0, [pc, #716]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800fcc8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 800fccc:	7801      	ldrb	r1, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800fcce:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  b = a + b;
 800fcd2:	39b3      	subs	r1, #179	; 0xb3
 800fcd4:	440b      	add	r3, r1
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800fcd6:	eb02 0144 	add.w	r1, r2, r4, lsl #1
  b = a + b;
 800fcda:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 800fcde:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800fce0:	2bff      	cmp	r3, #255	; 0xff
 800fce2:	f240 8478 	bls.w	80105d6 <pjpeg_decode_mcu+0x151e>
  b = a + b;
 800fce6:	b219      	sxth	r1, r3
    if (b < 0)
 800fce8:	2900      	cmp	r1, #0
 800fcea:	f2c0 84bf 	blt.w	801066c <pjpeg_decode_mcu+0x15b4>
    else if (b > 255)
 800fcee:	29ff      	cmp	r1, #255	; 0xff
 800fcf0:	f340 8471 	ble.w	80105d6 <pjpeg_decode_mcu+0x151e>
      return 255;
 800fcf4:	23ff      	movs	r3, #255	; 0xff
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800fcf6:	4ca8      	ldr	r4, [pc, #672]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
      crG = ((c * 183U) >> 8U) - 91;
 800fcf8:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800fcfc:	7003      	strb	r3, [r0, #0]
      crG = ((c * 183U) >> 8U) - 91;
 800fcfe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  b = a - b;
 800fd02:	7823      	ldrb	r3, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 800fd04:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
  b = a - b;
 800fd08:	335b      	adds	r3, #91	; 0x5b
 800fd0a:	eba3 2312 	sub.w	r3, r3, r2, lsr #8
 800fd0e:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800fd10:	2bff      	cmp	r3, #255	; 0xff
 800fd12:	d906      	bls.n	800fd22 <pjpeg_decode_mcu+0xc6a>
  b = a - b;
 800fd14:	b21a      	sxth	r2, r3
    if (b < 0)
 800fd16:	2a00      	cmp	r2, #0
 800fd18:	f2c0 848a 	blt.w	8010630 <pjpeg_decode_mcu+0x1578>
    else if (b > 255)
 800fd1c:	2aff      	cmp	r2, #255	; 0xff
 800fd1e:	f300 84e8 	bgt.w	80106f2 <pjpeg_decode_mcu+0x163a>
  return (uint8)b;
 800fd22:	b2db      	uxtb	r3, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800fd24:	7023      	strb	r3, [r4, #0]
 800fd26:	e6b8      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
    gMCUBufR[0] = c;
 800fd28:	4a9a      	ldr	r2, [pc, #616]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
 800fd2a:	7013      	strb	r3, [r2, #0]
 800fd2c:	e6b5      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      return 255;
 800fd2e:	23ff      	movs	r3, #255	; 0xff
 800fd30:	e615      	b.n	800f95e <pjpeg_decode_mcu+0x8a6>
      gMCUBufR[0] = c;
 800fd32:	4a98      	ldr	r2, [pc, #608]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
      gMCUBufG[0] = c;
 800fd34:	4998      	ldr	r1, [pc, #608]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
      gMCUBufR[0] = c;
 800fd36:	7013      	strb	r3, [r2, #0]
      gMCUBufB[0] = c;
 800fd38:	4a98      	ldr	r2, [pc, #608]	; (800ff9c <pjpeg_decode_mcu+0xee4>)
      gMCUBufG[0] = c;
 800fd3a:	700b      	strb	r3, [r1, #0]
      gMCUBufB[0] = c;
 800fd3c:	7013      	strb	r3, [r2, #0]
 800fd3e:	e6ac      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      gMCUBufR[64] = c;
 800fd40:	4a94      	ldr	r2, [pc, #592]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
      gMCUBufG[64] = c;
 800fd42:	4995      	ldr	r1, [pc, #596]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
      gMCUBufR[64] = c;
 800fd44:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      gMCUBufB[64] = c;
 800fd48:	4a94      	ldr	r2, [pc, #592]	; (800ff9c <pjpeg_decode_mcu+0xee4>)
      gMCUBufG[64] = c;
 800fd4a:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
      gMCUBufB[64] = c;
 800fd4e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800fd52:	e6a2      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      gMCUBufR[128] = c;
 800fd54:	4a8f      	ldr	r2, [pc, #572]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
      gMCUBufG[128] = c;
 800fd56:	4990      	ldr	r1, [pc, #576]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
      gMCUBufR[128] = c;
 800fd58:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      gMCUBufB[128] = c;
 800fd5c:	4a8f      	ldr	r2, [pc, #572]	; (800ff9c <pjpeg_decode_mcu+0xee4>)
      gMCUBufG[128] = c;
 800fd5e:	f881 3080 	strb.w	r3, [r1, #128]	; 0x80
      gMCUBufB[128] = c;
 800fd62:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
 800fd66:	e698      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 800fd68:	4a8d      	ldr	r2, [pc, #564]	; (800ffa0 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 800fd6a:	4d8e      	ldr	r5, [pc, #568]	; (800ffa4 <pjpeg_decode_mcu+0xeec>)
 800fd6c:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 800fd70:	4c8d      	ldr	r4, [pc, #564]	; (800ffa8 <pjpeg_decode_mcu+0xef0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 800fd72:	488e      	ldr	r0, [pc, #568]	; (800ffac <pjpeg_decode_mcu+0xef4>)
    uint8 c = (uint8)*pSrc++;
 800fd74:	f832 3b02 	ldrh.w	r3, [r2], #2
 800fd78:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 800fd7a:	428a      	cmp	r2, r1
    *pRDst++ = c;
 800fd7c:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 800fd80:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 800fd84:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 800fd88:	d1f4      	bne.n	800fd74 <pjpeg_decode_mcu+0xcbc>
 800fd8a:	e686      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 800fd8c:	4a84      	ldr	r2, [pc, #528]	; (800ffa0 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 800fd8e:	4d83      	ldr	r5, [pc, #524]	; (800ff9c <pjpeg_decode_mcu+0xee4>)
 800fd90:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 800fd94:	4c80      	ldr	r4, [pc, #512]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 800fd96:	487f      	ldr	r0, [pc, #508]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
    uint8 c = (uint8)*pSrc++;
 800fd98:	f832 3b02 	ldrh.w	r3, [r2], #2
 800fd9c:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 800fd9e:	428a      	cmp	r2, r1
    *pRDst++ = c;
 800fda0:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 800fda4:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 800fda8:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 800fdac:	d1f4      	bne.n	800fd98 <pjpeg_decode_mcu+0xce0>
 800fdae:	e674      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 800fdb0:	4a7b      	ldr	r2, [pc, #492]	; (800ffa0 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 800fdb2:	4d7f      	ldr	r5, [pc, #508]	; (800ffb0 <pjpeg_decode_mcu+0xef8>)
 800fdb4:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 800fdb8:	4c7e      	ldr	r4, [pc, #504]	; (800ffb4 <pjpeg_decode_mcu+0xefc>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 800fdba:	487f      	ldr	r0, [pc, #508]	; (800ffb8 <pjpeg_decode_mcu+0xf00>)
    uint8 c = (uint8)*pSrc++;
 800fdbc:	f832 3b02 	ldrh.w	r3, [r2], #2
 800fdc0:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 800fdc2:	428a      	cmp	r2, r1
    *pRDst++ = c;
 800fdc4:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 800fdc8:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 800fdcc:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 800fdd0:	d1f4      	bne.n	800fdbc <pjpeg_decode_mcu+0xd04>
 800fdd2:	e662      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 800fdd4:	4a72      	ldr	r2, [pc, #456]	; (800ffa0 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 800fdd6:	4d71      	ldr	r5, [pc, #452]	; (800ff9c <pjpeg_decode_mcu+0xee4>)
 800fdd8:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 800fddc:	4c6e      	ldr	r4, [pc, #440]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 800fdde:	486d      	ldr	r0, [pc, #436]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
    uint8 c = (uint8)*pSrc++;
 800fde0:	f832 3b02 	ldrh.w	r3, [r2], #2
 800fde4:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 800fde6:	428a      	cmp	r2, r1
    *pRDst++ = c;
 800fde8:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 800fdec:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 800fdf0:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 800fdf4:	d1f4      	bne.n	800fde0 <pjpeg_decode_mcu+0xd28>
 800fdf6:	e650      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      upsampleCrH(0, 0);
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	4608      	mov	r0, r1
 800fdfc:	f7fd fcba 	bl	800d774 <upsampleCrH>
      upsampleCrH(4, 64);
 800fe00:	2140      	movs	r1, #64	; 0x40
 800fe02:	2004      	movs	r0, #4
 800fe04:	f7fd fcb6 	bl	800d774 <upsampleCrH>
 800fe08:	e647      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      upsampleCbH(0, 0);
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	4608      	mov	r0, r1
 800fe0e:	f7fd fa87 	bl	800d320 <upsampleCbH>
      upsampleCbH(4, 64);
 800fe12:	2140      	movs	r1, #64	; 0x40
 800fe14:	2004      	movs	r0, #4
 800fe16:	f7fd fa83 	bl	800d320 <upsampleCbH>
 800fe1a:	e63e      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800fe1c:	b21a      	sxth	r2, r3
 800fe1e:	3bb3      	subs	r3, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800fe20:	485c      	ldr	r0, [pc, #368]	; (800ff94 <pjpeg_decode_mcu+0xedc>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800fe22:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 800fe26:	7801      	ldrb	r1, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800fe28:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800fe2c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800fe30:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 800fe34:	b29b      	uxth	r3, r3
  b = a + b;
 800fe36:	4419      	add	r1, r3
 800fe38:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800fe3a:	29ff      	cmp	r1, #255	; 0xff
 800fe3c:	f240 83ce 	bls.w	80105dc <pjpeg_decode_mcu+0x1524>
  b = a + b;
 800fe40:	b20c      	sxth	r4, r1
    if (b < 0)
 800fe42:	2c00      	cmp	r4, #0
 800fe44:	f2c0 8400 	blt.w	8010648 <pjpeg_decode_mcu+0x1590>
    else if (b > 255)
 800fe48:	2cff      	cmp	r4, #255	; 0xff
 800fe4a:	f340 83c7 	ble.w	80105dc <pjpeg_decode_mcu+0x1524>
      return 255;
 800fe4e:	21ff      	movs	r1, #255	; 0xff
  b = a + b;
 800fe50:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800fe54:	7001      	strb	r1, [r0, #0]
  b = a + b;
 800fe56:	4423      	add	r3, r4
 800fe58:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800fe5a:	2bff      	cmp	r3, #255	; 0xff
 800fe5c:	f240 83c0 	bls.w	80105e0 <pjpeg_decode_mcu+0x1528>
  b = a + b;
 800fe60:	b219      	sxth	r1, r3
    if (b < 0)
 800fe62:	2900      	cmp	r1, #0
 800fe64:	f2c0 83d8 	blt.w	8010618 <pjpeg_decode_mcu+0x1560>
    else if (b > 255)
 800fe68:	29ff      	cmp	r1, #255	; 0xff
 800fe6a:	f340 83b9 	ble.w	80105e0 <pjpeg_decode_mcu+0x1528>
      return 255;
 800fe6e:	23ff      	movs	r3, #255	; 0xff
      crG = ((c * 183U) >> 8U) - 91;
 800fe70:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 800fe74:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800fe78:	4c47      	ldr	r4, [pc, #284]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
      crG = ((c * 183U) >> 8U) - 91;
 800fe7a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  b = a - b;
 800fe7e:	7821      	ldrb	r1, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 800fe80:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
 800fe84:	0a13      	lsrs	r3, r2, #8
 800fe86:	3b5b      	subs	r3, #91	; 0x5b
 800fe88:	b29b      	uxth	r3, r3
  b = a - b;
 800fe8a:	1ac9      	subs	r1, r1, r3
 800fe8c:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800fe8e:	29ff      	cmp	r1, #255	; 0xff
 800fe90:	f240 83b0 	bls.w	80105f4 <pjpeg_decode_mcu+0x153c>
  b = a - b;
 800fe94:	b20a      	sxth	r2, r1
    if (b < 0)
 800fe96:	2a00      	cmp	r2, #0
 800fe98:	f2c0 83d4 	blt.w	8010644 <pjpeg_decode_mcu+0x158c>
    else if (b > 255)
 800fe9c:	2aff      	cmp	r2, #255	; 0xff
 800fe9e:	f340 83a9 	ble.w	80105f4 <pjpeg_decode_mcu+0x153c>
      return 255;
 800fea2:	21ff      	movs	r1, #255	; 0xff
  b = a - b;
 800fea4:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 800fea8:	7021      	strb	r1, [r4, #0]
  b = a - b;
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800feae:	2bff      	cmp	r3, #255	; 0xff
 800feb0:	d906      	bls.n	800fec0 <pjpeg_decode_mcu+0xe08>
  b = a - b;
 800feb2:	b21a      	sxth	r2, r3
    if (b < 0)
 800feb4:	2a00      	cmp	r2, #0
 800feb6:	f2c0 83c9 	blt.w	801064c <pjpeg_decode_mcu+0x1594>
    else if (b > 255)
 800feba:	2aff      	cmp	r2, #255	; 0xff
 800febc:	f300 840e 	bgt.w	80106dc <pjpeg_decode_mcu+0x1624>
  return (uint8)b;
 800fec0:	b2db      	uxtb	r3, r3
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 800fec2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800fec6:	e5e8      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      cbG = ((c * 88U) >> 8U) - 44U;
 800fec8:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800feca:	4c33      	ldr	r4, [pc, #204]	; (800ff98 <pjpeg_decode_mcu+0xee0>)
      cbG = ((c * 88U) >> 8U) - 44U;
 800fecc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 800fed0:	7820      	ldrb	r0, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 800fed2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fed6:	0949      	lsrs	r1, r1, #5
 800fed8:	392c      	subs	r1, #44	; 0x2c
 800feda:	b28d      	uxth	r5, r1
  b = a - b;
 800fedc:	1b40      	subs	r0, r0, r5
 800fede:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 800fee0:	28ff      	cmp	r0, #255	; 0xff
 800fee2:	f240 8385 	bls.w	80105f0 <pjpeg_decode_mcu+0x1538>
  b = a - b;
 800fee6:	b201      	sxth	r1, r0
    if (b < 0)
 800fee8:	2900      	cmp	r1, #0
 800feea:	f2c0 83bb 	blt.w	8010664 <pjpeg_decode_mcu+0x15ac>
    else if (b > 255)
 800feee:	29ff      	cmp	r1, #255	; 0xff
 800fef0:	f340 837e 	ble.w	80105f0 <pjpeg_decode_mcu+0x1538>
      return 255;
 800fef4:	20ff      	movs	r0, #255	; 0xff
  b = a - b;
 800fef6:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 800fefa:	7020      	strb	r0, [r4, #0]
  b = a - b;
 800fefc:	1b49      	subs	r1, r1, r5
 800fefe:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800ff00:	29ff      	cmp	r1, #255	; 0xff
 800ff02:	f240 8373 	bls.w	80105ec <pjpeg_decode_mcu+0x1534>
  b = a - b;
 800ff06:	b208      	sxth	r0, r1
    if (b < 0)
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	f2c0 83a9 	blt.w	8010660 <pjpeg_decode_mcu+0x15a8>
    else if (b > 255)
 800ff0e:	28ff      	cmp	r0, #255	; 0xff
 800ff10:	f340 836c 	ble.w	80105ec <pjpeg_decode_mcu+0x1534>
      return 255;
 800ff14:	21ff      	movs	r1, #255	; 0xff
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800ff16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ff1a:	f1a3 00e3 	sub.w	r0, r3, #227	; 0xe3
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 800ff1e:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800ff22:	eb02 1242 	add.w	r2, r2, r2, lsl #5
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 800ff26:	491d      	ldr	r1, [pc, #116]	; (800ff9c <pjpeg_decode_mcu+0xee4>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800ff28:	f3c2 13d7 	ubfx	r3, r2, #7, #24
  b = a + b;
 800ff2c:	780a      	ldrb	r2, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 800ff2e:	4403      	add	r3, r0
 800ff30:	b29b      	uxth	r3, r3
  b = a + b;
 800ff32:	441a      	add	r2, r3
 800ff34:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800ff36:	2aff      	cmp	r2, #255	; 0xff
 800ff38:	f240 8354 	bls.w	80105e4 <pjpeg_decode_mcu+0x152c>
  b = a + b;
 800ff3c:	b210      	sxth	r0, r2
    if (b < 0)
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	f2c0 8372 	blt.w	8010628 <pjpeg_decode_mcu+0x1570>
    else if (b > 255)
 800ff44:	28ff      	cmp	r0, #255	; 0xff
 800ff46:	f340 834d 	ble.w	80105e4 <pjpeg_decode_mcu+0x152c>
      return 255;
 800ff4a:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 800ff4c:	f891 0080 	ldrb.w	r0, [r1, #128]	; 0x80
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 800ff50:	700a      	strb	r2, [r1, #0]
  b = a + b;
 800ff52:	4403      	add	r3, r0
 800ff54:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800ff56:	2bff      	cmp	r3, #255	; 0xff
 800ff58:	d906      	bls.n	800ff68 <pjpeg_decode_mcu+0xeb0>
  b = a + b;
 800ff5a:	b21a      	sxth	r2, r3
    if (b < 0)
 800ff5c:	2a00      	cmp	r2, #0
 800ff5e:	f2c0 8359 	blt.w	8010614 <pjpeg_decode_mcu+0x155c>
    else if (b > 255)
 800ff62:	2aff      	cmp	r2, #255	; 0xff
 800ff64:	f300 83c9 	bgt.w	80106fa <pjpeg_decode_mcu+0x1642>
  return (uint8)b;
 800ff68:	b2db      	uxtb	r3, r3
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 800ff6a:	f881 3080 	strb.w	r3, [r1, #128]	; 0x80
 800ff6e:	e594      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      upsampleCrV(0, 0);
 800ff70:	2100      	movs	r1, #0
 800ff72:	4608      	mov	r0, r1
 800ff74:	f7fd fc94 	bl	800d8a0 <upsampleCrV>
      upsampleCrV(4 * 8, 128);
 800ff78:	2180      	movs	r1, #128	; 0x80
 800ff7a:	2020      	movs	r0, #32
 800ff7c:	f7fd fc90 	bl	800d8a0 <upsampleCrV>
 800ff80:	e58b      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      upsampleCbV(0, 0);
 800ff82:	2100      	movs	r1, #0
 800ff84:	4608      	mov	r0, r1
 800ff86:	f7fd fa65 	bl	800d454 <upsampleCbV>
      upsampleCbV(4 * 8, 128);
 800ff8a:	2180      	movs	r1, #128	; 0x80
 800ff8c:	2020      	movs	r0, #32
 800ff8e:	f7fd fa61 	bl	800d454 <upsampleCbV>
 800ff92:	e582      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
 800ff94:	20004870 	.word	0x20004870
 800ff98:	20004770 	.word	0x20004770
 800ff9c:	20004670 	.word	0x20004670
 800ffa0:	20004160 	.word	0x20004160
 800ffa4:	200046f0 	.word	0x200046f0
 800ffa8:	200047f0 	.word	0x200047f0
 800ffac:	200048f0 	.word	0x200048f0
 800ffb0:	200046b0 	.word	0x200046b0
 800ffb4:	200047b0 	.word	0x200047b0
 800ffb8:	200048b0 	.word	0x200048b0
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800ffbc:	b21a      	sxth	r2, r3
 800ffbe:	f1a3 01b3 	sub.w	r1, r3, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800ffc2:	488e      	ldr	r0, [pc, #568]	; (80101fc <pjpeg_decode_mcu+0x1144>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800ffc4:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 800ffc8:	7803      	ldrb	r3, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 800ffca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800ffce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ffd2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800ffd6:	b289      	uxth	r1, r1
  b = a + b;
 800ffd8:	440b      	add	r3, r1
 800ffda:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800ffdc:	2bff      	cmp	r3, #255	; 0xff
 800ffde:	f240 830f 	bls.w	8010600 <pjpeg_decode_mcu+0x1548>
  b = a + b;
 800ffe2:	b21c      	sxth	r4, r3
    if (b < 0)
 800ffe4:	2c00      	cmp	r4, #0
 800ffe6:	f2c0 8335 	blt.w	8010654 <pjpeg_decode_mcu+0x159c>
    else if (b > 255)
 800ffea:	2cff      	cmp	r4, #255	; 0xff
 800ffec:	f340 8308 	ble.w	8010600 <pjpeg_decode_mcu+0x1548>
      return 255;
 800fff0:	23ff      	movs	r3, #255	; 0xff
  b = a + b;
 800fff2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 800fff6:	7003      	strb	r3, [r0, #0]
  b = a + b;
 800fff8:	4421      	add	r1, r4
 800fffa:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 800fffc:	29ff      	cmp	r1, #255	; 0xff
 800fffe:	f240 8301 	bls.w	8010604 <pjpeg_decode_mcu+0x154c>
  b = a + b;
 8010002:	b20b      	sxth	r3, r1
    if (b < 0)
 8010004:	2b00      	cmp	r3, #0
 8010006:	f2c0 8327 	blt.w	8010658 <pjpeg_decode_mcu+0x15a0>
    else if (b > 255)
 801000a:	2bff      	cmp	r3, #255	; 0xff
 801000c:	f340 82fa 	ble.w	8010604 <pjpeg_decode_mcu+0x154c>
      return 255;
 8010010:	21ff      	movs	r1, #255	; 0xff
      crG = ((c * 183U) >> 8U) - 91;
 8010012:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8010016:	4c7a      	ldr	r4, [pc, #488]	; (8010200 <pjpeg_decode_mcu+0x1148>)
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 8010018:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
      crG = ((c * 183U) >> 8U) - 91;
 801001c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  b = a - b;
 8010020:	7821      	ldrb	r1, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8010022:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
 8010026:	0a13      	lsrs	r3, r2, #8
 8010028:	3b5b      	subs	r3, #91	; 0x5b
 801002a:	b29b      	uxth	r3, r3
  b = a - b;
 801002c:	1ac9      	subs	r1, r1, r3
 801002e:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010030:	29ff      	cmp	r1, #255	; 0xff
 8010032:	f240 82e9 	bls.w	8010608 <pjpeg_decode_mcu+0x1550>
  b = a - b;
 8010036:	b20a      	sxth	r2, r1
    if (b < 0)
 8010038:	2a00      	cmp	r2, #0
 801003a:	f2c0 82e9 	blt.w	8010610 <pjpeg_decode_mcu+0x1558>
    else if (b > 255)
 801003e:	2aff      	cmp	r2, #255	; 0xff
 8010040:	f340 82e2 	ble.w	8010608 <pjpeg_decode_mcu+0x1550>
      return 255;
 8010044:	21ff      	movs	r1, #255	; 0xff
  b = a - b;
 8010046:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 801004a:	7021      	strb	r1, [r4, #0]
  b = a - b;
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010050:	2bff      	cmp	r3, #255	; 0xff
 8010052:	d906      	bls.n	8010062 <pjpeg_decode_mcu+0xfaa>
  b = a - b;
 8010054:	b21a      	sxth	r2, r3
    if (b < 0)
 8010056:	2a00      	cmp	r2, #0
 8010058:	f2c0 82ee 	blt.w	8010638 <pjpeg_decode_mcu+0x1580>
    else if (b > 255)
 801005c:	2aff      	cmp	r2, #255	; 0xff
 801005e:	f300 8350 	bgt.w	8010702 <pjpeg_decode_mcu+0x164a>
  return (uint8)b;
 8010062:	b2db      	uxtb	r3, r3
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 8010064:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010068:	e517      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      cbG = ((c * 88U) >> 8U) - 44U;
 801006a:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 801006c:	4c64      	ldr	r4, [pc, #400]	; (8010200 <pjpeg_decode_mcu+0x1148>)
      cbG = ((c * 88U) >> 8U) - 44U;
 801006e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 8010072:	7820      	ldrb	r0, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 8010074:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010078:	0949      	lsrs	r1, r1, #5
 801007a:	392c      	subs	r1, #44	; 0x2c
 801007c:	b28d      	uxth	r5, r1
  b = a - b;
 801007e:	1b40      	subs	r0, r0, r5
 8010080:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 8010082:	28ff      	cmp	r0, #255	; 0xff
 8010084:	f240 82ba 	bls.w	80105fc <pjpeg_decode_mcu+0x1544>
  b = a - b;
 8010088:	b201      	sxth	r1, r0
    if (b < 0)
 801008a:	2900      	cmp	r1, #0
 801008c:	f2c0 82be 	blt.w	801060c <pjpeg_decode_mcu+0x1554>
    else if (b > 255)
 8010090:	29ff      	cmp	r1, #255	; 0xff
 8010092:	f340 82b3 	ble.w	80105fc <pjpeg_decode_mcu+0x1544>
      return 255;
 8010096:	20ff      	movs	r0, #255	; 0xff
  b = a - b;
 8010098:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 801009c:	7020      	strb	r0, [r4, #0]
  b = a - b;
 801009e:	1b49      	subs	r1, r1, r5
 80100a0:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 80100a2:	29ff      	cmp	r1, #255	; 0xff
 80100a4:	f240 82a8 	bls.w	80105f8 <pjpeg_decode_mcu+0x1540>
  b = a - b;
 80100a8:	b208      	sxth	r0, r1
    if (b < 0)
 80100aa:	2800      	cmp	r0, #0
 80100ac:	f2c0 82b6 	blt.w	801061c <pjpeg_decode_mcu+0x1564>
    else if (b > 255)
 80100b0:	28ff      	cmp	r0, #255	; 0xff
 80100b2:	f340 82a1 	ble.w	80105f8 <pjpeg_decode_mcu+0x1540>
      return 255;
 80100b6:	21ff      	movs	r1, #255	; 0xff
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80100b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80100bc:	f1a3 00e3 	sub.w	r0, r3, #227	; 0xe3
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 80100c0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80100c4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80100c8:	494e      	ldr	r1, [pc, #312]	; (8010204 <pjpeg_decode_mcu+0x114c>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80100ca:	f3c2 13d7 	ubfx	r3, r2, #7, #24
  b = a + b;
 80100ce:	780a      	ldrb	r2, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80100d0:	4403      	add	r3, r0
 80100d2:	b29b      	uxth	r3, r3
  b = a + b;
 80100d4:	441a      	add	r2, r3
 80100d6:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 80100d8:	2aff      	cmp	r2, #255	; 0xff
 80100da:	f240 8285 	bls.w	80105e8 <pjpeg_decode_mcu+0x1530>
  b = a + b;
 80100de:	b210      	sxth	r0, r2
    if (b < 0)
 80100e0:	2800      	cmp	r0, #0
 80100e2:	f2c0 82a3 	blt.w	801062c <pjpeg_decode_mcu+0x1574>
    else if (b > 255)
 80100e6:	28ff      	cmp	r0, #255	; 0xff
 80100e8:	f340 827e 	ble.w	80105e8 <pjpeg_decode_mcu+0x1530>
      return 255;
 80100ec:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 80100ee:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80100f2:	700a      	strb	r2, [r1, #0]
  b = a + b;
 80100f4:	4403      	add	r3, r0
 80100f6:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 80100f8:	2bff      	cmp	r3, #255	; 0xff
 80100fa:	d906      	bls.n	801010a <pjpeg_decode_mcu+0x1052>
  b = a + b;
 80100fc:	b21a      	sxth	r2, r3
    if (b < 0)
 80100fe:	2a00      	cmp	r2, #0
 8010100:	f2c0 82ac 	blt.w	801065c <pjpeg_decode_mcu+0x15a4>
    else if (b > 255)
 8010104:	2aff      	cmp	r2, #255	; 0xff
 8010106:	f300 8302 	bgt.w	801070e <pjpeg_decode_mcu+0x1656>
  return (uint8)b;
 801010a:	b2db      	uxtb	r3, r3
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 801010c:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
 8010110:	e4c3      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010112:	4a3d      	ldr	r2, [pc, #244]	; (8010208 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010114:	4d3d      	ldr	r5, [pc, #244]	; (801020c <pjpeg_decode_mcu+0x1154>)
 8010116:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 801011a:	4c3d      	ldr	r4, [pc, #244]	; (8010210 <pjpeg_decode_mcu+0x1158>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 801011c:	483d      	ldr	r0, [pc, #244]	; (8010214 <pjpeg_decode_mcu+0x115c>)
    uint8 c = (uint8)*pSrc++;
 801011e:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010122:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010124:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010126:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 801012a:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 801012e:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010132:	d1f4      	bne.n	801011e <pjpeg_decode_mcu+0x1066>
 8010134:	e4b1      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010136:	4a34      	ldr	r2, [pc, #208]	; (8010208 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010138:	4d37      	ldr	r5, [pc, #220]	; (8010218 <pjpeg_decode_mcu+0x1160>)
 801013a:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 801013e:	4c37      	ldr	r4, [pc, #220]	; (801021c <pjpeg_decode_mcu+0x1164>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010140:	4837      	ldr	r0, [pc, #220]	; (8010220 <pjpeg_decode_mcu+0x1168>)
    uint8 c = (uint8)*pSrc++;
 8010142:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010146:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010148:	428a      	cmp	r2, r1
    *pRDst++ = c;
 801014a:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 801014e:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010152:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010156:	d1f4      	bne.n	8010142 <pjpeg_decode_mcu+0x108a>
 8010158:	e49f      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 801015a:	4a2b      	ldr	r2, [pc, #172]	; (8010208 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 801015c:	4d31      	ldr	r5, [pc, #196]	; (8010224 <pjpeg_decode_mcu+0x116c>)
 801015e:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010162:	4c31      	ldr	r4, [pc, #196]	; (8010228 <pjpeg_decode_mcu+0x1170>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010164:	4831      	ldr	r0, [pc, #196]	; (801022c <pjpeg_decode_mcu+0x1174>)
    uint8 c = (uint8)*pSrc++;
 8010166:	f832 3b02 	ldrh.w	r3, [r2], #2
 801016a:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 801016c:	428a      	cmp	r2, r1
    *pRDst++ = c;
 801016e:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010172:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010176:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 801017a:	d1f4      	bne.n	8010166 <pjpeg_decode_mcu+0x10ae>
 801017c:	e48d      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 801017e:	4a22      	ldr	r2, [pc, #136]	; (8010208 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010180:	4d20      	ldr	r5, [pc, #128]	; (8010204 <pjpeg_decode_mcu+0x114c>)
 8010182:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010186:	4c1e      	ldr	r4, [pc, #120]	; (8010200 <pjpeg_decode_mcu+0x1148>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010188:	481c      	ldr	r0, [pc, #112]	; (80101fc <pjpeg_decode_mcu+0x1144>)
    uint8 c = (uint8)*pSrc++;
 801018a:	f832 3b02 	ldrh.w	r3, [r2], #2
 801018e:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010190:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010192:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010196:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 801019a:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 801019e:	d1f4      	bne.n	801018a <pjpeg_decode_mcu+0x10d2>
 80101a0:	e47b      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      upsampleCr(0, 0);
 80101a2:	2100      	movs	r1, #0
 80101a4:	4608      	mov	r0, r1
 80101a6:	f7fd f9f1 	bl	800d58c <upsampleCr>
      upsampleCr(4, 64);
 80101aa:	2140      	movs	r1, #64	; 0x40
 80101ac:	2004      	movs	r0, #4
 80101ae:	f7fd f9ed 	bl	800d58c <upsampleCr>
      upsampleCr(4 * 8, 128);
 80101b2:	2180      	movs	r1, #128	; 0x80
 80101b4:	2020      	movs	r0, #32
 80101b6:	f7fd f9e9 	bl	800d58c <upsampleCr>
      upsampleCr(4 + 4 * 8, 192);
 80101ba:	21c0      	movs	r1, #192	; 0xc0
 80101bc:	2024      	movs	r0, #36	; 0x24
 80101be:	f7fd f9e5 	bl	800d58c <upsampleCr>
 80101c2:	e46a      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      upsampleCb(0, 0);
 80101c4:	2100      	movs	r1, #0
 80101c6:	4608      	mov	r0, r1
 80101c8:	f7fc ffb8 	bl	800d13c <upsampleCb>
      upsampleCb(4, 64);
 80101cc:	2140      	movs	r1, #64	; 0x40
 80101ce:	2004      	movs	r0, #4
 80101d0:	f7fc ffb4 	bl	800d13c <upsampleCb>
      upsampleCb(4 * 8, 128);
 80101d4:	2180      	movs	r1, #128	; 0x80
 80101d6:	2020      	movs	r0, #32
 80101d8:	f7fc ffb0 	bl	800d13c <upsampleCb>
      upsampleCb(4 + 4 * 8, 192);
 80101dc:	21c0      	movs	r1, #192	; 0xc0
 80101de:	2024      	movs	r0, #36	; 0x24
 80101e0:	f7fc ffac 	bl	800d13c <upsampleCb>
 80101e4:	e459      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
      gMCUBufR[192] = c;
 80101e6:	4a05      	ldr	r2, [pc, #20]	; (80101fc <pjpeg_decode_mcu+0x1144>)
      gMCUBufG[192] = c;
 80101e8:	4905      	ldr	r1, [pc, #20]	; (8010200 <pjpeg_decode_mcu+0x1148>)
      gMCUBufR[192] = c;
 80101ea:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
      gMCUBufB[192] = c;
 80101ee:	4a05      	ldr	r2, [pc, #20]	; (8010204 <pjpeg_decode_mcu+0x114c>)
      gMCUBufG[192] = c;
 80101f0:	f881 30c0 	strb.w	r3, [r1, #192]	; 0xc0
      gMCUBufB[192] = c;
 80101f4:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 80101f8:	e44f      	b.n	800fa9a <pjpeg_decode_mcu+0x9e2>
 80101fa:	bf00      	nop
 80101fc:	20004870 	.word	0x20004870
 8010200:	20004770 	.word	0x20004770
 8010204:	20004670 	.word	0x20004670
 8010208:	20004160 	.word	0x20004160
 801020c:	20004730 	.word	0x20004730
 8010210:	20004830 	.word	0x20004830
 8010214:	20004930 	.word	0x20004930
 8010218:	200046f0 	.word	0x200046f0
 801021c:	200047f0 	.word	0x200047f0
 8010220:	200048f0 	.word	0x200048f0
 8010224:	200046b0 	.word	0x200046b0
 8010228:	200047b0 	.word	0x200047b0
 801022c:	200048b0 	.word	0x200048b0
      cbG = ((c * 88U) >> 8U) - 44U;
 8010230:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010232:	4cb1      	ldr	r4, [pc, #708]	; (80104f8 <pjpeg_decode_mcu+0x1440>)
      cbG = ((c * 88U) >> 8U) - 44U;
 8010234:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 8010238:	7825      	ldrb	r5, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 801023a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801023e:	0949      	lsrs	r1, r1, #5
 8010240:	392c      	subs	r1, #44	; 0x2c
 8010242:	b289      	uxth	r1, r1
  b = a - b;
 8010244:	1a6d      	subs	r5, r5, r1
 8010246:	b2ad      	uxth	r5, r5
  if ((uint16)b > 255U) {
 8010248:	2dff      	cmp	r5, #255	; 0xff
 801024a:	d906      	bls.n	801025a <pjpeg_decode_mcu+0x11a2>
  b = a - b;
 801024c:	b228      	sxth	r0, r5
    if (b < 0)
 801024e:	2800      	cmp	r0, #0
 8010250:	f2c0 8255 	blt.w	80106fe <pjpeg_decode_mcu+0x1646>
    else if (b > 255)
 8010254:	28ff      	cmp	r0, #255	; 0xff
 8010256:	f300 81e3 	bgt.w	8010620 <pjpeg_decode_mcu+0x1568>
  return (uint8)b;
 801025a:	b2ed      	uxtb	r5, r5
  b = a - b;
 801025c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010260:	7025      	strb	r5, [r4, #0]
  b = a - b;
 8010262:	1a40      	subs	r0, r0, r1
 8010264:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 8010266:	28ff      	cmp	r0, #255	; 0xff
 8010268:	d906      	bls.n	8010278 <pjpeg_decode_mcu+0x11c0>
  b = a - b;
 801026a:	b205      	sxth	r5, r0
    if (b < 0)
 801026c:	2d00      	cmp	r5, #0
 801026e:	f2c0 823e 	blt.w	80106ee <pjpeg_decode_mcu+0x1636>
    else if (b > 255)
 8010272:	2dff      	cmp	r5, #255	; 0xff
 8010274:	f300 81d6 	bgt.w	8010624 <pjpeg_decode_mcu+0x156c>
  return (uint8)b;
 8010278:	b2c0      	uxtb	r0, r0
  b = a - b;
 801027a:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 801027e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  b = a - b;
 8010282:	1a6d      	subs	r5, r5, r1
 8010284:	b2ad      	uxth	r5, r5
  if ((uint16)b > 255U) {
 8010286:	2dff      	cmp	r5, #255	; 0xff
 8010288:	d906      	bls.n	8010298 <pjpeg_decode_mcu+0x11e0>
  b = a - b;
 801028a:	b228      	sxth	r0, r5
    if (b < 0)
 801028c:	2800      	cmp	r0, #0
 801028e:	f2c0 8240 	blt.w	8010712 <pjpeg_decode_mcu+0x165a>
    else if (b > 255)
 8010292:	28ff      	cmp	r0, #255	; 0xff
 8010294:	f300 81ed 	bgt.w	8010672 <pjpeg_decode_mcu+0x15ba>
  return (uint8)b;
 8010298:	b2ed      	uxtb	r5, r5
  b = a - b;
 801029a:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 801029e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
  b = a - b;
 80102a2:	1a41      	subs	r1, r0, r1
 80102a4:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 80102a6:	29ff      	cmp	r1, #255	; 0xff
 80102a8:	d906      	bls.n	80102b8 <pjpeg_decode_mcu+0x1200>
  b = a - b;
 80102aa:	b208      	sxth	r0, r1
    if (b < 0)
 80102ac:	2800      	cmp	r0, #0
 80102ae:	f2c0 8232 	blt.w	8010716 <pjpeg_decode_mcu+0x165e>
    else if (b > 255)
 80102b2:	28ff      	cmp	r0, #255	; 0xff
 80102b4:	f300 81df 	bgt.w	8010676 <pjpeg_decode_mcu+0x15be>
  return (uint8)b;
 80102b8:	b2c9      	uxtb	r1, r1
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80102ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80102be:	f1a3 00e3 	sub.w	r0, r3, #227	; 0xe3
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
 80102c2:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80102c6:	eb02 1242 	add.w	r2, r2, r2, lsl #5
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80102ca:	498c      	ldr	r1, [pc, #560]	; (80104fc <pjpeg_decode_mcu+0x1444>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80102cc:	f3c2 13d7 	ubfx	r3, r2, #7, #24
  b = a + b;
 80102d0:	780a      	ldrb	r2, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80102d2:	4403      	add	r3, r0
 80102d4:	b29b      	uxth	r3, r3
  b = a + b;
 80102d6:	441a      	add	r2, r3
 80102d8:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 80102da:	2aff      	cmp	r2, #255	; 0xff
 80102dc:	d906      	bls.n	80102ec <pjpeg_decode_mcu+0x1234>
  b = a + b;
 80102de:	b210      	sxth	r0, r2
    if (b < 0)
 80102e0:	2800      	cmp	r0, #0
 80102e2:	f2c0 821a 	blt.w	801071a <pjpeg_decode_mcu+0x1662>
    else if (b > 255)
 80102e6:	28ff      	cmp	r0, #255	; 0xff
 80102e8:	f300 81c7 	bgt.w	801067a <pjpeg_decode_mcu+0x15c2>
  return (uint8)b;
 80102ec:	b2d2      	uxtb	r2, r2
  b = a + b;
 80102ee:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80102f2:	700a      	strb	r2, [r1, #0]
  b = a + b;
 80102f4:	4418      	add	r0, r3
 80102f6:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 80102f8:	28ff      	cmp	r0, #255	; 0xff
 80102fa:	d906      	bls.n	801030a <pjpeg_decode_mcu+0x1252>
  b = a + b;
 80102fc:	b202      	sxth	r2, r0
    if (b < 0)
 80102fe:	2a00      	cmp	r2, #0
 8010300:	f2c0 820d 	blt.w	801071e <pjpeg_decode_mcu+0x1666>
    else if (b > 255)
 8010304:	2aff      	cmp	r2, #255	; 0xff
 8010306:	f300 81ba 	bgt.w	801067e <pjpeg_decode_mcu+0x15c6>
  return (uint8)b;
 801030a:	b2c0      	uxtb	r0, r0
  b = a + b;
 801030c:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 8010310:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
  b = a + b;
 8010314:	441a      	add	r2, r3
 8010316:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 8010318:	2aff      	cmp	r2, #255	; 0xff
 801031a:	d906      	bls.n	801032a <pjpeg_decode_mcu+0x1272>
  b = a + b;
 801031c:	b210      	sxth	r0, r2
    if (b < 0)
 801031e:	2800      	cmp	r0, #0
 8010320:	f2c0 81df 	blt.w	80106e2 <pjpeg_decode_mcu+0x162a>
    else if (b > 255)
 8010324:	28ff      	cmp	r0, #255	; 0xff
 8010326:	f300 8193 	bgt.w	8010650 <pjpeg_decode_mcu+0x1598>
  return (uint8)b;
 801032a:	b2d2      	uxtb	r2, r2
  b = a + b;
 801032c:	f891 00c0 	ldrb.w	r0, [r1, #192]	; 0xc0
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 8010330:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
  b = a + b;
 8010334:	4403      	add	r3, r0
 8010336:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010338:	2bff      	cmp	r3, #255	; 0xff
 801033a:	d906      	bls.n	801034a <pjpeg_decode_mcu+0x1292>
  b = a + b;
 801033c:	b21a      	sxth	r2, r3
    if (b < 0)
 801033e:	2a00      	cmp	r2, #0
 8010340:	f2c0 81d3 	blt.w	80106ea <pjpeg_decode_mcu+0x1632>
    else if (b > 255)
 8010344:	2aff      	cmp	r2, #255	; 0xff
 8010346:	f300 81ce 	bgt.w	80106e6 <pjpeg_decode_mcu+0x162e>
  return (uint8)b;
 801034a:	b2db      	uxtb	r3, r3
      gMCUBufB[192] = addAndClamp(gMCUBufB[192], cbB);
 801034c:	f881 30c0 	strb.w	r3, [r1, #192]	; 0xc0
 8010350:	f7ff bba3 	b.w	800fa9a <pjpeg_decode_mcu+0x9e2>
  return (uint8)b;
 8010354:	b2db      	uxtb	r3, r3
 8010356:	e44c      	b.n	800fbf2 <pjpeg_decode_mcu+0xb3a>
      return 0;
 8010358:	2200      	movs	r2, #0
 801035a:	e432      	b.n	800fbc2 <pjpeg_decode_mcu+0xb0a>
      return 0;
 801035c:	2300      	movs	r3, #0
 801035e:	e448      	b.n	800fbf2 <pjpeg_decode_mcu+0xb3a>
      return 0;
 8010360:	2300      	movs	r3, #0
 8010362:	f7ff bafc 	b.w	800f95e <pjpeg_decode_mcu+0x8a6>
 8010366:	4d66      	ldr	r5, [pc, #408]	; (8010500 <pjpeg_decode_mcu+0x1448>)
    if (gRestartsLeft == 0) {
 8010368:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801036c:	4e65      	ldr	r6, [pc, #404]	; (8010504 <pjpeg_decode_mcu+0x144c>)
 801036e:	782b      	ldrb	r3, [r5, #0]
  if (!gInBufLeft) {
 8010370:	46a0      	mov	r8, r4
 8010372:	bb3b      	cbnz	r3, 80103c4 <pjpeg_decode_mcu+0x130c>
 8010374:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 801052c <pjpeg_decode_mcu+0x1474>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010378:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8010500 <pjpeg_decode_mcu+0x1448>
 801037c:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8010530 <pjpeg_decode_mcu+0x1478>
  gInBufLeft = 0;
 8010380:	2300      	movs	r3, #0
  gInBufOfs = 4;
 8010382:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010386:	464a      	mov	r2, r9
 8010388:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 801038a:	702b      	strb	r3, [r5, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 801038c:	4658      	mov	r0, fp
 801038e:	4b5e      	ldr	r3, [pc, #376]	; (8010508 <pjpeg_decode_mcu+0x1450>)
 8010390:	f8da 7000 	ldr.w	r7, [sl]
 8010394:	681b      	ldr	r3, [r3, #0]
  gInBufOfs = 4;
 8010396:	f886 c000 	strb.w	ip, [r6]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 801039a:	47b8      	blx	r7
  if (status) {
 801039c:	b108      	cbz	r0, 80103a2 <pjpeg_decode_mcu+0x12ea>
    gCallbackStatus = status;
 801039e:	4b5b      	ldr	r3, [pc, #364]	; (801050c <pjpeg_decode_mcu+0x1454>)
 80103a0:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 80103a2:	782b      	ldrb	r3, [r5, #0]
 80103a4:	b95b      	cbnz	r3, 80103be <pjpeg_decode_mcu+0x1306>
      gTemFlag = ~gTemFlag;
 80103a6:	485a      	ldr	r0, [pc, #360]	; (8010510 <pjpeg_decode_mcu+0x1458>)
 80103a8:	1e61      	subs	r1, r4, #1
 80103aa:	7802      	ldrb	r2, [r0, #0]
 80103ac:	b28c      	uxth	r4, r1
 80103ae:	43d2      	mvns	r2, r2
 80103b0:	b2d2      	uxtb	r2, r2
 80103b2:	7002      	strb	r2, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 80103b4:	b9c2      	cbnz	r2, 80103e8 <pjpeg_decode_mcu+0x1330>
 80103b6:	46a0      	mov	r8, r4
  for (i = 1536; i > 0; i--)
 80103b8:	2c00      	cmp	r4, #0
 80103ba:	d1e1      	bne.n	8010380 <pjpeg_decode_mcu+0x12c8>
 80103bc:	e011      	b.n	80103e2 <pjpeg_decode_mcu+0x132a>
 80103be:	4642      	mov	r2, r8
 80103c0:	46a0      	mov	r8, r4
 80103c2:	4614      	mov	r4, r2
  return gInBuf[gInBufOfs++];
 80103c4:	7832      	ldrb	r2, [r6, #0]
  gInBufLeft--;
 80103c6:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 80103c8:	4852      	ldr	r0, [pc, #328]	; (8010514 <pjpeg_decode_mcu+0x145c>)
 80103ca:	1c51      	adds	r1, r2, #1
  gInBufLeft--;
 80103cc:	b2db      	uxtb	r3, r3
    if (getChar() == 0xFF)
 80103ce:	5c82      	ldrb	r2, [r0, r2]
  gInBufLeft--;
 80103d0:	702b      	strb	r3, [r5, #0]
    if (getChar() == 0xFF)
 80103d2:	2aff      	cmp	r2, #255	; 0xff
  return gInBuf[gInBufOfs++];
 80103d4:	7031      	strb	r1, [r6, #0]
    if (getChar() == 0xFF)
 80103d6:	d008      	beq.n	80103ea <pjpeg_decode_mcu+0x1332>
 80103d8:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80103dc:	b2a4      	uxth	r4, r4
  for (i = 1536; i > 0; i--)
 80103de:	2c00      	cmp	r4, #0
 80103e0:	d1c6      	bne.n	8010370 <pjpeg_decode_mcu+0x12b8>
    return PJPG_BAD_RESTART_MARKER;
 80103e2:	201d      	movs	r0, #29
 80103e4:	f7fe befb 	b.w	800f1de <pjpeg_decode_mcu+0x126>
 80103e8:	4644      	mov	r4, r8
 80103ea:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8010508 <pjpeg_decode_mcu+0x1450>
  if (!gInBufLeft) {
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d140      	bne.n	8010474 <pjpeg_decode_mcu+0x13bc>
 80103f2:	f8df a138 	ldr.w	sl, [pc, #312]	; 801052c <pjpeg_decode_mcu+0x1474>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 80103f6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010500 <pjpeg_decode_mcu+0x1448>
 80103fa:	f8df b134 	ldr.w	fp, [pc, #308]	; 8010530 <pjpeg_decode_mcu+0x1478>
  gInBufLeft = 0;
 80103fe:	2300      	movs	r3, #0
  gInBufOfs = 4;
 8010400:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010404:	464a      	mov	r2, r9
 8010406:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 8010408:	702b      	strb	r3, [r5, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 801040a:	4658      	mov	r0, fp
 801040c:	f8d8 3000 	ldr.w	r3, [r8]
 8010410:	f8da 7000 	ldr.w	r7, [sl]
  gInBufOfs = 4;
 8010414:	f886 c000 	strb.w	ip, [r6]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010418:	47b8      	blx	r7
  if (status) {
 801041a:	b108      	cbz	r0, 8010420 <pjpeg_decode_mcu+0x1368>
    gCallbackStatus = status;
 801041c:	4b3b      	ldr	r3, [pc, #236]	; (801050c <pjpeg_decode_mcu+0x1454>)
 801041e:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 8010420:	782b      	ldrb	r3, [r5, #0]
 8010422:	bb3b      	cbnz	r3, 8010474 <pjpeg_decode_mcu+0x13bc>
      gTemFlag = ~gTemFlag;
 8010424:	493a      	ldr	r1, [pc, #232]	; (8010510 <pjpeg_decode_mcu+0x1458>)
  for (; i > 0; i--)
 8010426:	1e62      	subs	r2, r4, #1
      gTemFlag = ~gTemFlag;
 8010428:	780b      	ldrb	r3, [r1, #0]
  for (; i > 0; i--)
 801042a:	b294      	uxth	r4, r2
      gTemFlag = ~gTemFlag;
 801042c:	43db      	mvns	r3, r3
 801042e:	b2db      	uxtb	r3, r3
 8010430:	700b      	strb	r3, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 8010432:	2b00      	cmp	r3, #0
 8010434:	d12d      	bne.n	8010492 <pjpeg_decode_mcu+0x13da>
 8010436:	22d9      	movs	r2, #217	; 0xd9
  if (c != (gNextRestartNum + M_RST0))
 8010438:	4937      	ldr	r1, [pc, #220]	; (8010518 <pjpeg_decode_mcu+0x1460>)
 801043a:	880b      	ldrh	r3, [r1, #0]
 801043c:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8010440:	4290      	cmp	r0, r2
 8010442:	d1ce      	bne.n	80103e2 <pjpeg_decode_mcu+0x132a>
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8010444:	3301      	adds	r3, #1
  gRestartsLeft = gRestartInterval;
 8010446:	4a35      	ldr	r2, [pc, #212]	; (801051c <pjpeg_decode_mcu+0x1464>)
  gLastDC[0] = 0;
 8010448:	4d35      	ldr	r5, [pc, #212]	; (8010520 <pjpeg_decode_mcu+0x1468>)
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 801044a:	f003 0307 	and.w	r3, r3, #7
  gRestartsLeft = gRestartInterval;
 801044e:	8810      	ldrh	r0, [r2, #0]
 8010450:	4e34      	ldr	r6, [pc, #208]	; (8010524 <pjpeg_decode_mcu+0x146c>)
  gLastDC[0] = 0;
 8010452:	2200      	movs	r2, #0
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8010454:	800b      	strh	r3, [r1, #0]
  gBitsLeft = 8;
 8010456:	2308      	movs	r3, #8
 8010458:	4c33      	ldr	r4, [pc, #204]	; (8010528 <pjpeg_decode_mcu+0x1470>)
  gRestartsLeft = gRestartInterval;
 801045a:	8030      	strh	r0, [r6, #0]
  return getBits(numBits, 1);
 801045c:	2001      	movs	r0, #1
  gLastDC[0] = 0;
 801045e:	602a      	str	r2, [r5, #0]
  gBitsLeft = 8;
 8010460:	7023      	strb	r3, [r4, #0]
  gLastDC[2] = 0;
 8010462:	80aa      	strh	r2, [r5, #4]
  return getBits(numBits, 1);
 8010464:	f7fd fe5e 	bl	800e124 <getBits.constprop.5>
 8010468:	2001      	movs	r0, #1
 801046a:	f7fd fe5b 	bl	800e124 <getBits.constprop.5>
 801046e:	8833      	ldrh	r3, [r6, #0]
 8010470:	f7fe be38 	b.w	800f0e4 <pjpeg_decode_mcu+0x2c>
  return gInBuf[gInBufOfs++];
 8010474:	7832      	ldrb	r2, [r6, #0]
  gInBufLeft--;
 8010476:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 8010478:	4826      	ldr	r0, [pc, #152]	; (8010514 <pjpeg_decode_mcu+0x145c>)
 801047a:	1c51      	adds	r1, r2, #1
  gInBufLeft--;
 801047c:	b2db      	uxtb	r3, r3
  return gInBuf[gInBufOfs++];
 801047e:	5c82      	ldrb	r2, [r0, r2]
  gInBufLeft--;
 8010480:	702b      	strb	r3, [r5, #0]
    if ((c = getChar()) != 0xFF)
 8010482:	2aff      	cmp	r2, #255	; 0xff
  return gInBuf[gInBufOfs++];
 8010484:	7031      	strb	r1, [r6, #0]
    if ((c = getChar()) != 0xFF)
 8010486:	d1d7      	bne.n	8010438 <pjpeg_decode_mcu+0x1380>
  for (; i > 0; i--)
 8010488:	3c01      	subs	r4, #1
 801048a:	b2a4      	uxth	r4, r4
 801048c:	2c00      	cmp	r4, #0
 801048e:	d1ae      	bne.n	80103ee <pjpeg_decode_mcu+0x1336>
 8010490:	e7a7      	b.n	80103e2 <pjpeg_decode_mcu+0x132a>
 8010492:	2c00      	cmp	r4, #0
 8010494:	d1b3      	bne.n	80103fe <pjpeg_decode_mcu+0x1346>
 8010496:	e7a4      	b.n	80103e2 <pjpeg_decode_mcu+0x132a>
      cbG = ((c * 88U) >> 8U) - 44U;
 8010498:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 801049a:	4c17      	ldr	r4, [pc, #92]	; (80104f8 <pjpeg_decode_mcu+0x1440>)
      cbG = ((c * 88U) >> 8U) - 44U;
 801049c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 80104a0:	7820      	ldrb	r0, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 80104a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  b = a - b;
 80104a6:	302c      	adds	r0, #44	; 0x2c
 80104a8:	eba0 1051 	sub.w	r0, r0, r1, lsr #5
 80104ac:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 80104ae:	28ff      	cmp	r0, #255	; 0xff
 80104b0:	f240 808f 	bls.w	80105d2 <pjpeg_decode_mcu+0x151a>
  b = a - b;
 80104b4:	b201      	sxth	r1, r0
    if (b < 0)
 80104b6:	2900      	cmp	r1, #0
 80104b8:	f2c0 80d6 	blt.w	8010668 <pjpeg_decode_mcu+0x15b0>
    else if (b > 255)
 80104bc:	29ff      	cmp	r1, #255	; 0xff
 80104be:	f340 8088 	ble.w	80105d2 <pjpeg_decode_mcu+0x151a>
      return 255;
 80104c2:	20ff      	movs	r0, #255	; 0xff
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80104c4:	490d      	ldr	r1, [pc, #52]	; (80104fc <pjpeg_decode_mcu+0x1444>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80104c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80104ca:	7020      	strb	r0, [r4, #0]
  b = a + b;
 80104cc:	7808      	ldrb	r0, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80104ce:	eb02 1242 	add.w	r2, r2, r2, lsl #5
  b = a + b;
 80104d2:	38e3      	subs	r0, #227	; 0xe3
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 80104d4:	f3c2 12d7 	ubfx	r2, r2, #7, #24
  b = a + b;
 80104d8:	4403      	add	r3, r0
 80104da:	4413      	add	r3, r2
 80104dc:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 80104de:	2bff      	cmp	r3, #255	; 0xff
 80104e0:	d906      	bls.n	80104f0 <pjpeg_decode_mcu+0x1438>
  b = a + b;
 80104e2:	b21a      	sxth	r2, r3
    if (b < 0)
 80104e4:	2a00      	cmp	r2, #0
 80104e6:	f2c0 80a9 	blt.w	801063c <pjpeg_decode_mcu+0x1584>
    else if (b > 255)
 80104ea:	2aff      	cmp	r2, #255	; 0xff
 80104ec:	f300 810b 	bgt.w	8010706 <pjpeg_decode_mcu+0x164e>
  return (uint8)b;
 80104f0:	b2db      	uxtb	r3, r3
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80104f2:	700b      	strb	r3, [r1, #0]
 80104f4:	f7ff bad1 	b.w	800fa9a <pjpeg_decode_mcu+0x9e2>
 80104f8:	20004770 	.word	0x20004770
 80104fc:	20004670 	.word	0x20004670
 8010500:	20004664 	.word	0x20004664
 8010504:	20004665 	.word	0x20004665
 8010508:	20004a90 	.word	0x20004a90
 801050c:	2000415d 	.word	0x2000415d
 8010510:	20004a8b 	.word	0x20004a8b
 8010514:	20004564 	.word	0x20004564
 8010518:	2000497e 	.word	0x2000497e
 801051c:	20004a86 	.word	0x20004a86
 8010520:	20004668 	.word	0x20004668
 8010524:	20004a88 	.word	0x20004a88
 8010528:	2000415c 	.word	0x2000415c
 801052c:	20004a94 	.word	0x20004a94
 8010530:	20004568 	.word	0x20004568
  int16 *pSrc = gCoeffBuf;
 8010534:	4a7c      	ldr	r2, [pc, #496]	; (8010728 <pjpeg_decode_mcu+0x1670>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010536:	4d7d      	ldr	r5, [pc, #500]	; (801072c <pjpeg_decode_mcu+0x1674>)
 8010538:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 801053c:	4c7c      	ldr	r4, [pc, #496]	; (8010730 <pjpeg_decode_mcu+0x1678>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 801053e:	487d      	ldr	r0, [pc, #500]	; (8010734 <pjpeg_decode_mcu+0x167c>)
    uint8 c = (uint8)*pSrc++;
 8010540:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010544:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010546:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010548:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 801054c:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010550:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010554:	d1f4      	bne.n	8010540 <pjpeg_decode_mcu+0x1488>
 8010556:	f7ff baa0 	b.w	800fa9a <pjpeg_decode_mcu+0x9e2>
  uint8 *pDstB = gMCUBufB + dstOfs;
 801055a:	4974      	ldr	r1, [pc, #464]	; (801072c <pjpeg_decode_mcu+0x1674>)
 801055c:	4876      	ldr	r0, [pc, #472]	; (8010738 <pjpeg_decode_mcu+0x1680>)
 801055e:	f101 0540 	add.w	r5, r1, #64	; 0x40
  int16 *pSrc = gCoeffBuf;
 8010562:	4c71      	ldr	r4, [pc, #452]	; (8010728 <pjpeg_decode_mcu+0x1670>)
 8010564:	e01d      	b.n	80105a2 <pjpeg_decode_mcu+0x14ea>
  b = a - b;
 8010566:	b21f      	sxth	r7, r3
    if (b < 0)
 8010568:	2f00      	cmp	r7, #0
 801056a:	db30      	blt.n	80105ce <pjpeg_decode_mcu+0x1516>
    else if (b > 255)
 801056c:	2fff      	cmp	r7, #255	; 0xff
 801056e:	dd28      	ble.n	80105c2 <pjpeg_decode_mcu+0x150a>
      return 255;
 8010570:	23ff      	movs	r3, #255	; 0xff
    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 8010572:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  b = a + b;
 8010576:	3ee3      	subs	r6, #227	; 0xe3
    pDstG[0] = subAndClamp(pDstG[0], cbG);
 8010578:	7003      	strb	r3, [r0, #0]
    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 801057a:	eb02 1242 	add.w	r2, r2, r2, lsl #5
  b = a + b;
 801057e:	780b      	ldrb	r3, [r1, #0]
 8010580:	eb06 12d2 	add.w	r2, r6, r2, lsr #7
 8010584:	4413      	add	r3, r2
 8010586:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010588:	2bff      	cmp	r3, #255	; 0xff
 801058a:	d91c      	bls.n	80105c6 <pjpeg_decode_mcu+0x150e>
  b = a + b;
 801058c:	b21a      	sxth	r2, r3
    if (b < 0)
 801058e:	2a00      	cmp	r2, #0
 8010590:	db1b      	blt.n	80105ca <pjpeg_decode_mcu+0x1512>
    else if (b > 255)
 8010592:	2aff      	cmp	r2, #255	; 0xff
 8010594:	dd17      	ble.n	80105c6 <pjpeg_decode_mcu+0x150e>
      return 255;
 8010596:	23ff      	movs	r3, #255	; 0xff
    pDstB[0] = addAndClamp(pDstB[0], cbB);
 8010598:	f801 3b01 	strb.w	r3, [r1], #1
  for (i = 64; i > 0; i--) {
 801059c:	42a9      	cmp	r1, r5
 801059e:	f43f aa7c 	beq.w	800fa9a <pjpeg_decode_mcu+0x9e2>
    uint8 cb = (uint8)*pSrc++;
 80105a2:	f934 6b02 	ldrsh.w	r6, [r4], #2
  b = a - b;
 80105a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    uint8 cb = (uint8)*pSrc++;
 80105aa:	b2f6      	uxtb	r6, r6
  b = a - b;
 80105ac:	332c      	adds	r3, #44	; 0x2c
    cbG = ((cb * 88U) >> 8U) - 44U;
 80105ae:	b232      	sxth	r2, r6
 80105b0:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80105b4:	eb02 0747 	add.w	r7, r2, r7, lsl #1
  b = a - b;
 80105b8:	eba3 1357 	sub.w	r3, r3, r7, lsr #5
 80105bc:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 80105be:	2bff      	cmp	r3, #255	; 0xff
 80105c0:	d8d1      	bhi.n	8010566 <pjpeg_decode_mcu+0x14ae>
  return (uint8)b;
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	e7d5      	b.n	8010572 <pjpeg_decode_mcu+0x14ba>
  return (uint8)b;
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	e7e6      	b.n	8010598 <pjpeg_decode_mcu+0x14e0>
      return 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	e7e4      	b.n	8010598 <pjpeg_decode_mcu+0x14e0>
      return 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	e7cf      	b.n	8010572 <pjpeg_decode_mcu+0x14ba>
  return (uint8)b;
 80105d2:	b2c0      	uxtb	r0, r0
 80105d4:	e776      	b.n	80104c4 <pjpeg_decode_mcu+0x140c>
  return (uint8)b;
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	f7ff bb8d 	b.w	800fcf6 <pjpeg_decode_mcu+0xc3e>
 80105dc:	b2c9      	uxtb	r1, r1
 80105de:	e437      	b.n	800fe50 <pjpeg_decode_mcu+0xd98>
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	e445      	b.n	800fe70 <pjpeg_decode_mcu+0xdb8>
 80105e4:	b2d2      	uxtb	r2, r2
 80105e6:	e4b1      	b.n	800ff4c <pjpeg_decode_mcu+0xe94>
 80105e8:	b2d2      	uxtb	r2, r2
 80105ea:	e580      	b.n	80100ee <pjpeg_decode_mcu+0x1036>
  return (uint8)b;
 80105ec:	b2c9      	uxtb	r1, r1
 80105ee:	e492      	b.n	800ff16 <pjpeg_decode_mcu+0xe5e>
 80105f0:	b2c0      	uxtb	r0, r0
 80105f2:	e480      	b.n	800fef6 <pjpeg_decode_mcu+0xe3e>
 80105f4:	b2c9      	uxtb	r1, r1
 80105f6:	e455      	b.n	800fea4 <pjpeg_decode_mcu+0xdec>
 80105f8:	b2c9      	uxtb	r1, r1
 80105fa:	e55d      	b.n	80100b8 <pjpeg_decode_mcu+0x1000>
 80105fc:	b2c0      	uxtb	r0, r0
 80105fe:	e54b      	b.n	8010098 <pjpeg_decode_mcu+0xfe0>
  return (uint8)b;
 8010600:	b2db      	uxtb	r3, r3
 8010602:	e4f6      	b.n	800fff2 <pjpeg_decode_mcu+0xf3a>
 8010604:	b2c9      	uxtb	r1, r1
 8010606:	e504      	b.n	8010012 <pjpeg_decode_mcu+0xf5a>
  return (uint8)b;
 8010608:	b2c9      	uxtb	r1, r1
 801060a:	e51c      	b.n	8010046 <pjpeg_decode_mcu+0xf8e>
      return 0;
 801060c:	2000      	movs	r0, #0
 801060e:	e543      	b.n	8010098 <pjpeg_decode_mcu+0xfe0>
 8010610:	2100      	movs	r1, #0
 8010612:	e518      	b.n	8010046 <pjpeg_decode_mcu+0xf8e>
      return 0;
 8010614:	2300      	movs	r3, #0
 8010616:	e4a8      	b.n	800ff6a <pjpeg_decode_mcu+0xeb2>
 8010618:	2300      	movs	r3, #0
 801061a:	e429      	b.n	800fe70 <pjpeg_decode_mcu+0xdb8>
      return 0;
 801061c:	2100      	movs	r1, #0
 801061e:	e54b      	b.n	80100b8 <pjpeg_decode_mcu+0x1000>
      return 255;
 8010620:	25ff      	movs	r5, #255	; 0xff
 8010622:	e61b      	b.n	801025c <pjpeg_decode_mcu+0x11a4>
 8010624:	20ff      	movs	r0, #255	; 0xff
 8010626:	e628      	b.n	801027a <pjpeg_decode_mcu+0x11c2>
      return 0;
 8010628:	2200      	movs	r2, #0
 801062a:	e48f      	b.n	800ff4c <pjpeg_decode_mcu+0xe94>
 801062c:	2200      	movs	r2, #0
 801062e:	e55e      	b.n	80100ee <pjpeg_decode_mcu+0x1036>
      return 0;
 8010630:	2300      	movs	r3, #0
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8010632:	7023      	strb	r3, [r4, #0]
 8010634:	f7ff ba31 	b.w	800fa9a <pjpeg_decode_mcu+0x9e2>
      return 0;
 8010638:	2300      	movs	r3, #0
 801063a:	e513      	b.n	8010064 <pjpeg_decode_mcu+0xfac>
      return 0;
 801063c:	2300      	movs	r3, #0
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 801063e:	700b      	strb	r3, [r1, #0]
 8010640:	f7ff ba2b 	b.w	800fa9a <pjpeg_decode_mcu+0x9e2>
      return 0;
 8010644:	2100      	movs	r1, #0
 8010646:	e42d      	b.n	800fea4 <pjpeg_decode_mcu+0xdec>
      return 0;
 8010648:	2100      	movs	r1, #0
 801064a:	e401      	b.n	800fe50 <pjpeg_decode_mcu+0xd98>
      return 0;
 801064c:	2300      	movs	r3, #0
 801064e:	e438      	b.n	800fec2 <pjpeg_decode_mcu+0xe0a>
      return 255;
 8010650:	22ff      	movs	r2, #255	; 0xff
 8010652:	e66b      	b.n	801032c <pjpeg_decode_mcu+0x1274>
      return 0;
 8010654:	2300      	movs	r3, #0
 8010656:	e4cc      	b.n	800fff2 <pjpeg_decode_mcu+0xf3a>
 8010658:	2100      	movs	r1, #0
 801065a:	e4da      	b.n	8010012 <pjpeg_decode_mcu+0xf5a>
 801065c:	2300      	movs	r3, #0
 801065e:	e555      	b.n	801010c <pjpeg_decode_mcu+0x1054>
      return 0;
 8010660:	2100      	movs	r1, #0
 8010662:	e458      	b.n	800ff16 <pjpeg_decode_mcu+0xe5e>
 8010664:	2000      	movs	r0, #0
 8010666:	e446      	b.n	800fef6 <pjpeg_decode_mcu+0xe3e>
 8010668:	2000      	movs	r0, #0
 801066a:	e72b      	b.n	80104c4 <pjpeg_decode_mcu+0x140c>
      return 0;
 801066c:	2300      	movs	r3, #0
 801066e:	f7ff bb42 	b.w	800fcf6 <pjpeg_decode_mcu+0xc3e>
      return 255;
 8010672:	25ff      	movs	r5, #255	; 0xff
 8010674:	e611      	b.n	801029a <pjpeg_decode_mcu+0x11e2>
 8010676:	21ff      	movs	r1, #255	; 0xff
 8010678:	e61f      	b.n	80102ba <pjpeg_decode_mcu+0x1202>
      return 255;
 801067a:	22ff      	movs	r2, #255	; 0xff
 801067c:	e637      	b.n	80102ee <pjpeg_decode_mcu+0x1236>
 801067e:	20ff      	movs	r0, #255	; 0xff
 8010680:	e644      	b.n	801030c <pjpeg_decode_mcu+0x1254>
 8010682:	21ff      	movs	r1, #255	; 0xff
 8010684:	f7ff b990 	b.w	800f9a8 <pjpeg_decode_mcu+0x8f0>
 8010688:	24ff      	movs	r4, #255	; 0xff
 801068a:	f7ff b99c 	b.w	800f9c6 <pjpeg_decode_mcu+0x90e>
 801068e:	21ff      	movs	r1, #255	; 0xff
 8010690:	f7ff b9a9 	b.w	800f9e6 <pjpeg_decode_mcu+0x92e>
 8010694:	23ff      	movs	r3, #255	; 0xff
 8010696:	f7ff b9b6 	b.w	800fa06 <pjpeg_decode_mcu+0x94e>
      return 255;
 801069a:	21ff      	movs	r1, #255	; 0xff
 801069c:	f7ff b9cc 	b.w	800fa38 <pjpeg_decode_mcu+0x980>
 80106a0:	22ff      	movs	r2, #255	; 0xff
 80106a2:	f7ff b9d8 	b.w	800fa56 <pjpeg_decode_mcu+0x99e>
 80106a6:	21ff      	movs	r1, #255	; 0xff
 80106a8:	f7ff b9e5 	b.w	800fa76 <pjpeg_decode_mcu+0x9be>
 80106ac:	23ff      	movs	r3, #255	; 0xff
 80106ae:	f7ff b9f2 	b.w	800fa96 <pjpeg_decode_mcu+0x9de>
      return 0;
 80106b2:	2300      	movs	r3, #0
 80106b4:	f7ff b9ef 	b.w	800fa96 <pjpeg_decode_mcu+0x9de>
 80106b8:	2200      	movs	r2, #0
 80106ba:	f7ff b9cc 	b.w	800fa56 <pjpeg_decode_mcu+0x99e>
 80106be:	2100      	movs	r1, #0
 80106c0:	f7ff b9d9 	b.w	800fa76 <pjpeg_decode_mcu+0x9be>
      return 0;
 80106c4:	2400      	movs	r4, #0
 80106c6:	f7ff b97e 	b.w	800f9c6 <pjpeg_decode_mcu+0x90e>
 80106ca:	2100      	movs	r1, #0
 80106cc:	f7ff b98b 	b.w	800f9e6 <pjpeg_decode_mcu+0x92e>
 80106d0:	2300      	movs	r3, #0
 80106d2:	f7ff b998 	b.w	800fa06 <pjpeg_decode_mcu+0x94e>
      return 0;
 80106d6:	2100      	movs	r1, #0
 80106d8:	f7ff b9ae 	b.w	800fa38 <pjpeg_decode_mcu+0x980>
      return 255;
 80106dc:	23ff      	movs	r3, #255	; 0xff
 80106de:	f7ff bbf0 	b.w	800fec2 <pjpeg_decode_mcu+0xe0a>
      return 0;
 80106e2:	2200      	movs	r2, #0
 80106e4:	e622      	b.n	801032c <pjpeg_decode_mcu+0x1274>
      return 255;
 80106e6:	23ff      	movs	r3, #255	; 0xff
 80106e8:	e630      	b.n	801034c <pjpeg_decode_mcu+0x1294>
      return 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	e62e      	b.n	801034c <pjpeg_decode_mcu+0x1294>
      return 0;
 80106ee:	2000      	movs	r0, #0
 80106f0:	e5c3      	b.n	801027a <pjpeg_decode_mcu+0x11c2>
      return 255;
 80106f2:	23ff      	movs	r3, #255	; 0xff
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 80106f4:	7023      	strb	r3, [r4, #0]
 80106f6:	f7ff b9d0 	b.w	800fa9a <pjpeg_decode_mcu+0x9e2>
      return 255;
 80106fa:	23ff      	movs	r3, #255	; 0xff
 80106fc:	e435      	b.n	800ff6a <pjpeg_decode_mcu+0xeb2>
      return 0;
 80106fe:	2500      	movs	r5, #0
 8010700:	e5ac      	b.n	801025c <pjpeg_decode_mcu+0x11a4>
      return 255;
 8010702:	23ff      	movs	r3, #255	; 0xff
 8010704:	e4ae      	b.n	8010064 <pjpeg_decode_mcu+0xfac>
      return 255;
 8010706:	23ff      	movs	r3, #255	; 0xff
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8010708:	700b      	strb	r3, [r1, #0]
 801070a:	f7ff b9c6 	b.w	800fa9a <pjpeg_decode_mcu+0x9e2>
      return 255;
 801070e:	23ff      	movs	r3, #255	; 0xff
 8010710:	e4fc      	b.n	801010c <pjpeg_decode_mcu+0x1054>
      return 0;
 8010712:	2500      	movs	r5, #0
 8010714:	e5c1      	b.n	801029a <pjpeg_decode_mcu+0x11e2>
 8010716:	2100      	movs	r1, #0
 8010718:	e5cf      	b.n	80102ba <pjpeg_decode_mcu+0x1202>
      return 0;
 801071a:	2200      	movs	r2, #0
 801071c:	e5e7      	b.n	80102ee <pjpeg_decode_mcu+0x1236>
 801071e:	2000      	movs	r0, #0
 8010720:	e5f4      	b.n	801030c <pjpeg_decode_mcu+0x1254>
 8010722:	2100      	movs	r1, #0
 8010724:	f7ff b940 	b.w	800f9a8 <pjpeg_decode_mcu+0x8f0>
 8010728:	20004160 	.word	0x20004160
 801072c:	20004670 	.word	0x20004670
 8010730:	20004770 	.word	0x20004770
 8010734:	20004870 	.word	0x20004870
 8010738:	2000476f 	.word	0x2000476f

0801073c <pjpeg_decode_init>:

unsigned char
pjpeg_decode_init(pjpeg_image_info_t *pInfo,
                  pjpeg_need_bytes_callback_t pNeed_bytes_callback,
                  void *pCallback_data, unsigned char reduce) {
 801073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8 status;

  pInfo->m_width = 0;
 8010740:	2500      	movs	r5, #0
  pInfo->m_pMCUBufG = (unsigned char *)0;
  pInfo->m_pMCUBufB = (unsigned char *)0;

  g_pNeedBytesCallback = pNeed_bytes_callback;
  g_pCallback_data = pCallback_data;
  gCallbackStatus = 0;
 8010742:	4f9e      	ldr	r7, [pc, #632]	; (80109bc <pjpeg_decode_init+0x280>)
                  void *pCallback_data, unsigned char reduce) {
 8010744:	4604      	mov	r4, r0
  gBitBuf = 0;
 8010746:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80109fc <pjpeg_decode_init+0x2c0>
  gCallbackStatus = 0;
 801074a:	703d      	strb	r5, [r7, #0]
  return getBits(numBits, 0);
 801074c:	4628      	mov	r0, r5
  gImageXSize = 0;
 801074e:	4f9c      	ldr	r7, [pc, #624]	; (80109c0 <pjpeg_decode_init+0x284>)
  gBitsLeft = 8;
 8010750:	2608      	movs	r6, #8
  gInBufLeft = 0;
 8010752:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80109f8 <pjpeg_decode_init+0x2bc>
                  void *pCallback_data, unsigned char reduce) {
 8010756:	b087      	sub	sp, #28
  gImageXSize = 0;
 8010758:	803d      	strh	r5, [r7, #0]
  gImageYSize = 0;
 801075a:	4f9a      	ldr	r7, [pc, #616]	; (80109c4 <pjpeg_decode_init+0x288>)
  pInfo->m_MCUSPerCol = 0;
 801075c:	6125      	str	r5, [r4, #16]
  gImageYSize = 0;
 801075e:	803d      	strh	r5, [r7, #0]
  gCompsInFrame = 0;
 8010760:	4f99      	ldr	r7, [pc, #612]	; (80109c8 <pjpeg_decode_init+0x28c>)
  pInfo->m_scanType = PJPG_GRAYSCALE;
 8010762:	7525      	strb	r5, [r4, #20]
  gCompsInFrame = 0;
 8010764:	703d      	strb	r5, [r7, #0]
  gRestartInterval = 0;
 8010766:	4f99      	ldr	r7, [pc, #612]	; (80109cc <pjpeg_decode_init+0x290>)
  pInfo->m_pMCUBufB = (unsigned char *)0;
 8010768:	62a5      	str	r5, [r4, #40]	; 0x28
  gRestartInterval = 0;
 801076a:	803d      	strh	r5, [r7, #0]
  gCompsInScan = 0;
 801076c:	4f98      	ldr	r7, [pc, #608]	; (80109d0 <pjpeg_decode_init+0x294>)
  gBitBuf = 0;
 801076e:	f8a9 5000 	strh.w	r5, [r9]
  gCompsInScan = 0;
 8010772:	703d      	strb	r5, [r7, #0]
  gValidHuffTables = 0;
 8010774:	4f97      	ldr	r7, [pc, #604]	; (80109d4 <pjpeg_decode_init+0x298>)
  gBitsLeft = 8;
 8010776:	f8df a288 	ldr.w	sl, [pc, #648]	; 8010a00 <pjpeg_decode_init+0x2c4>
  gValidHuffTables = 0;
 801077a:	703d      	strb	r5, [r7, #0]
  gValidQuantTables = 0;
 801077c:	4f96      	ldr	r7, [pc, #600]	; (80109d8 <pjpeg_decode_init+0x29c>)
  gBitsLeft = 8;
 801077e:	f88a 6000 	strb.w	r6, [sl]
  gValidQuantTables = 0;
 8010782:	703d      	strb	r5, [r7, #0]
  gTemFlag = 0;
 8010784:	4f95      	ldr	r7, [pc, #596]	; (80109dc <pjpeg_decode_init+0x2a0>)
 8010786:	703d      	strb	r5, [r7, #0]
  gInBufOfs = 0;
 8010788:	4f95      	ldr	r7, [pc, #596]	; (80109e0 <pjpeg_decode_init+0x2a4>)
  pInfo->m_height = 0;
 801078a:	e9c4 5500 	strd	r5, r5, [r4]
  pInfo->m_MCUSPerRow = 0;
 801078e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  pInfo->m_MCUHeight = 0;
 8010792:	e9c4 5506 	strd	r5, r5, [r4, #24]
  pInfo->m_pMCUBufG = (unsigned char *)0;
 8010796:	e9c4 5508 	strd	r5, r5, [r4, #32]
  gInBufOfs = 0;
 801079a:	703d      	strb	r5, [r7, #0]
  gInBufLeft = 0;
 801079c:	f888 5000 	strb.w	r5, [r8]
  g_pNeedBytesCallback = pNeed_bytes_callback;
 80107a0:	4d90      	ldr	r5, [pc, #576]	; (80109e4 <pjpeg_decode_init+0x2a8>)
 80107a2:	6029      	str	r1, [r5, #0]
  gReduce = reduce;
 80107a4:	4990      	ldr	r1, [pc, #576]	; (80109e8 <pjpeg_decode_init+0x2ac>)
  g_pCallback_data = pCallback_data;
 80107a6:	4d91      	ldr	r5, [pc, #580]	; (80109ec <pjpeg_decode_init+0x2b0>)
  gReduce = reduce;
 80107a8:	700b      	strb	r3, [r1, #0]
  g_pCallback_data = pCallback_data;
 80107aa:	602a      	str	r2, [r5, #0]
  return getBits(numBits, 0);
 80107ac:	f7fd fcba 	bl	800e124 <getBits.constprop.5>
  if (gBitsLeft < numBits) {
 80107b0:	f89a 3000 	ldrb.w	r3, [sl]
  uint16 ret = gBitBuf;
 80107b4:	f8b9 2000 	ldrh.w	r2, [r9]
  if (gBitsLeft < numBits) {
 80107b8:	2b07      	cmp	r3, #7
 80107ba:	d90d      	bls.n	80107d8 <pjpeg_decode_init+0x9c>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 80107bc:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 80107be:	0212      	lsls	r2, r2, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 80107c0:	f88a 3000 	strb.w	r3, [sl]

  status = init();
  if ((status) || (gCallbackStatus))
 80107c4:	4b7d      	ldr	r3, [pc, #500]	; (80109bc <pjpeg_decode_init+0x280>)
    gBitBuf <<= numBits;
 80107c6:	f8a9 2000 	strh.w	r2, [r9]
  if ((status) || (gCallbackStatus))
 80107ca:	781f      	ldrb	r7, [r3, #0]
 80107cc:	2f00      	cmp	r7, #0
 80107ce:	d035      	beq.n	801083c <pjpeg_decode_init+0x100>
  pInfo->m_pMCUBufR = gMCUBufR;
  pInfo->m_pMCUBufG = gMCUBufG;
  pInfo->m_pMCUBufB = gMCUBufB;

  return 0;
}
 80107d0:	4638      	mov	r0, r7
 80107d2:	b007      	add	sp, #28
 80107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    gBitBuf <<= gBitsLeft;
 80107d8:	409a      	lsls	r2, r3
  if (!gInBufLeft) {
 80107da:	f898 1000 	ldrb.w	r1, [r8]
    gBitBuf <<= gBitsLeft;
 80107de:	b292      	uxth	r2, r2
 80107e0:	f8a9 2000 	strh.w	r2, [r9]
  if (!gInBufLeft) {
 80107e4:	b9b1      	cbnz	r1, 8010814 <pjpeg_decode_init+0xd8>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 80107e6:	4b7f      	ldr	r3, [pc, #508]	; (80109e4 <pjpeg_decode_init+0x2a8>)
  gInBufOfs = 4;
 80107e8:	2604      	movs	r6, #4
  gInBufLeft = 0;
 80107ea:	f888 1000 	strb.w	r1, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 80107ee:	4642      	mov	r2, r8
 80107f0:	681d      	ldr	r5, [r3, #0]
 80107f2:	21fc      	movs	r1, #252	; 0xfc
 80107f4:	4b7d      	ldr	r3, [pc, #500]	; (80109ec <pjpeg_decode_init+0x2b0>)
 80107f6:	487e      	ldr	r0, [pc, #504]	; (80109f0 <pjpeg_decode_init+0x2b4>)
 80107f8:	681b      	ldr	r3, [r3, #0]
  gInBufOfs = 4;
 80107fa:	703e      	strb	r6, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 80107fc:	47a8      	blx	r5
  if (status) {
 80107fe:	b108      	cbz	r0, 8010804 <pjpeg_decode_init+0xc8>
    gCallbackStatus = status;
 8010800:	4b6e      	ldr	r3, [pc, #440]	; (80109bc <pjpeg_decode_init+0x280>)
 8010802:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 8010804:	f898 1000 	ldrb.w	r1, [r8]
 8010808:	2900      	cmp	r1, #0
 801080a:	d038      	beq.n	801087e <pjpeg_decode_init+0x142>
 801080c:	f8b9 2000 	ldrh.w	r2, [r9]
 8010810:	f89a 3000 	ldrb.w	r3, [sl]
  return gInBuf[gInBufOfs++];
 8010814:	4e72      	ldr	r6, [pc, #456]	; (80109e0 <pjpeg_decode_init+0x2a4>)
  gInBufLeft--;
 8010816:	3901      	subs	r1, #1
  return gInBuf[gInBufOfs++];
 8010818:	4f76      	ldr	r7, [pc, #472]	; (80109f4 <pjpeg_decode_init+0x2b8>)
 801081a:	7830      	ldrb	r0, [r6, #0]
  gInBufLeft--;
 801081c:	f888 1000 	strb.w	r1, [r8]
  return gInBuf[gInBufOfs++];
 8010820:	1c45      	adds	r5, r0, #1
 8010822:	5c39      	ldrb	r1, [r7, r0]
 8010824:	7035      	strb	r5, [r6, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 8010826:	430a      	orrs	r2, r1
 8010828:	f1c3 0308 	rsb	r3, r3, #8
 801082c:	fa02 f303 	lsl.w	r3, r2, r3
 8010830:	f8a9 3000 	strh.w	r3, [r9]
  if ((status) || (gCallbackStatus))
 8010834:	4b61      	ldr	r3, [pc, #388]	; (80109bc <pjpeg_decode_init+0x280>)
 8010836:	781f      	ldrb	r7, [r3, #0]
 8010838:	2f00      	cmp	r7, #0
 801083a:	d1c9      	bne.n	80107d0 <pjpeg_decode_init+0x94>
  return getBits(numBits, 0);
 801083c:	4638      	mov	r0, r7
 801083e:	f7fd fc71 	bl	800e124 <getBits.constprop.5>
 8010842:	4605      	mov	r5, r0
 8010844:	4638      	mov	r0, r7
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 8010846:	b2ed      	uxtb	r5, r5
  return getBits(numBits, 0);
 8010848:	f7fd fc6c 	bl	800e124 <getBits.constprop.5>
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 801084c:	2dff      	cmp	r5, #255	; 0xff
  uint8 thischar = (uint8)getBits1(8);
 801084e:	fa5f fb80 	uxtb.w	fp, r0
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 8010852:	d122      	bne.n	801089a <pjpeg_decode_init+0x15e>
 8010854:	f1bb 0fd8 	cmp.w	fp, #216	; 0xd8
 8010858:	d11f      	bne.n	801089a <pjpeg_decode_init+0x15e>
  status = processMarkers(&c);
 801085a:	f10d 0017 	add.w	r0, sp, #23
 801085e:	f7fd fd23 	bl	800e2a8 <processMarkers>
  if (status)
 8010862:	4607      	mov	r7, r0
 8010864:	2800      	cmp	r0, #0
 8010866:	d139      	bne.n	80108dc <pjpeg_decode_init+0x1a0>
  switch (c) {
 8010868:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801086c:	2bc2      	cmp	r3, #194	; 0xc2
 801086e:	d07b      	beq.n	8010968 <pjpeg_decode_init+0x22c>
 8010870:	2bc9      	cmp	r3, #201	; 0xc9
 8010872:	f000 808c 	beq.w	801098e <pjpeg_decode_init+0x252>
 8010876:	2bc0      	cmp	r3, #192	; 0xc0
 8010878:	d07e      	beq.n	8010978 <pjpeg_decode_init+0x23c>
    return PJPG_UNSUPPORTED_MARKER;
 801087a:	2714      	movs	r7, #20
 801087c:	e02e      	b.n	80108dc <pjpeg_decode_init+0x1a0>
      gTemFlag = ~gTemFlag;
 801087e:	4857      	ldr	r0, [pc, #348]	; (80109dc <pjpeg_decode_init+0x2a0>)
 8010880:	f8b9 2000 	ldrh.w	r2, [r9]
 8010884:	7801      	ldrb	r1, [r0, #0]
 8010886:	f89a 3000 	ldrb.w	r3, [sl]
 801088a:	43c9      	mvns	r1, r1
 801088c:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 801088e:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 8010890:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 8010892:	bf0c      	ite	eq
 8010894:	21d9      	moveq	r1, #217	; 0xd9
 8010896:	21ff      	movne	r1, #255	; 0xff
 8010898:	e7c5      	b.n	8010826 <pjpeg_decode_init+0xea>
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 801089a:	f640 76ff 	movw	r6, #4095	; 0xfff
 801089e:	f8b9 3000 	ldrh.w	r3, [r9]
 80108a2:	f89a 1000 	ldrb.w	r1, [sl]
 80108a6:	9401      	str	r4, [sp, #4]
 80108a8:	e003      	b.n	80108b2 <pjpeg_decode_init+0x176>
 80108aa:	3e01      	subs	r6, #1
 80108ac:	b2b6      	uxth	r6, r6
    if (--bytesleft == 0)
 80108ae:	b1a6      	cbz	r6, 80108da <pjpeg_decode_init+0x19e>
    thischar = (uint8)getBits1(8);
 80108b0:	4693      	mov	fp, r2
  if (gBitsLeft < numBits) {
 80108b2:	2907      	cmp	r1, #7
 80108b4:	461d      	mov	r5, r3
 80108b6:	d917      	bls.n	80108e8 <pjpeg_decode_init+0x1ac>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 80108b8:	3908      	subs	r1, #8
    gBitBuf <<= numBits;
 80108ba:	021b      	lsls	r3, r3, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 80108bc:	b2c9      	uxtb	r1, r1
    gBitBuf <<= numBits;
 80108be:	b29b      	uxth	r3, r3
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 80108c0:	f88a 1000 	strb.w	r1, [sl]
    gBitBuf <<= numBits;
 80108c4:	f8a9 3000 	strh.w	r3, [r9]
  return ret >> (16 - origBits);
 80108c8:	122d      	asrs	r5, r5, #8
    if (lastchar == 0xFF) {
 80108ca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    thischar = (uint8)getBits1(8);
 80108ce:	b2ea      	uxtb	r2, r5
    if (lastchar == 0xFF) {
 80108d0:	d1eb      	bne.n	80108aa <pjpeg_decode_init+0x16e>
      if (thischar == M_SOI)
 80108d2:	2dd8      	cmp	r5, #216	; 0xd8
 80108d4:	d04a      	beq.n	801096c <pjpeg_decode_init+0x230>
      else if (thischar == M_EOI)
 80108d6:	2dd9      	cmp	r5, #217	; 0xd9
 80108d8:	d1e7      	bne.n	80108aa <pjpeg_decode_init+0x16e>
 80108da:	2713      	movs	r7, #19
    return gCallbackStatus ? gCallbackStatus : status;
 80108dc:	4b37      	ldr	r3, [pc, #220]	; (80109bc <pjpeg_decode_init+0x280>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	bf18      	it	ne
 80108e4:	461f      	movne	r7, r3
 80108e6:	e773      	b.n	80107d0 <pjpeg_decode_init+0x94>
    gBitBuf <<= gBitsLeft;
 80108e8:	408b      	lsls	r3, r1
  if (!gInBufLeft) {
 80108ea:	f898 0000 	ldrb.w	r0, [r8]
    gBitBuf <<= gBitsLeft;
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	f8a9 2000 	strh.w	r2, [r9]
  if (!gInBufLeft) {
 80108f4:	b9c0      	cbnz	r0, 8010928 <pjpeg_decode_init+0x1ec>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 80108f6:	4b3b      	ldr	r3, [pc, #236]	; (80109e4 <pjpeg_decode_init+0x2a8>)
  gInBufOfs = 4;
 80108f8:	f04f 0c04 	mov.w	ip, #4
 80108fc:	4c38      	ldr	r4, [pc, #224]	; (80109e0 <pjpeg_decode_init+0x2a4>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 80108fe:	21fc      	movs	r1, #252	; 0xfc
 8010900:	681f      	ldr	r7, [r3, #0]
 8010902:	4b3a      	ldr	r3, [pc, #232]	; (80109ec <pjpeg_decode_init+0x2b0>)
  gInBufLeft = 0;
 8010904:	f888 0000 	strb.w	r0, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010908:	4a3b      	ldr	r2, [pc, #236]	; (80109f8 <pjpeg_decode_init+0x2bc>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4838      	ldr	r0, [pc, #224]	; (80109f0 <pjpeg_decode_init+0x2b4>)
  gInBufOfs = 4;
 801090e:	f884 c000 	strb.w	ip, [r4]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010912:	47b8      	blx	r7
  if (status) {
 8010914:	b108      	cbz	r0, 801091a <pjpeg_decode_init+0x1de>
    gCallbackStatus = status;
 8010916:	4b29      	ldr	r3, [pc, #164]	; (80109bc <pjpeg_decode_init+0x280>)
 8010918:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 801091a:	f898 0000 	ldrb.w	r0, [r8]
 801091e:	b1a8      	cbz	r0, 801094c <pjpeg_decode_init+0x210>
 8010920:	f8b9 2000 	ldrh.w	r2, [r9]
 8010924:	f89a 1000 	ldrb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 8010928:	4c2d      	ldr	r4, [pc, #180]	; (80109e0 <pjpeg_decode_init+0x2a4>)
  gInBufLeft--;
 801092a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801092e:	4831      	ldr	r0, [pc, #196]	; (80109f4 <pjpeg_decode_init+0x2b8>)
  return gInBuf[gInBufOfs++];
 8010930:	7823      	ldrb	r3, [r4, #0]
  gInBufLeft--;
 8010932:	f888 c000 	strb.w	ip, [r8]
  return gInBuf[gInBufOfs++];
 8010936:	1c5f      	adds	r7, r3, #1
 8010938:	5cc3      	ldrb	r3, [r0, r3]
 801093a:	7027      	strb	r7, [r4, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 801093c:	4313      	orrs	r3, r2
 801093e:	f1c1 0208 	rsb	r2, r1, #8
 8010942:	4093      	lsls	r3, r2
 8010944:	b29b      	uxth	r3, r3
 8010946:	f8a9 3000 	strh.w	r3, [r9]
 801094a:	e7bd      	b.n	80108c8 <pjpeg_decode_init+0x18c>
      gTemFlag = ~gTemFlag;
 801094c:	4823      	ldr	r0, [pc, #140]	; (80109dc <pjpeg_decode_init+0x2a0>)
 801094e:	f8b9 2000 	ldrh.w	r2, [r9]
 8010952:	7803      	ldrb	r3, [r0, #0]
 8010954:	f89a 1000 	ldrb.w	r1, [sl]
 8010958:	43db      	mvns	r3, r3
 801095a:	b2db      	uxtb	r3, r3
      return gTemFlag ? 0xFF : 0xD9;
 801095c:	2b00      	cmp	r3, #0
      gTemFlag = ~gTemFlag;
 801095e:	7003      	strb	r3, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 8010960:	bf0c      	ite	eq
 8010962:	23d9      	moveq	r3, #217	; 0xd9
 8010964:	23ff      	movne	r3, #255	; 0xff
 8010966:	e7e9      	b.n	801093c <pjpeg_decode_init+0x200>
    return PJPG_UNSUPPORTED_MODE;
 8010968:	2725      	movs	r7, #37	; 0x25
 801096a:	e7b7      	b.n	80108dc <pjpeg_decode_init+0x1a0>
  if (thischar != 0xFF)
 801096c:	0a1b      	lsrs	r3, r3, #8
 801096e:	9c01      	ldr	r4, [sp, #4]
 8010970:	2bff      	cmp	r3, #255	; 0xff
 8010972:	f43f af72 	beq.w	801085a <pjpeg_decode_init+0x11e>
 8010976:	e7b0      	b.n	80108da <pjpeg_decode_init+0x19e>
  return getBits(numBits, 0);
 8010978:	f7fd fb30 	bl	800dfdc <getBits.constprop.4>
 801097c:	4605      	mov	r5, r0
 801097e:	4638      	mov	r0, r7
 8010980:	f7fd fbd0 	bl	800e124 <getBits.constprop.5>
  if (getBits1(8) != 8)
 8010984:	2808      	cmp	r0, #8
  return getBits(numBits, 0);
 8010986:	4606      	mov	r6, r0
  if (getBits1(8) != 8)
 8010988:	d003      	beq.n	8010992 <pjpeg_decode_init+0x256>
    return PJPG_BAD_PRECISION;
 801098a:	2707      	movs	r7, #7
 801098c:	e7a6      	b.n	80108dc <pjpeg_decode_init+0x1a0>
    return PJPG_NO_ARITHMITIC_SUPPORT;
 801098e:	2711      	movs	r7, #17
 8010990:	e7a4      	b.n	80108dc <pjpeg_decode_init+0x1a0>
  return getBits(numBits, 0);
 8010992:	f7fd fb23 	bl	800dfdc <getBits.constprop.4>
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 8010996:	1e43      	subs	r3, r0, #1
  gImageYSize = getBits1(16);
 8010998:	4a0a      	ldr	r2, [pc, #40]	; (80109c4 <pjpeg_decode_init+0x288>)
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 801099a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  gImageYSize = getBits1(16);
 801099e:	8010      	strh	r0, [r2, #0]
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 80109a0:	d301      	bcc.n	80109a6 <pjpeg_decode_init+0x26a>
    return PJPG_BAD_HEIGHT;
 80109a2:	4637      	mov	r7, r6
 80109a4:	e79a      	b.n	80108dc <pjpeg_decode_init+0x1a0>
  return getBits(numBits, 0);
 80109a6:	f7fd fb19 	bl	800dfdc <getBits.constprop.4>
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 80109aa:	1e43      	subs	r3, r0, #1
  gImageXSize = getBits1(16);
 80109ac:	4a04      	ldr	r2, [pc, #16]	; (80109c0 <pjpeg_decode_init+0x284>)
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 80109ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  gImageXSize = getBits1(16);
 80109b2:	8010      	strh	r0, [r2, #0]
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 80109b4:	d326      	bcc.n	8010a04 <pjpeg_decode_init+0x2c8>
    return PJPG_BAD_WIDTH;
 80109b6:	2709      	movs	r7, #9
 80109b8:	e790      	b.n	80108dc <pjpeg_decode_init+0x1a0>
 80109ba:	bf00      	nop
 80109bc:	2000415d 	.word	0x2000415d
 80109c0:	20004560 	.word	0x20004560
 80109c4:	20004562 	.word	0x20004562
 80109c8:	200041fb 	.word	0x200041fb
 80109cc:	20004a86 	.word	0x20004a86
 80109d0:	200041fc 	.word	0x200041fc
 80109d4:	20004a8c 	.word	0x20004a8c
 80109d8:	20004a8d 	.word	0x20004a8d
 80109dc:	20004a8b 	.word	0x20004a8b
 80109e0:	20004665 	.word	0x20004665
 80109e4:	20004a94 	.word	0x20004a94
 80109e8:	20004a84 	.word	0x20004a84
 80109ec:	20004a90 	.word	0x20004a90
 80109f0:	20004568 	.word	0x20004568
 80109f4:	20004564 	.word	0x20004564
 80109f8:	20004664 	.word	0x20004664
 80109fc:	2000415a 	.word	0x2000415a
 8010a00:	2000415c 	.word	0x2000415c
  return getBits(numBits, 0);
 8010a04:	4638      	mov	r0, r7
 8010a06:	f7fd fb8d 	bl	800e124 <getBits.constprop.5>
  gCompsInFrame = (uint8)getBits1(8);
 8010a0a:	4ba8      	ldr	r3, [pc, #672]	; (8010cac <pjpeg_decode_init+0x570>)
 8010a0c:	b2c0      	uxtb	r0, r0
  if (gCompsInFrame > 3)
 8010a0e:	2803      	cmp	r0, #3
  gCompsInFrame = (uint8)getBits1(8);
 8010a10:	7018      	strb	r0, [r3, #0]
  if (gCompsInFrame > 3)
 8010a12:	f200 8101 	bhi.w	8010c18 <pjpeg_decode_init+0x4dc>
  if (left != (gCompsInFrame + gCompsInFrame + gCompsInFrame + 8))
 8010a16:	2303      	movs	r3, #3
 8010a18:	fb13 6600 	smlabb	r6, r3, r0, r6
 8010a1c:	42b5      	cmp	r5, r6
 8010a1e:	f040 80f9 	bne.w	8010c14 <pjpeg_decode_init+0x4d8>
  for (i = 0; i < gCompsInFrame; i++) {
 8010a22:	2800      	cmp	r0, #0
 8010a24:	f000 80fa 	beq.w	8010c1c <pjpeg_decode_init+0x4e0>
 8010a28:	4da1      	ldr	r5, [pc, #644]	; (8010cb0 <pjpeg_decode_init+0x574>)
 8010a2a:	4ea2      	ldr	r6, [pc, #648]	; (8010cb4 <pjpeg_decode_init+0x578>)
  return getBits(numBits, 0);
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	f7fd fb79 	bl	800e124 <getBits.constprop.5>
    gCompIdent[i] = (uint8)getBits1(8);
 8010a32:	4ba1      	ldr	r3, [pc, #644]	; (8010cb8 <pjpeg_decode_init+0x57c>)
  return getBits(numBits, 0);
 8010a34:	2100      	movs	r1, #0
    gCompIdent[i] = (uint8)getBits1(8);
 8010a36:	55d8      	strb	r0, [r3, r7]
  return getBits(numBits, 0);
 8010a38:	2004      	movs	r0, #4
 8010a3a:	f7fe f9a7 	bl	800ed8c <getBits>
 8010a3e:	2100      	movs	r1, #0
    gCompHSamp[i] = (uint8)getBits1(4);
 8010a40:	55e8      	strb	r0, [r5, r7]
  return getBits(numBits, 0);
 8010a42:	2004      	movs	r0, #4
 8010a44:	f7fe f9a2 	bl	800ed8c <getBits>
    gCompVSamp[i] = (uint8)getBits1(4);
 8010a48:	55f0      	strb	r0, [r6, r7]
  return getBits(numBits, 0);
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f7fd fb6a 	bl	800e124 <getBits.constprop.5>
  for (i = 0; i < gCompsInFrame; i++) {
 8010a50:	1c7b      	adds	r3, r7, #1
    gCompQuant[i] = (uint8)getBits1(8);
 8010a52:	b2c0      	uxtb	r0, r0
 8010a54:	4a99      	ldr	r2, [pc, #612]	; (8010cbc <pjpeg_decode_init+0x580>)
    if (gCompQuant[i] > 1)
 8010a56:	2801      	cmp	r0, #1
    gCompQuant[i] = (uint8)getBits1(8);
 8010a58:	55d0      	strb	r0, [r2, r7]
  for (i = 0; i < gCompsInFrame; i++) {
 8010a5a:	b2df      	uxtb	r7, r3
    if (gCompQuant[i] > 1)
 8010a5c:	f200 80d8 	bhi.w	8010c10 <pjpeg_decode_init+0x4d4>
  for (i = 0; i < gCompsInFrame; i++) {
 8010a60:	4b92      	ldr	r3, [pc, #584]	; (8010cac <pjpeg_decode_init+0x570>)
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	429f      	cmp	r7, r3
 8010a66:	d3e1      	bcc.n	8010a2c <pjpeg_decode_init+0x2f0>
  if ((status) || (gCallbackStatus))
 8010a68:	4a95      	ldr	r2, [pc, #596]	; (8010cc0 <pjpeg_decode_init+0x584>)
 8010a6a:	7817      	ldrb	r7, [r2, #0]
 8010a6c:	2f00      	cmp	r7, #0
 8010a6e:	f47f aeaf 	bne.w	80107d0 <pjpeg_decode_init+0x94>
  if (gCompsInFrame == 1) {
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d016      	beq.n	8010aa4 <pjpeg_decode_init+0x368>
  } else if (gCompsInFrame == 3) {
 8010a76:	2b03      	cmp	r3, #3
 8010a78:	f040 808a 	bne.w	8010b90 <pjpeg_decode_init+0x454>
    if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
 8010a7c:	786b      	ldrb	r3, [r5, #1]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d10e      	bne.n	8010aa0 <pjpeg_decode_init+0x364>
 8010a82:	7873      	ldrb	r3, [r6, #1]
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d10b      	bne.n	8010aa0 <pjpeg_decode_init+0x364>
 8010a88:	78ab      	ldrb	r3, [r5, #2]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d108      	bne.n	8010aa0 <pjpeg_decode_init+0x364>
        ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
 8010a8e:	78b3      	ldrb	r3, [r6, #2]
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d105      	bne.n	8010aa0 <pjpeg_decode_init+0x364>
    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 8010a94:	782b      	ldrb	r3, [r5, #0]
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	f000 80a1 	beq.w	8010bde <pjpeg_decode_init+0x4a2>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 8010a9c:	2b02      	cmp	r3, #2
 8010a9e:	d07d      	beq.n	8010b9c <pjpeg_decode_init+0x460>
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 8010aa0:	271b      	movs	r7, #27
 8010aa2:	e695      	b.n	80107d0 <pjpeg_decode_init+0x94>
    if ((gCompHSamp[0] != 1) || (gCompVSamp[0] != 1))
 8010aa4:	782b      	ldrb	r3, [r5, #0]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d1fa      	bne.n	8010aa0 <pjpeg_decode_init+0x364>
 8010aaa:	7833      	ldrb	r3, [r6, #0]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d1f7      	bne.n	8010aa0 <pjpeg_decode_init+0x364>
    gMaxMCUXSize = 8;
 8010ab0:	2008      	movs	r0, #8
    gMaxBlocksPerMCU = 1;
 8010ab2:	4984      	ldr	r1, [pc, #528]	; (8010cc4 <pjpeg_decode_init+0x588>)
    gMCUOrg[0] = 0;
 8010ab4:	4d84      	ldr	r5, [pc, #528]	; (8010cc8 <pjpeg_decode_init+0x58c>)
    gMaxMCUYSize = 8;
 8010ab6:	2207      	movs	r2, #7
    gMaxBlocksPerMCU = 1;
 8010ab8:	700b      	strb	r3, [r1, #0]
    gMaxMCUYSize = 8;
 8010aba:	4601      	mov	r1, r0
    gMCUOrg[0] = 0;
 8010abc:	702f      	strb	r7, [r5, #0]
    gMaxMCUYSize = 8;
 8010abe:	4b83      	ldr	r3, [pc, #524]	; (8010ccc <pjpeg_decode_init+0x590>)
    gScanType = PJPG_GRAYSCALE;
 8010ac0:	4e83      	ldr	r6, [pc, #524]	; (8010cd0 <pjpeg_decode_init+0x594>)
    gMaxMCUXSize = 8;
 8010ac2:	4d84      	ldr	r5, [pc, #528]	; (8010cd4 <pjpeg_decode_init+0x598>)
    gScanType = PJPG_GRAYSCALE;
 8010ac4:	7037      	strb	r7, [r6, #0]
    gMaxMCUYSize = 8;
 8010ac6:	9301      	str	r3, [sp, #4]
    gMaxMCUXSize = 8;
 8010ac8:	7028      	strb	r0, [r5, #0]
    gMaxMCUYSize = 8;
 8010aca:	7018      	strb	r0, [r3, #0]
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 8010acc:	4b82      	ldr	r3, [pc, #520]	; (8010cd8 <pjpeg_decode_init+0x59c>)
 8010ace:	2003      	movs	r0, #3
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	3307      	adds	r3, #7
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8010ad4:	2908      	cmp	r1, #8
 8010ad6:	4981      	ldr	r1, [pc, #516]	; (8010cdc <pjpeg_decode_init+0x5a0>)
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 8010ad8:	fa43 f300 	asr.w	r3, r3, r0
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 8010adc:	f8df c218 	ldr.w	ip, [pc, #536]	; 8010cf8 <pjpeg_decode_init+0x5bc>
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8010ae0:	8809      	ldrh	r1, [r1, #0]
 8010ae2:	bf14      	ite	ne
 8010ae4:	2704      	movne	r7, #4
 8010ae6:	2703      	moveq	r7, #3
  gMaxMCUSPerRow =
 8010ae8:	b29b      	uxth	r3, r3
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8010aea:	440a      	add	r2, r1
  gMaxMCUSPerCol =
 8010aec:	497c      	ldr	r1, [pc, #496]	; (8010ce0 <pjpeg_decode_init+0x5a4>)
  status = processMarkers(&c);
 8010aee:	f10d 0017 	add.w	r0, sp, #23
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8010af2:	413a      	asrs	r2, r7
  gMaxMCUSPerCol =
 8010af4:	b292      	uxth	r2, r2
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 8010af6:	fb13 f702 	smulbb	r7, r3, r2
  gMaxMCUSPerCol =
 8010afa:	800a      	strh	r2, [r1, #0]
  gMaxMCUSPerRow =
 8010afc:	4a79      	ldr	r2, [pc, #484]	; (8010ce4 <pjpeg_decode_init+0x5a8>)
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 8010afe:	f8ac 7000 	strh.w	r7, [ip]
  gMaxMCUSPerRow =
 8010b02:	8013      	strh	r3, [r2, #0]
  status = processMarkers(&c);
 8010b04:	f7fd fbd0 	bl	800e2a8 <processMarkers>
  if (status)
 8010b08:	4607      	mov	r7, r0
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	f47f aee6 	bne.w	80108dc <pjpeg_decode_init+0x1a0>
  if (c == M_EOI) {
 8010b10:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010b14:	2bda      	cmp	r3, #218	; 0xda
 8010b16:	d13d      	bne.n	8010b94 <pjpeg_decode_init+0x458>
  return getBits(numBits, 0);
 8010b18:	f7fd fa60 	bl	800dfdc <getBits.constprop.4>
 8010b1c:	4683      	mov	fp, r0
 8010b1e:	4638      	mov	r0, r7
 8010b20:	f7fd fb00 	bl	800e124 <getBits.constprop.5>
  left -= 3;
 8010b24:	f1ab 0203 	sub.w	r2, fp, #3
  gCompsInScan = (uint8)getBits1(8);
 8010b28:	b2c0      	uxtb	r0, r0
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8010b2a:	2303      	movs	r3, #3
  left -= 3;
 8010b2c:	b292      	uxth	r2, r2
  gCompsInScan = (uint8)getBits1(8);
 8010b2e:	496e      	ldr	r1, [pc, #440]	; (8010ce8 <pjpeg_decode_init+0x5ac>)
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8010b30:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  left -= 3;
 8010b34:	9202      	str	r2, [sp, #8]
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8010b36:	429a      	cmp	r2, r3
  gCompsInScan = (uint8)getBits1(8);
 8010b38:	7008      	strb	r0, [r1, #0]
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8010b3a:	d12d      	bne.n	8010b98 <pjpeg_decode_init+0x45c>
 8010b3c:	3801      	subs	r0, #1
 8010b3e:	2802      	cmp	r0, #2
 8010b40:	d82a      	bhi.n	8010b98 <pjpeg_decode_init+0x45c>
    gCompList[i] = ci;
 8010b42:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8010cfc <pjpeg_decode_init+0x5c0>
  return getBits(numBits, 0);
 8010b46:	2000      	movs	r0, #0
 8010b48:	f7fd faec 	bl	800e124 <getBits.constprop.5>
    uint8 cc = (uint8)getBits1(8);
 8010b4c:	b2c2      	uxtb	r2, r0
  return getBits(numBits, 0);
 8010b4e:	2000      	movs	r0, #0
    uint8 cc = (uint8)getBits1(8);
 8010b50:	9203      	str	r2, [sp, #12]
  return getBits(numBits, 0);
 8010b52:	f7fd fae7 	bl	800e124 <getBits.constprop.5>
    left -= 2;
 8010b56:	9b02      	ldr	r3, [sp, #8]
    uint8 c = (uint8)getBits1(8);
 8010b58:	b2c0      	uxtb	r0, r0
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010b5a:	4a54      	ldr	r2, [pc, #336]	; (8010cac <pjpeg_decode_init+0x570>)
    left -= 2;
 8010b5c:	3b02      	subs	r3, #2
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010b5e:	7811      	ldrb	r1, [r2, #0]
    left -= 2;
 8010b60:	fa1f fc83 	uxth.w	ip, r3
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010b64:	b191      	cbz	r1, 8010b8c <pjpeg_decode_init+0x450>
      if (cc == gCompIdent[ci])
 8010b66:	4b54      	ldr	r3, [pc, #336]	; (8010cb8 <pjpeg_decode_init+0x57c>)
 8010b68:	9a03      	ldr	r2, [sp, #12]
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	f000 8082 	beq.w	8010c76 <pjpeg_decode_init+0x53a>
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010b72:	2901      	cmp	r1, #1
 8010b74:	d90a      	bls.n	8010b8c <pjpeg_decode_init+0x450>
      if (cc == gCompIdent[ci])
 8010b76:	4b50      	ldr	r3, [pc, #320]	; (8010cb8 <pjpeg_decode_init+0x57c>)
 8010b78:	785b      	ldrb	r3, [r3, #1]
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d068      	beq.n	8010c50 <pjpeg_decode_init+0x514>
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010b7e:	2902      	cmp	r1, #2
 8010b80:	d004      	beq.n	8010b8c <pjpeg_decode_init+0x450>
      if (cc == gCompIdent[ci])
 8010b82:	4b4d      	ldr	r3, [pc, #308]	; (8010cb8 <pjpeg_decode_init+0x57c>)
 8010b84:	789b      	ldrb	r3, [r3, #2]
 8010b86:	4293      	cmp	r3, r2
 8010b88:	f000 817a 	beq.w	8010e80 <pjpeg_decode_init+0x744>
      return PJPG_BAD_SOS_COMP_ID;
 8010b8c:	270f      	movs	r7, #15
 8010b8e:	e6a5      	b.n	80108dc <pjpeg_decode_init+0x1a0>
    return PJPG_UNSUPPORTED_COLORSPACE;
 8010b90:	271a      	movs	r7, #26
 8010b92:	e61d      	b.n	80107d0 <pjpeg_decode_init+0x94>
    return PJPG_UNEXPECTED_MARKER;
 8010b94:	2712      	movs	r7, #18
 8010b96:	e6a1      	b.n	80108dc <pjpeg_decode_init+0x1a0>
    return PJPG_BAD_SOS_LENGTH;
 8010b98:	270e      	movs	r7, #14
 8010b9a:	e69f      	b.n	80108dc <pjpeg_decode_init+0x1a0>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 8010b9c:	7832      	ldrb	r2, [r6, #0]
 8010b9e:	2a01      	cmp	r2, #1
 8010ba0:	f000 8170 	beq.w	8010e84 <pjpeg_decode_init+0x748>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 2)) {
 8010ba4:	2a02      	cmp	r2, #2
 8010ba6:	f47f af7b 	bne.w	8010aa0 <pjpeg_decode_init+0x364>
      gScanType = PJPG_YH2V2;
 8010baa:	2104      	movs	r1, #4
 8010bac:	4e48      	ldr	r6, [pc, #288]	; (8010cd0 <pjpeg_decode_init+0x594>)
      gMCUOrg[0] = 0;
 8010bae:	4a46      	ldr	r2, [pc, #280]	; (8010cc8 <pjpeg_decode_init+0x58c>)
      gMaxBlocksPerMCU = 6;
 8010bb0:	2506      	movs	r5, #6
 8010bb2:	4b44      	ldr	r3, [pc, #272]	; (8010cc4 <pjpeg_decode_init+0x588>)
      gMCUOrg[0] = 0;
 8010bb4:	2000      	movs	r0, #0
      gScanType = PJPG_YH2V2;
 8010bb6:	7031      	strb	r1, [r6, #0]
      gMCUOrg[0] = 0;
 8010bb8:	f240 2101 	movw	r1, #513	; 0x201
      gMaxBlocksPerMCU = 6;
 8010bbc:	701d      	strb	r5, [r3, #0]
      gMaxMCUXSize = 16;
 8010bbe:	2310      	movs	r3, #16
      gMCUOrg[0] = 0;
 8010bc0:	6010      	str	r0, [r2, #0]
      gMaxMCUXSize = 16;
 8010bc2:	4d44      	ldr	r5, [pc, #272]	; (8010cd4 <pjpeg_decode_init+0x598>)
      gMCUOrg[0] = 0;
 8010bc4:	8091      	strh	r1, [r2, #4]
      gMaxMCUYSize = 16;
 8010bc6:	4a41      	ldr	r2, [pc, #260]	; (8010ccc <pjpeg_decode_init+0x590>)
      gMaxMCUXSize = 16;
 8010bc8:	702b      	strb	r3, [r5, #0]
      gMaxMCUYSize = 16;
 8010bca:	9201      	str	r2, [sp, #4]
 8010bcc:	7013      	strb	r3, [r2, #0]
 8010bce:	9a01      	ldr	r2, [sp, #4]
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 8010bd0:	2004      	movs	r0, #4
 8010bd2:	4b41      	ldr	r3, [pc, #260]	; (8010cd8 <pjpeg_decode_init+0x59c>)
 8010bd4:	7811      	ldrb	r1, [r2, #0]
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	1e4a      	subs	r2, r1, #1
 8010bda:	330f      	adds	r3, #15
 8010bdc:	e77a      	b.n	8010ad4 <pjpeg_decode_init+0x398>
    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 8010bde:	7833      	ldrb	r3, [r6, #0]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d021      	beq.n	8010c28 <pjpeg_decode_init+0x4ec>
    } else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2)) {
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	f47f af5b 	bne.w	8010aa0 <pjpeg_decode_init+0x364>
      gScanType = PJPG_YH1V2;
 8010bea:	2303      	movs	r3, #3
      gMCUOrg[0] = 0;
 8010bec:	4d36      	ldr	r5, [pc, #216]	; (8010cc8 <pjpeg_decode_init+0x58c>)
 8010bee:	4f3f      	ldr	r7, [pc, #252]	; (8010cec <pjpeg_decode_init+0x5b0>)
      gMaxBlocksPerMCU = 4;
 8010bf0:	2104      	movs	r1, #4
      gScanType = PJPG_YH1V2;
 8010bf2:	4e37      	ldr	r6, [pc, #220]	; (8010cd0 <pjpeg_decode_init+0x594>)
      gMaxMCUXSize = 8;
 8010bf4:	2008      	movs	r0, #8
      gMCUOrg[0] = 0;
 8010bf6:	602f      	str	r7, [r5, #0]
      gMaxBlocksPerMCU = 4;
 8010bf8:	4a32      	ldr	r2, [pc, #200]	; (8010cc4 <pjpeg_decode_init+0x588>)
      gMaxMCUYSize = 16;
 8010bfa:	4f34      	ldr	r7, [pc, #208]	; (8010ccc <pjpeg_decode_init+0x590>)
      gScanType = PJPG_YH1V2;
 8010bfc:	7033      	strb	r3, [r6, #0]
      gMaxMCUYSize = 16;
 8010bfe:	2310      	movs	r3, #16
      gMaxMCUXSize = 8;
 8010c00:	4d34      	ldr	r5, [pc, #208]	; (8010cd4 <pjpeg_decode_init+0x598>)
      gMaxBlocksPerMCU = 4;
 8010c02:	7011      	strb	r1, [r2, #0]
      gMaxMCUYSize = 16;
 8010c04:	220f      	movs	r2, #15
 8010c06:	4619      	mov	r1, r3
 8010c08:	9701      	str	r7, [sp, #4]
      gMaxMCUXSize = 8;
 8010c0a:	7028      	strb	r0, [r5, #0]
      gMaxMCUYSize = 16;
 8010c0c:	703b      	strb	r3, [r7, #0]
 8010c0e:	e75d      	b.n	8010acc <pjpeg_decode_init+0x390>
      return PJPG_UNSUPPORTED_QUANT_TABLE;
 8010c10:	2724      	movs	r7, #36	; 0x24
 8010c12:	e663      	b.n	80108dc <pjpeg_decode_init+0x1a0>
    return PJPG_BAD_SOF_LENGTH;
 8010c14:	270b      	movs	r7, #11
 8010c16:	e661      	b.n	80108dc <pjpeg_decode_init+0x1a0>
    return PJPG_TOO_MANY_COMPONENTS;
 8010c18:	270a      	movs	r7, #10
 8010c1a:	e65f      	b.n	80108dc <pjpeg_decode_init+0x1a0>
  if ((status) || (gCallbackStatus))
 8010c1c:	4b28      	ldr	r3, [pc, #160]	; (8010cc0 <pjpeg_decode_init+0x584>)
 8010c1e:	781f      	ldrb	r7, [r3, #0]
    return PJPG_UNSUPPORTED_COLORSPACE;
 8010c20:	2f00      	cmp	r7, #0
 8010c22:	bf08      	it	eq
 8010c24:	271a      	moveq	r7, #26
 8010c26:	e5d3      	b.n	80107d0 <pjpeg_decode_init+0x94>
      gMCUOrg[0] = 0;
 8010c28:	4827      	ldr	r0, [pc, #156]	; (8010cc8 <pjpeg_decode_init+0x58c>)
 8010c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
      gMCUOrg[1] = 1;
 8010c2e:	2502      	movs	r5, #2
      gScanType = PJPG_YH1V1;
 8010c30:	4e27      	ldr	r6, [pc, #156]	; (8010cd0 <pjpeg_decode_init+0x594>)
      gMCUOrg[0] = 0;
 8010c32:	8001      	strh	r1, [r0, #0]
      gMaxBlocksPerMCU = 3;
 8010c34:	2703      	movs	r7, #3
 8010c36:	4a23      	ldr	r2, [pc, #140]	; (8010cc4 <pjpeg_decode_init+0x588>)
      gMCUOrg[1] = 1;
 8010c38:	7085      	strb	r5, [r0, #2]
      gScanType = PJPG_YH1V1;
 8010c3a:	7033      	strb	r3, [r6, #0]
      gMaxMCUXSize = 8;
 8010c3c:	2308      	movs	r3, #8
      gMaxMCUYSize = 8;
 8010c3e:	4823      	ldr	r0, [pc, #140]	; (8010ccc <pjpeg_decode_init+0x590>)
      gMaxMCUXSize = 8;
 8010c40:	4d24      	ldr	r5, [pc, #144]	; (8010cd4 <pjpeg_decode_init+0x598>)
      gMaxMCUYSize = 8;
 8010c42:	4619      	mov	r1, r3
      gMaxBlocksPerMCU = 3;
 8010c44:	7017      	strb	r7, [r2, #0]
      gMaxMCUYSize = 8;
 8010c46:	2207      	movs	r2, #7
 8010c48:	9001      	str	r0, [sp, #4]
      gMaxMCUXSize = 8;
 8010c4a:	702b      	strb	r3, [r5, #0]
      gMaxMCUYSize = 8;
 8010c4c:	7003      	strb	r3, [r0, #0]
 8010c4e:	e73d      	b.n	8010acc <pjpeg_decode_init+0x390>
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010c50:	2301      	movs	r3, #1
  for (i = 0; i < gCompsInScan; i++) {
 8010c52:	1c79      	adds	r1, r7, #1
    gCompDCTab[ci] = (c >> 4) & 15;
 8010c54:	0902      	lsrs	r2, r0, #4
    gCompList[i] = ci;
 8010c56:	f80b 3007 	strb.w	r3, [fp, r7]
    gCompACTab[ci] = (c & 15);
 8010c5a:	f000 000f 	and.w	r0, r0, #15
  for (i = 0; i < gCompsInScan; i++) {
 8010c5e:	b2cf      	uxtb	r7, r1
    gCompDCTab[ci] = (c >> 4) & 15;
 8010c60:	4923      	ldr	r1, [pc, #140]	; (8010cf0 <pjpeg_decode_init+0x5b4>)
 8010c62:	54ca      	strb	r2, [r1, r3]
  for (i = 0; i < gCompsInScan; i++) {
 8010c64:	4a20      	ldr	r2, [pc, #128]	; (8010ce8 <pjpeg_decode_init+0x5ac>)
    gCompACTab[ci] = (c & 15);
 8010c66:	4923      	ldr	r1, [pc, #140]	; (8010cf4 <pjpeg_decode_init+0x5b8>)
  for (i = 0; i < gCompsInScan; i++) {
 8010c68:	7812      	ldrb	r2, [r2, #0]
    gCompACTab[ci] = (c & 15);
 8010c6a:	54c8      	strb	r0, [r1, r3]
  for (i = 0; i < gCompsInScan; i++) {
 8010c6c:	42ba      	cmp	r2, r7
 8010c6e:	d904      	bls.n	8010c7a <pjpeg_decode_init+0x53e>
    left -= 2;
 8010c70:	f8cd c008 	str.w	ip, [sp, #8]
 8010c74:	e767      	b.n	8010b46 <pjpeg_decode_init+0x40a>
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010c76:	2300      	movs	r3, #0
 8010c78:	e7eb      	b.n	8010c52 <pjpeg_decode_init+0x516>
  return getBits(numBits, 0);
 8010c7a:	2000      	movs	r0, #0
 8010c7c:	f7fd fa52 	bl	800e124 <getBits.constprop.5>
 8010c80:	2000      	movs	r0, #0
 8010c82:	f7fd fa4f 	bl	800e124 <getBits.constprop.5>
 8010c86:	2100      	movs	r1, #0
 8010c88:	2004      	movs	r0, #4
 8010c8a:	f7fe f87f 	bl	800ed8c <getBits>
 8010c8e:	2100      	movs	r1, #0
 8010c90:	2004      	movs	r0, #4
 8010c92:	f7fe f87b 	bl	800ed8c <getBits>
  left -= 3;
 8010c96:	9b02      	ldr	r3, [sp, #8]
 8010c98:	1f5f      	subs	r7, r3, #5
 8010c9a:	b2bf      	uxth	r7, r7
  return getBits(numBits, 0);
 8010c9c:	2000      	movs	r0, #0
  while (left) {
 8010c9e:	b37f      	cbz	r7, 8010d00 <pjpeg_decode_init+0x5c4>
    left--;
 8010ca0:	3f01      	subs	r7, #1
  return getBits(numBits, 0);
 8010ca2:	f7fd fa3f 	bl	800e124 <getBits.constprop.5>
    left--;
 8010ca6:	b2bf      	uxth	r7, r7
 8010ca8:	e7f8      	b.n	8010c9c <pjpeg_decode_init+0x560>
 8010caa:	bf00      	nop
 8010cac:	200041fb 	.word	0x200041fb
 8010cb0:	200041e8 	.word	0x200041e8
 8010cb4:	200041f8 	.word	0x200041f8
 8010cb8:	200041ec 	.word	0x200041ec
 8010cbc:	200041f4 	.word	0x200041f4
 8010cc0:	2000415d 	.word	0x2000415d
 8010cc4:	20004976 	.word	0x20004976
 8010cc8:	20004970 	.word	0x20004970
 8010ccc:	2000497d 	.word	0x2000497d
 8010cd0:	20004a8a 	.word	0x20004a8a
 8010cd4:	2000497c 	.word	0x2000497c
 8010cd8:	20004560 	.word	0x20004560
 8010cdc:	20004562 	.word	0x20004562
 8010ce0:	20004978 	.word	0x20004978
 8010ce4:	2000497a 	.word	0x2000497a
 8010ce8:	200041fc 	.word	0x200041fc
 8010cec:	02010000 	.word	0x02010000
 8010cf0:	200041e4 	.word	0x200041e4
 8010cf4:	200041e0 	.word	0x200041e0
 8010cf8:	20004980 	.word	0x20004980
 8010cfc:	200041f0 	.word	0x200041f0
  for (i = 0; i < gCompsInScan; i++) {
 8010d00:	4b68      	ldr	r3, [pc, #416]	; (8010ea4 <pjpeg_decode_init+0x768>)
 8010d02:	7819      	ldrb	r1, [r3, #0]
 8010d04:	2900      	cmp	r1, #0
 8010d06:	d05c      	beq.n	8010dc2 <pjpeg_decode_init+0x686>
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d08:	4a67      	ldr	r2, [pc, #412]	; (8010ea8 <pjpeg_decode_init+0x76c>)
 8010d0a:	2301      	movs	r3, #1
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8010d0c:	f89b 0000 	ldrb.w	r0, [fp]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d10:	f892 c000 	ldrb.w	ip, [r2]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d14:	4a65      	ldr	r2, [pc, #404]	; (8010eac <pjpeg_decode_init+0x770>)
 8010d16:	4607      	mov	r7, r0
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8010d18:	9002      	str	r0, [sp, #8]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d1a:	5c12      	ldrb	r2, [r2, r0]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d1c:	4864      	ldr	r0, [pc, #400]	; (8010eb0 <pjpeg_decode_init+0x774>)
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d1e:	3202      	adds	r2, #2
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d20:	9003      	str	r0, [sp, #12]
        ((gValidHuffTables & (1 << compACTab)) == 0))
 8010d22:	b2d2      	uxtb	r2, r2
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d24:	5dc0      	ldrb	r0, [r0, r7]
 8010d26:	fa03 f202 	lsl.w	r2, r3, r2
 8010d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8010d2e:	4302      	orrs	r2, r0
 8010d30:	ea32 0e0c 	bics.w	lr, r2, ip
 8010d34:	f040 809e 	bne.w	8010e74 <pjpeg_decode_init+0x738>
  for (i = 0; i < gCompsInScan; i++) {
 8010d38:	4299      	cmp	r1, r3
 8010d3a:	d921      	bls.n	8010d80 <pjpeg_decode_init+0x644>
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8010d3c:	f89b 0001 	ldrb.w	r0, [fp, #1]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d40:	4a5a      	ldr	r2, [pc, #360]	; (8010eac <pjpeg_decode_init+0x770>)
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d42:	4f5b      	ldr	r7, [pc, #364]	; (8010eb0 <pjpeg_decode_init+0x774>)
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d44:	5c12      	ldrb	r2, [r2, r0]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d46:	5c38      	ldrb	r0, [r7, r0]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d48:	3202      	adds	r2, #2
 8010d4a:	fa03 f000 	lsl.w	r0, r3, r0
        ((gValidHuffTables & (1 << compACTab)) == 0))
 8010d4e:	b2d2      	uxtb	r2, r2
 8010d50:	fa03 f202 	lsl.w	r2, r3, r2
 8010d54:	4302      	orrs	r2, r0
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d56:	ea32 0e0c 	bics.w	lr, r2, ip
 8010d5a:	f040 808b 	bne.w	8010e74 <pjpeg_decode_init+0x738>
  for (i = 0; i < gCompsInScan; i++) {
 8010d5e:	2902      	cmp	r1, #2
 8010d60:	d00e      	beq.n	8010d80 <pjpeg_decode_init+0x644>
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8010d62:	f89b 2002 	ldrb.w	r2, [fp, #2]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d66:	4851      	ldr	r0, [pc, #324]	; (8010eac <pjpeg_decode_init+0x770>)
 8010d68:	5c80      	ldrb	r0, [r0, r2]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d6a:	5cba      	ldrb	r2, [r7, r2]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010d6c:	3002      	adds	r0, #2
 8010d6e:	fa03 f202 	lsl.w	r2, r3, r2
        ((gValidHuffTables & (1 << compACTab)) == 0))
 8010d72:	b2c0      	uxtb	r0, r0
 8010d74:	fa03 f000 	lsl.w	r0, r3, r0
 8010d78:	4302      	orrs	r2, r0
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010d7a:	ea32 030c 	bics.w	r3, r2, ip
 8010d7e:	d179      	bne.n	8010e74 <pjpeg_decode_init+0x738>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 8010d80:	9b02      	ldr	r3, [sp, #8]
 8010d82:	484c      	ldr	r0, [pc, #304]	; (8010eb4 <pjpeg_decode_init+0x778>)
 8010d84:	5cc2      	ldrb	r2, [r0, r3]
    if ((gValidQuantTables & compQuantMask) == 0)
 8010d86:	4b4c      	ldr	r3, [pc, #304]	; (8010eb8 <pjpeg_decode_init+0x77c>)
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 8010d88:	2a00      	cmp	r2, #0
    if ((gValidQuantTables & compQuantMask) == 0)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 8010d8c:	bf0c      	ite	eq
 8010d8e:	2201      	moveq	r2, #1
 8010d90:	2202      	movne	r2, #2
    if ((gValidQuantTables & compQuantMask) == 0)
 8010d92:	421a      	tst	r2, r3
 8010d94:	d072      	beq.n	8010e7c <pjpeg_decode_init+0x740>
  for (i = 0; i < gCompsInScan; i++) {
 8010d96:	2901      	cmp	r1, #1
 8010d98:	d913      	bls.n	8010dc2 <pjpeg_decode_init+0x686>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 8010d9a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8010d9e:	5c82      	ldrb	r2, [r0, r2]
 8010da0:	2a00      	cmp	r2, #0
 8010da2:	bf0c      	ite	eq
 8010da4:	2201      	moveq	r2, #1
 8010da6:	2202      	movne	r2, #2
    if ((gValidQuantTables & compQuantMask) == 0)
 8010da8:	4213      	tst	r3, r2
 8010daa:	d067      	beq.n	8010e7c <pjpeg_decode_init+0x740>
  for (i = 0; i < gCompsInScan; i++) {
 8010dac:	2902      	cmp	r1, #2
 8010dae:	d008      	beq.n	8010dc2 <pjpeg_decode_init+0x686>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 8010db0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8010db4:	5c82      	ldrb	r2, [r0, r2]
 8010db6:	2a00      	cmp	r2, #0
 8010db8:	bf0c      	ite	eq
 8010dba:	2201      	moveq	r2, #1
 8010dbc:	2202      	movne	r2, #2
    if ((gValidQuantTables & compQuantMask) == 0)
 8010dbe:	4213      	tst	r3, r2
 8010dc0:	d05c      	beq.n	8010e7c <pjpeg_decode_init+0x740>
  if (gRestartInterval) {
 8010dc2:	4b3e      	ldr	r3, [pc, #248]	; (8010ebc <pjpeg_decode_init+0x780>)
  gLastDC[0] = 0;
 8010dc4:	493e      	ldr	r1, [pc, #248]	; (8010ec0 <pjpeg_decode_init+0x784>)
  if (gRestartInterval) {
 8010dc6:	881a      	ldrh	r2, [r3, #0]
  gLastDC[0] = 0;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	600b      	str	r3, [r1, #0]
  gLastDC[2] = 0;
 8010dcc:	808b      	strh	r3, [r1, #4]
  if (gRestartInterval) {
 8010dce:	b11a      	cbz	r2, 8010dd8 <pjpeg_decode_init+0x69c>
    gRestartsLeft = gRestartInterval;
 8010dd0:	483c      	ldr	r0, [pc, #240]	; (8010ec4 <pjpeg_decode_init+0x788>)
    gNextRestartNum = 0;
 8010dd2:	493d      	ldr	r1, [pc, #244]	; (8010ec8 <pjpeg_decode_init+0x78c>)
    gRestartsLeft = gRestartInterval;
 8010dd4:	8002      	strh	r2, [r0, #0]
    gNextRestartNum = 0;
 8010dd6:	800b      	strh	r3, [r1, #0]
  if (gBitsLeft > 0)
 8010dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8010ddc:	f8b9 2000 	ldrh.w	r2, [r9]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d049      	beq.n	8010e78 <pjpeg_decode_init+0x73c>
 8010de4:	4839      	ldr	r0, [pc, #228]	; (8010ecc <pjpeg_decode_init+0x790>)
 8010de6:	f898 1000 	ldrb.w	r1, [r8]
 8010dea:	7803      	ldrb	r3, [r0, #0]
  gInBuf[gInBufOfs] = i;
 8010dec:	4f38      	ldr	r7, [pc, #224]	; (8010ed0 <pjpeg_decode_init+0x794>)
  gInBufLeft++;
 8010dee:	3101      	adds	r1, #1
 8010df0:	3b01      	subs	r3, #1
 8010df2:	f888 1000 	strb.w	r1, [r8]
 8010df6:	b2db      	uxtb	r3, r3
  gInBufOfs--;
 8010df8:	7003      	strb	r3, [r0, #0]
    stuffChar((uint8)gBitBuf);
 8010dfa:	54fa      	strb	r2, [r7, r3]
  gInBufOfs--;
 8010dfc:	4b33      	ldr	r3, [pc, #204]	; (8010ecc <pjpeg_decode_init+0x790>)
  stuffChar((uint8)(gBitBuf >> 8));
 8010dfe:	0a12      	lsrs	r2, r2, #8
  gInBufLeft++;
 8010e00:	f898 1000 	ldrb.w	r1, [r8]
  gBitsLeft = 8;
 8010e04:	2008      	movs	r0, #8
  gInBufOfs--;
 8010e06:	781b      	ldrb	r3, [r3, #0]
  gInBufLeft++;
 8010e08:	3101      	adds	r1, #1
  gBitsLeft = 8;
 8010e0a:	f88a 0000 	strb.w	r0, [sl]
  gInBufOfs--;
 8010e0e:	3b01      	subs	r3, #1
  return getBits(numBits, 1);
 8010e10:	2001      	movs	r0, #1
  gInBufLeft++;
 8010e12:	f888 1000 	strb.w	r1, [r8]
  gInBufOfs--;
 8010e16:	b2db      	uxtb	r3, r3
  stuffChar((uint8)(gBitBuf >> 8));
 8010e18:	54fa      	strb	r2, [r7, r3]
  gInBufOfs--;
 8010e1a:	4a2c      	ldr	r2, [pc, #176]	; (8010ecc <pjpeg_decode_init+0x790>)
 8010e1c:	7013      	strb	r3, [r2, #0]
  return getBits(numBits, 1);
 8010e1e:	f7fd f981 	bl	800e124 <getBits.constprop.5>
 8010e22:	2001      	movs	r0, #1
 8010e24:	f7fd f97e 	bl	800e124 <getBits.constprop.5>
  if ((status) || (gCallbackStatus))
 8010e28:	4b2a      	ldr	r3, [pc, #168]	; (8010ed4 <pjpeg_decode_init+0x798>)
 8010e2a:	781f      	ldrb	r7, [r3, #0]
 8010e2c:	2f00      	cmp	r7, #0
 8010e2e:	f47f accf 	bne.w	80107d0 <pjpeg_decode_init+0x94>
  pInfo->m_comps = gCompsInFrame;
 8010e32:	4929      	ldr	r1, [pc, #164]	; (8010ed8 <pjpeg_decode_init+0x79c>)
  pInfo->m_width = gImageXSize;
 8010e34:	4b29      	ldr	r3, [pc, #164]	; (8010edc <pjpeg_decode_init+0x7a0>)
  pInfo->m_comps = gCompsInFrame;
 8010e36:	f891 c000 	ldrb.w	ip, [r1]
  pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
 8010e3a:	4929      	ldr	r1, [pc, #164]	; (8010ee0 <pjpeg_decode_init+0x7a4>)
  pInfo->m_width = gImageXSize;
 8010e3c:	881a      	ldrh	r2, [r3, #0]
  pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
 8010e3e:	f8b1 e000 	ldrh.w	lr, [r1]
  pInfo->m_height = gImageYSize;
 8010e42:	4b28      	ldr	r3, [pc, #160]	; (8010ee4 <pjpeg_decode_init+0x7a8>)
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 8010e44:	4928      	ldr	r1, [pc, #160]	; (8010ee8 <pjpeg_decode_init+0x7ac>)
  pInfo->m_height = gImageYSize;
 8010e46:	881b      	ldrh	r3, [r3, #0]
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 8010e48:	f8b1 9000 	ldrh.w	r9, [r1]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 8010e4c:	9901      	ldr	r1, [sp, #4]
  pInfo->m_scanType = gScanType;
 8010e4e:	7836      	ldrb	r6, [r6, #0]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 8010e50:	7808      	ldrb	r0, [r1, #0]
  pInfo->m_MCUWidth = gMaxMCUXSize;
 8010e52:	782d      	ldrb	r5, [r5, #0]
  pInfo->m_pMCUBufR = gMCUBufR;
 8010e54:	4925      	ldr	r1, [pc, #148]	; (8010eec <pjpeg_decode_init+0x7b0>)
  pInfo->m_width = gImageXSize;
 8010e56:	6022      	str	r2, [r4, #0]
  pInfo->m_height = gImageYSize;
 8010e58:	6063      	str	r3, [r4, #4]
  pInfo->m_pMCUBufG = gMCUBufG;
 8010e5a:	4a25      	ldr	r2, [pc, #148]	; (8010ef0 <pjpeg_decode_init+0x7b4>)
  pInfo->m_pMCUBufB = gMCUBufB;
 8010e5c:	4b25      	ldr	r3, [pc, #148]	; (8010ef4 <pjpeg_decode_init+0x7b8>)
  pInfo->m_comps = gCompsInFrame;
 8010e5e:	f8c4 c008 	str.w	ip, [r4, #8]
  pInfo->m_scanType = gScanType;
 8010e62:	7526      	strb	r6, [r4, #20]
  pInfo->m_pMCUBufB = gMCUBufB;
 8010e64:	62a3      	str	r3, [r4, #40]	; 0x28
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 8010e66:	e9c4 e903 	strd	lr, r9, [r4, #12]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 8010e6a:	e9c4 5006 	strd	r5, r0, [r4, #24]
  pInfo->m_pMCUBufG = gMCUBufG;
 8010e6e:	e9c4 1208 	strd	r1, r2, [r4, #32]
  return 0;
 8010e72:	e4ad      	b.n	80107d0 <pjpeg_decode_init+0x94>
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010e74:	2718      	movs	r7, #24
 8010e76:	e531      	b.n	80108dc <pjpeg_decode_init+0x1a0>
 8010e78:	4f15      	ldr	r7, [pc, #84]	; (8010ed0 <pjpeg_decode_init+0x794>)
 8010e7a:	e7bf      	b.n	8010dfc <pjpeg_decode_init+0x6c0>
      return PJPG_UNDEFINED_QUANT_TABLE;
 8010e7c:	2717      	movs	r7, #23
 8010e7e:	e52d      	b.n	80108dc <pjpeg_decode_init+0x1a0>
    for (ci = 0; ci < gCompsInFrame; ci++)
 8010e80:	2302      	movs	r3, #2
 8010e82:	e6e6      	b.n	8010c52 <pjpeg_decode_init+0x516>
      gMaxBlocksPerMCU = 4;
 8010e84:	2004      	movs	r0, #4
 8010e86:	491c      	ldr	r1, [pc, #112]	; (8010ef8 <pjpeg_decode_init+0x7bc>)
      gScanType = PJPG_YH2V1;
 8010e88:	4e1c      	ldr	r6, [pc, #112]	; (8010efc <pjpeg_decode_init+0x7c0>)
      gMaxMCUXSize = 16;
 8010e8a:	2210      	movs	r2, #16
      gMaxBlocksPerMCU = 4;
 8010e8c:	7008      	strb	r0, [r1, #0]
      gMCUOrg[0] = 0;
 8010e8e:	491c      	ldr	r1, [pc, #112]	; (8010f00 <pjpeg_decode_init+0x7c4>)
 8010e90:	481c      	ldr	r0, [pc, #112]	; (8010f04 <pjpeg_decode_init+0x7c8>)
      gScanType = PJPG_YH2V1;
 8010e92:	7033      	strb	r3, [r6, #0]
      gMaxMCUYSize = 8;
 8010e94:	2308      	movs	r3, #8
      gMCUOrg[0] = 0;
 8010e96:	6008      	str	r0, [r1, #0]
      gMaxMCUXSize = 16;
 8010e98:	4d1b      	ldr	r5, [pc, #108]	; (8010f08 <pjpeg_decode_init+0x7cc>)
      gMaxMCUYSize = 8;
 8010e9a:	491c      	ldr	r1, [pc, #112]	; (8010f0c <pjpeg_decode_init+0x7d0>)
      gMaxMCUXSize = 16;
 8010e9c:	702a      	strb	r2, [r5, #0]
      gMaxMCUYSize = 8;
 8010e9e:	9101      	str	r1, [sp, #4]
 8010ea0:	700b      	strb	r3, [r1, #0]
 8010ea2:	e694      	b.n	8010bce <pjpeg_decode_init+0x492>
 8010ea4:	200041fc 	.word	0x200041fc
 8010ea8:	20004a8c 	.word	0x20004a8c
 8010eac:	200041e0 	.word	0x200041e0
 8010eb0:	200041e4 	.word	0x200041e4
 8010eb4:	200041f4 	.word	0x200041f4
 8010eb8:	20004a8d 	.word	0x20004a8d
 8010ebc:	20004a86 	.word	0x20004a86
 8010ec0:	20004668 	.word	0x20004668
 8010ec4:	20004a88 	.word	0x20004a88
 8010ec8:	2000497e 	.word	0x2000497e
 8010ecc:	20004665 	.word	0x20004665
 8010ed0:	20004564 	.word	0x20004564
 8010ed4:	2000415d 	.word	0x2000415d
 8010ed8:	200041fb 	.word	0x200041fb
 8010edc:	20004560 	.word	0x20004560
 8010ee0:	2000497a 	.word	0x2000497a
 8010ee4:	20004562 	.word	0x20004562
 8010ee8:	20004978 	.word	0x20004978
 8010eec:	20004870 	.word	0x20004870
 8010ef0:	20004770 	.word	0x20004770
 8010ef4:	20004670 	.word	0x20004670
 8010ef8:	20004976 	.word	0x20004976
 8010efc:	20004a8a 	.word	0x20004a8a
 8010f00:	20004970 	.word	0x20004970
 8010f04:	02010000 	.word	0x02010000
 8010f08:	2000497c 	.word	0x2000497c
 8010f0c:	2000497d 	.word	0x2000497d

08010f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010f48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010f14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010f16:	e003      	b.n	8010f20 <LoopCopyDataInit>

08010f18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010f18:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010f1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010f1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010f1e:	3104      	adds	r1, #4

08010f20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010f20:	480b      	ldr	r0, [pc, #44]	; (8010f50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010f22:	4b0c      	ldr	r3, [pc, #48]	; (8010f54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010f24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010f26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010f28:	d3f6      	bcc.n	8010f18 <CopyDataInit>
  ldr  r2, =_sbss
 8010f2a:	4a0b      	ldr	r2, [pc, #44]	; (8010f58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010f2c:	e002      	b.n	8010f34 <LoopFillZerobss>

08010f2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010f2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010f30:	f842 3b04 	str.w	r3, [r2], #4

08010f34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010f34:	4b09      	ldr	r3, [pc, #36]	; (8010f5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010f36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010f38:	d3f9      	bcc.n	8010f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010f3a:	f000 f94b 	bl	80111d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010f3e:	f007 fb11 	bl	8018564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010f42:	f7fb fe15 	bl	800cb70 <main>
  bx  lr    
 8010f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010f48:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8010f4c:	08094d24 	.word	0x08094d24
  ldr  r0, =_sdata
 8010f50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010f54:	200009d8 	.word	0x200009d8
  ldr  r2, =_sbss
 8010f58:	200009d8 	.word	0x200009d8
  ldr  r3, = _ebss
 8010f5c:	2001ba34 	.word	0x2001ba34

08010f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010f60:	e7fe      	b.n	8010f60 <ADC_IRQHandler>
	...

08010f64 <HAL_I2C_MspInit>:
#include "camera_spi.h"
#include "main.h"
#include "stm32746g_discovery.h"
#include "stm32746g_discovery_lcd.h"
#include "stm32f7xx_hal.h"
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8010f64:	b570      	push	{r4, r5, r6, lr}
 8010f66:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 8010f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 8010f6c:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8010f6e:	4d1d      	ldr	r5, [pc, #116]	; (8010fe4 <HAL_I2C_MspInit+0x80>)
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8010f70:	a809      	add	r0, sp, #36	; 0x24
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 8010f72:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 8010f74:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8010f76:	f7f9 fdad 	bl	800aad4 <HAL_RCCEx_PeriphCLKConfig>
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8010f7a:	4b1b      	ldr	r3, [pc, #108]	; (8010fe8 <HAL_I2C_MspInit+0x84>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010f7c:	2012      	movs	r0, #18
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8010f7e:	2404      	movs	r4, #4
  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 8010f80:	f44f 7680 	mov.w	r6, #256	; 0x100
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8010f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8010f86:	a904      	add	r1, sp, #16
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8010f88:	f042 0202 	orr.w	r2, r2, #2
 8010f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8010f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f90:	f002 0202 	and.w	r2, r2, #2
 8010f94:	9201      	str	r2, [sp, #4]
 8010f96:	9a01      	ldr	r2, [sp, #4]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8010f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f9a:	f042 0202 	orr.w	r2, r2, #2
 8010f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8010fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fa2:	f002 0202 	and.w	r2, r2, #2
 8010fa6:	9202      	str	r2, [sp, #8]
 8010fa8:	9a02      	ldr	r2, [sp, #8]
  I2Cx_CLK_ENABLE();
 8010faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8010fb0:	641a      	str	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010fb2:	2201      	movs	r2, #1
  I2Cx_CLK_ENABLE();
 8010fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010fb6:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8010fb8:	4628      	mov	r0, r5
  I2Cx_CLK_ENABLE();
 8010fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 8010fbe:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8010fc0:	9408      	str	r4, [sp, #32]
  I2Cx_CLK_ENABLE();
 8010fc2:	9303      	str	r3, [sp, #12]
 8010fc4:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8010fc6:	2302      	movs	r3, #2
 8010fc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8010fcc:	f7f8 fc1c 	bl	8009808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8010fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8010fd4:	a904      	add	r1, sp, #16
 8010fd6:	4628      	mov	r0, r5
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8010fd8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8010fda:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8010fdc:	f7f8 fc14 	bl	8009808 <HAL_GPIO_Init>
}
 8010fe0:	b02a      	add	sp, #168	; 0xa8
 8010fe2:	bd70      	pop	{r4, r5, r6, pc}
 8010fe4:	40020400 	.word	0x40020400
 8010fe8:	40023800 	.word	0x40023800

08010fec <HAL_SPI_MspInit>:
  HAL_GPIO_DeInit(I2Cx_SDA_GPIO_PORT, I2Cx_SDA_PIN);
}
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hspi->Instance == SPIx) {
 8010fec:	6802      	ldr	r2, [r0, #0]
 8010fee:	4b23      	ldr	r3, [pc, #140]	; (801107c <HAL_SPI_MspInit+0x90>)
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d000      	beq.n	8010ff6 <HAL_SPI_MspInit+0xa>
 8010ff4:	4770      	bx	lr

    SPIx_SCK_GPIO_CLK_ENABLE();
 8010ff6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    SPIx_MISO_GPIO_CLK_ENABLE();
    SPIx_MOSI_GPIO_CLK_ENABLE();

    SPIx_CLK_ENABLE();

    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8010ffa:	2202      	movs	r2, #2
    SPIx_SCK_GPIO_CLK_ENABLE();
 8010ffc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010ffe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8011002:	b530      	push	{r4, r5, lr}
    SPIx_SCK_GPIO_CLK_ENABLE();
 8011004:	6318      	str	r0, [r3, #48]	; 0x30
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8011006:	b08b      	sub	sp, #44	; 0x2c
    SPIx_SCK_GPIO_CLK_ENABLE();
 8011008:	6b18      	ldr	r0, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 801100a:	2405      	movs	r4, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 801100c:	2500      	movs	r5, #0
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 801100e:	a905      	add	r1, sp, #20
    SPIx_SCK_GPIO_CLK_ENABLE();
 8011010:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011014:	9001      	str	r0, [sp, #4]
 8011016:	9801      	ldr	r0, [sp, #4]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8011018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801101a:	4310      	orrs	r0, r2
 801101c:	6318      	str	r0, [r3, #48]	; 0x30
 801101e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011020:	4010      	ands	r0, r2
 8011022:	9002      	str	r0, [sp, #8]
 8011024:	9802      	ldr	r0, [sp, #8]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8011026:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011028:	4310      	orrs	r0, r2
 801102a:	6318      	str	r0, [r3, #48]	; 0x30
 801102c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801102e:	4010      	ands	r0, r2
 8011030:	9003      	str	r0, [sp, #12]
 8011032:	9803      	ldr	r0, [sp, #12]
    SPIx_CLK_ENABLE();
 8011034:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011036:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 801103a:	6418      	str	r0, [r3, #64]	; 0x40
 801103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 801103e:	4810      	ldr	r0, [pc, #64]	; (8011080 <HAL_SPI_MspInit+0x94>)
    SPIx_CLK_ENABLE();
 8011040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8011044:	9205      	str	r2, [sp, #20]
    SPIx_CLK_ENABLE();
 8011046:	9304      	str	r3, [sp, #16]
 8011048:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801104a:	e9cd 2206 	strd	r2, r2, [sp, #24]
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 801104e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8011052:	f7f8 fbd9 	bl	8009808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8011056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 801105a:	a905      	add	r1, sp, #20
 801105c:	4809      	ldr	r0, [pc, #36]	; (8011084 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 801105e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8011060:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8011062:	f7f8 fbd1 	bl	8009808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8011066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 801106a:	a905      	add	r1, sp, #20
 801106c:	4805      	ldr	r0, [pc, #20]	; (8011084 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 801106e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8011070:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8011072:	f7f8 fbc9 	bl	8009808 <HAL_GPIO_Init>
  }
}
 8011076:	b00b      	add	sp, #44	; 0x2c
 8011078:	bd30      	pop	{r4, r5, pc}
 801107a:	bf00      	nop
 801107c:	40003800 	.word	0x40003800
 8011080:	40022000 	.word	0x40022000
 8011084:	40020400 	.word	0x40020400

08011088 <HAL_LTDC_MspInit>:
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 8011088:	4b43      	ldr	r3, [pc, #268]	; (8011198 <HAL_LTDC_MspInit+0x110>)
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 801108a:	4844      	ldr	r0, [pc, #272]	; (801119c <HAL_LTDC_MspInit+0x114>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 801108c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801108e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8011092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8011096:	645a      	str	r2, [r3, #68]	; 0x44
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8011098:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_LTDC_CLK_ENABLE();
 801109a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 801109c:	2510      	movs	r5, #16
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 801109e:	2402      	movs	r4, #2
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 80110a0:	260e      	movs	r6, #14
  __HAL_RCC_LTDC_CLK_ENABLE();
 80110a2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 80110a6:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 80110a8:	a907      	add	r1, sp, #28

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 80110aa:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_LTDC_CLK_ENABLE();
 80110ae:	9201      	str	r2, [sp, #4]
 80110b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80110b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 80110b4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80111ac <HAL_LTDC_MspInit+0x124>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80110b8:	432a      	orrs	r2, r5
 80110ba:	631a      	str	r2, [r3, #48]	; 0x30
 80110bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110be:	402a      	ands	r2, r5
 80110c0:	9202      	str	r2, [sp, #8]
 80110c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80110c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110ca:	631a      	str	r2, [r3, #48]	; 0x30
 80110cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110ce:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80110d2:	9203      	str	r2, [sp, #12]
 80110d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80110d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80110dc:	631a      	str	r2, [r3, #48]	; 0x30
 80110de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80110e4:	9204      	str	r2, [sp, #16]
 80110e6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80110e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110ee:	631a      	str	r2, [r3, #48]	; 0x30
 80110f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110f2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80110f6:	9205      	str	r2, [sp, #20]
 80110f8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80110fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011100:	631a      	str	r2, [r3, #48]	; 0x30
 8011102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8011104:	9507      	str	r5, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8011106:	2501      	movs	r5, #1
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8011108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 801110c:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801110e:	9306      	str	r3, [sp, #24]
 8011110:	9b06      	ldr	r3, [sp, #24]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8011112:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8011114:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8011118:	f7f8 fb76 	bl	8009808 <HAL_GPIO_Init>
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 801111c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 801111e:	a907      	add	r1, sp, #28
 8011120:	481f      	ldr	r0, [pc, #124]	; (80111a0 <HAL_LTDC_MspInit+0x118>)
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8011122:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011124:	4f1f      	ldr	r7, [pc, #124]	; (80111a4 <HAL_LTDC_MspInit+0x11c>)
  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8011126:	e9cd 9407 	strd	r9, r4, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 801112a:	f7f8 fb6d 	bl	8009808 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 801112e:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8011132:	a907      	add	r1, sp, #28
 8011134:	4640      	mov	r0, r8
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011136:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8011138:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 801113a:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 801113c:	f7f8 fb64 	bl	8009808 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin =
 8011140:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8011144:	a907      	add	r1, sp, #28
 8011146:	4818      	ldr	r0, [pc, #96]	; (80111a8 <HAL_LTDC_MspInit+0x120>)
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011148:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin =
 801114a:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 801114c:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 801114e:	f7f8 fb5b 	bl	8009808 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8011152:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011154:	a907      	add	r1, sp, #28
 8011156:	4638      	mov	r0, r7
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011158:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 801115a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 801115c:	2408      	movs	r4, #8
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 801115e:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011160:	f7f8 fb52 	bl	8009808 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8011164:	a907      	add	r1, sp, #28
 8011166:	4640      	mov	r0, r8
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8011168:	e9cd 9507 	strd	r9, r5, [sp, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 801116c:	f7f8 fb4c 	bl	8009808 <HAL_GPIO_Init>
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011170:	a907      	add	r1, sp, #28
 8011172:	4638      	mov	r0, r7
  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8011174:	e9cd 4507 	strd	r4, r5, [sp, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011178:	f7f8 fb46 	bl	8009808 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 801117c:	462a      	mov	r2, r5
 801117e:	4649      	mov	r1, r9
 8011180:	4640      	mov	r0, r8
 8011182:	f7f8 fc5f 	bl	8009a44 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8011186:	462a      	mov	r2, r5
 8011188:	4621      	mov	r1, r4
 801118a:	4638      	mov	r0, r7
 801118c:	f7f8 fc5a 	bl	8009a44 <HAL_GPIO_WritePin>
}
 8011190:	b00d      	add	sp, #52	; 0x34
 8011192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011196:	bf00      	nop
 8011198:	40023800 	.word	0x40023800
 801119c:	40021000 	.word	0x40021000
 80111a0:	40021800 	.word	0x40021800
 80111a4:	40022800 	.word	0x40022800
 80111a8:	40022400 	.word	0x40022400
 80111ac:	40022000 	.word	0x40022000

080111b0 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop

080111b4 <HardFault_Handler>:

void HardFault_Handler(void) {
 80111b4:	e7fe      	b.n	80111b4 <HardFault_Handler>
 80111b6:	bf00      	nop

080111b8 <MemManage_Handler>:

  while (1) {
  }
}

void MemManage_Handler(void) {
 80111b8:	e7fe      	b.n	80111b8 <MemManage_Handler>
 80111ba:	bf00      	nop

080111bc <BusFault_Handler>:

  while (1) {
  }
}

void BusFault_Handler(void) {
 80111bc:	e7fe      	b.n	80111bc <BusFault_Handler>
 80111be:	bf00      	nop

080111c0 <UsageFault_Handler>:

  while (1) {
  }
}

void UsageFault_Handler(void) {
 80111c0:	e7fe      	b.n	80111c0 <UsageFault_Handler>
 80111c2:	bf00      	nop

080111c4 <SVC_Handler>:
 80111c4:	4770      	bx	lr
 80111c6:	bf00      	nop

080111c8 <DebugMon_Handler>:
 80111c8:	4770      	bx	lr
 80111ca:	bf00      	nop

080111cc <PendSV_Handler>:
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop

080111d0 <SysTick_Handler>:

void DebugMon_Handler(void) {}

void PendSV_Handler(void) {}

void SysTick_Handler(void) { HAL_IncTick(); }
 80111d0:	f7f8 b83a 	b.w	8009248 <HAL_IncTick>

080111d4 <SystemInit>:
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 80111d4:	4a0f      	ldr	r2, [pc, #60]	; (8011214 <SystemInit+0x40>)
#endif

  RCC->CR |= (uint32_t)0x00000001;
 80111d6:	4b10      	ldr	r3, [pc, #64]	; (8011218 <SystemInit+0x44>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 80111d8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  RCC->CFGR = 0x00000000;

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80111dc:	490f      	ldr	r1, [pc, #60]	; (801121c <SystemInit+0x48>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 80111de:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80111e2:	b470      	push	{r4, r5, r6}
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 80111e4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 80111e8:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 80111ea:	6818      	ldr	r0, [r3, #0]
  RCC->CIR = 0x00000000;

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 80111ec:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 80111f0:	4e0b      	ldr	r6, [pc, #44]	; (8011220 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 80111f2:	f040 0001 	orr.w	r0, r0, #1
 80111f6:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 80111f8:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80111fa:	6818      	ldr	r0, [r3, #0]
 80111fc:	4001      	ands	r1, r0
 80111fe:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8011200:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011202:	6819      	ldr	r1, [r3, #0]
 8011204:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8011208:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 801120a:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 801120c:	6095      	str	r5, [r2, #8]
#endif
}
 801120e:	bc70      	pop	{r4, r5, r6}
 8011210:	4770      	bx	lr
 8011212:	bf00      	nop
 8011214:	e000ed00 	.word	0xe000ed00
 8011218:	40023800 	.word	0x40023800
 801121c:	fef6ffff 	.word	0xfef6ffff
 8011220:	24003010 	.word	0x24003010

08011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8011224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011228:	b09d      	sub	sp, #116	; 0x74

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 801122a:	f101 0901 	add.w	r9, r1, #1
{
 801122e:	9216      	str	r2, [sp, #88]	; 0x58
 8011230:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8011232:	930a      	str	r3, [sp, #40]	; 0x28
 8011234:	1c8b      	adds	r3, r1, #2
 8011236:	4252      	negs	r2, r2
 8011238:	910c      	str	r1, [sp, #48]	; 0x30
 801123a:	9314      	str	r3, [sp, #80]	; 0x50
 801123c:	f002 0207 	and.w	r2, r2, #7
 8011240:	f8bd 10bc 	ldrh.w	r1, [sp, #188]	; 0xbc
 8011244:	9013      	str	r0, [sp, #76]	; 0x4c
 8011246:	1dd3      	adds	r3, r2, #7
 8011248:	910d      	str	r1, [sp, #52]	; 0x34
 801124a:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	; 0xc0
 801124e:	2b0c      	cmp	r3, #12
 8011250:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8011254:	910b      	str	r1, [sp, #44]	; 0x2c
 8011256:	bf38      	it	cc
 8011258:	230c      	movcc	r3, #12
 801125a:	f99d 70cc 	ldrsb.w	r7, [sp, #204]	; 0xcc
 801125e:	454b      	cmp	r3, r9
 8011260:	f200 82cd 	bhi.w	80117fe <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5da>
 8011264:	b322      	cbz	r2, 80112b0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x8c>
        *cols_8b++ = PAD8;
 8011266:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011268:	2a01      	cmp	r2, #1
 801126a:	701f      	strb	r7, [r3, #0]
 801126c:	f103 0c01 	add.w	ip, r3, #1
 8011270:	d020      	beq.n	80112b4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011272:	2a02      	cmp	r2, #2
 8011274:	705f      	strb	r7, [r3, #1]
 8011276:	f103 0c02 	add.w	ip, r3, #2
 801127a:	d01b      	beq.n	80112b4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 801127c:	2a03      	cmp	r2, #3
 801127e:	709f      	strb	r7, [r3, #2]
 8011280:	f103 0c03 	add.w	ip, r3, #3
 8011284:	d016      	beq.n	80112b4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011286:	2a04      	cmp	r2, #4
 8011288:	70df      	strb	r7, [r3, #3]
 801128a:	f103 0c04 	add.w	ip, r3, #4
 801128e:	d011      	beq.n	80112b4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011290:	2a05      	cmp	r2, #5
 8011292:	711f      	strb	r7, [r3, #4]
 8011294:	f103 0c05 	add.w	ip, r3, #5
 8011298:	d00c      	beq.n	80112b4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 801129a:	2a07      	cmp	r2, #7
 801129c:	715f      	strb	r7, [r3, #5]
 801129e:	f103 0c06 	add.w	ip, r3, #6
 80112a2:	f040 82b1 	bne.w	8011808 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5e4>
 80112a6:	719f      	strb	r7, [r3, #6]
 80112a8:	f103 0c07 	add.w	ip, r3, #7
    for(i = 0; i < input_x + 2; i++){
 80112ac:	4690      	mov	r8, r2
 80112ae:	e002      	b.n	80112b6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 80112b0:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 80112b4:	4690      	mov	r8, r2
 80112b6:	2400      	movs	r4, #0
 80112b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80112ba:	f10c 0001 	add.w	r0, ip, #1
 80112be:	4625      	mov	r5, r4
 80112c0:	f367 0407 	bfi	r4, r7, #0, #8
 80112c4:	eba3 0e02 	sub.w	lr, r3, r2
 80112c8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80112ca:	4629      	mov	r1, r5
 80112cc:	f367 0507 	bfi	r5, r7, #0, #8
 80112d0:	f367 240f 	bfi	r4, r7, #8, #8
 80112d4:	441a      	add	r2, r3
 80112d6:	f367 250f 	bfi	r5, r7, #8, #8
 80112da:	ea4f 06de 	mov.w	r6, lr, lsr #3
 80112de:	f367 4417 	bfi	r4, r7, #16, #8
 80112e2:	f367 4517 	bfi	r5, r7, #16, #8
 80112e6:	f367 641f 	bfi	r4, r7, #24, #8
 80112ea:	f367 651f 	bfi	r5, r7, #24, #8
 80112ee:	3101      	adds	r1, #1
 80112f0:	4603      	mov	r3, r0
        *cols_8b++ = PAD8;
 80112f2:	3008      	adds	r0, #8
 80112f4:	428e      	cmp	r6, r1
 80112f6:	f103 0307 	add.w	r3, r3, #7
 80112fa:	e9c2 4500 	strd	r4, r5, [r2]
 80112fe:	f102 0208 	add.w	r2, r2, #8
 8011302:	d8f4      	bhi.n	80112ee <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xca>
 8011304:	f02e 0107 	bic.w	r1, lr, #7
 8011308:	eb08 0201 	add.w	r2, r8, r1
 801130c:	4571      	cmp	r1, lr
 801130e:	eb0c 0001 	add.w	r0, ip, r1
 8011312:	b292      	uxth	r2, r2
 8011314:	d05c      	beq.n	80113d0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
    for(i = 0; i < input_x + 2; i++){
 8011316:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8011318:	1c43      	adds	r3, r0, #1
 801131a:	f80c 7001 	strb.w	r7, [ip, r1]
    for(i = 0; i < input_x + 2; i++){
 801131e:	b290      	uxth	r0, r2
 8011320:	4581      	cmp	r9, r0
 8011322:	db55      	blt.n	80113d0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 8011324:	1c42      	adds	r2, r0, #1
        *cols_8b++ = PAD8;
 8011326:	701f      	strb	r7, [r3, #0]
 8011328:	1c59      	adds	r1, r3, #1
    for(i = 0; i < input_x + 2; i++){
 801132a:	b292      	uxth	r2, r2
 801132c:	4591      	cmp	r9, r2
 801132e:	db4e      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011330:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 8011332:	705f      	strb	r7, [r3, #1]
 8011334:	1c99      	adds	r1, r3, #2
    for(i = 0; i < input_x + 2; i++){
 8011336:	b292      	uxth	r2, r2
 8011338:	4591      	cmp	r9, r2
 801133a:	db48      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 801133c:	1cc2      	adds	r2, r0, #3
        *cols_8b++ = PAD8;
 801133e:	709f      	strb	r7, [r3, #2]
 8011340:	1cd9      	adds	r1, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8011342:	b292      	uxth	r2, r2
 8011344:	4591      	cmp	r9, r2
 8011346:	db42      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011348:	1d02      	adds	r2, r0, #4
        *cols_8b++ = PAD8;
 801134a:	70df      	strb	r7, [r3, #3]
 801134c:	1d19      	adds	r1, r3, #4
    for(i = 0; i < input_x + 2; i++){
 801134e:	b292      	uxth	r2, r2
 8011350:	4591      	cmp	r9, r2
 8011352:	db3c      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011354:	1d42      	adds	r2, r0, #5
        *cols_8b++ = PAD8;
 8011356:	711f      	strb	r7, [r3, #4]
 8011358:	1d59      	adds	r1, r3, #5
    for(i = 0; i < input_x + 2; i++){
 801135a:	b292      	uxth	r2, r2
 801135c:	4591      	cmp	r9, r2
 801135e:	db36      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011360:	1d82      	adds	r2, r0, #6
        *cols_8b++ = PAD8;
 8011362:	715f      	strb	r7, [r3, #5]
 8011364:	1d99      	adds	r1, r3, #6
    for(i = 0; i < input_x + 2; i++){
 8011366:	b292      	uxth	r2, r2
 8011368:	4591      	cmp	r9, r2
 801136a:	db30      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 801136c:	1dc2      	adds	r2, r0, #7
        *cols_8b++ = PAD8;
 801136e:	719f      	strb	r7, [r3, #6]
 8011370:	1dd9      	adds	r1, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8011372:	b292      	uxth	r2, r2
 8011374:	4591      	cmp	r9, r2
 8011376:	db2a      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011378:	f100 0208 	add.w	r2, r0, #8
        *cols_8b++ = PAD8;
 801137c:	71df      	strb	r7, [r3, #7]
 801137e:	f103 0108 	add.w	r1, r3, #8
    for(i = 0; i < input_x + 2; i++){
 8011382:	b292      	uxth	r2, r2
 8011384:	4591      	cmp	r9, r2
 8011386:	db22      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011388:	f100 0209 	add.w	r2, r0, #9
        *cols_8b++ = PAD8;
 801138c:	721f      	strb	r7, [r3, #8]
 801138e:	f103 0109 	add.w	r1, r3, #9
    for(i = 0; i < input_x + 2; i++){
 8011392:	b292      	uxth	r2, r2
 8011394:	4591      	cmp	r9, r2
 8011396:	db1a      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011398:	f100 020a 	add.w	r2, r0, #10
        *cols_8b++ = PAD8;
 801139c:	725f      	strb	r7, [r3, #9]
 801139e:	f103 010a 	add.w	r1, r3, #10
    for(i = 0; i < input_x + 2; i++){
 80113a2:	b292      	uxth	r2, r2
 80113a4:	4591      	cmp	r9, r2
 80113a6:	db12      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 80113a8:	f100 020b 	add.w	r2, r0, #11
        *cols_8b++ = PAD8;
 80113ac:	729f      	strb	r7, [r3, #10]
 80113ae:	f103 010b 	add.w	r1, r3, #11
    for(i = 0; i < input_x + 2; i++){
 80113b2:	b292      	uxth	r2, r2
 80113b4:	4591      	cmp	r9, r2
 80113b6:	db0a      	blt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 80113b8:	f100 020c 	add.w	r2, r0, #12
        *cols_8b++ = PAD8;
 80113bc:	72df      	strb	r7, [r3, #11]
 80113be:	f103 010c 	add.w	r1, r3, #12
    for(i = 0; i < input_x + 2; i++){
 80113c2:	b292      	uxth	r2, r2
 80113c4:	454a      	cmp	r2, r9
 80113c6:	dc02      	bgt.n	80113ce <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
        *cols_8b++ = PAD8;
 80113c8:	731f      	strb	r7, [r3, #12]
 80113ca:	330d      	adds	r3, #13
 80113cc:	e000      	b.n	80113d0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 80113ce:	460b      	mov	r3, r1
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 80113d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80113d2:	b192      	cbz	r2, 80113fa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1d6>
 80113d4:	4614      	mov	r4, r2
 80113d6:	2100      	movs	r1, #0
 80113d8:	461a      	mov	r2, r3
 80113da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80113dc:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 80113de:	7017      	strb	r7, [r2, #0]
 80113e0:	442a      	add	r2, r5
    for(i = 0; i < input_y; i++){
 80113e2:	b288      	uxth	r0, r1
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 80113e4:	f802 7c01 	strb.w	r7, [r2, #-1]
    for(i = 0; i < input_y; i++){
 80113e8:	4284      	cmp	r4, r0
 80113ea:	d8f7      	bhi.n	80113dc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1b8>
 80113ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80113ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 80113f0:	3a01      	subs	r2, #1
 80113f2:	b292      	uxth	r2, r2
 80113f4:	fb02 1201 	mla	r2, r2, r1, r1
 80113f8:	4413      	add	r3, r2
 80113fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80113fc:	f1a2 0113 	sub.w	r1, r2, #19
 8011400:	f64f 72ea 	movw	r2, #65514	; 0xffea
 8011404:	4291      	cmp	r1, r2
 8011406:	f200 81f0 	bhi.w	80117ea <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c6>
 801140a:	425a      	negs	r2, r3
 801140c:	f012 0203 	ands.w	r2, r2, #3
 8011410:	f000 81d8 	beq.w	80117c4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a0>
 8011414:	2a01      	cmp	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
        *cols_8b++ = PAD8;
 8011416:	701f      	strb	r7, [r3, #0]
 8011418:	f103 0501 	add.w	r5, r3, #1
 801141c:	f000 81d3 	beq.w	80117c6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a2>
 8011420:	2a03      	cmp	r2, #3
 8011422:	705f      	strb	r7, [r3, #1]
 8011424:	f103 0502 	add.w	r5, r3, #2
 8011428:	f040 81e7 	bne.w	80117fa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5d6>
 801142c:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 801142e:	4616      	mov	r6, r2
        *cols_8b++ = PAD8;
 8011430:	709f      	strb	r7, [r3, #2]
 8011432:	2100      	movs	r1, #0
 8011434:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011436:	4413      	add	r3, r2
 8011438:	1a84      	subs	r4, r0, r2
    for(i = 0; i < input_x + 2; i++){
 801143a:	460a      	mov	r2, r1
 801143c:	f367 0107 	bfi	r1, r7, #0, #8
 8011440:	08a0      	lsrs	r0, r4, #2
 8011442:	f367 210f 	bfi	r1, r7, #8, #8
 8011446:	f367 4117 	bfi	r1, r7, #16, #8
 801144a:	f367 611f 	bfi	r1, r7, #24, #8
 801144e:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8011450:	f843 1b04 	str.w	r1, [r3], #4
 8011454:	4290      	cmp	r0, r2
 8011456:	d8fa      	bhi.n	801144e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x22a>
 8011458:	f024 0303 	bic.w	r3, r4, #3
 801145c:	18f2      	adds	r2, r6, r3
 801145e:	42a3      	cmp	r3, r4
 8011460:	eb05 0003 	add.w	r0, r5, r3
 8011464:	b291      	uxth	r1, r2
 8011466:	d019      	beq.n	801149c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
    for(i = 0; i < input_x + 2; i++){
 8011468:	1c4a      	adds	r2, r1, #1
        *cols_8b++ = PAD8;
 801146a:	54ef      	strb	r7, [r5, r3]
    for(i = 0; i < input_x + 2; i++){
 801146c:	b293      	uxth	r3, r2
 801146e:	4599      	cmp	r9, r3
 8011470:	db14      	blt.n	801149c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 8011472:	1c8b      	adds	r3, r1, #2
        *cols_8b++ = PAD8;
 8011474:	7047      	strb	r7, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 8011476:	b29b      	uxth	r3, r3
 8011478:	454b      	cmp	r3, r9
 801147a:	dc0f      	bgt.n	801149c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 801147c:	1ccb      	adds	r3, r1, #3
        *cols_8b++ = PAD8;
 801147e:	7087      	strb	r7, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 8011480:	b29b      	uxth	r3, r3
 8011482:	4599      	cmp	r9, r3
 8011484:	db0a      	blt.n	801149c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 8011486:	1d0b      	adds	r3, r1, #4
        *cols_8b++ = PAD8;
 8011488:	70c7      	strb	r7, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 801148a:	b29b      	uxth	r3, r3
 801148c:	4599      	cmp	r9, r3
 801148e:	db05      	blt.n	801149c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 8011490:	1d4b      	adds	r3, r1, #5
        *cols_8b++ = PAD8;
 8011492:	7107      	strb	r7, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 8011494:	b29b      	uxth	r3, r3
 8011496:	4599      	cmp	r9, r3
 8011498:	db00      	blt.n	801149c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
        *cols_8b++ = PAD8;
 801149a:	7147      	strb	r7, [r0, #5]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 801149c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801149e:	2800      	cmp	r0, #0
 80114a0:	f000 818c 	beq.w	80117bc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x598>
 80114a4:	1e43      	subs	r3, r0, #1
{
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 80114a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80114a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80114aa:	46d0      	mov	r8, sl
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	1e69      	subs	r1, r5, #1
 80114b0:	086f      	lsrs	r7, r5, #1
 80114b2:	1e72      	subs	r2, r6, #1
 80114b4:	3301      	adds	r3, #1
 80114b6:	fb00 f101 	mul.w	r1, r0, r1
 80114ba:	b292      	uxth	r2, r2
 80114bc:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80114be:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80114c2:	9115      	str	r1, [sp, #84]	; 0x54
 80114c4:	0079      	lsls	r1, r7, #1
 80114c6:	f104 0909 	add.w	r9, r4, #9
 80114ca:	9317      	str	r3, [sp, #92]	; 0x5c
 80114cc:	f005 0301 	and.w	r3, r5, #1
 80114d0:	9111      	str	r1, [sp, #68]	; 0x44
 80114d2:	1c51      	adds	r1, r2, #1
 80114d4:	930e      	str	r3, [sp, #56]	; 0x38
 80114d6:	4603      	mov	r3, r0
 80114d8:	3203      	adds	r2, #3
 80114da:	970f      	str	r7, [sp, #60]	; 0x3c
 80114dc:	fb01 f303 	mul.w	r3, r1, r3
 80114e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80114e2:	9319      	str	r3, [sp, #100]	; 0x64
 80114e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80114e6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80114e8:	911a      	str	r1, [sp, #104]	; 0x68
 80114ea:	4413      	add	r3, r2
 80114ec:	9318      	str	r3, [sp, #96]	; 0x60
 80114ee:	4603      	mov	r3, r0
 80114f0:	fb05 f303 	mul.w	r3, r5, r3
 80114f4:	9310      	str	r3, [sp, #64]	; 0x40
 80114f6:	0073      	lsls	r3, r6, #1
 80114f8:	9312      	str	r3, [sp, #72]	; 0x48
 80114fa:	0043      	lsls	r3, r0, #1
 80114fc:	9306      	str	r3, [sp, #24]
        for(i = 0; i < input_y; i++){
 80114fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011500:	b1db      	cbz	r3, 801153a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 8011502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011504:	b1ca      	cbz	r2, 801153a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 8011506:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011508:	2500      	movs	r5, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 801150a:	9c18      	ldr	r4, [sp, #96]	; 0x60
        for(i = 0; i < input_y; i++){
 801150c:	469a      	mov	sl, r3
 801150e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011510:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8011514:	e9dd ce19 	ldrd	ip, lr, [sp, #100]	; 0x64
 8011518:	eb04 000e 	add.w	r0, r4, lr
 801151c:	4622      	mov	r2, r4
 801151e:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 8011520:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8011524:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8011526:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 801152a:	4282      	cmp	r2, r0
 801152c:	d1f8      	bne.n	8011520 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2fc>
 801152e:	3501      	adds	r5, #1
 8011530:	4466      	add	r6, ip
            cols_8b += 1;//skip end
 8011532:	445c      	add	r4, fp
        for(i = 0; i < input_y; i++){
 8011534:	b2ab      	uxth	r3, r5
 8011536:	459a      	cmp	sl, r3
 8011538:	d8ee      	bhi.n	8011518 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2f4>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801153a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801153c:	f108 0804 	add.w	r8, r8, #4
 8011540:	3304      	adds	r3, #4
 8011542:	9327      	str	r3, [sp, #156]	; 0x9c
 8011544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011546:	3304      	adds	r3, #4
 8011548:	9328      	str	r3, [sp, #160]	; 0xa0
    for (i = 0; i < output_y; i++) {
 801154a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 812c 	beq.w	80117aa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x586>
 8011552:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
 8011556:	2300      	movs	r3, #0
 8011558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801155a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801155c:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 8011560:	46f0      	mov	r8, lr
 8011562:	440a      	add	r2, r1
 8011564:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 8011568:	9307      	str	r3, [sp, #28]
 801156a:	9208      	str	r2, [sp, #32]
 801156c:	9309      	str	r3, [sp, #36]	; 0x24
        for (j = 0; j < output_x / 2; j++) {
 801156e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011570:	2b00      	cmp	r3, #0
 8011572:	f000 80a8 	beq.w	80116c6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x4a2>
 8011576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011578:	9907      	ldr	r1, [sp, #28]
 801157a:	fb01 2302 	mla	r3, r1, r2, r2
 801157e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011580:	eb08 0c01 	add.w	ip, r8, r1
 8011584:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011586:	9304      	str	r3, [sp, #16]
 8011588:	1a9b      	subs	r3, r3, r2
 801158a:	eb08 0701 	add.w	r7, r8, r1
 801158e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011590:	9303      	str	r3, [sp, #12]
 8011592:	4441      	add	r1, r8
            /* requantize */
            sum0 = (float) sum0 * *scales;
            sum0 += output_offset;
            sum0 = MAX(sum0, activation_min);
            sum0 = MIN(sum0, activation_max);
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011594:	9b08      	ldr	r3, [sp, #32]
 8011596:	9105      	str	r1, [sp, #20]
 8011598:	9301      	str	r3, [sp, #4]
 801159a:	9a01      	ldr	r2, [sp, #4]
            sum1 += output_offset;
            sum1 = MAX(sum1, activation_min);
            sum1 = MIN(sum1, activation_max);
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;

            cols_8b_iterptr += STRIDE * 2;
 801159c:	f108 0802 	add.w	r8, r8, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80115a0:	9904      	ldr	r1, [sp, #16]
 80115a2:	f10c 0c02 	add.w	ip, ip, #2
            q31_t sum0 = bias[0] + biasR[0];
 80115a6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80115a8:	3702      	adds	r7, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80115aa:	1a51      	subs	r1, r2, r1
            q31_t sum0 = bias[0] + biasR[0];
 80115ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            sum0 += cols_8b[0]*ksrc[0];
 80115ae:	f918 4c02 	ldrsb.w	r4, [r8, #-2]
            q31_t sum0 = bias[0] + biasR[0];
 80115b2:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80115b6:	9102      	str	r1, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 80115b8:	f850 1c04 	ldr.w	r1, [r0, #-4]
            sum0 += cols_8b[0]*ksrc[0];
 80115bc:	f919 0c09 	ldrsb.w	r0, [r9, #-9]
            q31_t sum0 = bias[0] + biasR[0];
 80115c0:	4419      	add	r1, r3
            sum1 += cols_8b[1]*ksrc[0];
 80115c2:	f918 5c01 	ldrsb.w	r5, [r8, #-1]
            sum0 += cols_8b[1]*ksrc[1];
 80115c6:	f919 2c08 	ldrsb.w	r2, [r9, #-8]
            sum0 += cols_8b[0]*ksrc[0];
 80115ca:	fb14 1400 	smlabb	r4, r4, r0, r1
            sum1 += cols_8b[2]*ksrc[1];
 80115ce:	f998 3000 	ldrsb.w	r3, [r8]
            sum0 += cols_8b[2]*ksrc[2];
 80115d2:	f919 bc07 	ldrsb.w	fp, [r9, #-7]
            sum1 += cols_8b[1]*ksrc[0];
 80115d6:	fb10 1105 	smlabb	r1, r0, r5, r1
            sum0 += cols_8b[1]*ksrc[1];
 80115da:	fb15 4402 	smlabb	r4, r5, r2, r4
            sum0 += cols_8b[0]*ksrc[3];
 80115de:	f919 ac06 	ldrsb.w	sl, [r9, #-6]
            sum1 += cols_8b[2]*ksrc[1];
 80115e2:	fb12 1003 	smlabb	r0, r2, r3, r1
            sum0 += cols_8b[0]*ksrc[3];
 80115e6:	f99c 2000 	ldrsb.w	r2, [ip]
            sum0 += cols_8b[2]*ksrc[2];
 80115ea:	fb13 430b 	smlabb	r3, r3, fp, r4
            sum1 += cols_8b[1]*ksrc[3];
 80115ee:	f99c 1001 	ldrsb.w	r1, [ip, #1]
            sum0 += cols_8b[1]*ksrc[4];
 80115f2:	f919 6c05 	ldrsb.w	r6, [r9, #-5]
            sum0 += cols_8b[0]*ksrc[3];
 80115f6:	fb12 330a 	smlabb	r3, r2, sl, r3
            sum1 += cols_8b[2]*ksrc[4];
 80115fa:	f99c 5002 	ldrsb.w	r5, [ip, #2]
            sum1 += cols_8b[3]*ksrc[2];
 80115fe:	f998 2001 	ldrsb.w	r2, [r8, #1]
            sum0 += cols_8b[1]*ksrc[4];
 8011602:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum0 += cols_8b[2]*ksrc[5];
 8011606:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
            sum1 += cols_8b[3]*ksrc[2];
 801160a:	fb1b 0202 	smlabb	r2, fp, r2, r0
            sum0 += cols_8b[0]*ksrc[6];
 801160e:	f919 0c03 	ldrsb.w	r0, [r9, #-3]
 8011612:	f997 b002 	ldrsb.w	fp, [r7, #2]
            sum0 += cols_8b[2]*ksrc[5];
 8011616:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[3];
 801161a:	fb1a 2201 	smlabb	r2, sl, r1, r2
            sum0 += cols_8b[1]*ksrc[7];
 801161e:	f919 1c02 	ldrsb.w	r1, [r9, #-2]
            sum0 += cols_8b[0]*ksrc[6];
 8011622:	fb1b 3300 	smlabb	r3, fp, r0, r3
            sum1 += cols_8b[1]*ksrc[6];
 8011626:	f997 b003 	ldrsb.w	fp, [r7, #3]
            sum1 += cols_8b[2]*ksrc[7];
 801162a:	f997 a004 	ldrsb.w	sl, [r7, #4]
            sum1 += cols_8b[2]*ksrc[4];
 801162e:	fb16 2205 	smlabb	r2, r6, r5, r2
            sum0 += cols_8b[1]*ksrc[7];
 8011632:	fb1b 3301 	smlabb	r3, fp, r1, r3
            sum0 += cols_8b[2]*ksrc[8];
 8011636:	f919 6c01 	ldrsb.w	r6, [r9, #-1]
            sum0 = (float) sum0 * *scales;
 801163a:	ed5e 7a01 	vldr	s15, [lr, #-4]
            sum0 += cols_8b[2]*ksrc[8];
 801163e:	fb1a 3306 	smlabb	r3, sl, r6, r3
            sum1 += cols_8b[3]*ksrc[5];
 8011642:	f99c 5003 	ldrsb.w	r5, [ip, #3]
 8011646:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum0 += cols_8b[2]*ksrc[8];
 801164a:	ee07 3a10 	vmov	s14, r3
            sum1 += cols_8b[3]*ksrc[8];
 801164e:	f997 3005 	ldrsb.w	r3, [r7, #5]
            sum0 = (float) sum0 * *scales;
 8011652:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            sum1 += cols_8b[1]*ksrc[6];
 8011656:	fb10 220b 	smlabb	r2, r0, fp, r2
            sum0 += output_offset;
 801165a:	982a      	ldr	r0, [sp, #168]	; 0xa8
            sum1 += cols_8b[2]*ksrc[7];
 801165c:	fb11 220a 	smlabb	r2, r1, sl, r2
            sum0 = (float) sum0 * *scales;
 8011660:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 += cols_8b[3]*ksrc[8];
 8011664:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum0 = (float) sum0 * *scales;
 8011668:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            sum1 = (float) sum1 * *scales;
 801166c:	ee07 2a90 	vmov	s15, r2
 8011670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 8011674:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 8011678:	4403      	add	r3, r0
            sum0 = MAX(sum0, activation_min);
 801167a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801167c:	4283      	cmp	r3, r0
 801167e:	bfb8      	it	lt
 8011680:	4603      	movlt	r3, r0
            sum0 = MIN(sum0, activation_max);
 8011682:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8011684:	4283      	cmp	r3, r0
 8011686:	bfa8      	it	ge
 8011688:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801168a:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 801168e:	9a01      	ldr	r2, [sp, #4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011690:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 8011692:	ed1e 7a01 	vldr	s14, [lr, #-4]
            sum1 += output_offset;
 8011696:	992a      	ldr	r1, [sp, #168]	; 0xa8
            sum1 = (float) sum1 * *scales;
 8011698:	ee67 7a87 	vmul.f32	s15, s15, s14
 801169c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116a0:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 80116a4:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 80116a6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80116a8:	428b      	cmp	r3, r1
 80116aa:	bfb8      	it	lt
 80116ac:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 80116ae:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80116b0:	428b      	cmp	r3, r1
 80116b2:	bfa8      	it	ge
 80116b4:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80116b6:	7013      	strb	r3, [r2, #0]
 80116b8:	9b06      	ldr	r3, [sp, #24]
 80116ba:	18d3      	adds	r3, r2, r3
 80116bc:	9301      	str	r3, [sp, #4]
        for (j = 0; j < output_x / 2; j++) {
 80116be:	9b05      	ldr	r3, [sp, #20]
 80116c0:	4598      	cmp	r8, r3
 80116c2:	f47f af6a 	bne.w	801159a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x376>
 80116c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
        }
        if (output_x & 1) {
 80116c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116ca:	3701      	adds	r7, #1
 80116cc:	9709      	str	r7, [sp, #36]	; 0x24
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d07b      	beq.n	80117ca <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a6>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 80116d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80116d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80116d6:	9807      	ldr	r0, [sp, #28]
 80116d8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80116dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80116de:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80116e2:	4420      	add	r0, r4
            sum += cols_8b[0]*ksrc[0];
 80116e4:	f998 4000 	ldrsb.w	r4, [r8]
            q31_t sum = bias[0] + biasR[0];
 80116e8:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 80116ea:	f919 2c09 	ldrsb.w	r2, [r9, #-9]
            sum += cols_8b[1]*ksrc[1];
 80116ee:	f998 5001 	ldrsb.w	r5, [r8, #1]
            sum += cols_8b[0]*ksrc[0];
 80116f2:	fb14 3c02 	smlabb	ip, r4, r2, r3

            sum = (float) sum * *scales;
            sum += output_offset;
            sum = MAX(sum, activation_min);
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80116f6:	9a08      	ldr	r2, [sp, #32]
 80116f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            sum += cols_8b[1]*ksrc[1];
 80116fa:	f919 4c08 	ldrsb.w	r4, [r9, #-8]
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80116fe:	eba2 0a03 	sub.w	sl, r2, r3
 8011702:	9b10      	ldr	r3, [sp, #64]	; 0x40
            cols_8b += column_x + 2;
 8011704:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011706:	18d3      	adds	r3, r2, r3
 8011708:	9007      	str	r0, [sp, #28]
 801170a:	eb08 0106 	add.w	r1, r8, r6
            sum = (float) sum * *scales;
 801170e:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8011712:	9308      	str	r3, [sp, #32]
            sum += cols_8b[1]*ksrc[1];
 8011714:	fb15 c304 	smlabb	r3, r5, r4, ip
            sum += cols_8b[2]*ksrc[2];
 8011718:	f998 5002 	ldrsb.w	r5, [r8, #2]
            cols_8b += column_x + 2;
 801171c:	1988      	adds	r0, r1, r6
            sum += cols_8b[2]*ksrc[2];
 801171e:	f919 4c07 	ldrsb.w	r4, [r9, #-7]
            sum += output_offset;
 8011722:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 8011724:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[0]*ksrc[3];
 8011728:	f918 5006 	ldrsb.w	r5, [r8, r6]
 801172c:	f919 4c06 	ldrsb.w	r4, [r9, #-6]
            sum += cols_8b[0]*ksrc[6];
 8011730:	f918 6016 	ldrsb.w	r6, [r8, r6, lsl #1]

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 1 * 2;
 8011734:	f108 0803 	add.w	r8, r8, #3
            sum += cols_8b[0]*ksrc[3];
 8011738:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[4];
 801173c:	f991 4001 	ldrsb.w	r4, [r1, #1]
 8011740:	f919 5c05 	ldrsb.w	r5, [r9, #-5]
            sum += cols_8b[2]*ksrc[5];
 8011744:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 8011748:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[5];
 801174c:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
 8011750:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 8011754:	f919 3c03 	ldrsb.w	r3, [r9, #-3]
 8011758:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[7];
 801175c:	f990 6001 	ldrsb.w	r6, [r0, #1]
 8011760:	f919 3c02 	ldrsb.w	r3, [r9, #-2]
            sum += cols_8b[2]*ksrc[8];
 8011764:	f990 0002 	ldrsb.w	r0, [r0, #2]
            sum += cols_8b[1]*ksrc[7];
 8011768:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[2]*ksrc[8];
 801176c:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 8011770:	fb10 1103 	smlabb	r1, r0, r3, r1
            sum = (float) sum * *scales;
 8011774:	ee07 1a90 	vmov	s15, r1
 8011778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801177c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011784:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8011788:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 801178a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801178c:	4293      	cmp	r3, r2
 801178e:	bfb8      	it	lt
 8011790:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8011792:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011794:	4293      	cmp	r3, r2
 8011796:	bfa8      	it	ge
 8011798:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 801179a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801179c:	f80a 3002 	strb.w	r3, [sl, r2]
    for (i = 0; i < output_y; i++) {
 80117a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117a2:	42bb      	cmp	r3, r7
 80117a4:	f47f aee3 	bne.w	801156e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 80117a8:	46f0      	mov	r8, lr
        input++;
 80117aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80117ac:	f109 0909 	add.w	r9, r9, #9
 80117b0:	3301      	adds	r3, #1
 80117b2:	9313      	str	r3, [sp, #76]	; 0x4c
    for (c = 0; c < input_ch; c++){
 80117b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117b6:	4598      	cmp	r8, r3
 80117b8:	f47f aea1 	bne.w	80114fe <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2da>
}
 80117bc:	2000      	movs	r0, #0
 80117be:	b01d      	add	sp, #116	; 0x74
 80117c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 80117c4:	461d      	mov	r5, r3
 80117c6:	4616      	mov	r6, r2
 80117c8:	e633      	b.n	8011432 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
 80117ca:	9b08      	ldr	r3, [sp, #32]
        cols_8b_iterptr += 1 * 2;
 80117cc:	f108 0802 	add.w	r8, r8, #2
 80117d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80117d2:	4413      	add	r3, r2
 80117d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117d6:	9308      	str	r3, [sp, #32]
 80117d8:	9b07      	ldr	r3, [sp, #28]
 80117da:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 80117dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117de:	9307      	str	r3, [sp, #28]
 80117e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117e2:	4293      	cmp	r3, r2
 80117e4:	f47f aec3 	bne.w	801156e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 80117e8:	e7de      	b.n	80117a8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x584>
    for(i = 0; i < input_x + 2; i++){
 80117ea:	4619      	mov	r1, r3
        *cols_8b++ = PAD8;
 80117ec:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 80117f0:	1aca      	subs	r2, r1, r3
 80117f2:	b292      	uxth	r2, r2
 80117f4:	4591      	cmp	r9, r2
 80117f6:	daf9      	bge.n	80117ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c8>
 80117f8:	e650      	b.n	801149c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 80117fa:	2602      	movs	r6, #2
 80117fc:	e619      	b.n	8011432 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
        *cols_8b++ = PAD8;
 80117fe:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    for(i = 0; i < input_x + 2; i++){
 8011800:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 8011802:	701f      	strb	r7, [r3, #0]
 8011804:	3301      	adds	r3, #1
 8011806:	e58d      	b.n	8011324 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x100>
    for(i = 0; i < input_x + 2; i++){
 8011808:	f04f 0806 	mov.w	r8, #6
 801180c:	e553      	b.n	80112b6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 801180e:	bf00      	nop

08011810 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8011810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011814:	b09f      	sub	sp, #124	; 0x7c

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 8011816:	f101 0901 	add.w	r9, r1, #1
{
 801181a:	9218      	str	r2, [sp, #96]	; 0x60
 801181c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801181e:	930a      	str	r3, [sp, #40]	; 0x28
 8011820:	1c8b      	adds	r3, r1, #2
 8011822:	4252      	negs	r2, r2
 8011824:	910c      	str	r1, [sp, #48]	; 0x30
 8011826:	9313      	str	r3, [sp, #76]	; 0x4c
 8011828:	f002 0207 	and.w	r2, r2, #7
 801182c:	f8bd 10c4 	ldrh.w	r1, [sp, #196]	; 0xc4
 8011830:	9014      	str	r0, [sp, #80]	; 0x50
 8011832:	1dd3      	adds	r3, r2, #7
 8011834:	910d      	str	r1, [sp, #52]	; 0x34
 8011836:	f8bd 10c8 	ldrh.w	r1, [sp, #200]	; 0xc8
 801183a:	2b0c      	cmp	r3, #12
 801183c:	f99d 70d4 	ldrsb.w	r7, [sp, #212]	; 0xd4
 8011840:	910b      	str	r1, [sp, #44]	; 0x2c
 8011842:	bf38      	it	cc
 8011844:	230c      	movcc	r3, #12
 8011846:	454b      	cmp	r3, r9
 8011848:	f200 82e5 	bhi.w	8011e16 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x606>
 801184c:	b322      	cbz	r2, 8011898 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x88>
        *cols_8b++ = PAD8;
 801184e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8011850:	2a01      	cmp	r2, #1
 8011852:	701f      	strb	r7, [r3, #0]
 8011854:	f103 0c01 	add.w	ip, r3, #1
 8011858:	d020      	beq.n	801189c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 801185a:	2a02      	cmp	r2, #2
 801185c:	705f      	strb	r7, [r3, #1]
 801185e:	f103 0c02 	add.w	ip, r3, #2
 8011862:	d01b      	beq.n	801189c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8011864:	2a03      	cmp	r2, #3
 8011866:	709f      	strb	r7, [r3, #2]
 8011868:	f103 0c03 	add.w	ip, r3, #3
 801186c:	d016      	beq.n	801189c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 801186e:	2a04      	cmp	r2, #4
 8011870:	70df      	strb	r7, [r3, #3]
 8011872:	f103 0c04 	add.w	ip, r3, #4
 8011876:	d011      	beq.n	801189c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8011878:	2a05      	cmp	r2, #5
 801187a:	711f      	strb	r7, [r3, #4]
 801187c:	f103 0c05 	add.w	ip, r3, #5
 8011880:	d00c      	beq.n	801189c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8011882:	2a07      	cmp	r2, #7
 8011884:	715f      	strb	r7, [r3, #5]
 8011886:	f103 0c06 	add.w	ip, r3, #6
 801188a:	f040 82c9 	bne.w	8011e20 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x610>
 801188e:	719f      	strb	r7, [r3, #6]
 8011890:	f103 0c07 	add.w	ip, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8011894:	4690      	mov	r8, r2
 8011896:	e002      	b.n	801189e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8e>
 8011898:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
 801189c:	4690      	mov	r8, r2
 801189e:	2400      	movs	r4, #0
 80118a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80118a2:	f10c 0001 	add.w	r0, ip, #1
 80118a6:	4625      	mov	r5, r4
 80118a8:	f367 0407 	bfi	r4, r7, #0, #8
 80118ac:	eba3 0e02 	sub.w	lr, r3, r2
 80118b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80118b2:	4629      	mov	r1, r5
 80118b4:	f367 0507 	bfi	r5, r7, #0, #8
 80118b8:	f367 240f 	bfi	r4, r7, #8, #8
 80118bc:	441a      	add	r2, r3
 80118be:	f367 250f 	bfi	r5, r7, #8, #8
 80118c2:	ea4f 06de 	mov.w	r6, lr, lsr #3
 80118c6:	f367 4417 	bfi	r4, r7, #16, #8
 80118ca:	f367 4517 	bfi	r5, r7, #16, #8
 80118ce:	f367 641f 	bfi	r4, r7, #24, #8
 80118d2:	f367 651f 	bfi	r5, r7, #24, #8
 80118d6:	3101      	adds	r1, #1
 80118d8:	4603      	mov	r3, r0
        *cols_8b++ = PAD8;
 80118da:	3008      	adds	r0, #8
 80118dc:	428e      	cmp	r6, r1
 80118de:	f103 0307 	add.w	r3, r3, #7
 80118e2:	e9c2 4500 	strd	r4, r5, [r2]
 80118e6:	f102 0208 	add.w	r2, r2, #8
 80118ea:	d8f4      	bhi.n	80118d6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xc6>
 80118ec:	f02e 0107 	bic.w	r1, lr, #7
 80118f0:	eb08 0201 	add.w	r2, r8, r1
 80118f4:	4571      	cmp	r1, lr
 80118f6:	eb0c 0001 	add.w	r0, ip, r1
 80118fa:	b292      	uxth	r2, r2
 80118fc:	d05c      	beq.n	80119b8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
    for(i = 0; i < input_x + 2; i++){
 80118fe:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8011900:	1c43      	adds	r3, r0, #1
 8011902:	f80c 7001 	strb.w	r7, [ip, r1]
    for(i = 0; i < input_x + 2; i++){
 8011906:	b290      	uxth	r0, r2
 8011908:	4581      	cmp	r9, r0
 801190a:	db55      	blt.n	80119b8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
 801190c:	1c42      	adds	r2, r0, #1
        *cols_8b++ = PAD8;
 801190e:	701f      	strb	r7, [r3, #0]
 8011910:	1c59      	adds	r1, r3, #1
    for(i = 0; i < input_x + 2; i++){
 8011912:	b292      	uxth	r2, r2
 8011914:	4591      	cmp	r9, r2
 8011916:	db4e      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011918:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 801191a:	705f      	strb	r7, [r3, #1]
 801191c:	1c99      	adds	r1, r3, #2
    for(i = 0; i < input_x + 2; i++){
 801191e:	b292      	uxth	r2, r2
 8011920:	4591      	cmp	r9, r2
 8011922:	db48      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011924:	1cc2      	adds	r2, r0, #3
        *cols_8b++ = PAD8;
 8011926:	709f      	strb	r7, [r3, #2]
 8011928:	1cd9      	adds	r1, r3, #3
    for(i = 0; i < input_x + 2; i++){
 801192a:	b292      	uxth	r2, r2
 801192c:	4591      	cmp	r9, r2
 801192e:	db42      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011930:	1d02      	adds	r2, r0, #4
        *cols_8b++ = PAD8;
 8011932:	70df      	strb	r7, [r3, #3]
 8011934:	1d19      	adds	r1, r3, #4
    for(i = 0; i < input_x + 2; i++){
 8011936:	b292      	uxth	r2, r2
 8011938:	4591      	cmp	r9, r2
 801193a:	db3c      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 801193c:	1d42      	adds	r2, r0, #5
        *cols_8b++ = PAD8;
 801193e:	711f      	strb	r7, [r3, #4]
 8011940:	1d59      	adds	r1, r3, #5
    for(i = 0; i < input_x + 2; i++){
 8011942:	b292      	uxth	r2, r2
 8011944:	4591      	cmp	r9, r2
 8011946:	db36      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011948:	1d82      	adds	r2, r0, #6
        *cols_8b++ = PAD8;
 801194a:	715f      	strb	r7, [r3, #5]
 801194c:	1d99      	adds	r1, r3, #6
    for(i = 0; i < input_x + 2; i++){
 801194e:	b292      	uxth	r2, r2
 8011950:	4591      	cmp	r9, r2
 8011952:	db30      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011954:	1dc2      	adds	r2, r0, #7
        *cols_8b++ = PAD8;
 8011956:	719f      	strb	r7, [r3, #6]
 8011958:	1dd9      	adds	r1, r3, #7
    for(i = 0; i < input_x + 2; i++){
 801195a:	b292      	uxth	r2, r2
 801195c:	4591      	cmp	r9, r2
 801195e:	db2a      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011960:	f100 0208 	add.w	r2, r0, #8
        *cols_8b++ = PAD8;
 8011964:	71df      	strb	r7, [r3, #7]
 8011966:	f103 0108 	add.w	r1, r3, #8
    for(i = 0; i < input_x + 2; i++){
 801196a:	b292      	uxth	r2, r2
 801196c:	4591      	cmp	r9, r2
 801196e:	db22      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011970:	f100 0209 	add.w	r2, r0, #9
        *cols_8b++ = PAD8;
 8011974:	721f      	strb	r7, [r3, #8]
 8011976:	f103 0109 	add.w	r1, r3, #9
    for(i = 0; i < input_x + 2; i++){
 801197a:	b292      	uxth	r2, r2
 801197c:	4591      	cmp	r9, r2
 801197e:	db1a      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011980:	f100 020a 	add.w	r2, r0, #10
        *cols_8b++ = PAD8;
 8011984:	725f      	strb	r7, [r3, #9]
 8011986:	f103 010a 	add.w	r1, r3, #10
    for(i = 0; i < input_x + 2; i++){
 801198a:	b292      	uxth	r2, r2
 801198c:	4591      	cmp	r9, r2
 801198e:	db12      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8011990:	f100 020b 	add.w	r2, r0, #11
        *cols_8b++ = PAD8;
 8011994:	729f      	strb	r7, [r3, #10]
 8011996:	f103 010b 	add.w	r1, r3, #11
    for(i = 0; i < input_x + 2; i++){
 801199a:	b292      	uxth	r2, r2
 801199c:	4591      	cmp	r9, r2
 801199e:	db0a      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 80119a0:	f100 020c 	add.w	r2, r0, #12
        *cols_8b++ = PAD8;
 80119a4:	72df      	strb	r7, [r3, #11]
 80119a6:	f103 010c 	add.w	r1, r3, #12
    for(i = 0; i < input_x + 2; i++){
 80119aa:	b292      	uxth	r2, r2
 80119ac:	4591      	cmp	r9, r2
 80119ae:	db02      	blt.n	80119b6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
        *cols_8b++ = PAD8;
 80119b0:	731f      	strb	r7, [r3, #12]
 80119b2:	330d      	adds	r3, #13
 80119b4:	e000      	b.n	80119b8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
 80119b6:	460b      	mov	r3, r1
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 80119b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80119ba:	b192      	cbz	r2, 80119e2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1d2>
 80119bc:	4614      	mov	r4, r2
 80119be:	2100      	movs	r1, #0
 80119c0:	461a      	mov	r2, r3
 80119c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80119c4:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 80119c6:	7017      	strb	r7, [r2, #0]
 80119c8:	442a      	add	r2, r5
    for(i = 0; i < input_y; i++){
 80119ca:	b288      	uxth	r0, r1
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 80119cc:	f802 7c01 	strb.w	r7, [r2, #-1]
    for(i = 0; i < input_y; i++){
 80119d0:	4284      	cmp	r4, r0
 80119d2:	d8f7      	bhi.n	80119c4 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1b4>
 80119d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80119d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80119d8:	3a01      	subs	r2, #1
 80119da:	b292      	uxth	r2, r2
 80119dc:	fb02 1201 	mla	r2, r2, r1, r1
 80119e0:	4413      	add	r3, r2
 80119e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119e4:	f1a2 0113 	sub.w	r1, r2, #19
 80119e8:	f64f 72ea 	movw	r2, #65514	; 0xffea
 80119ec:	4291      	cmp	r1, r2
 80119ee:	f200 8208 	bhi.w	8011e02 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5f2>
 80119f2:	425a      	negs	r2, r3
 80119f4:	f012 0203 	ands.w	r2, r2, #3
 80119f8:	f000 81f0 	beq.w	8011ddc <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5cc>
 80119fc:	2a01      	cmp	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
        *cols_8b++ = PAD8;
 80119fe:	701f      	strb	r7, [r3, #0]
 8011a00:	f103 0501 	add.w	r5, r3, #1
 8011a04:	f000 81eb 	beq.w	8011dde <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5ce>
 8011a08:	2a03      	cmp	r2, #3
 8011a0a:	705f      	strb	r7, [r3, #1]
 8011a0c:	f103 0502 	add.w	r5, r3, #2
 8011a10:	f040 81ff 	bne.w	8011e12 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x602>
 8011a14:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8011a16:	4616      	mov	r6, r2
        *cols_8b++ = PAD8;
 8011a18:	709f      	strb	r7, [r3, #2]
 8011a1a:	2100      	movs	r1, #0
 8011a1c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011a1e:	4413      	add	r3, r2
 8011a20:	1a84      	subs	r4, r0, r2
    for(i = 0; i < input_x + 2; i++){
 8011a22:	460a      	mov	r2, r1
 8011a24:	f367 0107 	bfi	r1, r7, #0, #8
 8011a28:	08a0      	lsrs	r0, r4, #2
 8011a2a:	f367 210f 	bfi	r1, r7, #8, #8
 8011a2e:	f367 4117 	bfi	r1, r7, #16, #8
 8011a32:	f367 611f 	bfi	r1, r7, #24, #8
 8011a36:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8011a38:	f843 1b04 	str.w	r1, [r3], #4
 8011a3c:	4290      	cmp	r0, r2
 8011a3e:	d8fa      	bhi.n	8011a36 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x226>
 8011a40:	f024 0303 	bic.w	r3, r4, #3
 8011a44:	18f2      	adds	r2, r6, r3
 8011a46:	42a3      	cmp	r3, r4
 8011a48:	eb05 0003 	add.w	r0, r5, r3
 8011a4c:	b291      	uxth	r1, r2
 8011a4e:	d019      	beq.n	8011a84 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
    for(i = 0; i < input_x + 2; i++){
 8011a50:	1c4a      	adds	r2, r1, #1
        *cols_8b++ = PAD8;
 8011a52:	54ef      	strb	r7, [r5, r3]
    for(i = 0; i < input_x + 2; i++){
 8011a54:	b293      	uxth	r3, r2
 8011a56:	4599      	cmp	r9, r3
 8011a58:	db14      	blt.n	8011a84 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8011a5a:	1c8b      	adds	r3, r1, #2
        *cols_8b++ = PAD8;
 8011a5c:	7047      	strb	r7, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	454b      	cmp	r3, r9
 8011a62:	dc0f      	bgt.n	8011a84 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8011a64:	1ccb      	adds	r3, r1, #3
        *cols_8b++ = PAD8;
 8011a66:	7087      	strb	r7, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	4599      	cmp	r9, r3
 8011a6c:	db0a      	blt.n	8011a84 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8011a6e:	1d0b      	adds	r3, r1, #4
        *cols_8b++ = PAD8;
 8011a70:	70c7      	strb	r7, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	4599      	cmp	r9, r3
 8011a76:	db05      	blt.n	8011a84 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8011a78:	1d4b      	adds	r3, r1, #5
        *cols_8b++ = PAD8;
 8011a7a:	7107      	strb	r7, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	4599      	cmp	r9, r3
 8011a80:	db00      	blt.n	8011a84 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
        *cols_8b++ = PAD8;
 8011a82:	7147      	strb	r7, [r0, #5]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 8011a84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011a86:	2c00      	cmp	r4, #0
 8011a88:	f000 81a4 	beq.w	8011dd4 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5c4>
 8011a8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011a8e:	1e63      	subs	r3, r4, #1
 8011a90:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8011a92:	1e72      	subs	r2, r6, #1
 8011a94:	f006 0101 	and.w	r1, r6, #1
 8011a98:	f100 0a09 	add.w	sl, r0, #9
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	b292      	uxth	r2, r2
 8011aa0:	f1c1 0102 	rsb	r1, r1, #2
 8011aa4:	3301      	adds	r3, #1
{
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 8011aa6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011aa8:	1c50      	adds	r0, r2, #1
 8011aaa:	086f      	lsrs	r7, r5, #1
 8011aac:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8011ab0:	901a      	str	r0, [sp, #104]	; 0x68
 8011ab2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011ab4:	970f      	str	r7, [sp, #60]	; 0x3c
 8011ab6:	4401      	add	r1, r0
 8011ab8:	982b      	ldr	r0, [sp, #172]	; 0xac
 8011aba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011abe:	4684      	mov	ip, r0
 8011ac0:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011ac2:	9319      	str	r3, [sp, #100]	; 0x64
 8011ac4:	1cd3      	adds	r3, r2, #3
 8011ac6:	46e1      	mov	r9, ip
 8011ac8:	9116      	str	r1, [sp, #88]	; 0x58
 8011aca:	931d      	str	r3, [sp, #116]	; 0x74
 8011acc:	4623      	mov	r3, r4
 8011ace:	fb00 f303 	mul.w	r3, r0, r3
 8011ad2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011ad4:	931c      	str	r3, [sp, #112]	; 0x70
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 1 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8011ad6:	1c8b      	adds	r3, r1, #2
 8011ad8:	9317      	str	r3, [sp, #92]	; 0x5c
 8011ada:	00bb      	lsls	r3, r7, #2
 8011adc:	9312      	str	r3, [sp, #72]	; 0x48
 8011ade:	4673      	mov	r3, lr
 8011ae0:	fb04 f303 	mul.w	r3, r4, r3
 8011ae4:	9315      	str	r3, [sp, #84]	; 0x54
 8011ae6:	f005 0301 	and.w	r3, r5, #1
 8011aea:	930e      	str	r3, [sp, #56]	; 0x38
 8011aec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8011aee:	4403      	add	r3, r0
 8011af0:	931b      	str	r3, [sp, #108]	; 0x6c
 8011af2:	4623      	mov	r3, r4
 8011af4:	fb03 f305 	mul.w	r3, r3, r5
 8011af8:	9310      	str	r3, [sp, #64]	; 0x40
 8011afa:	0073      	lsls	r3, r6, #1
 8011afc:	9311      	str	r3, [sp, #68]	; 0x44
 8011afe:	0063      	lsls	r3, r4, #1
 8011b00:	9306      	str	r3, [sp, #24]
        for(i = 0; i < input_y; i++){
 8011b02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011b04:	b1eb      	cbz	r3, 8011b42 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x332>
 8011b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b08:	b1da      	cbz	r2, 8011b42 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x332>
 8011b0a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011b0c:	2500      	movs	r5, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 8011b0e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
        for(i = 0; i < input_y; i++){
 8011b10:	4698      	mov	r8, r3
 8011b12:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8011b16:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 8011b1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011b1c:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8011b20:	eb04 000e 	add.w	r0, r4, lr
 8011b24:	4622      	mov	r2, r4
 8011b26:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 8011b28:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8011b2c:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8011b2e:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8011b32:	4282      	cmp	r2, r0
 8011b34:	d1f8      	bne.n	8011b28 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x318>
 8011b36:	3501      	adds	r5, #1
 8011b38:	4466      	add	r6, ip
            cols_8b += 1;//skip end
 8011b3a:	445c      	add	r4, fp
        for(i = 0; i < input_y; i++){
 8011b3c:	b2ab      	uxth	r3, r5
 8011b3e:	4598      	cmp	r8, r3
 8011b40:	d8ee      	bhi.n	8011b20 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x310>
        depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8011b42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011b44:	f109 0904 	add.w	r9, r9, #4
 8011b48:	3304      	adds	r3, #4
 8011b4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8011b4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011b4e:	3304      	adds	r3, #4
 8011b50:	932a      	str	r3, [sp, #168]	; 0xa8
    for (i = 0; i < output_y; i++) {
 8011b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f000 8134 	beq.w	8011dc2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5b2>
 8011b5a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011b62:	f8cd 90ac 	str.w	r9, [sp, #172]	; 0xac
 8011b66:	4681      	mov	r9, r0
 8011b68:	440a      	add	r2, r1
 8011b6a:	982b      	ldr	r0, [sp, #172]	; 0xac
 8011b6c:	9308      	str	r3, [sp, #32]
 8011b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8011b70:	9307      	str	r3, [sp, #28]
        for (j = 0; j < output_x / 2; j++) {
 8011b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f000 80b1 	beq.w	8011cdc <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x4cc>
 8011b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b7c:	9908      	ldr	r1, [sp, #32]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011b7e:	902b      	str	r0, [sp, #172]	; 0xac
 8011b80:	fb01 2302 	mla	r3, r1, r2, r2
 8011b84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b86:	eb09 0801 	add.w	r8, r9, r1
 8011b8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011b8c:	9303      	str	r3, [sp, #12]
 8011b8e:	1a9b      	subs	r3, r3, r2
 8011b90:	eb09 0e01 	add.w	lr, r9, r1
 8011b94:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011b96:	9305      	str	r3, [sp, #20]
 8011b98:	4449      	add	r1, r9
 8011b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b9c:	9104      	str	r1, [sp, #16]
 8011b9e:	9301      	str	r3, [sp, #4]
 8011ba0:	9a01      	ldr	r2, [sp, #4]
 8011ba2:	f108 0804 	add.w	r8, r8, #4
 8011ba6:	9903      	ldr	r1, [sp, #12]
 8011ba8:	f10e 0e04 	add.w	lr, lr, #4
            q31_t sum0 = bias[0] + biasR[0];
 8011bac:	982a      	ldr	r0, [sp, #168]	; 0xa8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011bae:	1a51      	subs	r1, r2, r1
            q31_t sum0 = bias[0] + biasR[0];
 8011bb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
            sum0 += cols_8b[0]*ksrc[0];
 8011bb2:	f91a 2c09 	ldrsb.w	r2, [sl, #-9]
            q31_t sum0 = bias[0] + biasR[0];
 8011bb6:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011bba:	9102      	str	r1, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8011bbc:	f850 1c04 	ldr.w	r1, [r0, #-4]
            sum0 += cols_8b[1]*ksrc[1];
 8011bc0:	f91a 4c08 	ldrsb.w	r4, [sl, #-8]
            q31_t sum0 = bias[0] + biasR[0];
 8011bc4:	1858      	adds	r0, r3, r1
            sum0 += cols_8b[0]*ksrc[0];
 8011bc6:	f999 1000 	ldrsb.w	r1, [r9]
            sum1 += cols_8b[2]*ksrc[0];
 8011bca:	f999 5002 	ldrsb.w	r5, [r9, #2]
            sum0 += cols_8b[0]*ksrc[0];
 8011bce:	fb11 0302 	smlabb	r3, r1, r2, r0
            sum0 += cols_8b[1]*ksrc[1];
 8011bd2:	f999 1001 	ldrsb.w	r1, [r9, #1]
            sum0 += cols_8b[2]*ksrc[2];
 8011bd6:	f91a bc07 	ldrsb.w	fp, [sl, #-7]
            sum1 += cols_8b[2]*ksrc[0];
 8011bda:	fb12 0005 	smlabb	r0, r2, r5, r0
            sum0 += cols_8b[1]*ksrc[1];
 8011bde:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum0 += cols_8b[0]*ksrc[3];
 8011be2:	f91a 6c06 	ldrsb.w	r6, [sl, #-6]
            sum0 += cols_8b[1]*ksrc[4];
 8011be6:	f91a 3c05 	ldrsb.w	r3, [sl, #-5]
            sum0 += cols_8b[2]*ksrc[2];
 8011bea:	fb15 150b 	smlabb	r5, r5, fp, r1
            sum0 += cols_8b[0]*ksrc[3];
 8011bee:	f918 1c02 	ldrsb.w	r1, [r8, #-2]
            sum0 = (float) sum0 * *scales;
 8011bf2:	9f2b      	ldr	r7, [sp, #172]	; 0xac
            sum0 += cols_8b[0]*ksrc[3];
 8011bf4:	fb11 5506 	smlabb	r5, r1, r6, r5
            sum0 += cols_8b[1]*ksrc[4];
 8011bf8:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
            sum1 += cols_8b[2]*ksrc[3];
 8011bfc:	f998 c000 	ldrsb.w	ip, [r8]
            sum0 = (float) sum0 * *scales;
 8011c00:	ed17 7a01 	vldr	s14, [r7, #-4]
            sum0 += cols_8b[1]*ksrc[4];
 8011c04:	fb11 5103 	smlabb	r1, r1, r3, r5
            sum0 += cols_8b[2]*ksrc[5];
 8011c08:	f91a 7c04 	ldrsb.w	r7, [sl, #-4]
            sum1 += cols_8b[3]*ksrc[1];
 8011c0c:	f999 2003 	ldrsb.w	r2, [r9, #3]
            sum0 += cols_8b[2]*ksrc[5];
 8011c10:	fb1c 1107 	smlabb	r1, ip, r7, r1
            sum0 += cols_8b[0]*ksrc[6];
 8011c14:	f91a 5c03 	ldrsb.w	r5, [sl, #-3]
            sum1 += cols_8b[3]*ksrc[1];
 8011c18:	fb14 0202 	smlabb	r2, r4, r2, r0
            sum0 += cols_8b[0]*ksrc[6];
 8011c1c:	f99e 4000 	ldrsb.w	r4, [lr]
            sum1 += cols_8b[4]*ksrc[2];
 8011c20:	f919 0f04 	ldrsb.w	r0, [r9, #4]!
            sum0 += cols_8b[0]*ksrc[6];
 8011c24:	fb14 1105 	smlabb	r1, r4, r5, r1
            sum0 += cols_8b[1]*ksrc[7];
 8011c28:	f91a 4c02 	ldrsb.w	r4, [sl, #-2]
            sum1 += cols_8b[4]*ksrc[2];
 8011c2c:	fb1b 2200 	smlabb	r2, fp, r0, r2
            sum0 += cols_8b[1]*ksrc[7];
 8011c30:	f99e 0001 	ldrsb.w	r0, [lr, #1]
            sum1 += cols_8b[2]*ksrc[6];
 8011c34:	f99e b002 	ldrsb.w	fp, [lr, #2]
            sum0 += cols_8b[1]*ksrc[7];
 8011c38:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[2]*ksrc[8];
 8011c3c:	f91a 0c01 	ldrsb.w	r0, [sl, #-1]
            sum1 += cols_8b[2]*ksrc[3];
 8011c40:	fb16 220c 	smlabb	r2, r6, ip, r2
            sum1 += cols_8b[3]*ksrc[4];
 8011c44:	f998 6001 	ldrsb.w	r6, [r8, #1]
            sum0 += cols_8b[2]*ksrc[8];
 8011c48:	fb1b 1c00 	smlabb	ip, fp, r0, r1
            sum1 += cols_8b[3]*ksrc[4];
 8011c4c:	fb13 2206 	smlabb	r2, r3, r6, r2
            sum1 += cols_8b[4]*ksrc[5];
 8011c50:	f998 6002 	ldrsb.w	r6, [r8, #2]
            sum0 += cols_8b[2]*ksrc[8];
 8011c54:	ee07 ca90 	vmov	s15, ip
            sum1 += cols_8b[3]*ksrc[7];
 8011c58:	f99e c003 	ldrsb.w	ip, [lr, #3]
            sum1 += cols_8b[4]*ksrc[5];
 8011c5c:	fb17 2706 	smlabb	r7, r7, r6, r2
            sum1 += cols_8b[4]*ksrc[8];
 8011c60:	f99e 1004 	ldrsb.w	r1, [lr, #4]
            sum0 = (float) sum0 * *scales;
 8011c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8011c68:	9a01      	ldr	r2, [sp, #4]
            sum1 += cols_8b[2]*ksrc[6];
 8011c6a:	fb15 770b 	smlabb	r7, r5, fp, r7
            sum0 = (float) sum0 * *scales;
 8011c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[3]*ksrc[7];
 8011c72:	fb14 770c 	smlabb	r7, r4, ip, r7
            sum1 += cols_8b[4]*ksrc[8];
 8011c76:	fb10 7701 	smlabb	r7, r0, r1, r7
            sum0 += output_offset;
 8011c7a:	982c      	ldr	r0, [sp, #176]	; 0xb0
            sum0 = (float) sum0 * *scales;
 8011c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011c80:	9902      	ldr	r1, [sp, #8]
            sum0 = (float) sum0 * *scales;
 8011c82:	ee17 3a90 	vmov	r3, s15
            sum1 = (float) sum1 * *scales;
 8011c86:	ee07 7a90 	vmov	s15, r7
            sum0 += output_offset;
 8011c8a:	4403      	add	r3, r0
            sum0 = MAX(sum0, activation_min);
 8011c8c:	982e      	ldr	r0, [sp, #184]	; 0xb8
            sum1 = (float) sum1 * *scales;
 8011c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = MAX(sum0, activation_min);
 8011c92:	4283      	cmp	r3, r0
 8011c94:	bfb8      	it	lt
 8011c96:	4603      	movlt	r3, r0
            sum0 = MIN(sum0, activation_max);
 8011c98:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8011c9a:	4283      	cmp	r3, r0
 8011c9c:	bfa8      	it	ge
 8011c9e:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011ca0:	9805      	ldr	r0, [sp, #20]
 8011ca2:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 8011ca4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
            sum1 += output_offset;
 8011ca6:	992c      	ldr	r1, [sp, #176]	; 0xb0
            sum1 = (float) sum1 * *scales;
 8011ca8:	ed13 7a01 	vldr	s14, [r3, #-4]
 8011cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cb4:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8011cb8:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8011cba:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8011cbc:	428b      	cmp	r3, r1
 8011cbe:	bfb8      	it	lt
 8011cc0:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8011cc2:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8011cc4:	428b      	cmp	r3, r1
 8011cc6:	bfa8      	it	ge
 8011cc8:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8011cca:	7013      	strb	r3, [r2, #0]
 8011ccc:	9b06      	ldr	r3, [sp, #24]
 8011cce:	18d3      	adds	r3, r2, r3
 8011cd0:	9301      	str	r3, [sp, #4]
        for (j = 0; j < output_x / 2; j++) {
 8011cd2:	9b04      	ldr	r3, [sp, #16]
 8011cd4:	4599      	cmp	r9, r3
 8011cd6:	f47f af63 	bne.w	8011ba0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x390>
 8011cda:	982b      	ldr	r0, [sp, #172]	; 0xac
 8011cdc:	9b07      	ldr	r3, [sp, #28]
        if (output_x & 1) {
 8011cde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	9307      	str	r3, [sp, #28]
 8011ce4:	2a00      	cmp	r2, #0
 8011ce6:	d07c      	beq.n	8011de2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5d2>
            q31_t sum = bias[0] + biasR[0];
 8011ce8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011cea:	9c08      	ldr	r4, [sp, #32]
 8011cec:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8011cf0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011cf2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011cf4:	442c      	add	r4, r5
            sum += cols_8b[1]*ksrc[1];
 8011cf6:	f91a cc08 	ldrsb.w	ip, [sl, #-8]
            q31_t sum = bias[0] + biasR[0];
 8011cfa:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8011cfe:	9408      	str	r4, [sp, #32]
 8011d00:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 8011d02:	f999 4000 	ldrsb.w	r4, [r9]
 8011d06:	f91a 2c09 	ldrsb.w	r2, [sl, #-9]
            sum += cols_8b[1]*ksrc[1];
 8011d0a:	f999 5001 	ldrsb.w	r5, [r9, #1]
            sum += cols_8b[0]*ksrc[0];
 8011d0e:	fb14 3302 	smlabb	r3, r4, r2, r3
            cols_8b += column_x + 2;
 8011d12:	9e13      	ldr	r6, [sp, #76]	; 0x4c
            sum = (float) sum * *scales;
 8011d14:	ed10 7a01 	vldr	s14, [r0, #-4]
            sum += cols_8b[1]*ksrc[1];
 8011d18:	fb15 330c 	smlabb	r3, r5, ip, r3
            sum += cols_8b[2]*ksrc[2];
 8011d1c:	f999 5002 	ldrsb.w	r5, [r9, #2]
            cols_8b += column_x + 2;
 8011d20:	eb09 0106 	add.w	r1, r9, r6
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8011d24:	e9dd 2409 	ldrd	r2, r4, [sp, #36]	; 0x24
            cols_8b += column_x + 2;
 8011d28:	198f      	adds	r7, r1, r6
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8011d2a:	eba2 0e04 	sub.w	lr, r2, r4
 8011d2e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8011d30:	4422      	add	r2, r4
            sum += cols_8b[2]*ksrc[2];
 8011d32:	f91a 4c07 	ldrsb.w	r4, [sl, #-7]
 8011d36:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[0]*ksrc[3];
 8011d3a:	f919 5006 	ldrsb.w	r5, [r9, r6]
 8011d3e:	f91a 4c06 	ldrsb.w	r4, [sl, #-6]
            sum += cols_8b[0]*ksrc[6];
 8011d42:	f919 6016 	ldrsb.w	r6, [r9, r6, lsl #1]
            sum += cols_8b[0]*ksrc[3];
 8011d46:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[4];
 8011d4a:	f991 4001 	ldrsb.w	r4, [r1, #1]
 8011d4e:	f91a 5c05 	ldrsb.w	r5, [sl, #-5]
            sum += cols_8b[2]*ksrc[5];
 8011d52:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 8011d56:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[5];
 8011d5a:	f91a 4c04 	ldrsb.w	r4, [sl, #-4]
 8011d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8011d60:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 8011d64:	f91a 3c03 	ldrsb.w	r3, [sl, #-3]
            sum += cols_8b[2]*ksrc[8];
 8011d68:	f997 4002 	ldrsb.w	r4, [r7, #2]
            sum += cols_8b[0]*ksrc[6];
 8011d6c:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[7];
 8011d70:	f91a 3c02 	ldrsb.w	r3, [sl, #-2]
 8011d74:	f997 6001 	ldrsb.w	r6, [r7, #1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8011d78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            sum += cols_8b[1]*ksrc[7];
 8011d7a:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[2]*ksrc[8];
 8011d7e:	f91a 3c01 	ldrsb.w	r3, [sl, #-1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8011d82:	4491      	add	r9, r2
            sum += output_offset;
 8011d84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
            sum += cols_8b[2]*ksrc[8];
 8011d86:	fb14 1103 	smlabb	r1, r4, r3, r1
            sum = (float) sum * *scales;
 8011d8a:	ee07 1a90 	vmov	s15, r1
 8011d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d9a:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8011d9e:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8011da0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011da2:	4293      	cmp	r3, r2
 8011da4:	bfb8      	it	lt
 8011da6:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8011da8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011daa:	4293      	cmp	r3, r2
 8011dac:	bfa8      	it	ge
 8011dae:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8011db0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011db2:	f80e 3002 	strb.w	r3, [lr, r2]
    for (i = 0; i < output_y; i++) {
 8011db6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011db8:	9b07      	ldr	r3, [sp, #28]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	f47f aed9 	bne.w	8011b72 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x362>
 8011dc0:	4681      	mov	r9, r0
        input++;
 8011dc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011dc4:	f10a 0a09 	add.w	sl, sl, #9
 8011dc8:	3301      	adds	r3, #1
 8011dca:	9314      	str	r3, [sp, #80]	; 0x50
    for (c = 0; c < input_ch; c++){
 8011dcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011dce:	4599      	cmp	r9, r3
 8011dd0:	f47f ae97 	bne.w	8011b02 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x2f2>
}
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	b01f      	add	sp, #124	; 0x7c
 8011dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 8011ddc:	461d      	mov	r5, r3
 8011dde:	4616      	mov	r6, r2
 8011de0:	e61b      	b.n	8011a1a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x20a>
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8011de2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011de4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011de6:	4499      	add	r9, r3
 8011de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dea:	4413      	add	r3, r2
 8011dec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dee:	9309      	str	r3, [sp, #36]	; 0x24
 8011df0:	9b08      	ldr	r3, [sp, #32]
 8011df2:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8011df4:	9a07      	ldr	r2, [sp, #28]
 8011df6:	9308      	str	r3, [sp, #32]
 8011df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dfa:	4293      	cmp	r3, r2
 8011dfc:	f47f aeb9 	bne.w	8011b72 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x362>
 8011e00:	e7de      	b.n	8011dc0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5b0>
    for(i = 0; i < input_x + 2; i++){
 8011e02:	4619      	mov	r1, r3
        *cols_8b++ = PAD8;
 8011e04:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 8011e08:	1aca      	subs	r2, r1, r3
 8011e0a:	b292      	uxth	r2, r2
 8011e0c:	4591      	cmp	r9, r2
 8011e0e:	daf9      	bge.n	8011e04 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5f4>
 8011e10:	e638      	b.n	8011a84 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8011e12:	2602      	movs	r6, #2
 8011e14:	e601      	b.n	8011a1a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x20a>
        *cols_8b++ = PAD8;
 8011e16:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    for(i = 0; i < input_x + 2; i++){
 8011e18:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 8011e1a:	701f      	strb	r7, [r3, #0]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	e575      	b.n	801190c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xfc>
    for(i = 0; i < input_x + 2; i++){
 8011e20:	f04f 0806 	mov.w	r8, #6
 8011e24:	e53b      	b.n	801189e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8e>
 8011e26:	bf00      	nop

08011e28 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8011e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2c:	b0a1      	sub	sp, #132	; 0x84

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 8011e2e:	1ccf      	adds	r7, r1, #3
{
 8011e30:	930d      	str	r3, [sp, #52]	; 0x34
 8011e32:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8011e34:	9103      	str	r1, [sp, #12]
 8011e36:	1c99      	adds	r1, r3, #2
 8011e38:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 8011e3c:	921a      	str	r2, [sp, #104]	; 0x68
    for(i = 0; i < input_x + 4; i++){
 8011e3e:	2200      	movs	r2, #0
{
 8011e40:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e42:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 8011e46:	9017      	str	r0, [sp, #92]	; 0x5c
 8011e48:	930e      	str	r3, [sp, #56]	; 0x38
 8011e4a:	f99d 30dc 	ldrsb.w	r3, [sp, #220]	; 0xdc
    for(i = 0; i < input_x + 4; i++){
 8011e4e:	3201      	adds	r2, #1
 8011e50:	460e      	mov	r6, r1
        *cols_8b++ = PAD8;
 8011e52:	f801 3c02 	strb.w	r3, [r1, #-2]
 8011e56:	3102      	adds	r1, #2
    for(i = 0; i < input_x + 4; i++){
 8011e58:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8011e5a:	f801 3c03 	strb.w	r3, [r1, #-3]
    for(i = 0; i < input_x + 4; i++){
 8011e5e:	42ba      	cmp	r2, r7
 8011e60:	ddf5      	ble.n	8011e4e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x26>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8011e62:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011e64:	b1b8      	cbz	r0, 8011e96 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x6e>
 8011e66:	9c03      	ldr	r4, [sp, #12]
 8011e68:	4632      	mov	r2, r6
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	4686      	mov	lr, r0
 8011e6e:	1d25      	adds	r5, r4, #4
 8011e70:	46a4      	mov	ip, r4
 8011e72:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 8011e74:	7013      	strb	r3, [r2, #0]
        *cols_8b++ = PAD8;//left
 8011e76:	7053      	strb	r3, [r2, #1]
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8011e78:	eb02 040c 	add.w	r4, r2, ip
    for(i = 0; i < input_y; i++){
 8011e7c:	b288      	uxth	r0, r1
 8011e7e:	442a      	add	r2, r5
        *cols_8b++ = PAD8;//right
 8011e80:	70a3      	strb	r3, [r4, #2]
    for(i = 0; i < input_y; i++){
 8011e82:	4586      	cmp	lr, r0
        *cols_8b++ = PAD8;//right
 8011e84:	f802 3c01 	strb.w	r3, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8011e88:	d8f3      	bhi.n	8011e72 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x4a>
 8011e8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011e8c:	3a01      	subs	r2, #1
 8011e8e:	b292      	uxth	r2, r2
 8011e90:	fb02 5505 	mla	r5, r2, r5, r5
 8011e94:	442e      	add	r6, r5
 8011e96:	9c03      	ldr	r4, [sp, #12]
 8011e98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011e9c:	1fa1      	subs	r1, r4, #6
 8011e9e:	4291      	cmp	r1, r2
 8011ea0:	f200 82bb 	bhi.w	801241a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5f2>
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	1d25      	adds	r5, r4, #4
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	4602      	mov	r2, r0
 8011eac:	f363 0007 	bfi	r0, r3, #0, #8
 8011eb0:	086c      	lsrs	r4, r5, #1
 8011eb2:	f363 200f 	bfi	r0, r3, #8, #8
 8011eb6:	f363 4017 	bfi	r0, r3, #16, #8
 8011eba:	f363 601f 	bfi	r0, r3, #24, #8
 8011ebe:	3201      	adds	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
        *cols_8b++ = PAD8;
 8011ec0:	f841 0b04 	str.w	r0, [r1], #4
 8011ec4:	42a2      	cmp	r2, r4
 8011ec6:	d3fa      	bcc.n	8011ebe <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x96>
 8011ec8:	f025 0201 	bic.w	r2, r5, #1
 8011ecc:	42aa      	cmp	r2, r5
 8011ece:	eb06 0142 	add.w	r1, r6, r2, lsl #1
 8011ed2:	d002      	beq.n	8011eda <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0xb2>
 8011ed4:	f806 3012 	strb.w	r3, [r6, r2, lsl #1]
        *cols_8b++ = PAD8;
 8011ed8:	704b      	strb	r3, [r1, #1]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 8011eda:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011edc:	2800      	cmp	r0, #0
 8011ede:	f000 8288 	beq.w	80123f2 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5ca>
 8011ee2:	9c03      	ldr	r4, [sp, #12]
 8011ee4:	1e43      	subs	r3, r0, #1
 8011ee6:	992a      	ldr	r1, [sp, #168]	; 0xa8
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8011ee8:	0066      	lsls	r6, r4, #1
 8011eea:	1e62      	subs	r2, r4, #1
 8011eec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011eee:	f101 0919 	add.w	r9, r1, #25
 8011ef2:	b292      	uxth	r2, r2
 8011ef4:	f106 0109 	add.w	r1, r6, #9
{
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 8011ef8:	086f      	lsrs	r7, r5, #1
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8011efa:	9613      	str	r6, [sp, #76]	; 0x4c
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	911f      	str	r1, [sp, #124]	; 0x7c
 8011f00:	1c51      	adds	r1, r2, #1
 8011f02:	3205      	adds	r2, #5
 8011f04:	3301      	adds	r3, #1
 8011f06:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011f0a:	921e      	str	r2, [sp, #120]	; 0x78
 8011f0c:	19f2      	adds	r2, r6, r7
 8011f0e:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
            sum += cols_8b[0]*ksrc[0];
            sum += cols_8b[1]*ksrc[1];
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            cols_8b += column_x + 4;
 8011f10:	46ce      	mov	lr, r9
        for (j = 0; j < output_x / 2; j++) {
 8011f12:	9711      	str	r7, [sp, #68]	; 0x44
 8011f14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f18:	911d      	str	r1, [sp, #116]	; 0x74
 8011f1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	fb01 f303 	mul.w	r3, r1, r3
 8011f22:	931c      	str	r3, [sp, #112]	; 0x70
 8011f24:	007b      	lsls	r3, r7, #1
 8011f26:	9314      	str	r3, [sp, #80]	; 0x50
 8011f28:	0053      	lsls	r3, r2, #1
 8011f2a:	fb00 f205 	mul.w	r2, r0, r5
 8011f2e:	9315      	str	r3, [sp, #84]	; 0x54
 8011f30:	4663      	mov	r3, ip
 8011f32:	9212      	str	r2, [sp, #72]	; 0x48
 8011f34:	00a2      	lsls	r2, r4, #2
 8011f36:	fb00 f303 	mul.w	r3, r0, r3
 8011f3a:	9216      	str	r2, [sp, #88]	; 0x58
 8011f3c:	4262      	negs	r2, r4
 8011f3e:	9318      	str	r3, [sp, #96]	; 0x60
 8011f40:	f005 0301 	and.w	r3, r5, #1
 8011f44:	9208      	str	r2, [sp, #32]
 8011f46:	9310      	str	r3, [sp, #64]	; 0x40
 8011f48:	0043      	lsls	r3, r0, #1
 8011f4a:	9307      	str	r3, [sp, #28]
            cols_8b += column_x + 4;
 8011f4c:	1d23      	adds	r3, r4, #4
 8011f4e:	9319      	str	r3, [sp, #100]	; 0x64
        for(i = 0; i < input_y; i++){
 8011f50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011f52:	b1eb      	cbz	r3, 8011f90 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x168>
 8011f54:	9a03      	ldr	r2, [sp, #12]
 8011f56:	b1da      	cbz	r2, 8011f90 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x168>
 8011f58:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8011f5a:	2500      	movs	r5, #0
 8011f5c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011f5e:	4699      	mov	r9, r3
 8011f60:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011f62:	1854      	adds	r4, r2, r1
 8011f64:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011f66:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011f6a:	e9dd c81c 	ldrd	ip, r8, [sp, #112]	; 0x70
 8011f6e:	eb04 0008 	add.w	r0, r4, r8
 8011f72:	4622      	mov	r2, r4
 8011f74:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 8011f76:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8011f7a:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8011f7c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8011f80:	4290      	cmp	r0, r2
 8011f82:	d1f8      	bne.n	8011f76 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x14e>
 8011f84:	3501      	adds	r5, #1
 8011f86:	4466      	add	r6, ip
 8011f88:	4454      	add	r4, sl
        for(i = 0; i < input_y; i++){
 8011f8a:	b2ab      	uxth	r3, r5
 8011f8c:	4599      	cmp	r9, r3
 8011f8e:	d8ee      	bhi.n	8011f6e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x146>
        depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8011f90:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011f92:	3304      	adds	r3, #4
 8011f94:	932b      	str	r3, [sp, #172]	; 0xac
 8011f96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8011f98:	3304      	adds	r3, #4
 8011f9a:	932c      	str	r3, [sp, #176]	; 0xb0
 8011f9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	932d      	str	r3, [sp, #180]	; 0xb4
    for (i = 0; i < output_y; i++) {
 8011fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	f000 821a 	beq.w	80123de <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5b6>
 8011faa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011fac:	2300      	movs	r3, #0
 8011fae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fb2:	440a      	add	r2, r1
 8011fb4:	920c      	str	r2, [sp, #48]	; 0x30
 8011fb6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8011fb8:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        for (j = 0; j < output_x / 2; j++) {
 8011fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	f000 813a 	beq.w	8012238 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x410>
 8011fc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fca:	fb02 0100 	mla	r1, r2, r0, r0
 8011fce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011fd0:	9c03      	ldr	r4, [sp, #12]
 8011fd2:	189f      	adds	r7, r3, r2
 8011fd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011fd6:	eb03 0c04 	add.w	ip, r3, r4
 8011fda:	9106      	str	r1, [sp, #24]
 8011fdc:	189e      	adds	r6, r3, r2
 8011fde:	1a0a      	subs	r2, r1, r0
 8011fe0:	9205      	str	r2, [sp, #20]
 8011fe2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011fe4:	4413      	add	r3, r2
 8011fe6:	9304      	str	r3, [sp, #16]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fea:	9300      	str	r3, [sp, #0]
            q31_t sum0 = bias[0] + biasR[0];
 8011fec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011fee:	3602      	adds	r6, #2
 8011ff0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011ff2:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011ff6:	9c00      	ldr	r4, [sp, #0]
            q31_t sum0 = bias[0] + biasR[0];
 8011ff8:	9301      	str	r3, [sp, #4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8011ffa:	9b06      	ldr	r3, [sp, #24]
 8011ffc:	9d08      	ldr	r5, [sp, #32]
 8011ffe:	1ae4      	subs	r4, r4, r3
            q31_t sum0 = bias[0] + biasR[0];
 8012000:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012004:	9b01      	ldr	r3, [sp, #4]
 8012006:	eb0c 0005 	add.w	r0, ip, r5
            sum0 += cols_8b[0]*ksrc[0];
 801200a:	f91e 8c19 	ldrsb.w	r8, [lr, #-25]
            q31_t sum0 = bias[0] + biasR[0];
 801200e:	441a      	add	r2, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012010:	9402      	str	r4, [sp, #8]
            sum0 += cols_8b[0]*ksrc[0];
 8012012:	f91c 4005 	ldrsb.w	r4, [ip, r5]
 8012016:	f10c 0c02 	add.w	ip, ip, #2
            sum1 += cols_8b[1]*ksrc[0];
 801201a:	f990 5001 	ldrsb.w	r5, [r0, #1]
            sum0 += cols_8b[1]*ksrc[1];
 801201e:	f91e 9c18 	ldrsb.w	r9, [lr, #-24]
            sum0 += cols_8b[0]*ksrc[0];
 8012022:	fb14 2408 	smlabb	r4, r4, r8, r2
            sum1 += cols_8b[2]*ksrc[1];
 8012026:	f990 3002 	ldrsb.w	r3, [r0, #2]
            sum1 += cols_8b[1]*ksrc[0];
 801202a:	fb18 2205 	smlabb	r2, r8, r5, r2
            sum0 += cols_8b[1]*ksrc[1];
 801202e:	fb15 4409 	smlabb	r4, r5, r9, r4
            sum0 += cols_8b[2]*ksrc[2];
 8012032:	f91e 8c17 	ldrsb.w	r8, [lr, #-23]
            sum1 += cols_8b[2]*ksrc[1];
 8012036:	fb19 2203 	smlabb	r2, r9, r3, r2
            sum0 += cols_8b[3]*ksrc[3];
 801203a:	f91e 9c16 	ldrsb.w	r9, [lr, #-22]
            sum0 += cols_8b[2]*ksrc[2];
 801203e:	fb13 4408 	smlabb	r4, r3, r8, r4
            sum1 += cols_8b[3]*ksrc[2];
 8012042:	f990 3003 	ldrsb.w	r3, [r0, #3]
            sum0 += cols_8b[4]*ksrc[4];
 8012046:	f91e ac15 	ldrsb.w	sl, [lr, #-21]
            sum1 += cols_8b[3]*ksrc[2];
 801204a:	fb18 2203 	smlabb	r2, r8, r3, r2
            sum1 += cols_8b[2]*ksrc[6];
 801204e:	f99c 5004 	ldrsb.w	r5, [ip, #4]
            sum0 += cols_8b[3]*ksrc[3];
 8012052:	fb13 4309 	smlabb	r3, r3, r9, r4
            sum1 += cols_8b[4]*ksrc[3];
 8012056:	f990 4004 	ldrsb.w	r4, [r0, #4]
 801205a:	9903      	ldr	r1, [sp, #12]
 801205c:	fb19 2804 	smlabb	r8, r9, r4, r2
            sum1 += cols_8b[5]*ksrc[4];
 8012060:	f990 9005 	ldrsb.w	r9, [r0, #5]
            sum0 += cols_8b[4]*ksrc[4];
 8012064:	fb14 340a 	smlabb	r4, r4, sl, r3
            sum0 += cols_8b[0]*ksrc[5];
 8012068:	f91e 2c14 	ldrsb.w	r2, [lr, #-20]
 801206c:	f99c 3002 	ldrsb.w	r3, [ip, #2]
            sum1 += cols_8b[5]*ksrc[4];
 8012070:	fb1a 8909 	smlabb	r9, sl, r9, r8
            sum1 += cols_8b[1]*ksrc[5];
 8012074:	f99c 0003 	ldrsb.w	r0, [ip, #3]
 8012078:	1879      	adds	r1, r7, r1
            sum0 += cols_8b[1]*ksrc[6];
 801207a:	f91e 8c13 	ldrsb.w	r8, [lr, #-19]
            sum0 += cols_8b[0]*ksrc[5];
 801207e:	fb13 4302 	smlabb	r3, r3, r2, r4
            sum1 += cols_8b[1]*ksrc[5];
 8012082:	fb12 9200 	smlabb	r2, r2, r0, r9
            sum0 += cols_8b[2]*ksrc[7];
 8012086:	f91e 4c12 	ldrsb.w	r4, [lr, #-18]
            sum0 += cols_8b[1]*ksrc[6];
 801208a:	fb10 3308 	smlabb	r3, r0, r8, r3
            sum1 += cols_8b[3]*ksrc[7];
 801208e:	f99c 9005 	ldrsb.w	r9, [ip, #5]
            sum1 += cols_8b[2]*ksrc[6];
 8012092:	fb18 2205 	smlabb	r2, r8, r5, r2
            sum0 += cols_8b[3]*ksrc[8];
 8012096:	f91e 8c11 	ldrsb.w	r8, [lr, #-17]
            sum0 += cols_8b[2]*ksrc[7];
 801209a:	fb15 3004 	smlabb	r0, r5, r4, r3
            sum1 += cols_8b[4]*ksrc[8];
 801209e:	f99c 3006 	ldrsb.w	r3, [ip, #6]
            sum1 += cols_8b[3]*ksrc[7];
 80120a2:	fb14 2209 	smlabb	r2, r4, r9, r2
 80120a6:	3702      	adds	r7, #2
            sum0 += cols_8b[3]*ksrc[8];
 80120a8:	fb19 0508 	smlabb	r5, r9, r8, r0
            sum0 += cols_8b[4]*ksrc[9];
 80120ac:	f91e 0c10 	ldrsb.w	r0, [lr, #-16]
            sum1 += cols_8b[4]*ksrc[8];
 80120b0:	fb18 2203 	smlabb	r2, r8, r3, r2
            sum0 += cols_8b[0]*ksrc[10];
 80120b4:	f91e 4c0f 	ldrsb.w	r4, [lr, #-15]
            sum0 += cols_8b[4]*ksrc[9];
 80120b8:	fb13 5300 	smlabb	r3, r3, r0, r5
            sum0 += cols_8b[0]*ksrc[10];
 80120bc:	f997 5006 	ldrsb.w	r5, [r7, #6]
            sum1 += cols_8b[1]*ksrc[10];
 80120c0:	f997 a007 	ldrsb.w	sl, [r7, #7]
            sum0 += cols_8b[0]*ksrc[10];
 80120c4:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum0 += cols_8b[1]*ksrc[11];
 80120c8:	f91e bc0e 	ldrsb.w	fp, [lr, #-14]
            sum1 += cols_8b[5]*ksrc[9];
 80120cc:	f99c 8007 	ldrsb.w	r8, [ip, #7]
            sum1 += cols_8b[2]*ksrc[11];
 80120d0:	f997 5008 	ldrsb.w	r5, [r7, #8]
            sum0 += cols_8b[1]*ksrc[11];
 80120d4:	fb1a 330b 	smlabb	r3, sl, fp, r3
            sum1 += cols_8b[5]*ksrc[9];
 80120d8:	fb10 2808 	smlabb	r8, r0, r8, r2
            sum0 += cols_8b[2]*ksrc[12];
 80120dc:	f91e 9c0d 	ldrsb.w	r9, [lr, #-13]
            sum1 += cols_8b[3]*ksrc[12];
 80120e0:	f997 2009 	ldrsb.w	r2, [r7, #9]
            sum0 += cols_8b[3]*ksrc[13];
 80120e4:	f91e 0c0c 	ldrsb.w	r0, [lr, #-12]
            sum1 += cols_8b[1]*ksrc[10];
 80120e8:	fb14 840a 	smlabb	r4, r4, sl, r8
            sum0 += cols_8b[2]*ksrc[12];
 80120ec:	fb15 3309 	smlabb	r3, r5, r9, r3
            sum1 += cols_8b[4]*ksrc[13];
 80120f0:	f997 a00a 	ldrsb.w	sl, [r7, #10]
            sum0 += cols_8b[4]*ksrc[14];
 80120f4:	f91e 8c0b 	ldrsb.w	r8, [lr, #-11]
            sum1 += cols_8b[2]*ksrc[11];
 80120f8:	fb1b 4b05 	smlabb	fp, fp, r5, r4
            sum0 += cols_8b[3]*ksrc[13];
 80120fc:	fb12 3300 	smlabb	r3, r2, r0, r3
            sum0 = (float) sum0 * *scales;
 8012100:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
            sum0 += cols_8b[0]*ksrc[15];
 8012102:	f91e 4c0a 	ldrsb.w	r4, [lr, #-10]
            sum1 += cols_8b[3]*ksrc[12];
 8012106:	fb19 b902 	smlabb	r9, r9, r2, fp
            sum0 = (float) sum0 * *scales;
 801210a:	ed55 7a01 	vldr	s15, [r5, #-4]
            sum0 += cols_8b[4]*ksrc[14];
 801210e:	fb1a 3308 	smlabb	r3, sl, r8, r3
            sum0 += cols_8b[0]*ksrc[15];
 8012112:	f991 500c 	ldrsb.w	r5, [r1, #12]
            sum1 += cols_8b[1]*ksrc[15];
 8012116:	f991 200d 	ldrsb.w	r2, [r1, #13]
            sum0 += cols_8b[1]*ksrc[16];
 801211a:	f91e bc09 	ldrsb.w	fp, [lr, #-9]
            sum0 += cols_8b[0]*ksrc[15];
 801211e:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[4]*ksrc[13];
 8012122:	fb10 950a 	smlabb	r5, r0, sl, r9
            sum1 += cols_8b[2]*ksrc[16];
 8012126:	f991 a00e 	ldrsb.w	sl, [r1, #14]
            sum0 += cols_8b[2]*ksrc[17];
 801212a:	f91e 9c08 	ldrsb.w	r9, [lr, #-8]
            sum0 += cols_8b[1]*ksrc[16];
 801212e:	fb12 330b 	smlabb	r3, r2, fp, r3
            sum1 += cols_8b[5]*ksrc[14];
 8012132:	f997 000b 	ldrsb.w	r0, [r7, #11]
            sum0 += cols_8b[2]*ksrc[17];
 8012136:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[5]*ksrc[14];
 801213a:	fb18 5000 	smlabb	r0, r8, r0, r5
            sum1 += cols_8b[3]*ksrc[17];
 801213e:	f991 800f 	ldrsb.w	r8, [r1, #15]
            sum0 += cols_8b[3]*ksrc[18];
 8012142:	f91e 5c07 	ldrsb.w	r5, [lr, #-7]
            sum1 += cols_8b[1]*ksrc[15];
 8012146:	fb14 0202 	smlabb	r2, r4, r2, r0
            sum1 += cols_8b[4]*ksrc[18];
 801214a:	f991 4010 	ldrsb.w	r4, [r1, #16]
            sum0 += cols_8b[4]*ksrc[19];
 801214e:	f91e 0c06 	ldrsb.w	r0, [lr, #-6]
            sum0 += cols_8b[3]*ksrc[18];
 8012152:	fb18 3305 	smlabb	r3, r8, r5, r3
            sum1 += cols_8b[2]*ksrc[16];
 8012156:	fb1b 220a 	smlabb	r2, fp, sl, r2
            sum0 += cols_8b[0]*ksrc[20];
 801215a:	f996 b00e 	ldrsb.w	fp, [r6, #14]
            sum1 += cols_8b[5]*ksrc[19];
 801215e:	f991 a011 	ldrsb.w	sl, [r1, #17]
            sum0 += cols_8b[4]*ksrc[19];
 8012162:	fb14 3300 	smlabb	r3, r4, r0, r3
            sum0 += cols_8b[0]*ksrc[20];
 8012166:	f91e 1c05 	ldrsb.w	r1, [lr, #-5]
            sum1 += cols_8b[3]*ksrc[17];
 801216a:	fb19 2208 	smlabb	r2, r9, r8, r2
            sum0 += cols_8b[1]*ksrc[21];
 801216e:	f91e 9c04 	ldrsb.w	r9, [lr, #-4]
            sum0 += cols_8b[0]*ksrc[20];
 8012172:	fb1b 3301 	smlabb	r3, fp, r1, r3
            sum1 += cols_8b[1]*ksrc[20];
 8012176:	f996 b00f 	ldrsb.w	fp, [r6, #15]
            sum1 += cols_8b[4]*ksrc[18];
 801217a:	fb15 2204 	smlabb	r2, r5, r4, r2
            sum0 += cols_8b[2]*ksrc[22];
 801217e:	f91e 8c03 	ldrsb.w	r8, [lr, #-3]
            sum1 += cols_8b[2]*ksrc[21];
 8012182:	f996 5010 	ldrsb.w	r5, [r6, #16]
            sum0 += cols_8b[1]*ksrc[21];
 8012186:	fb1b 3309 	smlabb	r3, fp, r9, r3
            sum1 += cols_8b[3]*ksrc[22];
 801218a:	f996 4011 	ldrsb.w	r4, [r6, #17]
            sum1 += cols_8b[5]*ksrc[19];
 801218e:	fb10 220a 	smlabb	r2, r0, sl, r2
            sum0 += cols_8b[2]*ksrc[22];
 8012192:	fb15 3308 	smlabb	r3, r5, r8, r3
            sum0 += cols_8b[3]*ksrc[23];
 8012196:	f91e ac02 	ldrsb.w	sl, [lr, #-2]
            sum1 += cols_8b[1]*ksrc[20];
 801219a:	fb11 220b 	smlabb	r2, r1, fp, r2
            sum1 += cols_8b[4]*ksrc[23];
 801219e:	f996 0012 	ldrsb.w	r0, [r6, #18]
            sum0 += cols_8b[4]*ksrc[24];
 80121a2:	f91e 1c01 	ldrsb.w	r1, [lr, #-1]
            sum0 += cols_8b[3]*ksrc[23];
 80121a6:	fb14 330a 	smlabb	r3, r4, sl, r3
            sum1 += cols_8b[2]*ksrc[21];
 80121aa:	fb19 2205 	smlabb	r2, r9, r5, r2
            sum1 += cols_8b[5]*ksrc[24];
 80121ae:	f996 5013 	ldrsb.w	r5, [r6, #19]
            sum0 += cols_8b[4]*ksrc[24];
 80121b2:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum1 += cols_8b[3]*ksrc[22];
 80121b6:	fb18 2204 	smlabb	r2, r8, r4, r2
            sum0 += cols_8b[4]*ksrc[24];
 80121ba:	ee07 3a10 	vmov	s14, r3
            sum1 += cols_8b[4]*ksrc[23];
 80121be:	fb1a 2200 	smlabb	r2, sl, r0, r2
            sum0 += output_offset;
 80121c2:	982e      	ldr	r0, [sp, #184]	; 0xb8
            sum0 = (float) sum0 * *scales;
 80121c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            sum1 += cols_8b[5]*ksrc[24];
 80121c8:	fb11 2205 	smlabb	r2, r1, r5, r2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80121cc:	9902      	ldr	r1, [sp, #8]
            sum0 = (float) sum0 * *scales;
 80121ce:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 = (float) sum1 * *scales;
 80121d2:	ee07 2a90 	vmov	s15, r2
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80121d6:	9a00      	ldr	r2, [sp, #0]
            sum1 = (float) sum1 * *scales;
 80121d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 80121dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80121e0:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 80121e4:	4403      	add	r3, r0
            sum0 = MAX(sum0, activation_min);
 80121e6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80121e8:	4283      	cmp	r3, r0
 80121ea:	bfb8      	it	lt
 80121ec:	4603      	movlt	r3, r0
            sum0 = MIN(sum0, activation_max);
 80121ee:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80121f0:	4283      	cmp	r3, r0
 80121f2:	bfa8      	it	ge
 80121f4:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80121f6:	9805      	ldr	r0, [sp, #20]
 80121f8:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 80121fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
            sum1 += output_offset;
 80121fc:	992e      	ldr	r1, [sp, #184]	; 0xb8
            sum1 = (float) sum1 * *scales;
 80121fe:	ed13 7a01 	vldr	s14, [r3, #-4]
 8012202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801220a:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 801220e:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8012210:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8012212:	428b      	cmp	r3, r1
 8012214:	bfb8      	it	lt
 8012216:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8012218:	9931      	ldr	r1, [sp, #196]	; 0xc4
 801221a:	428b      	cmp	r3, r1
 801221c:	bfa8      	it	ge
 801221e:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8012220:	7013      	strb	r3, [r2, #0]
 8012222:	9b07      	ldr	r3, [sp, #28]
 8012224:	18d3      	adds	r3, r2, r3
 8012226:	9300      	str	r3, [sp, #0]
        for (j = 0; j < output_x / 2; j++) {
 8012228:	9b04      	ldr	r3, [sp, #16]
 801222a:	429e      	cmp	r6, r3
 801222c:	f47f aede 	bne.w	8011fec <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x1c4>
 8012230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012232:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012234:	4413      	add	r3, r2
 8012236:	9309      	str	r3, [sp, #36]	; 0x24
 8012238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if (output_x & 1) {
 801223a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801223c:	3301      	adds	r3, #1
 801223e:	930a      	str	r3, [sp, #40]	; 0x28
 8012240:	2a00      	cmp	r2, #0
 8012242:	f000 80d9 	beq.w	80123f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5d0>
            q31_t sum = bias[0] + biasR[0];
 8012246:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            cols_8b += column_x + 4;
 8012248:	9e09      	ldr	r6, [sp, #36]	; 0x24
            q31_t sum = bias[0] + biasR[0];
 801224a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801224e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8012250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012252:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012256:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
            sum += cols_8b[0]*ksrc[0];
 8012258:	f91e 5c19 	ldrsb.w	r5, [lr, #-25]
            q31_t sum = bias[0] + biasR[0];
 801225c:	4413      	add	r3, r2
 801225e:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8012260:	f996 4000 	ldrsb.w	r4, [r6]
            sum += cols_8b[1]*ksrc[1];
 8012264:	f996 2001 	ldrsb.w	r2, [r6, #1]
            sum += cols_8b[0]*ksrc[0];
 8012268:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 801226c:	f91e 5c18 	ldrsb.w	r5, [lr, #-24]
            sum += cols_8b[2]*ksrc[2];
 8012270:	f996 4002 	ldrsb.w	r4, [r6, #2]
            sum += cols_8b[1]*ksrc[1];
 8012274:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8012278:	f91e 5c17 	ldrsb.w	r5, [lr, #-23]
            sum += cols_8b[3]*ksrc[3];
 801227c:	f996 2003 	ldrsb.w	r2, [r6, #3]
            sum += cols_8b[2]*ksrc[2];
 8012280:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 8012284:	f91e 5c16 	ldrsb.w	r5, [lr, #-22]
            cols_8b += column_x + 4;
 8012288:	9f19      	ldr	r7, [sp, #100]	; 0x64
            sum += cols_8b[4]*ksrc[4];
 801228a:	f996 4004 	ldrsb.w	r4, [r6, #4]
            sum += cols_8b[3]*ksrc[3];
 801228e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8012292:	f91e 5c15 	ldrsb.w	r5, [lr, #-21]
            cols_8b += column_x + 4;
 8012296:	19f0      	adds	r0, r6, r7
            sum += cols_8b[0]*ksrc[5];
 8012298:	57f2      	ldrsb	r2, [r6, r7]
            sum += cols_8b[4]*ksrc[4];
 801229a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[5];
 801229e:	f91e 5c14 	ldrsb.w	r5, [lr, #-20]
            sum += cols_8b[1]*ksrc[6];
 80122a2:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[5];
 80122a6:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[6];
 80122aa:	f91e 5c13 	ldrsb.w	r5, [lr, #-19]
            sum += cols_8b[2]*ksrc[7];
 80122ae:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[6];
 80122b2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[7];
 80122b6:	f91e 5c12 	ldrsb.w	r5, [lr, #-18]
            sum += cols_8b[3]*ksrc[8];
 80122ba:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[7];
 80122be:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[8];
 80122c2:	f91e 5c11 	ldrsb.w	r5, [lr, #-17]
            sum += cols_8b[4]*ksrc[9];
 80122c6:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[8];
 80122ca:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[9];
 80122ce:	f91e 5c10 	ldrsb.w	r5, [lr, #-16]
            cols_8b += column_x + 4;
            sum += cols_8b[0]*ksrc[10];
 80122d2:	f916 4017 	ldrsb.w	r4, [r6, r7, lsl #1]
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 2 * 2;
 80122d6:	3605      	adds	r6, #5
            sum += cols_8b[4]*ksrc[9];
 80122d8:	fb12 3305 	smlabb	r3, r2, r5, r3
 80122dc:	910b      	str	r1, [sp, #44]	; 0x2c
            sum += cols_8b[0]*ksrc[10];
 80122de:	f91e 5c0f 	ldrsb.w	r5, [lr, #-15]
            cols_8b += column_x + 4;
 80122e2:	19c1      	adds	r1, r0, r7
        cols_8b_iterptr += 2 * 2;
 80122e4:	9609      	str	r6, [sp, #36]	; 0x24
            sum += cols_8b[0]*ksrc[10];
 80122e6:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[11];
 80122ea:	f991 2001 	ldrsb.w	r2, [r1, #1]
 80122ee:	f91e 5c0e 	ldrsb.w	r5, [lr, #-14]
            sum += cols_8b[2]*ksrc[12];
 80122f2:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[11];
 80122f6:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[12];
 80122fa:	f91e 2c0d 	ldrsb.w	r2, [lr, #-13]
            sum += cols_8b[3]*ksrc[13];
 80122fe:	f991 6003 	ldrsb.w	r6, [r1, #3]
            sum += cols_8b[2]*ksrc[12];
 8012302:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[3]*ksrc[13];
 8012306:	f91e 2c0c 	ldrsb.w	r2, [lr, #-12]
            sum += cols_8b[4]*ksrc[14];
 801230a:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[13];
 801230e:	fb16 3602 	smlabb	r6, r6, r2, r3
            sum += cols_8b[4]*ksrc[14];
 8012312:	f91e 2c0b 	ldrsb.w	r2, [lr, #-11]
            cols_8b += column_x + 4;
 8012316:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[15];
 8012318:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[4]*ksrc[14];
 801231c:	fb14 6202 	smlabb	r2, r4, r2, r6
            sum += cols_8b[0]*ksrc[15];
 8012320:	f91e 4c0a 	ldrsb.w	r4, [lr, #-10]
            sum += cols_8b[1]*ksrc[16];
 8012324:	f993 5001 	ldrsb.w	r5, [r3, #1]
            sum += cols_8b[0]*ksrc[15];
 8012328:	fb10 2204 	smlabb	r2, r0, r4, r2
            sum += cols_8b[1]*ksrc[16];
 801232c:	f91e 0c09 	ldrsb.w	r0, [lr, #-9]
            sum += cols_8b[2]*ksrc[17];
 8012330:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[16];
 8012334:	fb15 2200 	smlabb	r2, r5, r0, r2
            sum += cols_8b[2]*ksrc[17];
 8012338:	f91e 5c08 	ldrsb.w	r5, [lr, #-8]
            sum += cols_8b[3]*ksrc[18];
 801233c:	f993 6003 	ldrsb.w	r6, [r3, #3]
            sum += cols_8b[2]*ksrc[17];
 8012340:	fb14 2505 	smlabb	r5, r4, r5, r2
            sum += cols_8b[3]*ksrc[18];
 8012344:	f91e 2c07 	ldrsb.w	r2, [lr, #-7]
            sum += cols_8b[4]*ksrc[19];
 8012348:	f993 0004 	ldrsb.w	r0, [r3, #4]
            cols_8b += column_x + 4;
 801234c:	443b      	add	r3, r7
            sum += cols_8b[3]*ksrc[18];
 801234e:	fb16 5402 	smlabb	r4, r6, r2, r5
            sum += cols_8b[4]*ksrc[19];
 8012352:	f91e 2c06 	ldrsb.w	r2, [lr, #-6]
            sum += cols_8b[0]*ksrc[20];
 8012356:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            sum += cols_8b[4]*ksrc[19];
 801235a:	fb10 4202 	smlabb	r2, r0, r2, r4
            sum += cols_8b[0]*ksrc[20];
 801235e:	f91e 4c05 	ldrsb.w	r4, [lr, #-5]
            sum += cols_8b[1]*ksrc[21];
 8012362:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[20];
 8012366:	fb15 2204 	smlabb	r2, r5, r4, r2
            sum += cols_8b[1]*ksrc[21];
 801236a:	f91e 5c04 	ldrsb.w	r5, [lr, #-4]
            sum += cols_8b[2]*ksrc[22];
 801236e:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[21];
 8012372:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[22];
 8012376:	f91e 5c03 	ldrsb.w	r5, [lr, #-3]
            sum += cols_8b[3]*ksrc[23];
 801237a:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[22];
 801237e:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[23];
 8012382:	f91e 5c02 	ldrsb.w	r5, [lr, #-2]
            sum += cols_8b[4]*ksrc[24];
 8012386:	f993 3004 	ldrsb.w	r3, [r3, #4]
            sum += cols_8b[3]*ksrc[23];
 801238a:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[24];
 801238e:	f91e 5c01 	ldrsb.w	r5, [lr, #-1]
 8012392:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012394:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8012398:	e9dd 610c 	ldrd	r6, r1, [sp, #48]	; 0x30
            sum = (float) sum * *scales;
 801239c:	ee07 2a90 	vmov	s15, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80123a0:	1a71      	subs	r1, r6, r1
 80123a2:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 80123a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123a8:	960c      	str	r6, [sp, #48]	; 0x30
 80123aa:	982d      	ldr	r0, [sp, #180]	; 0xb4
            sum += output_offset;
 80123ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum = (float) sum * *scales;
 80123ae:	ed10 7a01 	vldr	s14, [r0, #-4]
 80123b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123ba:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80123be:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 80123c0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80123c2:	4293      	cmp	r3, r2
 80123c4:	bfb8      	it	lt
 80123c6:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 80123c8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80123ca:	4293      	cmp	r3, r2
 80123cc:	bfa8      	it	ge
 80123ce:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80123d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80123d2:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 80123d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123d8:	429a      	cmp	r2, r3
 80123da:	f47f adef 	bne.w	8011fbc <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x194>
        input++;
 80123de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80123e0:	f10e 0e19 	add.w	lr, lr, #25
    for (c = 0; c < input_ch; c++){
 80123e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
        input++;
 80123e6:	3301      	adds	r3, #1
 80123e8:	9317      	str	r3, [sp, #92]	; 0x5c
    for (c = 0; c < input_ch; c++){
 80123ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80123ec:	4293      	cmp	r3, r2
 80123ee:	f47f adaf 	bne.w	8011f50 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x128>
}
 80123f2:	b021      	add	sp, #132	; 0x84
 80123f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += 2 * 2;
 80123f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123fc:	3304      	adds	r3, #4
 80123fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012402:	4413      	add	r3, r2
 8012404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012406:	930c      	str	r3, [sp, #48]	; 0x30
 8012408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801240a:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 801240c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801240e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012412:	4293      	cmp	r3, r2
 8012414:	f47f add2 	bne.w	8011fbc <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x194>
 8012418:	e7e1      	b.n	80123de <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5b6>
 801241a:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 801241c:	2200      	movs	r2, #0
 801241e:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8012420:	f806 3c02 	strb.w	r3, [r6, #-2]
        *cols_8b++ = PAD8;
 8012424:	f806 3c01 	strb.w	r3, [r6, #-1]
 8012428:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 801242a:	b292      	uxth	r2, r2
 801242c:	4297      	cmp	r7, r2
 801242e:	daf6      	bge.n	801241e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5f6>
 8012430:	e553      	b.n	8011eda <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0xb2>
 8012432:	bf00      	nop

08012434 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8012434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012438:	b0a5      	sub	sp, #148	; 0x94

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 801243a:	1ccf      	adds	r7, r1, #3
{
 801243c:	9310      	str	r3, [sp, #64]	; 0x40
 801243e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8012440:	9106      	str	r1, [sp, #24]
 8012442:	1c99      	adds	r1, r3, #2
 8012444:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 8012448:	921f      	str	r2, [sp, #124]	; 0x7c
    for(i = 0; i < input_x + 4; i++){
 801244a:	2200      	movs	r2, #0
{
 801244c:	9312      	str	r3, [sp, #72]	; 0x48
 801244e:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 8012452:	901a      	str	r0, [sp, #104]	; 0x68
 8012454:	9311      	str	r3, [sp, #68]	; 0x44
 8012456:	f99d 30ec 	ldrsb.w	r3, [sp, #236]	; 0xec
    for(i = 0; i < input_x + 4; i++){
 801245a:	3201      	adds	r2, #1
 801245c:	460e      	mov	r6, r1
        *cols_8b++ = PAD8;
 801245e:	f801 3c02 	strb.w	r3, [r1, #-2]
 8012462:	3102      	adds	r1, #2
    for(i = 0; i < input_x + 4; i++){
 8012464:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8012466:	f801 3c03 	strb.w	r3, [r1, #-3]
    for(i = 0; i < input_x + 4; i++){
 801246a:	42ba      	cmp	r2, r7
 801246c:	ddf5      	ble.n	801245a <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x26>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 801246e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012470:	b1b8      	cbz	r0, 80124a2 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x6e>
 8012472:	9c06      	ldr	r4, [sp, #24]
 8012474:	4632      	mov	r2, r6
 8012476:	2100      	movs	r1, #0
 8012478:	4686      	mov	lr, r0
 801247a:	1d25      	adds	r5, r4, #4
 801247c:	46a4      	mov	ip, r4
 801247e:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 8012480:	7013      	strb	r3, [r2, #0]
        *cols_8b++ = PAD8;//left
 8012482:	7053      	strb	r3, [r2, #1]
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8012484:	eb02 040c 	add.w	r4, r2, ip
    for(i = 0; i < input_y; i++){
 8012488:	b288      	uxth	r0, r1
 801248a:	442a      	add	r2, r5
        *cols_8b++ = PAD8;//right
 801248c:	70a3      	strb	r3, [r4, #2]
    for(i = 0; i < input_y; i++){
 801248e:	4586      	cmp	lr, r0
        *cols_8b++ = PAD8;//right
 8012490:	f802 3c01 	strb.w	r3, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8012494:	d8f3      	bhi.n	801247e <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x4a>
 8012496:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012498:	3a01      	subs	r2, #1
 801249a:	b292      	uxth	r2, r2
 801249c:	fb02 5505 	mla	r5, r2, r5, r5
 80124a0:	442e      	add	r6, r5
 80124a2:	9c06      	ldr	r4, [sp, #24]
 80124a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80124a8:	1fa1      	subs	r1, r4, #6
 80124aa:	4291      	cmp	r1, r2
 80124ac:	f200 82e0 	bhi.w	8012a70 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x63c>
 80124b0:	2000      	movs	r0, #0
 80124b2:	1d25      	adds	r5, r4, #4
 80124b4:	4631      	mov	r1, r6
 80124b6:	4602      	mov	r2, r0
 80124b8:	f363 0007 	bfi	r0, r3, #0, #8
 80124bc:	086c      	lsrs	r4, r5, #1
 80124be:	f363 200f 	bfi	r0, r3, #8, #8
 80124c2:	f363 4017 	bfi	r0, r3, #16, #8
 80124c6:	f363 601f 	bfi	r0, r3, #24, #8
 80124ca:	3201      	adds	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
        *cols_8b++ = PAD8;
 80124cc:	f841 0b04 	str.w	r0, [r1], #4
 80124d0:	42a2      	cmp	r2, r4
 80124d2:	d3fa      	bcc.n	80124ca <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x96>
 80124d4:	f025 0201 	bic.w	r2, r5, #1
 80124d8:	42aa      	cmp	r2, r5
 80124da:	eb06 0142 	add.w	r1, r6, r2, lsl #1
 80124de:	d002      	beq.n	80124e6 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0xb2>
 80124e0:	f806 3012 	strb.w	r3, [r6, r2, lsl #1]
        *cols_8b++ = PAD8;
 80124e4:	704b      	strb	r3, [r1, #1]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 80124e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80124e8:	2d00      	cmp	r5, #0
 80124ea:	f000 82ac 	beq.w	8012a46 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x612>
 80124ee:	9c06      	ldr	r4, [sp, #24]
 80124f0:	1e6b      	subs	r3, r5, #1
 80124f2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80124f4:	1e61      	subs	r1, r4, #1
 80124f6:	1d20      	adds	r0, r4, #4
 80124f8:	f004 0201 	and.w	r2, r4, #1
{
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 80124fc:	0877      	lsrs	r7, r6, #1
 80124fe:	b289      	uxth	r1, r1
 8012500:	901b      	str	r0, [sp, #108]	; 0x6c
 8012502:	f1c2 0204 	rsb	r2, r2, #4
 8012506:	b29b      	uxth	r3, r3
 8012508:	9123      	str	r1, [sp, #140]	; 0x8c
 801250a:	3101      	adds	r1, #1
 801250c:	9714      	str	r7, [sp, #80]	; 0x50
 801250e:	3301      	adds	r3, #1
 8012510:	9121      	str	r1, [sp, #132]	; 0x84
 8012512:	1e70      	subs	r0, r6, #1
 8012514:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012516:	440a      	add	r2, r1
 8012518:	4621      	mov	r1, r4
 801251a:	463c      	mov	r4, r7
 801251c:	921c      	str	r2, [sp, #112]	; 0x70
 801251e:	19ca      	adds	r2, r1, r7
 8012520:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8012522:	f107 0c19 	add.w	ip, r7, #25
 8012526:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 8012528:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801252c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801252e:	9720      	str	r7, [sp, #128]	; 0x80
 8012530:	461f      	mov	r7, r3
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 2 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8012532:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012534:	fb07 f705 	mul.w	r7, r7, r5
 8012538:	3302      	adds	r3, #2
 801253a:	9722      	str	r7, [sp, #136]	; 0x88
 801253c:	931e      	str	r3, [sp, #120]	; 0x78
 801253e:	0093      	lsls	r3, r2, #2
 8012540:	9318      	str	r3, [sp, #96]	; 0x60
 8012542:	00a3      	lsls	r3, r4, #2
 8012544:	9317      	str	r3, [sp, #92]	; 0x5c
 8012546:	4603      	mov	r3, r0
 8012548:	fb05 f303 	mul.w	r3, r5, r3
 801254c:	931d      	str	r3, [sp, #116]	; 0x74
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 801254e:	004b      	lsls	r3, r1, #1
 8012550:	9316      	str	r3, [sp, #88]	; 0x58
 8012552:	f006 0301 	and.w	r3, r6, #1
 8012556:	9313      	str	r3, [sp, #76]	; 0x4c
 8012558:	fb05 f306 	mul.w	r3, r5, r6
 801255c:	9315      	str	r3, [sp, #84]	; 0x54
 801255e:	008b      	lsls	r3, r1, #2
 8012560:	9319      	str	r3, [sp, #100]	; 0x64
 8012562:	006b      	lsls	r3, r5, #1
 8012564:	930a      	str	r3, [sp, #40]	; 0x28
 8012566:	424b      	negs	r3, r1
 8012568:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < input_y; i++){
 801256a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801256c:	b303      	cbz	r3, 80125b0 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x17c>
 801256e:	9a06      	ldr	r2, [sp, #24]
 8012570:	b1f2      	cbz	r2, 80125b0 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x17c>
 8012572:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012574:	2500      	movs	r5, #0
 8012576:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012578:	469a      	mov	sl, r3
 801257a:	f102 0409 	add.w	r4, r2, #9
 801257e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8012580:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8012584:	1d57      	adds	r7, r2, #5
 8012586:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8012588:	e9dd 9821 	ldrd	r9, r8, [sp, #132]	; 0x84
 801258c:	4414      	add	r4, r2
 801258e:	eb04 0009 	add.w	r0, r4, r9
 8012592:	4622      	mov	r2, r4
 8012594:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 8012596:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 801259a:	4473      	add	r3, lr
                *cols_8b++ = *src;// + input_offset;
 801259c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 80125a0:	4290      	cmp	r0, r2
 80125a2:	d1f8      	bne.n	8012596 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x162>
 80125a4:	3501      	adds	r5, #1
 80125a6:	4446      	add	r6, r8
 80125a8:	443c      	add	r4, r7
        for(i = 0; i < input_y; i++){
 80125aa:	b2ab      	uxth	r3, r5
 80125ac:	459a      	cmp	sl, r3
 80125ae:	d8ee      	bhi.n	801258e <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x15a>
        depthwise_kernel5x5_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80125b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80125b2:	3304      	adds	r3, #4
 80125b4:	932f      	str	r3, [sp, #188]	; 0xbc
 80125b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80125b8:	3304      	adds	r3, #4
 80125ba:	9330      	str	r3, [sp, #192]	; 0xc0
 80125bc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80125be:	3304      	adds	r3, #4
 80125c0:	9331      	str	r3, [sp, #196]	; 0xc4
    for (i = 0; i < output_y; i++) {
 80125c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f000 8234 	beq.w	8012a32 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x5fe>
 80125ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80125cc:	2300      	movs	r3, #0
 80125ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80125d0:	930e      	str	r3, [sp, #56]	; 0x38
 80125d2:	440a      	add	r2, r1
 80125d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80125d6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80125d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        for (j = 0; j < output_x / 2; j++) {
 80125dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f000 8153 	beq.w	801288a <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x456>
 80125e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80125e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ea:	fb02 0100 	mla	r1, r2, r0, r0
 80125ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80125f0:	9c06      	ldr	r4, [sp, #24]
 80125f2:	189a      	adds	r2, r3, r2
 80125f4:	9109      	str	r1, [sp, #36]	; 0x24
 80125f6:	eb03 0e04 	add.w	lr, r3, r4
 80125fa:	9201      	str	r2, [sp, #4]
 80125fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80125fe:	189a      	adds	r2, r3, r2
 8012600:	9203      	str	r2, [sp, #12]
 8012602:	1a0a      	subs	r2, r1, r0
 8012604:	9208      	str	r2, [sp, #32]
 8012606:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012608:	4413      	add	r3, r2
 801260a:	9307      	str	r3, [sp, #28]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801260c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801260e:	e9cd 3e04 	strd	r3, lr, [sp, #16]
            q31_t sum0 = bias[0] + biasR[0];
 8012612:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012614:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8012616:	9e05      	ldr	r6, [sp, #20]
 8012618:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801261c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801261e:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8012622:	9c06      	ldr	r4, [sp, #24]
 8012624:	1833      	adds	r3, r6, r0
 8012626:	9901      	ldr	r1, [sp, #4]
 8012628:	4415      	add	r5, r2
            sum0 += cols_8b[0]*ksrc[0];
 801262a:	f91c bc19 	ldrsb.w	fp, [ip, #-25]
 801262e:	f916 e000 	ldrsb.w	lr, [r6, r0]
 8012632:	4421      	add	r1, r4
            sum0 += cols_8b[1]*ksrc[1];
 8012634:	f993 2001 	ldrsb.w	r2, [r3, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8012638:	4634      	mov	r4, r6
 801263a:	fb1e 5e0b 	smlabb	lr, lr, fp, r5
 801263e:	9100      	str	r1, [sp, #0]
            sum0 += cols_8b[1]*ksrc[1];
 8012640:	f91c 1c18 	ldrsb.w	r1, [ip, #-24]
            sum1 += cols_8b[2]*ksrc[0];
 8012644:	f993 9002 	ldrsb.w	r9, [r3, #2]
            sum0 += cols_8b[1]*ksrc[1];
 8012648:	fb12 e601 	smlabb	r6, r2, r1, lr
            sum0 += cols_8b[2]*ksrc[2];
 801264c:	f91c 7c17 	ldrsb.w	r7, [ip, #-23]
            sum1 += cols_8b[3]*ksrc[1];
 8012650:	f993 8003 	ldrsb.w	r8, [r3, #3]
            sum1 += cols_8b[2]*ksrc[0];
 8012654:	fb1b 5509 	smlabb	r5, fp, r9, r5
            sum0 += cols_8b[2]*ksrc[2];
 8012658:	fb19 6e07 	smlabb	lr, r9, r7, r6
            sum0 += cols_8b[3]*ksrc[3];
 801265c:	f91c bc16 	ldrsb.w	fp, [ip, #-22]
            sum1 += cols_8b[4]*ksrc[2];
 8012660:	f993 6004 	ldrsb.w	r6, [r3, #4]
            sum1 += cols_8b[3]*ksrc[1];
 8012664:	fb11 5508 	smlabb	r5, r1, r8, r5
            sum0 += cols_8b[3]*ksrc[3];
 8012668:	fb18 e20b 	smlabb	r2, r8, fp, lr
            sum0 += cols_8b[4]*ksrc[4];
 801266c:	f91c ec15 	ldrsb.w	lr, [ip, #-21]
            sum1 += cols_8b[4]*ksrc[2];
 8012670:	fb17 5106 	smlabb	r1, r7, r6, r5
            sum0 += cols_8b[0]*ksrc[5];
 8012674:	f91c ac14 	ldrsb.w	sl, [ip, #-20]
            sum0 += cols_8b[4]*ksrc[4];
 8012678:	fb16 260e 	smlabb	r6, r6, lr, r2
            sum0 += cols_8b[0]*ksrc[5];
 801267c:	f994 2004 	ldrsb.w	r2, [r4, #4]
            sum0 += cols_8b[1]*ksrc[6];
 8012680:	f91c 9c13 	ldrsb.w	r9, [ip, #-19]
            sum0 += cols_8b[0]*ksrc[5];
 8012684:	fb12 660a 	smlabb	r6, r2, sl, r6
            sum1 += cols_8b[5]*ksrc[3];
 8012688:	f993 7005 	ldrsb.w	r7, [r3, #5]
            sum0 += cols_8b[1]*ksrc[6];
 801268c:	f994 2005 	ldrsb.w	r2, [r4, #5]
            sum1 += cols_8b[2]*ksrc[5];
 8012690:	f994 5006 	ldrsb.w	r5, [r4, #6]
            sum1 += cols_8b[5]*ksrc[3];
 8012694:	fb1b 1707 	smlabb	r7, fp, r7, r1
            sum0 += cols_8b[1]*ksrc[6];
 8012698:	fb12 6209 	smlabb	r2, r2, r9, r6
            sum1 += cols_8b[6]*ksrc[4];
 801269c:	f993 b006 	ldrsb.w	fp, [r3, #6]
            sum0 += cols_8b[2]*ksrc[7];
 80126a0:	f91c 6c12 	ldrsb.w	r6, [ip, #-18]
            sum1 += cols_8b[3]*ksrc[6];
 80126a4:	f994 8007 	ldrsb.w	r8, [r4, #7]
            sum1 += cols_8b[6]*ksrc[4];
 80126a8:	fb1e 7b0b 	smlabb	fp, lr, fp, r7
            sum0 += cols_8b[3]*ksrc[8];
 80126ac:	f91c 1c11 	ldrsb.w	r1, [ip, #-17]
            sum0 += cols_8b[2]*ksrc[7];
 80126b0:	fb15 2206 	smlabb	r2, r5, r6, r2
            sum1 += cols_8b[4]*ksrc[7];
 80126b4:	f994 3008 	ldrsb.w	r3, [r4, #8]
            sum1 += cols_8b[2]*ksrc[5];
 80126b8:	fb1a ba05 	smlabb	sl, sl, r5, fp
            sum0 += cols_8b[3]*ksrc[8];
 80126bc:	fb18 2201 	smlabb	r2, r8, r1, r2
            sum0 += cols_8b[4]*ksrc[9];
 80126c0:	f91c ec10 	ldrsb.w	lr, [ip, #-16]
            sum0 += cols_8b[3]*ksrc[8];
 80126c4:	9102      	str	r1, [sp, #8]
            sum1 += cols_8b[4]*ksrc[7];
 80126c6:	4621      	mov	r1, r4
            sum0 += cols_8b[0]*ksrc[10];
 80126c8:	f91c 7c0f 	ldrsb.w	r7, [ip, #-15]
            sum1 += cols_8b[3]*ksrc[6];
 80126cc:	fb19 aa08 	smlabb	sl, r9, r8, sl
            sum0 += cols_8b[0]*ksrc[10];
 80126d0:	9c01      	ldr	r4, [sp, #4]
            sum0 += cols_8b[4]*ksrc[9];
 80126d2:	fb13 220e 	smlabb	r2, r3, lr, r2
            sum1 += cols_8b[5]*ksrc[8];
 80126d6:	f991 8009 	ldrsb.w	r8, [r1, #9]
            sum1 += cols_8b[4]*ksrc[7];
 80126da:	fb16 a603 	smlabb	r6, r6, r3, sl
            sum0 += cols_8b[0]*ksrc[10];
 80126de:	f994 5008 	ldrsb.w	r5, [r4, #8]
 80126e2:	4608      	mov	r0, r1
            sum0 += cols_8b[1]*ksrc[11];
 80126e4:	f994 b009 	ldrsb.w	fp, [r4, #9]
            sum0 += cols_8b[0]*ksrc[10];
 80126e8:	fb15 2207 	smlabb	r2, r5, r7, r2
            sum1 += cols_8b[5]*ksrc[8];
 80126ec:	9b02      	ldr	r3, [sp, #8]
            sum0 += cols_8b[1]*ksrc[11];
 80126ee:	f91c 5c0e 	ldrsb.w	r5, [ip, #-14]
 80126f2:	3004      	adds	r0, #4
            sum1 += cols_8b[2]*ksrc[10];
 80126f4:	f994 a00a 	ldrsb.w	sl, [r4, #10]
            sum1 += cols_8b[5]*ksrc[8];
 80126f8:	fb13 6608 	smlabb	r6, r3, r8, r6
            sum0 += cols_8b[1]*ksrc[11];
 80126fc:	fb1b 2205 	smlabb	r2, fp, r5, r2
            sum0 += cols_8b[2]*ksrc[12];
 8012700:	f91c 8c0d 	ldrsb.w	r8, [ip, #-13]
            sum1 += cols_8b[6]*ksrc[9];
 8012704:	f991 b00a 	ldrsb.w	fp, [r1, #10]
            sum1 += cols_8b[3]*ksrc[11];
 8012708:	f994 900b 	ldrsb.w	r9, [r4, #11]
            sum0 += cols_8b[2]*ksrc[12];
 801270c:	fb1a 2208 	smlabb	r2, sl, r8, r2
            sum1 += cols_8b[6]*ksrc[9];
 8012710:	fb1e 6e0b 	smlabb	lr, lr, fp, r6
            sum0 += cols_8b[3]*ksrc[13];
 8012714:	f91c 3c0c 	ldrsb.w	r3, [ip, #-12]
            sum1 += cols_8b[4]*ksrc[12];
 8012718:	f994 600c 	ldrsb.w	r6, [r4, #12]
            sum1 += cols_8b[2]*ksrc[10];
 801271c:	fb17 e70a 	smlabb	r7, r7, sl, lr
 8012720:	9005      	str	r0, [sp, #20]
            sum0 += cols_8b[4]*ksrc[14];
 8012722:	f91c ac0b 	ldrsb.w	sl, [ip, #-11]
            sum0 += cols_8b[3]*ksrc[13];
 8012726:	fb19 2203 	smlabb	r2, r9, r3, r2
            sum0 = (float) sum0 * *scales;
 801272a:	9831      	ldr	r0, [sp, #196]	; 0xc4
            sum1 += cols_8b[3]*ksrc[11];
 801272c:	fb15 7509 	smlabb	r5, r5, r9, r7
            sum0 += cols_8b[0]*ksrc[15];
 8012730:	9900      	ldr	r1, [sp, #0]
            sum0 += cols_8b[4]*ksrc[14];
 8012732:	fb16 220a 	smlabb	r2, r6, sl, r2
            sum0 += cols_8b[0]*ksrc[15];
 8012736:	f91c 9c0a 	ldrsb.w	r9, [ip, #-10]
            sum1 += cols_8b[4]*ksrc[12];
 801273a:	fb18 5506 	smlabb	r5, r8, r6, r5
            sum0 = (float) sum0 * *scales;
 801273e:	ed10 7a01 	vldr	s14, [r0, #-4]
            sum0 += cols_8b[0]*ksrc[15];
 8012742:	f991 100c 	ldrsb.w	r1, [r1, #12]
            sum0 += cols_8b[1]*ksrc[16];
 8012746:	9800      	ldr	r0, [sp, #0]
 8012748:	f91c ec09 	ldrsb.w	lr, [ip, #-9]
            sum0 += cols_8b[0]*ksrc[15];
 801274c:	fb11 2209 	smlabb	r2, r1, r9, r2
            sum0 += cols_8b[1]*ksrc[16];
 8012750:	f990 600d 	ldrsb.w	r6, [r0, #13]
            sum1 += cols_8b[2]*ksrc[15];
 8012754:	4601      	mov	r1, r0
 8012756:	f990 800e 	ldrsb.w	r8, [r0, #14]
 801275a:	1d20      	adds	r0, r4, #4
            sum1 += cols_8b[5]*ksrc[13];
 801275c:	f994 b00d 	ldrsb.w	fp, [r4, #13]
            sum0 += cols_8b[1]*ksrc[16];
 8012760:	fb16 220e 	smlabb	r2, r6, lr, r2
            sum0 += cols_8b[2]*ksrc[17];
 8012764:	f91c 6c08 	ldrsb.w	r6, [ip, #-8]
            sum1 += cols_8b[3]*ksrc[16];
 8012768:	f991 700f 	ldrsb.w	r7, [r1, #15]
            sum1 += cols_8b[5]*ksrc[13];
 801276c:	fb13 530b 	smlabb	r3, r3, fp, r5
            sum0 += cols_8b[3]*ksrc[18];
 8012770:	f91c 1c07 	ldrsb.w	r1, [ip, #-7]
            sum0 += cols_8b[2]*ksrc[17];
 8012774:	fb18 2206 	smlabb	r2, r8, r6, r2
            sum1 += cols_8b[6]*ksrc[14];
 8012778:	f994 b00e 	ldrsb.w	fp, [r4, #14]
 801277c:	9001      	str	r0, [sp, #4]
            sum0 += cols_8b[3]*ksrc[18];
 801277e:	fb17 2201 	smlabb	r2, r7, r1, r2
            sum1 += cols_8b[4]*ksrc[17];
 8012782:	9800      	ldr	r0, [sp, #0]
            sum1 += cols_8b[6]*ksrc[14];
 8012784:	fb1a 330b 	smlabb	r3, sl, fp, r3
            sum1 += cols_8b[4]*ksrc[17];
 8012788:	f990 5010 	ldrsb.w	r5, [r0, #16]
            sum1 += cols_8b[2]*ksrc[15];
 801278c:	fb19 3808 	smlabb	r8, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[19];
 8012790:	f91c bc06 	ldrsb.w	fp, [ip, #-6]
            sum0 += cols_8b[0]*ksrc[20];
 8012794:	9803      	ldr	r0, [sp, #12]
            sum1 += cols_8b[3]*ksrc[16];
 8012796:	fb1e 8807 	smlabb	r8, lr, r7, r8
            sum0 += cols_8b[0]*ksrc[20];
 801279a:	f91c ac05 	ldrsb.w	sl, [ip, #-5]
            sum0 += cols_8b[4]*ksrc[19];
 801279e:	fb15 220b 	smlabb	r2, r5, fp, r2
            sum0 += cols_8b[0]*ksrc[20];
 80127a2:	f990 3010 	ldrsb.w	r3, [r0, #16]
            sum1 += cols_8b[4]*ksrc[17];
 80127a6:	fb16 8805 	smlabb	r8, r6, r5, r8
            sum0 += cols_8b[1]*ksrc[21];
 80127aa:	f990 9011 	ldrsb.w	r9, [r0, #17]
 80127ae:	3004      	adds	r0, #4
            sum1 += cols_8b[5]*ksrc[18];
 80127b0:	9c00      	ldr	r4, [sp, #0]
            sum0 += cols_8b[0]*ksrc[20];
 80127b2:	fb13 230a 	smlabb	r3, r3, sl, r2
            sum0 += cols_8b[1]*ksrc[21];
 80127b6:	f91c 2c04 	ldrsb.w	r2, [ip, #-4]
            sum1 += cols_8b[2]*ksrc[20];
 80127ba:	f990 e00e 	ldrsb.w	lr, [r0, #14]
            sum1 += cols_8b[5]*ksrc[18];
 80127be:	f994 5011 	ldrsb.w	r5, [r4, #17]
            sum0 += cols_8b[1]*ksrc[21];
 80127c2:	fb19 3302 	smlabb	r3, r9, r2, r3
            sum0 += cols_8b[2]*ksrc[22];
 80127c6:	f91c 9c03 	ldrsb.w	r9, [ip, #-3]
            sum1 += cols_8b[3]*ksrc[21];
 80127ca:	f990 700f 	ldrsb.w	r7, [r0, #15]
            sum1 += cols_8b[5]*ksrc[18];
 80127ce:	fb11 8805 	smlabb	r8, r1, r5, r8
            sum0 += cols_8b[3]*ksrc[23];
 80127d2:	f91c 6c02 	ldrsb.w	r6, [ip, #-2]
            sum0 += cols_8b[2]*ksrc[22];
 80127d6:	fb1e 3309 	smlabb	r3, lr, r9, r3
            sum1 += cols_8b[6]*ksrc[19];
 80127da:	9900      	ldr	r1, [sp, #0]
            sum0 += cols_8b[4]*ksrc[24];
 80127dc:	f91c 4c01 	ldrsb.w	r4, [ip, #-1]
            sum0 += cols_8b[3]*ksrc[23];
 80127e0:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum1 += cols_8b[6]*ksrc[19];
 80127e4:	f991 5012 	ldrsb.w	r5, [r1, #18]
            sum1 += cols_8b[4]*ksrc[22];
 80127e8:	f990 1010 	ldrsb.w	r1, [r0, #16]
            sum1 += cols_8b[6]*ksrc[19];
 80127ec:	fb1b 8805 	smlabb	r8, fp, r5, r8
            sum1 += cols_8b[5]*ksrc[23];
 80127f0:	f990 b011 	ldrsb.w	fp, [r0, #17]
            sum0 += cols_8b[4]*ksrc[24];
 80127f4:	fb11 3304 	smlabb	r3, r1, r4, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80127f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
            sum1 += cols_8b[2]*ksrc[20];
 80127fa:	fb1a 880e 	smlabb	r8, sl, lr, r8
            sum0 += cols_8b[4]*ksrc[24];
 80127fe:	ee07 3a90 	vmov	s15, r3
            sum1 += cols_8b[6]*ksrc[24];
 8012802:	f990 3012 	ldrsb.w	r3, [r0, #18]
            sum1 += cols_8b[3]*ksrc[21];
 8012806:	fb12 8807 	smlabb	r8, r2, r7, r8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801280a:	9a04      	ldr	r2, [sp, #16]
            sum0 = (float) sum0 * *scales;
 801280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012810:	9003      	str	r0, [sp, #12]
            sum1 += cols_8b[4]*ksrc[22];
 8012812:	fb19 8801 	smlabb	r8, r9, r1, r8
            sum0 += output_offset;
 8012816:	9932      	ldr	r1, [sp, #200]	; 0xc8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012818:	1b55      	subs	r5, r2, r5
            sum0 = (float) sum0 * *scales;
 801281a:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[5]*ksrc[23];
 801281e:	fb16 880b 	smlabb	r8, r6, fp, r8
            sum1 += cols_8b[6]*ksrc[24];
 8012822:	fb14 8803 	smlabb	r8, r4, r3, r8
            sum0 = (float) sum0 * *scales;
 8012826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            sum0 += output_offset;
 801282a:	ee17 3a90 	vmov	r3, s15
            sum1 = (float) sum1 * *scales;
 801282e:	ee07 8a90 	vmov	s15, r8
            sum0 += output_offset;
 8012832:	440b      	add	r3, r1
            sum0 = MAX(sum0, activation_min);
 8012834:	9934      	ldr	r1, [sp, #208]	; 0xd0
            sum1 = (float) sum1 * *scales;
 8012836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = MAX(sum0, activation_min);
 801283a:	428b      	cmp	r3, r1
 801283c:	bfb8      	it	lt
 801283e:	460b      	movlt	r3, r1
            sum0 = MIN(sum0, activation_max);
 8012840:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8012842:	428b      	cmp	r3, r1
 8012844:	bfa8      	it	ge
 8012846:	460b      	movge	r3, r1
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012848:	9908      	ldr	r1, [sp, #32]
 801284a:	546b      	strb	r3, [r5, r1]
            sum1 = (float) sum1 * *scales;
 801284c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
            sum1 += output_offset;
 801284e:	9932      	ldr	r1, [sp, #200]	; 0xc8
            sum1 = (float) sum1 * *scales;
 8012850:	ed13 7a01 	vldr	s14, [r3, #-4]
 8012854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801285c:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8012860:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8012862:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8012864:	428b      	cmp	r3, r1
 8012866:	bfb8      	it	lt
 8012868:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 801286a:	9935      	ldr	r1, [sp, #212]	; 0xd4
 801286c:	428b      	cmp	r3, r1
 801286e:	bfa8      	it	ge
 8012870:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8012872:	7013      	strb	r3, [r2, #0]
 8012874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012876:	18d3      	adds	r3, r2, r3
 8012878:	9304      	str	r3, [sp, #16]
        for (j = 0; j < output_x / 2; j++) {
 801287a:	9b07      	ldr	r3, [sp, #28]
 801287c:	4298      	cmp	r0, r3
 801287e:	f47f aec8 	bne.w	8012612 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x1de>
 8012882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012884:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012886:	4413      	add	r3, r2
 8012888:	930c      	str	r3, [sp, #48]	; 0x30
 801288a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (output_x & 1) {
 801288c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801288e:	3301      	adds	r3, #1
 8012890:	930d      	str	r3, [sp, #52]	; 0x34
 8012892:	2a00      	cmp	r2, #0
 8012894:	f000 80da 	beq.w	8012a4c <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x618>
            q31_t sum = bias[0] + biasR[0];
 8012898:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
            cols_8b += column_x + 4;
 801289a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
            q31_t sum = bias[0] + biasR[0];
 801289c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80128a0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80128a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80128a4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80128a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
            sum += cols_8b[0]*ksrc[0];
 80128aa:	f91c 5c19 	ldrsb.w	r5, [ip, #-25]
            q31_t sum = bias[0] + biasR[0];
 80128ae:	4413      	add	r3, r2
 80128b0:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 80128b2:	f996 4000 	ldrsb.w	r4, [r6]
            sum += cols_8b[1]*ksrc[1];
 80128b6:	f996 2001 	ldrsb.w	r2, [r6, #1]
            sum += cols_8b[0]*ksrc[0];
 80128ba:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 80128be:	f91c 5c18 	ldrsb.w	r5, [ip, #-24]
            sum += cols_8b[2]*ksrc[2];
 80128c2:	f996 4002 	ldrsb.w	r4, [r6, #2]
            sum += cols_8b[1]*ksrc[1];
 80128c6:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 80128ca:	f91c 5c17 	ldrsb.w	r5, [ip, #-23]
            sum += cols_8b[3]*ksrc[3];
 80128ce:	f996 2003 	ldrsb.w	r2, [r6, #3]
            sum += cols_8b[2]*ksrc[2];
 80128d2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 80128d6:	f91c 5c16 	ldrsb.w	r5, [ip, #-22]
            cols_8b += column_x + 4;
 80128da:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
            sum += cols_8b[4]*ksrc[4];
 80128dc:	f996 4004 	ldrsb.w	r4, [r6, #4]
            sum += cols_8b[3]*ksrc[3];
 80128e0:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 80128e4:	f91c 5c15 	ldrsb.w	r5, [ip, #-21]
            cols_8b += column_x + 4;
 80128e8:	19f0      	adds	r0, r6, r7
            sum += cols_8b[0]*ksrc[5];
 80128ea:	57f2      	ldrsb	r2, [r6, r7]
            sum += cols_8b[4]*ksrc[4];
 80128ec:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[5];
 80128f0:	f91c 5c14 	ldrsb.w	r5, [ip, #-20]
            sum += cols_8b[1]*ksrc[6];
 80128f4:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[5];
 80128f8:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[6];
 80128fc:	f91c 5c13 	ldrsb.w	r5, [ip, #-19]
            sum += cols_8b[2]*ksrc[7];
 8012900:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[6];
 8012904:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[7];
 8012908:	f91c 5c12 	ldrsb.w	r5, [ip, #-18]
            sum += cols_8b[3]*ksrc[8];
 801290c:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[7];
 8012910:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[8];
 8012914:	f91c 5c11 	ldrsb.w	r5, [ip, #-17]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8012918:	9a1e      	ldr	r2, [sp, #120]	; 0x78
            sum += cols_8b[4]*ksrc[9];
 801291a:	f990 e004 	ldrsb.w	lr, [r0, #4]
            sum += cols_8b[3]*ksrc[8];
 801291e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[10];
 8012922:	f916 4017 	ldrsb.w	r4, [r6, r7, lsl #1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8012926:	4416      	add	r6, r2
            sum += cols_8b[4]*ksrc[9];
 8012928:	f91c 5c10 	ldrsb.w	r5, [ip, #-16]
 801292c:	910e      	str	r1, [sp, #56]	; 0x38
            cols_8b += column_x + 4;
 801292e:	19c1      	adds	r1, r0, r7
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8012930:	960c      	str	r6, [sp, #48]	; 0x30
            sum += cols_8b[4]*ksrc[9];
 8012932:	fb1e 3305 	smlabb	r3, lr, r5, r3
            sum += cols_8b[0]*ksrc[10];
 8012936:	f91c 5c0f 	ldrsb.w	r5, [ip, #-15]
            sum += cols_8b[1]*ksrc[11];
 801293a:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[10];
 801293e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[11];
 8012942:	f91c 5c0e 	ldrsb.w	r5, [ip, #-14]
            sum += cols_8b[2]*ksrc[12];
 8012946:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[11];
 801294a:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[12];
 801294e:	f91c 2c0d 	ldrsb.w	r2, [ip, #-13]
            sum += cols_8b[3]*ksrc[13];
 8012952:	f991 6003 	ldrsb.w	r6, [r1, #3]
            sum += cols_8b[2]*ksrc[12];
 8012956:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[3]*ksrc[13];
 801295a:	f91c 2c0c 	ldrsb.w	r2, [ip, #-12]
            sum += cols_8b[4]*ksrc[14];
 801295e:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[13];
 8012962:	fb16 3602 	smlabb	r6, r6, r2, r3
            sum += cols_8b[4]*ksrc[14];
 8012966:	f91c 2c0b 	ldrsb.w	r2, [ip, #-11]
            cols_8b += column_x + 4;
 801296a:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[15];
 801296c:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[4]*ksrc[14];
 8012970:	fb14 6202 	smlabb	r2, r4, r2, r6
            sum += cols_8b[0]*ksrc[15];
 8012974:	f91c 4c0a 	ldrsb.w	r4, [ip, #-10]
            sum += cols_8b[1]*ksrc[16];
 8012978:	f993 5001 	ldrsb.w	r5, [r3, #1]
            sum += cols_8b[0]*ksrc[15];
 801297c:	fb10 2204 	smlabb	r2, r0, r4, r2
            sum += cols_8b[1]*ksrc[16];
 8012980:	f91c 0c09 	ldrsb.w	r0, [ip, #-9]
            sum += cols_8b[2]*ksrc[17];
 8012984:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[16];
 8012988:	fb15 2200 	smlabb	r2, r5, r0, r2
            sum += cols_8b[2]*ksrc[17];
 801298c:	f91c 5c08 	ldrsb.w	r5, [ip, #-8]
            sum += cols_8b[3]*ksrc[18];
 8012990:	f993 6003 	ldrsb.w	r6, [r3, #3]
            sum += cols_8b[2]*ksrc[17];
 8012994:	fb14 2505 	smlabb	r5, r4, r5, r2
            sum += cols_8b[3]*ksrc[18];
 8012998:	f91c 2c07 	ldrsb.w	r2, [ip, #-7]
            sum += cols_8b[4]*ksrc[19];
 801299c:	f993 0004 	ldrsb.w	r0, [r3, #4]
            cols_8b += column_x + 4;
 80129a0:	443b      	add	r3, r7
            sum += cols_8b[3]*ksrc[18];
 80129a2:	fb16 5402 	smlabb	r4, r6, r2, r5
            sum += cols_8b[4]*ksrc[19];
 80129a6:	f91c 2c06 	ldrsb.w	r2, [ip, #-6]
            sum += cols_8b[0]*ksrc[20];
 80129aa:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            sum += cols_8b[4]*ksrc[19];
 80129ae:	fb10 4202 	smlabb	r2, r0, r2, r4
            sum += cols_8b[0]*ksrc[20];
 80129b2:	f91c 4c05 	ldrsb.w	r4, [ip, #-5]
            sum += cols_8b[1]*ksrc[21];
 80129b6:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[20];
 80129ba:	fb15 2204 	smlabb	r2, r5, r4, r2
            sum += cols_8b[1]*ksrc[21];
 80129be:	f91c 5c04 	ldrsb.w	r5, [ip, #-4]
            sum += cols_8b[2]*ksrc[22];
 80129c2:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[21];
 80129c6:	fb10 2205 	smlabb	r2, r0, r5, r2
 80129ca:	9f15      	ldr	r7, [sp, #84]	; 0x54
            sum += cols_8b[2]*ksrc[22];
 80129cc:	f91c 5c03 	ldrsb.w	r5, [ip, #-3]
            sum += cols_8b[3]*ksrc[23];
 80129d0:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[22];
 80129d4:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[23];
 80129d8:	f91c 5c02 	ldrsb.w	r5, [ip, #-2]
            sum += cols_8b[4]*ksrc[24];
 80129dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
            sum += cols_8b[3]*ksrc[23];
 80129e0:	fb10 2205 	smlabb	r2, r0, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80129e4:	e9dd 610f 	ldrd	r6, r1, [sp, #60]	; 0x3c
 80129e8:	1a71      	subs	r1, r6, r1
 80129ea:	443e      	add	r6, r7
 80129ec:	960f      	str	r6, [sp, #60]	; 0x3c
            sum += cols_8b[4]*ksrc[24];
 80129ee:	f91c 5c01 	ldrsb.w	r5, [ip, #-1]
            sum = (float) sum * *scales;
 80129f2:	9831      	ldr	r0, [sp, #196]	; 0xc4
            sum += cols_8b[4]*ksrc[24];
 80129f4:	fb13 2205 	smlabb	r2, r3, r5, r2
            sum = (float) sum * *scales;
 80129f8:	ed10 7a01 	vldr	s14, [r0, #-4]
 80129fc:	ee07 2a90 	vmov	s15, r2
            sum += output_offset;
 8012a00:	9a32      	ldr	r2, [sp, #200]	; 0xc8
            sum = (float) sum * *scales;
 8012a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a0e:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8012a12:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8012a14:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8012a16:	4293      	cmp	r3, r2
 8012a18:	bfb8      	it	lt
 8012a1a:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8012a1c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	bfa8      	it	ge
 8012a22:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8012a24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012a26:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 8012a28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	f47f add5 	bne.w	80125dc <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x1a8>
        input++;
 8012a32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012a34:	f10c 0c19 	add.w	ip, ip, #25
    for (c = 0; c < input_ch; c++){
 8012a38:	9a20      	ldr	r2, [sp, #128]	; 0x80
        input++;
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	931a      	str	r3, [sp, #104]	; 0x68
    for (c = 0; c < input_ch; c++){
 8012a3e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8012a40:	4293      	cmp	r3, r2
 8012a42:	f47f ad92 	bne.w	801256a <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x136>
}
 8012a46:	b025      	add	sp, #148	; 0x94
 8012a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8012a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012a50:	4413      	add	r3, r2
 8012a52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012a54:	930c      	str	r3, [sp, #48]	; 0x30
 8012a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a58:	4413      	add	r3, r2
 8012a5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a60:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8012a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a64:	930e      	str	r3, [sp, #56]	; 0x38
 8012a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	f47f adb7 	bne.w	80125dc <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x1a8>
 8012a6e:	e7e0      	b.n	8012a32 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x5fe>
 8012a70:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 8012a72:	2200      	movs	r2, #0
 8012a74:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8012a76:	f806 3c02 	strb.w	r3, [r6, #-2]
        *cols_8b++ = PAD8;
 8012a7a:	f806 3c01 	strb.w	r3, [r6, #-1]
 8012a7e:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 8012a80:	b292      	uxth	r2, r2
 8012a82:	4297      	cmp	r7, r2
 8012a84:	daf6      	bge.n	8012a74 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x640>
 8012a86:	e52e      	b.n	80124e6 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0xb2>

08012a88 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8012a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8c:	b09b      	sub	sp, #108	; 0x6c
 8012a8e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 8012a92:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 8012a96:	9112      	str	r1, [sp, #72]	; 0x48
 8012a98:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8012a9c:	9011      	str	r0, [sp, #68]	; 0x44
{
 8012a9e:	9204      	str	r2, [sp, #16]
    for (i = 0; i < output_y; i++) {
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	f000 839d 	beq.w	80131e0 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x758>
        for (j = 0; j < output_x / 2; j++) {
 8012aa6:	0848      	lsrs	r0, r1, #1
 8012aa8:	1e4b      	subs	r3, r1, #1
 8012aaa:	0054      	lsls	r4, r2, #1
 8012aac:	2500      	movs	r5, #0
 8012aae:	0046      	lsls	r6, r0, #1
 8012ab0:	9014      	str	r0, [sp, #80]	; 0x50
 8012ab2:	9405      	str	r4, [sp, #20]
 8012ab4:	9618      	str	r6, [sp, #96]	; 0x60
 8012ab6:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8012ab8:	950e      	str	r5, [sp, #56]	; 0x38
 8012aba:	fb06 f303 	mul.w	r3, r6, r3
    for (i = 0; i < output_y; i++) {
 8012abe:	950d      	str	r5, [sp, #52]	; 0x34
 8012ac0:	9319      	str	r3, [sp, #100]	; 0x64
 8012ac2:	1903      	adds	r3, r0, r4
 8012ac4:	f001 0001 	and.w	r0, r1, #1
 8012ac8:	fb06 f101 	mul.w	r1, r6, r1
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	9013      	str	r0, [sp, #76]	; 0x4c
 8012ad0:	9316      	str	r3, [sp, #88]	; 0x58
 8012ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012ad4:	9115      	str	r1, [sp, #84]	; 0x54
 8012ad6:	4433      	add	r3, r6
 8012ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ada:	0093      	lsls	r3, r2, #2
 8012adc:	9317      	str	r3, [sp, #92]	; 0x5c
 8012ade:	4253      	negs	r3, r2
 8012ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8012ae2:	0073      	lsls	r3, r6, #1
 8012ae4:	930b      	str	r3, [sp, #44]	; 0x2c
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            sum += cols_8b[5]*ksrc[5];
            sum += cols_8b[6]*ksrc[6];
            cols_8b += column_x + 6;
 8012ae6:	1d93      	adds	r3, r2, #6
 8012ae8:	9310      	str	r3, [sp, #64]	; 0x40
        for (j = 0; j < output_x / 2; j++) {
 8012aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f000 8206 	beq.w	8012efe <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x476>
 8012af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012af4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8012af6:	9904      	ldr	r1, [sp, #16]
 8012af8:	fb02 3303 	mla	r3, r2, r3, r3
 8012afc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8012afe:	eb02 0e01 	add.w	lr, r2, r1
 8012b02:	9905      	ldr	r1, [sp, #20]
 8012b04:	9308      	str	r3, [sp, #32]
 8012b06:	440a      	add	r2, r1
 8012b08:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012b0a:	9201      	str	r2, [sp, #4]
 8012b0c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8012b0e:	eb02 0c01 	add.w	ip, r2, r1
 8012b12:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8012b14:	1a9b      	subs	r3, r3, r2
 8012b16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012b18:	9307      	str	r3, [sp, #28]
 8012b1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8012b1c:	4413      	add	r3, r2
 8012b1e:	9306      	str	r3, [sp, #24]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b22:	9302      	str	r3, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8012b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	6811      	ldr	r1, [r2, #0]
 8012b2e:	eb0e 0006 	add.w	r0, lr, r6
            sum0 += cols_8b[0]*ksrc[0];
 8012b32:	f99b 5000 	ldrsb.w	r5, [fp]
 8012b36:	9f01      	ldr	r7, [sp, #4]
            q31_t sum0 = bias[0] + biasR[0];
 8012b38:	4419      	add	r1, r3
 8012b3a:	9a04      	ldr	r2, [sp, #16]
            sum0 += cols_8b[0]*ksrc[0];
 8012b3c:	f91e 3006 	ldrsb.w	r3, [lr, r6]
 8012b40:	f10e 0e02 	add.w	lr, lr, #2
 8012b44:	18bc      	adds	r4, r7, r2
            sum0 += cols_8b[1]*ksrc[1];
 8012b46:	f99b 6001 	ldrsb.w	r6, [fp, #1]
            sum1 += cols_8b[1]*ksrc[0];
 8012b4a:	f990 7001 	ldrsb.w	r7, [r0, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8012b4e:	fb13 1305 	smlabb	r3, r3, r5, r1
            sum1 += cols_8b[2]*ksrc[1];
 8012b52:	f990 8002 	ldrsb.w	r8, [r0, #2]
 8012b56:	4462      	add	r2, ip
            sum1 += cols_8b[1]*ksrc[0];
 8012b58:	fb15 1107 	smlabb	r1, r5, r7, r1
            sum1 += cols_8b[3]*ksrc[2];
 8012b5c:	f990 9003 	ldrsb.w	r9, [r0, #3]
            sum0 += cols_8b[1]*ksrc[1];
 8012b60:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[2];
 8012b64:	f99b 7002 	ldrsb.w	r7, [fp, #2]
            sum1 += cols_8b[2]*ksrc[1];
 8012b68:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[3];
 8012b6c:	f990 a004 	ldrsb.w	sl, [r0, #4]
            sum0 += cols_8b[2]*ksrc[2];
 8012b70:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[3];
 8012b74:	f99b 8003 	ldrsb.w	r8, [fp, #3]
            sum1 += cols_8b[3]*ksrc[2];
 8012b78:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum1 += cols_8b[5]*ksrc[4];
 8012b7c:	f990 5005 	ldrsb.w	r5, [r0, #5]
            sum0 += cols_8b[3]*ksrc[3];
 8012b80:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[4];
 8012b84:	f99b 9004 	ldrsb.w	r9, [fp, #4]
            sum1 += cols_8b[4]*ksrc[3];
 8012b88:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum1 += cols_8b[6]*ksrc[5];
 8012b8c:	f990 6006 	ldrsb.w	r6, [r0, #6]
            sum0 += cols_8b[4]*ksrc[4];
 8012b90:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum0 += cols_8b[5]*ksrc[5];
 8012b94:	f99b a005 	ldrsb.w	sl, [fp, #5]
            sum1 += cols_8b[5]*ksrc[4];
 8012b98:	fb19 1105 	smlabb	r1, r9, r5, r1
            sum1 += cols_8b[1]*ksrc[7];
 8012b9c:	f99e 7005 	ldrsb.w	r7, [lr, #5]
            sum0 += cols_8b[5]*ksrc[5];
 8012ba0:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum0 += cols_8b[6]*ksrc[6];
 8012ba4:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum1 += cols_8b[6]*ksrc[5];
 8012ba8:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum1 += cols_8b[7]*ksrc[6];
 8012bac:	f990 a007 	ldrsb.w	sl, [r0, #7]
            sum0 += cols_8b[6]*ksrc[6];
 8012bb0:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum0 += cols_8b[0]*ksrc[7];
 8012bb4:	f99b 0007 	ldrsb.w	r0, [fp, #7]
 8012bb8:	f99e 6004 	ldrsb.w	r6, [lr, #4]
            sum1 += cols_8b[7]*ksrc[6];
 8012bbc:	fb15 110a 	smlabb	r1, r5, sl, r1
            sum1 += cols_8b[2]*ksrc[8];
 8012bc0:	f99e 8006 	ldrsb.w	r8, [lr, #6]
            sum0 += cols_8b[0]*ksrc[7];
 8012bc4:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[8];
 8012bc8:	f99b 6008 	ldrsb.w	r6, [fp, #8]
            sum1 += cols_8b[1]*ksrc[7];
 8012bcc:	fb10 1107 	smlabb	r1, r0, r7, r1
            sum1 += cols_8b[3]*ksrc[9];
 8012bd0:	f99e 9007 	ldrsb.w	r9, [lr, #7]
            sum0 += cols_8b[1]*ksrc[8];
 8012bd4:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[9];
 8012bd8:	f99b 7009 	ldrsb.w	r7, [fp, #9]
            sum1 += cols_8b[2]*ksrc[8];
 8012bdc:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[10];
 8012be0:	f99e 5008 	ldrsb.w	r5, [lr, #8]
            sum0 += cols_8b[2]*ksrc[9];
 8012be4:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[10];
 8012be8:	f99b 800a 	ldrsb.w	r8, [fp, #10]
            sum1 += cols_8b[3]*ksrc[9];
 8012bec:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum0 += cols_8b[3]*ksrc[10];
 8012bf0:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[11];
 8012bf4:	f99b 900b 	ldrsb.w	r9, [fp, #11]
            sum1 += cols_8b[4]*ksrc[10];
 8012bf8:	fb18 1105 	smlabb	r1, r8, r5, r1
            sum1 += cols_8b[5]*ksrc[11];
 8012bfc:	f99e a009 	ldrsb.w	sl, [lr, #9]
            sum0 += cols_8b[4]*ksrc[11];
 8012c00:	fb15 3309 	smlabb	r3, r5, r9, r3
            sum0 += cols_8b[5]*ksrc[12];
 8012c04:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum0 += cols_8b[0]*ksrc[14];
 8012c08:	9f01      	ldr	r7, [sp, #4]
            sum1 += cols_8b[5]*ksrc[11];
 8012c0a:	fb19 110a 	smlabb	r1, r9, sl, r1
            sum1 += cols_8b[6]*ksrc[12];
 8012c0e:	f99e 000a 	ldrsb.w	r0, [lr, #10]
            sum0 += cols_8b[5]*ksrc[12];
 8012c12:	fb1a 3305 	smlabb	r3, sl, r5, r3
            sum0 += cols_8b[6]*ksrc[13];
 8012c16:	f99b a00d 	ldrsb.w	sl, [fp, #13]
            sum0 += cols_8b[0]*ksrc[14];
 8012c1a:	f997 600c 	ldrsb.w	r6, [r7, #12]
            sum1 += cols_8b[6]*ksrc[12];
 8012c1e:	fb15 1100 	smlabb	r1, r5, r0, r1
            sum0 += cols_8b[6]*ksrc[13];
 8012c22:	fb10 330a 	smlabb	r3, r0, sl, r3
            sum1 += cols_8b[7]*ksrc[13];
 8012c26:	f99e 500b 	ldrsb.w	r5, [lr, #11]
            sum0 += cols_8b[0]*ksrc[14];
 8012c2a:	f99b 000e 	ldrsb.w	r0, [fp, #14]
            sum1 += cols_8b[1]*ksrc[14];
 8012c2e:	f997 800d 	ldrsb.w	r8, [r7, #13]
            sum1 += cols_8b[7]*ksrc[13];
 8012c32:	fb1a 1105 	smlabb	r1, sl, r5, r1
            sum0 += cols_8b[0]*ksrc[14];
 8012c36:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[15];
 8012c3a:	f99b 600f 	ldrsb.w	r6, [fp, #15]
            sum1 += cols_8b[2]*ksrc[15];
 8012c3e:	f997 900e 	ldrsb.w	r9, [r7, #14]
            sum1 += cols_8b[1]*ksrc[14];
 8012c42:	fb10 1108 	smlabb	r1, r0, r8, r1
            sum0 += cols_8b[1]*ksrc[15];
 8012c46:	fb18 3306 	smlabb	r3, r8, r6, r3
            sum0 += cols_8b[2]*ksrc[16];
 8012c4a:	f99b 8010 	ldrsb.w	r8, [fp, #16]
            sum1 += cols_8b[3]*ksrc[16];
 8012c4e:	f997 a00f 	ldrsb.w	sl, [r7, #15]
            sum1 += cols_8b[2]*ksrc[15];
 8012c52:	fb16 1109 	smlabb	r1, r6, r9, r1
            sum0 += cols_8b[2]*ksrc[16];
 8012c56:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[3]*ksrc[17];
 8012c5a:	f99b 9011 	ldrsb.w	r9, [fp, #17]
            sum1 += cols_8b[2]*ksrc[15];
 8012c5e:	4638      	mov	r0, r7
            sum1 += cols_8b[4]*ksrc[17];
 8012c60:	f997 5010 	ldrsb.w	r5, [r7, #16]
            sum1 += cols_8b[3]*ksrc[16];
 8012c64:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[4]*ksrc[18];
 8012c68:	f99b 8012 	ldrsb.w	r8, [fp, #18]
            sum0 += cols_8b[3]*ksrc[17];
 8012c6c:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[6]*ksrc[19];
 8012c70:	f990 6012 	ldrsb.w	r6, [r0, #18]
            sum1 += cols_8b[4]*ksrc[17];
 8012c74:	fb19 1705 	smlabb	r7, r9, r5, r1
            sum1 += cols_8b[5]*ksrc[18];
 8012c78:	f990 9011 	ldrsb.w	r9, [r0, #17]
            sum0 += cols_8b[4]*ksrc[18];
 8012c7c:	fb15 3308 	smlabb	r3, r5, r8, r3
            sum0 += cols_8b[5]*ksrc[19];
 8012c80:	f99b 1013 	ldrsb.w	r1, [fp, #19]
            sum1 += cols_8b[5]*ksrc[18];
 8012c84:	fb18 7809 	smlabb	r8, r8, r9, r7
            sum0 += cols_8b[6]*ksrc[20];
 8012c88:	f99b 7014 	ldrsb.w	r7, [fp, #20]
            sum0 += cols_8b[5]*ksrc[19];
 8012c8c:	fb19 3501 	smlabb	r5, r9, r1, r3
            sum0 += cols_8b[0]*ksrc[21];
 8012c90:	f994 3012 	ldrsb.w	r3, [r4, #18]
            sum1 += cols_8b[6]*ksrc[19];
 8012c94:	fb11 8106 	smlabb	r1, r1, r6, r8
 8012c98:	3002      	adds	r0, #2
            sum0 += cols_8b[6]*ksrc[20];
 8012c9a:	fb16 5507 	smlabb	r5, r6, r7, r5
            sum0 += cols_8b[0]*ksrc[21];
 8012c9e:	f99b 6015 	ldrsb.w	r6, [fp, #21]
            sum0 += cols_8b[1]*ksrc[22];
 8012ca2:	f99b a016 	ldrsb.w	sl, [fp, #22]
            sum0 += cols_8b[0]*ksrc[21];
 8012ca6:	fb13 5306 	smlabb	r3, r3, r6, r5
            sum1 += cols_8b[7]*ksrc[20];
 8012caa:	f990 5011 	ldrsb.w	r5, [r0, #17]
            sum0 += cols_8b[0]*ksrc[21];
 8012cae:	9603      	str	r6, [sp, #12]
            sum1 += cols_8b[7]*ksrc[20];
 8012cb0:	fb17 1505 	smlabb	r5, r7, r5, r1
            sum1 += cols_8b[1]*ksrc[21];
 8012cb4:	f994 6013 	ldrsb.w	r6, [r4, #19]
 8012cb8:	9001      	str	r0, [sp, #4]
 8012cba:	9803      	ldr	r0, [sp, #12]
            sum0 += cols_8b[1]*ksrc[22];
 8012cbc:	fb16 330a 	smlabb	r3, r6, sl, r3
            sum1 += cols_8b[2]*ksrc[22];
 8012cc0:	f994 9014 	ldrsb.w	r9, [r4, #20]
            sum0 += cols_8b[2]*ksrc[23];
 8012cc4:	f99b 8017 	ldrsb.w	r8, [fp, #23]
            sum1 += cols_8b[1]*ksrc[21];
 8012cc8:	fb10 5006 	smlabb	r0, r0, r6, r5
            sum1 += cols_8b[3]*ksrc[23];
 8012ccc:	f994 7015 	ldrsb.w	r7, [r4, #21]
            sum0 += cols_8b[3]*ksrc[24];
 8012cd0:	f99b 1018 	ldrsb.w	r1, [fp, #24]
            sum0 += cols_8b[2]*ksrc[23];
 8012cd4:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum1 += cols_8b[2]*ksrc[22];
 8012cd8:	fb1a 0009 	smlabb	r0, sl, r9, r0
            sum1 += cols_8b[4]*ksrc[24];
 8012cdc:	f994 6016 	ldrsb.w	r6, [r4, #22]
            sum0 += cols_8b[3]*ksrc[24];
 8012ce0:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum0 += cols_8b[4]*ksrc[25];
 8012ce4:	f99b 5019 	ldrsb.w	r5, [fp, #25]
            sum1 += cols_8b[3]*ksrc[23];
 8012ce8:	fb18 0007 	smlabb	r0, r8, r7, r0
            sum1 += cols_8b[5]*ksrc[25];
 8012cec:	f994 a017 	ldrsb.w	sl, [r4, #23]
            sum0 += cols_8b[5]*ksrc[26];
 8012cf0:	f99b 901a 	ldrsb.w	r9, [fp, #26]
            sum0 += cols_8b[4]*ksrc[25];
 8012cf4:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum1 += cols_8b[4]*ksrc[24];
 8012cf8:	fb11 0006 	smlabb	r0, r1, r6, r0
            sum1 += cols_8b[6]*ksrc[26];
 8012cfc:	f994 8018 	ldrsb.w	r8, [r4, #24]
            sum0 += cols_8b[6]*ksrc[27];
 8012d00:	f99b 701b 	ldrsb.w	r7, [fp, #27]
            sum0 += cols_8b[5]*ksrc[26];
 8012d04:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[5]*ksrc[25];
 8012d08:	fb15 050a 	smlabb	r5, r5, sl, r0
            sum0 += cols_8b[0]*ksrc[28];
 8012d0c:	f99c 1018 	ldrsb.w	r1, [ip, #24]
 8012d10:	f99b 601c 	ldrsb.w	r6, [fp, #28]
            sum0 += cols_8b[6]*ksrc[27];
 8012d14:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum1 += cols_8b[6]*ksrc[26];
 8012d18:	fb19 5508 	smlabb	r5, r9, r8, r5
            sum1 += cols_8b[7]*ksrc[27];
 8012d1c:	f994 4019 	ldrsb.w	r4, [r4, #25]
            sum0 += cols_8b[1]*ksrc[29];
 8012d20:	f99b 001d 	ldrsb.w	r0, [fp, #29]
            sum0 += cols_8b[0]*ksrc[28];
 8012d24:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum1 += cols_8b[7]*ksrc[27];
 8012d28:	fb17 5404 	smlabb	r4, r7, r4, r5
            sum1 += cols_8b[1]*ksrc[28];
 8012d2c:	f99c 1019 	ldrsb.w	r1, [ip, #25]
            sum1 += cols_8b[2]*ksrc[29];
 8012d30:	f99c 801a 	ldrsb.w	r8, [ip, #26]
            sum0 += cols_8b[2]*ksrc[30];
 8012d34:	f99b a01e 	ldrsb.w	sl, [fp, #30]
            sum0 += cols_8b[1]*ksrc[29];
 8012d38:	fb11 3300 	smlabb	r3, r1, r0, r3
            sum1 += cols_8b[1]*ksrc[28];
 8012d3c:	fb16 4401 	smlabb	r4, r6, r1, r4
            sum0 += cols_8b[3]*ksrc[31];
 8012d40:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum1 += cols_8b[3]*ksrc[30];
 8012d44:	f99c 101b 	ldrsb.w	r1, [ip, #27]
            sum0 += cols_8b[2]*ksrc[30];
 8012d48:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum1 += cols_8b[2]*ksrc[29];
 8012d4c:	fb10 4408 	smlabb	r4, r0, r8, r4
            sum1 += cols_8b[4]*ksrc[31];
 8012d50:	f99c 601c 	ldrsb.w	r6, [ip, #28]
            sum0 += cols_8b[4]*ksrc[32];
 8012d54:	f99b 0020 	ldrsb.w	r0, [fp, #32]
            sum0 += cols_8b[3]*ksrc[31];
 8012d58:	fb11 3305 	smlabb	r3, r1, r5, r3
            sum1 += cols_8b[3]*ksrc[30];
 8012d5c:	fb1a 4101 	smlabb	r1, sl, r1, r4
            sum0 += cols_8b[5]*ksrc[33];
 8012d60:	f99b 8021 	ldrsb.w	r8, [fp, #33]	; 0x21
            sum1 += cols_8b[5]*ksrc[32];
 8012d64:	f99c 401d 	ldrsb.w	r4, [ip, #29]
            sum0 += cols_8b[4]*ksrc[32];
 8012d68:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum1 += cols_8b[4]*ksrc[31];
 8012d6c:	fb15 1106 	smlabb	r1, r5, r6, r1
            sum1 += cols_8b[6]*ksrc[33];
 8012d70:	f99c 501e 	ldrsb.w	r5, [ip, #30]
            sum0 += cols_8b[6]*ksrc[34];
 8012d74:	f99b 6022 	ldrsb.w	r6, [fp, #34]	; 0x22
            sum0 += cols_8b[5]*ksrc[33];
 8012d78:	fb14 3308 	smlabb	r3, r4, r8, r3
            sum1 += cols_8b[5]*ksrc[32];
 8012d7c:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[0]*ksrc[35];
 8012d80:	f992 701e 	ldrsb.w	r7, [r2, #30]
 8012d84:	f99b 4023 	ldrsb.w	r4, [fp, #35]	; 0x23
            sum0 += cols_8b[6]*ksrc[34];
 8012d88:	fb15 3306 	smlabb	r3, r5, r6, r3
            sum1 += cols_8b[6]*ksrc[33];
 8012d8c:	fb18 1505 	smlabb	r5, r8, r5, r1
            sum1 += cols_8b[7]*ksrc[34];
 8012d90:	f99c 801f 	ldrsb.w	r8, [ip, #31]
            sum1 += cols_8b[1]*ksrc[35];
 8012d94:	f992 901f 	ldrsb.w	r9, [r2, #31]
            sum0 += cols_8b[0]*ksrc[35];
 8012d98:	fb17 3304 	smlabb	r3, r7, r4, r3
            sum0 += cols_8b[1]*ksrc[36];
 8012d9c:	f99b 0024 	ldrsb.w	r0, [fp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[34];
 8012da0:	fb16 5808 	smlabb	r8, r6, r8, r5
            sum1 += cols_8b[2]*ksrc[36];
 8012da4:	f992 7020 	ldrsb.w	r7, [r2, #32]
            sum0 += cols_8b[2]*ksrc[37];
 8012da8:	f99b 1025 	ldrsb.w	r1, [fp, #37]	; 0x25
            sum1 += cols_8b[1]*ksrc[35];
 8012dac:	fb14 8609 	smlabb	r6, r4, r9, r8
            sum0 += cols_8b[1]*ksrc[36];
 8012db0:	fb19 3300 	smlabb	r3, r9, r0, r3
            sum1 += cols_8b[3]*ksrc[37];
 8012db4:	f992 5021 	ldrsb.w	r5, [r2, #33]	; 0x21
            sum0 += cols_8b[3]*ksrc[38];
 8012db8:	f99b a026 	ldrsb.w	sl, [fp, #38]	; 0x26
            sum1 += cols_8b[2]*ksrc[36];
 8012dbc:	fb10 6407 	smlabb	r4, r0, r7, r6
            sum0 += cols_8b[2]*ksrc[37];
 8012dc0:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum1 += cols_8b[4]*ksrc[38];
 8012dc4:	f992 9022 	ldrsb.w	r9, [r2, #34]	; 0x22
            sum0 += cols_8b[4]*ksrc[39];
 8012dc8:	f99b 8027 	ldrsb.w	r8, [fp, #39]	; 0x27
            sum1 += cols_8b[3]*ksrc[37];
 8012dcc:	fb11 4005 	smlabb	r0, r1, r5, r4
            sum0 += cols_8b[3]*ksrc[38];
 8012dd0:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum1 += cols_8b[5]*ksrc[39];
 8012dd4:	f992 7023 	ldrsb.w	r7, [r2, #35]	; 0x23
            sum1 += cols_8b[4]*ksrc[38];
 8012dd8:	fb1a 0109 	smlabb	r1, sl, r9, r0
            sum0 += cols_8b[5]*ksrc[40];
 8012ddc:	f99b 6028 	ldrsb.w	r6, [fp, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[39];
 8012de0:	fb19 3308 	smlabb	r3, r9, r8, r3
 8012de4:	9805      	ldr	r0, [sp, #20]
            sum1 += cols_8b[6]*ksrc[40];
 8012de6:	f992 5024 	ldrsb.w	r5, [r2, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[39];
 8012dea:	fb18 1107 	smlabb	r1, r8, r7, r1
 8012dee:	4460      	add	r0, ip
            sum0 += cols_8b[6]*ksrc[41];
 8012df0:	f99b 4029 	ldrsb.w	r4, [fp, #41]	; 0x29
            sum0 += cols_8b[5]*ksrc[40];
 8012df4:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum1 += cols_8b[7]*ksrc[41];
 8012df8:	f992 9025 	ldrsb.w	r9, [r2, #37]	; 0x25
            sum0 += cols_8b[0]*ksrc[42];
 8012dfc:	f990 a024 	ldrsb.w	sl, [r0, #36]	; 0x24
            sum1 += cols_8b[6]*ksrc[40];
 8012e00:	fb16 1105 	smlabb	r1, r6, r5, r1
            sum0 += cols_8b[0]*ksrc[42];
 8012e04:	f99b 202a 	ldrsb.w	r2, [fp, #42]	; 0x2a
            sum0 += cols_8b[6]*ksrc[41];
 8012e08:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[42];
 8012e0c:	f990 8025 	ldrsb.w	r8, [r0, #37]	; 0x25
            sum1 += cols_8b[7]*ksrc[41];
 8012e10:	fb14 1109 	smlabb	r1, r4, r9, r1
            sum0 += cols_8b[0]*ksrc[42];
 8012e14:	fb1a 3302 	smlabb	r3, sl, r2, r3
            sum0 += cols_8b[1]*ksrc[43];
 8012e18:	f99b a02b 	ldrsb.w	sl, [fp, #43]	; 0x2b
            sum1 += cols_8b[2]*ksrc[43];
 8012e1c:	f990 6026 	ldrsb.w	r6, [r0, #38]	; 0x26
            sum1 += cols_8b[1]*ksrc[42];
 8012e20:	fb12 1108 	smlabb	r1, r2, r8, r1
            sum0 += cols_8b[2]*ksrc[44];
 8012e24:	f99b 702c 	ldrsb.w	r7, [fp, #44]	; 0x2c
            sum0 += cols_8b[1]*ksrc[43];
 8012e28:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum0 = (float) sum0 * *scales;
 8012e2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
            sum1 += cols_8b[2]*ksrc[43];
 8012e2e:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum0 += cols_8b[3]*ksrc[45];
 8012e32:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum0 += cols_8b[2]*ksrc[44];
 8012e36:	fb16 3307 	smlabb	r3, r6, r7, r3
            sum0 = (float) sum0 * *scales;
 8012e3a:	edd4 7a00 	vldr	s15, [r4]
 8012e3e:	f10c 0c02 	add.w	ip, ip, #2
            sum1 += cols_8b[3]*ksrc[44];
 8012e42:	f990 4027 	ldrsb.w	r4, [r0, #39]	; 0x27
            sum1 += cols_8b[4]*ksrc[45];
 8012e46:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[46];
 8012e4a:	f99b 902e 	ldrsb.w	r9, [fp, #46]	; 0x2e
            sum0 += cols_8b[3]*ksrc[45];
 8012e4e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum1 += cols_8b[5]*ksrc[46];
 8012e52:	f990 6029 	ldrsb.w	r6, [r0, #41]	; 0x29
            sum1 += cols_8b[3]*ksrc[44];
 8012e56:	fb17 1104 	smlabb	r1, r7, r4, r1
            sum0 += cols_8b[5]*ksrc[47];
 8012e5a:	f99b 802f 	ldrsb.w	r8, [fp, #47]	; 0x2f
            sum0 += cols_8b[4]*ksrc[46];
 8012e5e:	fb12 3309 	smlabb	r3, r2, r9, r3
            sum1 += cols_8b[6]*ksrc[47];
 8012e62:	f990 a02a 	ldrsb.w	sl, [r0, #42]	; 0x2a
            sum1 += cols_8b[4]*ksrc[45];
 8012e66:	fb15 1102 	smlabb	r1, r5, r2, r1
            sum0 += cols_8b[6]*ksrc[48];
 8012e6a:	f99b 4030 	ldrsb.w	r4, [fp, #48]	; 0x30
            sum0 += cols_8b[5]*ksrc[47];
 8012e6e:	fb16 3308 	smlabb	r3, r6, r8, r3
            sum1 += cols_8b[5]*ksrc[46];
 8012e72:	fb19 1106 	smlabb	r1, r9, r6, r1
            sum1 += cols_8b[7]*ksrc[48];
 8012e76:	f990 002b 	ldrsb.w	r0, [r0, #43]	; 0x2b
            sum0 += cols_8b[6]*ksrc[48];
 8012e7a:	fb1a 3304 	smlabb	r3, sl, r4, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012e7e:	9a02      	ldr	r2, [sp, #8]
            sum1 += cols_8b[6]*ksrc[47];
 8012e80:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[6]*ksrc[48];
 8012e84:	ee07 3a10 	vmov	s14, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012e88:	9b08      	ldr	r3, [sp, #32]
            sum1 += cols_8b[7]*ksrc[48];
 8012e8a:	fb14 1100 	smlabb	r1, r4, r0, r1
            sum0 = (float) sum0 * *scales;
 8012e8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012e92:	1ad7      	subs	r7, r2, r3
            sum0 = (float) sum0 * *scales;
 8012e94:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 = (float) sum1 * *scales;
 8012e98:	ee07 1a90 	vmov	s15, r1
            sum0 += output_offset;
 8012e9c:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 8012e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 8012ea2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012ea6:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 8012eaa:	440b      	add	r3, r1
            sum0 = MAX(sum0, activation_min);
 8012eac:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8012eae:	428b      	cmp	r3, r1
 8012eb0:	bfb8      	it	lt
 8012eb2:	460b      	movlt	r3, r1
            sum0 = MIN(sum0, activation_max);
 8012eb4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012eb6:	428b      	cmp	r3, r1
 8012eb8:	bfa8      	it	ge
 8012eba:	460b      	movge	r3, r1
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012ebc:	9907      	ldr	r1, [sp, #28]
 8012ebe:	547b      	strb	r3, [r7, r1]
            sum1 = (float) sum1 * *scales;
 8012ec0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012ec2:	ed93 7a00 	vldr	s14, [r3]
            sum1 += output_offset;
 8012ec6:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 8012ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ed0:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8012ed4:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8012ed6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8012ed8:	428b      	cmp	r3, r1
 8012eda:	bfb8      	it	lt
 8012edc:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8012ede:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012ee0:	428b      	cmp	r3, r1
 8012ee2:	bfa8      	it	ge
 8012ee4:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8012ee6:	7013      	strb	r3, [r2, #0]
 8012ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012eea:	18d3      	adds	r3, r2, r3
 8012eec:	9302      	str	r3, [sp, #8]
        for (j = 0; j < output_x / 2; j++) {
 8012eee:	9b06      	ldr	r3, [sp, #24]
 8012ef0:	4563      	cmp	r3, ip
 8012ef2:	f47f ae17 	bne.w	8012b24 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x9c>
 8012ef6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8012ef8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012efa:	4413      	add	r3, r2
 8012efc:	932a      	str	r3, [sp, #168]	; 0xa8
 8012efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (output_x & 1) {
 8012f00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012f02:	3301      	adds	r3, #1
 8012f04:	930d      	str	r3, [sp, #52]	; 0x34
 8012f06:	2a00      	cmp	r2, #0
 8012f08:	f000 816d 	beq.w	80131e6 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x75e>
            q31_t sum = bias[0] + biasR[0];
 8012f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
            cols_8b += column_x + 6;
 8012f0e:	9e10      	ldr	r6, [sp, #64]	; 0x40
            q31_t sum = bias[0] + biasR[0];
 8012f10:	6813      	ldr	r3, [r2, #0]
 8012f12:	990e      	ldr	r1, [sp, #56]	; 0x38
            cols_8b += column_x + 6;
 8012f14:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8012f16:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8012f18:	1990      	adds	r0, r2, r6
            q31_t sum = bias[0] + biasR[0];
 8012f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f1c:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8012f1e:	f99b 5000 	ldrsb.w	r5, [fp]
            q31_t sum = bias[0] + biasR[0];
 8012f22:	6812      	ldr	r2, [r2, #0]
 8012f24:	910e      	str	r1, [sp, #56]	; 0x38
            sum += cols_8b[0]*ksrc[0];
 8012f26:	992a      	ldr	r1, [sp, #168]	; 0xa8
            q31_t sum = bias[0] + biasR[0];
 8012f28:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 8012f2a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[0]*ksrc[0];
 8012f2c:	f991 4000 	ldrsb.w	r4, [r1]
            sum += cols_8b[2]*ksrc[9];
            sum += cols_8b[3]*ksrc[10];
            sum += cols_8b[4]*ksrc[11];
            sum += cols_8b[5]*ksrc[12];
            sum += cols_8b[6]*ksrc[13];
            cols_8b += column_x + 6;
 8012f30:	1981      	adds	r1, r0, r6
            sum += cols_8b[1]*ksrc[1];
 8012f32:	f992 2001 	ldrsb.w	r2, [r2, #1]
            sum += cols_8b[0]*ksrc[0];
 8012f36:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8012f3a:	f99b 5001 	ldrsb.w	r5, [fp, #1]
            sum += cols_8b[2]*ksrc[2];
 8012f3e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[1]*ksrc[1];
 8012f40:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8012f44:	f99b 5002 	ldrsb.w	r5, [fp, #2]
 8012f48:	f994 4002 	ldrsb.w	r4, [r4, #2]
            sum += cols_8b[3]*ksrc[3];
 8012f4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 8012f4e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 8012f52:	f99b 5003 	ldrsb.w	r5, [fp, #3]
 8012f56:	f992 2003 	ldrsb.w	r2, [r2, #3]
            sum += cols_8b[4]*ksrc[4];
 8012f5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[3];
 8012f5c:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8012f60:	f99b 5004 	ldrsb.w	r5, [fp, #4]
 8012f64:	f994 4004 	ldrsb.w	r4, [r4, #4]
            sum += cols_8b[5]*ksrc[5];
 8012f68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[4]*ksrc[4];
 8012f6a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 8012f6e:	f99b 5005 	ldrsb.w	r5, [fp, #5]
 8012f72:	f992 2005 	ldrsb.w	r2, [r2, #5]
            sum += cols_8b[6]*ksrc[6];
 8012f76:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[5]*ksrc[5];
 8012f78:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8012f7c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[6];
 8012f7e:	f994 4006 	ldrsb.w	r4, [r4, #6]
            sum += cols_8b[0]*ksrc[7];
 8012f82:	4617      	mov	r7, r2
            sum += cols_8b[6]*ksrc[6];
 8012f84:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum += cols_8b[0]*ksrc[7];
 8012f88:	57ba      	ldrsb	r2, [r7, r6]
            sum += cols_8b[6]*ksrc[6];
 8012f8a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8012f8e:	f99b 5007 	ldrsb.w	r5, [fp, #7]
            sum += cols_8b[1]*ksrc[8];
 8012f92:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[7];
 8012f96:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 8012f9a:	f99b 5008 	ldrsb.w	r5, [fp, #8]
            sum += cols_8b[2]*ksrc[9];
 8012f9e:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[8];
 8012fa2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 8012fa6:	f99b 5009 	ldrsb.w	r5, [fp, #9]
            sum += cols_8b[3]*ksrc[10];
 8012faa:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[9];
 8012fae:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 8012fb2:	f99b 500a 	ldrsb.w	r5, [fp, #10]
            sum += cols_8b[4]*ksrc[11];
 8012fb6:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[10];
 8012fba:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 8012fbe:	f99b 500b 	ldrsb.w	r5, [fp, #11]
            sum += cols_8b[5]*ksrc[12];
 8012fc2:	f990 4005 	ldrsb.w	r4, [r0, #5]
            sum += cols_8b[4]*ksrc[11];
 8012fc6:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 8012fca:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum += cols_8b[6]*ksrc[13];
 8012fce:	f990 2006 	ldrsb.w	r2, [r0, #6]
            sum += cols_8b[5]*ksrc[12];
 8012fd2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 8012fd6:	f99b 500d 	ldrsb.w	r5, [fp, #13]
            sum += cols_8b[0]*ksrc[14];
 8012fda:	463c      	mov	r4, r7
 8012fdc:	4637      	mov	r7, r6
            sum += cols_8b[6]*ksrc[13];
 8012fde:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 8012fe2:	f99b 500e 	ldrsb.w	r5, [fp, #14]
 8012fe6:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
            sum += cols_8b[1]*ksrc[15];
 8012fea:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[14];
 8012fee:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 8012ff2:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum += cols_8b[2]*ksrc[16];
 8012ff6:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[15];
 8012ffa:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 8012ffe:	f99b 5010 	ldrsb.w	r5, [fp, #16]
            sum += cols_8b[3]*ksrc[17];
 8013002:	f991 2003 	ldrsb.w	r2, [r1, #3]
            sum += cols_8b[2]*ksrc[16];
 8013006:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 801300a:	f99b 5011 	ldrsb.w	r5, [fp, #17]
            sum += cols_8b[4]*ksrc[18];
 801300e:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2;
 8013012:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[17];
 8013014:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 8013018:	f99b 5012 	ldrsb.w	r5, [fp, #18]
            sum += cols_8b[5]*ksrc[19];
 801301c:	f991 2005 	ldrsb.w	r2, [r1, #5]
        cols_8b_iterptr += 3 * 2;
 8013020:	3607      	adds	r6, #7
            sum += cols_8b[4]*ksrc[18];
 8013022:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 8013026:	f99b 5013 	ldrsb.w	r5, [fp, #19]
            sum += cols_8b[6]*ksrc[20];
 801302a:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[19];
 801302e:	fb12 3305 	smlabb	r3, r2, r5, r3
        cols_8b_iterptr += 3 * 2;
 8013032:	962a      	str	r6, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[20];
 8013034:	f99b 6014 	ldrsb.w	r6, [fp, #20]
            cols_8b += column_x + 6;
 8013038:	19ca      	adds	r2, r1, r7
            sum += cols_8b[0]*ksrc[21];
 801303a:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 801303e:	fb14 3506 	smlabb	r5, r4, r6, r3
            sum += cols_8b[0]*ksrc[21];
 8013042:	f99b 3015 	ldrsb.w	r3, [fp, #21]
            sum += cols_8b[1]*ksrc[22];
 8013046:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[0]*ksrc[21];
 801304a:	fb10 5503 	smlabb	r5, r0, r3, r5
            sum += cols_8b[1]*ksrc[22];
 801304e:	f99b 3016 	ldrsb.w	r3, [fp, #22]
            sum += cols_8b[2]*ksrc[23];
 8013052:	f992 4002 	ldrsb.w	r4, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 8013056:	fb17 5503 	smlabb	r5, r7, r3, r5
            sum += cols_8b[2]*ksrc[23];
 801305a:	f99b 0017 	ldrsb.w	r0, [fp, #23]
            sum += cols_8b[3]*ksrc[24];
 801305e:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[2]*ksrc[23];
 8013062:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[3]*ksrc[24];
 8013066:	f99b 0018 	ldrsb.w	r0, [fp, #24]
            sum += cols_8b[4]*ksrc[25];
 801306a:	f992 4004 	ldrsb.w	r4, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 801306e:	fb13 5500 	smlabb	r5, r3, r0, r5
            sum += cols_8b[4]*ksrc[25];
 8013072:	f99b 0019 	ldrsb.w	r0, [fp, #25]
            sum += cols_8b[5]*ksrc[26];
 8013076:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 801307a:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[5]*ksrc[26];
 801307e:	f99b 401a 	ldrsb.w	r4, [fp, #26]
            sum += cols_8b[0]*ksrc[28];
 8013082:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[6]*ksrc[27];
 8013084:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 8013088:	fb13 5404 	smlabb	r4, r3, r4, r5
            sum += cols_8b[6]*ksrc[27];
 801308c:	f99b 301b 	ldrsb.w	r3, [fp, #27]
            sum += cols_8b[0]*ksrc[28];
 8013090:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            cols_8b += column_x + 6;
 8013094:	19d1      	adds	r1, r2, r7
            sum += cols_8b[6]*ksrc[27];
 8013096:	fb10 4303 	smlabb	r3, r0, r3, r4
            sum += cols_8b[0]*ksrc[28];
 801309a:	f99b 401c 	ldrsb.w	r4, [fp, #28]
            sum += cols_8b[1]*ksrc[29];
 801309e:	f991 0001 	ldrsb.w	r0, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 80130a2:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[29];
 80130a6:	f99b 501d 	ldrsb.w	r5, [fp, #29]
            sum += cols_8b[2]*ksrc[30];
 80130aa:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 80130ae:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[2]*ksrc[30];
 80130b2:	f99b 501e 	ldrsb.w	r5, [fp, #30]
            sum += cols_8b[3]*ksrc[31];
 80130b6:	f991 0003 	ldrsb.w	r0, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 80130ba:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[31];
 80130be:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum += cols_8b[4]*ksrc[32];
 80130c2:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 80130c6:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[4]*ksrc[32];
 80130ca:	f99b 5020 	ldrsb.w	r5, [fp, #32]
            sum += cols_8b[5]*ksrc[33];
 80130ce:	f991 0005 	ldrsb.w	r0, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 80130d2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[33];
 80130d6:	f99b 6021 	ldrsb.w	r6, [fp, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 80130da:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 80130de:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum += cols_8b[6]*ksrc[34];
 80130e2:	f99b 5022 	ldrsb.w	r5, [fp, #34]	; 0x22
            cols_8b += column_x + 6;
 80130e6:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[35];
 80130e8:	f912 2017 	ldrsb.w	r2, [r2, r7, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 80130ec:	fb14 0605 	smlabb	r6, r4, r5, r0
            sum += cols_8b[0]*ksrc[35];
 80130f0:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum += cols_8b[1]*ksrc[36];
 80130f4:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[0]*ksrc[35];
 80130f8:	fb12 6600 	smlabb	r6, r2, r0, r6
            sum += cols_8b[1]*ksrc[36];
 80130fc:	f99b 4024 	ldrsb.w	r4, [fp, #36]	; 0x24
            sum += cols_8b[2]*ksrc[37];
 8013100:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 8013104:	fb17 6604 	smlabb	r6, r7, r4, r6
            sum += cols_8b[2]*ksrc[37];
 8013108:	f99b 2025 	ldrsb.w	r2, [fp, #37]	; 0x25
            sum += cols_8b[3]*ksrc[38];
 801310c:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[2]*ksrc[37];
 8013110:	fb10 6602 	smlabb	r6, r0, r2, r6
            sum += cols_8b[3]*ksrc[38];
 8013114:	f99b 2026 	ldrsb.w	r2, [fp, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 8013118:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 801311c:	fb14 6602 	smlabb	r6, r4, r2, r6
            sum += cols_8b[4]*ksrc[39];
 8013120:	f99b 4027 	ldrsb.w	r4, [fp, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 8013124:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 8013128:	fb10 6404 	smlabb	r4, r0, r4, r6
            sum += cols_8b[5]*ksrc[40];
 801312c:	f99b 0028 	ldrsb.w	r0, [fp, #40]	; 0x28
            cols_8b += column_x + 6;
 8013130:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[5]*ksrc[40];
 8013132:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum += cols_8b[6]*ksrc[41];
 8013136:	f993 2006 	ldrsb.w	r2, [r3, #6]
 801313a:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            cols_8b += column_x + 6;
 801313e:	443b      	add	r3, r7
            sum += cols_8b[0]*ksrc[42];
 8013140:	f911 4017 	ldrsb.w	r4, [r1, r7, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 8013144:	fb12 0205 	smlabb	r2, r2, r5, r0
            sum += cols_8b[0]*ksrc[42];
 8013148:	f99b 502a 	ldrsb.w	r5, [fp, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 801314c:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 8013150:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[1]*ksrc[43];
 8013154:	f99b 502b 	ldrsb.w	r5, [fp, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 8013158:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 801315c:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[44];
 8013160:	f99b 502c 	ldrsb.w	r5, [fp, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 8013164:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 8013168:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[45];
 801316c:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 8013170:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 8013174:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[46];
 8013178:	f99b 502e 	ldrsb.w	r5, [fp, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 801317c:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 8013180:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[5]*ksrc[47];
 8013184:	f99b 502f 	ldrsb.w	r5, [fp, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 8013188:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 801318c:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[6]*ksrc[48];
 8013190:	f99b 5030 	ldrsb.w	r5, [fp, #48]	; 0x30
            sum = (float) sum * *scales;
 8013194:	9825      	ldr	r0, [sp, #148]	; 0x94
            sum += cols_8b[6]*ksrc[48];
 8013196:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 801319a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
            sum = (float) sum * *scales;
 801319c:	ed90 7a00 	vldr	s14, [r0]
 80131a0:	ee07 2a90 	vmov	s15, r2
            sum += output_offset;
 80131a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80131a6:	992c      	ldr	r1, [sp, #176]	; 0xb0
            sum = (float) sum * *scales;
 80131a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131ac:	9f15      	ldr	r7, [sp, #84]	; 0x54
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80131ae:	1a71      	subs	r1, r6, r1
 80131b0:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 80131b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80131b6:	960f      	str	r6, [sp, #60]	; 0x3c
 80131b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131bc:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80131c0:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 80131c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80131c4:	4293      	cmp	r3, r2
 80131c6:	bfb8      	it	lt
 80131c8:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 80131ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80131cc:	4293      	cmp	r3, r2
 80131ce:	bfa8      	it	ge
 80131d0:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80131d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80131d4:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 80131d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80131d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131da:	429a      	cmp	r2, r3
 80131dc:	f47f ac85 	bne.w	8012aea <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
    }
}
 80131e0:	b01b      	add	sp, #108	; 0x6c
 80131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += 3 * 2;
 80131e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80131e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80131ea:	3306      	adds	r3, #6
 80131ec:	932a      	str	r3, [sp, #168]	; 0xa8
 80131ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131f0:	4413      	add	r3, r2
 80131f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80131f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80131f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131f8:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 80131fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131fc:	930e      	str	r3, [sp, #56]	; 0x38
 80131fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013200:	4293      	cmp	r3, r2
 8013202:	f47f ac72 	bne.w	8012aea <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
}
 8013206:	b01b      	add	sp, #108	; 0x6c
 8013208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801320c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>:
{
 801320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013210:	b093      	sub	sp, #76	; 0x4c
 8013212:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 8013214:	f101 0e05 	add.w	lr, r1, #5
{
 8013218:	4615      	mov	r5, r2
 801321a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801321c:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8013220:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8013224:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8013228:	1cd8      	adds	r0, r3, #3
 801322a:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    for(i = 0; i < input_x + 6; i++){
 801322e:	2100      	movs	r1, #0
{
 8013230:	930f      	str	r3, [sp, #60]	; 0x3c
 8013232:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8013236:	9310      	str	r3, [sp, #64]	; 0x40
 8013238:	f99d 30a4 	ldrsb.w	r3, [sp, #164]	; 0xa4
    for(i = 0; i < input_x + 6; i++){
 801323c:	3101      	adds	r1, #1
 801323e:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 8013240:	f800 3c03 	strb.w	r3, [r0, #-3]
 8013244:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 8013246:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8013248:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 801324c:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 8013250:	4571      	cmp	r1, lr
 8013252:	ddf3      	ble.n	801323c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x30>
    for(i = 0; i < input_y; i++){
 8013254:	b1cd      	cbz	r5, 801328a <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x7e>
 8013256:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013258:	4610      	mov	r0, r2
 801325a:	2600      	movs	r6, #0
 801325c:	1d8f      	adds	r7, r1, #6
 801325e:	19d1      	adds	r1, r2, r7
 8013260:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 8013262:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 8013264:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 8013266:	fa1f fc86 	uxth.w	ip, r6
        *cols_8b++ = PAD8;//left
 801326a:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 801326c:	f801 3c03 	strb.w	r3, [r1, #-3]
 8013270:	4438      	add	r0, r7
    for(i = 0; i < input_y; i++){
 8013272:	4565      	cmp	r5, ip
        *cols_8b++ = PAD8;//right
 8013274:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 8013278:	f801 3c01 	strb.w	r3, [r1, #-1]
 801327c:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 801327e:	d8ef      	bhi.n	8013260 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x54>
 8013280:	1e69      	subs	r1, r5, #1
 8013282:	b289      	uxth	r1, r1
 8013284:	fb01 7707 	mla	r7, r1, r7, r7
 8013288:	443a      	add	r2, r7
 801328a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801328c:	1e88      	subs	r0, r1, #2
 801328e:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8013292:	4288      	cmp	r0, r1
 8013294:	f200 8092 	bhi.w	80133bc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b0>
 8013298:	2000      	movs	r0, #0
 801329a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801329c:	4606      	mov	r6, r0
 801329e:	f363 0007 	bfi	r0, r3, #0, #8
 80132a2:	f101 0c06 	add.w	ip, r1, #6
 80132a6:	4611      	mov	r1, r2
 80132a8:	f363 200f 	bfi	r0, r3, #8, #8
 80132ac:	ea4f 079c 	mov.w	r7, ip, lsr #2
 80132b0:	f363 4017 	bfi	r0, r3, #16, #8
 80132b4:	f363 601f 	bfi	r0, r3, #24, #8
 80132b8:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;
 80132ba:	6008      	str	r0, [r1, #0]
 80132bc:	6048      	str	r0, [r1, #4]
 80132be:	310c      	adds	r1, #12
 80132c0:	42b7      	cmp	r7, r6
 80132c2:	f841 0c04 	str.w	r0, [r1, #-4]
 80132c6:	d8f7      	bhi.n	80132b8 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xac>
 80132c8:	f02c 0003 	bic.w	r0, ip, #3
 80132cc:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 80132d0:	4560      	cmp	r0, ip
 80132d2:	b287      	uxth	r7, r0
 80132d4:	eb02 0106 	add.w	r1, r2, r6
 80132d8:	d010      	beq.n	80132fc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
    for(i = 0; i < input_x + 6; i++){
 80132da:	1c78      	adds	r0, r7, #1
        *cols_8b++ = PAD8;
 80132dc:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 80132de:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 80132e0:	b282      	uxth	r2, r0
        *cols_8b++ = PAD8;
 80132e2:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 80132e4:	4572      	cmp	r2, lr
 80132e6:	dc09      	bgt.n	80132fc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
 80132e8:	1cba      	adds	r2, r7, #2
        *cols_8b++ = PAD8;
 80132ea:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 80132ec:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 80132ee:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 80132f0:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 80132f2:	4596      	cmp	lr, r2
 80132f4:	db02      	blt.n	80132fc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
        *cols_8b++ = PAD8;
 80132f6:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 80132f8:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 80132fa:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 80132fc:	2c00      	cmp	r4, #0
 80132fe:	d059      	beq.n	80133b4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
 8013300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013302:	1e63      	subs	r3, r4, #1
 8013304:	1e56      	subs	r6, r2, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8013306:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801330a:	b29b      	uxth	r3, r3
 801330c:	b2b6      	uxth	r6, r6
 801330e:	3214      	adds	r2, #20
 8013310:	3301      	adds	r3, #1
 8013312:	1c77      	adds	r7, r6, #1
 8013314:	9211      	str	r2, [sp, #68]	; 0x44
 8013316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013318:	3607      	adds	r6, #7
 801331a:	fb07 f804 	mul.w	r8, r7, r4
 801331e:	18d3      	adds	r3, r2, r3
 8013320:	960d      	str	r6, [sp, #52]	; 0x34
 8013322:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 8013324:	b1f5      	cbz	r5, 8013364 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 8013326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013328:	b1e3      	cbz	r3, 8013364 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 801332a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801332c:	f04f 0e00 	mov.w	lr, #0
 8013330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013332:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013336:	eb03 0c02 	add.w	ip, r3, r2
 801333a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801333c:	eb07 000c 	add.w	r0, r7, ip
 8013340:	4662      	mov	r2, ip
 8013342:	464b      	mov	r3, r9
                *cols_8b++ = *src;// + input_offset;
 8013344:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8013348:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 801334a:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 801334e:	4282      	cmp	r2, r0
 8013350:	d1f8      	bne.n	8013344 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x138>
 8013352:	f10e 0e01 	add.w	lr, lr, #1
 8013356:	44c1      	add	r9, r8
 8013358:	44b4      	add	ip, r6
        for(i = 0; i < input_y; i++){
 801335a:	fa1f f38e 	uxth.w	r3, lr
 801335e:	429d      	cmp	r5, r3
 8013360:	d8ec      	bhi.n	801333c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x130>
 8013362:	960d      	str	r6, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013364:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8013366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013368:	9604      	str	r6, [sp, #16]
 801336a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801336c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801336e:	9603      	str	r6, [sp, #12]
 8013370:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8013372:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013374:	9601      	str	r6, [sp, #4]
 8013376:	f106 0904 	add.w	r9, r6, #4
 801337a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801337c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801337e:	9302      	str	r3, [sp, #8]
        input++;
 8013380:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013382:	9600      	str	r6, [sp, #0]
        ksrc += 49;
 8013384:	3631      	adds	r6, #49	; 0x31
        input++;
 8013386:	930b      	str	r3, [sp, #44]	; 0x2c
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013388:	465b      	mov	r3, fp
 801338a:	9207      	str	r2, [sp, #28]
 801338c:	4652      	mov	r2, sl
 801338e:	9106      	str	r1, [sp, #24]
 8013390:	f10b 0b04 	add.w	fp, fp, #4
 8013394:	9005      	str	r0, [sp, #20]
 8013396:	f10a 0a04 	add.w	sl, sl, #4
 801339a:	9408      	str	r4, [sp, #32]
 801339c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801339e:	9810      	ldr	r0, [sp, #64]	; 0x40
        ksrc += 49;
 80133a0:	961c      	str	r6, [sp, #112]	; 0x70
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80133a2:	f7ff fb71 	bl	8012a88 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>
    for (c = 0; c < input_ch; c++){
 80133a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133aa:	4293      	cmp	r3, r2
 80133ac:	d002      	beq.n	80133b4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80133ae:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 80133b2:	e7b7      	b.n	8013324 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x118>
}
 80133b4:	2000      	movs	r0, #0
 80133b6:	b013      	add	sp, #76	; 0x4c
 80133b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133bc:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 80133be:	2100      	movs	r1, #0
 80133c0:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 80133c2:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 80133c6:	f802 3c02 	strb.w	r3, [r2, #-2]
 80133ca:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 80133cc:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 80133ce:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 80133d2:	4571      	cmp	r1, lr
 80133d4:	ddf4      	ble.n	80133c0 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b4>
 80133d6:	e791      	b.n	80132fc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>

080133d8 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 80133d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133dc:	b09f      	sub	sp, #124	; 0x7c
 80133de:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 80133e2:	9013      	str	r0, [sp, #76]	; 0x4c
 80133e4:	4603      	mov	r3, r0
{
 80133e6:	f8bd 00bc 	ldrh.w	r0, [sp, #188]	; 0xbc
 80133ea:	9114      	str	r1, [sp, #80]	; 0x50
 80133ec:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
 80133f0:	9005      	str	r0, [sp, #20]
    for (i = 0; i < output_y; i++) {
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 83c5 	beq.w	8013b82 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7aa>
 80133f8:	f000 0301 	and.w	r3, r0, #1
 80133fc:	460c      	mov	r4, r1
 80133fe:	1d86      	adds	r6, r0, #6
        for (j = 0; j < output_x / 2; j++) {
 8013400:	0849      	lsrs	r1, r1, #1
 8013402:	f1c3 0306 	rsb	r3, r3, #6
 8013406:	1e62      	subs	r2, r4, #1
 8013408:	460d      	mov	r5, r1
 801340a:	9116      	str	r1, [sp, #88]	; 0x58
 801340c:	4433      	add	r3, r6
 801340e:	4401      	add	r1, r0
 8013410:	00ad      	lsls	r5, r5, #2
 8013412:	2700      	movs	r7, #0
 8013414:	931b      	str	r3, [sp, #108]	; 0x6c
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8013416:	3302      	adds	r3, #2
 8013418:	951a      	str	r5, [sp, #104]	; 0x68
 801341a:	931d      	str	r3, [sp, #116]	; 0x74
 801341c:	f004 0301 	and.w	r3, r4, #1
 8013420:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8013422:	9315      	str	r3, [sp, #84]	; 0x54
 8013424:	462b      	mov	r3, r5
 8013426:	fb05 f202 	mul.w	r2, r5, r2
 801342a:	9612      	str	r6, [sp, #72]	; 0x48
 801342c:	fb03 f304 	mul.w	r3, r3, r4
 8013430:	921c      	str	r2, [sp, #112]	; 0x70
 8013432:	008a      	lsls	r2, r1, #2
 8013434:	9317      	str	r3, [sp, #92]	; 0x5c
 8013436:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for (j = 0; j < output_x / 2; j++) {
 8013438:	9710      	str	r7, [sp, #64]	; 0x40
 801343a:	442b      	add	r3, r5
 801343c:	9218      	str	r2, [sp, #96]	; 0x60
    for (i = 0; i < output_y; i++) {
 801343e:	970f      	str	r7, [sp, #60]	; 0x3c
 8013440:	9311      	str	r3, [sp, #68]	; 0x44
 8013442:	0043      	lsls	r3, r0, #1
 8013444:	9307      	str	r3, [sp, #28]
 8013446:	4243      	negs	r3, r0
 8013448:	930e      	str	r3, [sp, #56]	; 0x38
 801344a:	0083      	lsls	r3, r0, #2
 801344c:	9319      	str	r3, [sp, #100]	; 0x64
 801344e:	006b      	lsls	r3, r5, #1
 8013450:	930d      	str	r3, [sp, #52]	; 0x34
        for (j = 0; j < output_x / 2; j++) {
 8013452:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013454:	2b00      	cmp	r3, #0
 8013456:	f000 8221 	beq.w	801389c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x4c4>
 801345a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801345c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801345e:	9905      	ldr	r1, [sp, #20]
 8013460:	fb02 3303 	mla	r3, r2, r3, r3
 8013464:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013466:	440a      	add	r2, r1
 8013468:	9907      	ldr	r1, [sp, #28]
 801346a:	930a      	str	r3, [sp, #40]	; 0x28
 801346c:	9202      	str	r2, [sp, #8]
 801346e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013470:	440a      	add	r2, r1
 8013472:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013474:	9203      	str	r2, [sp, #12]
 8013476:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013478:	440a      	add	r2, r1
 801347a:	9201      	str	r2, [sp, #4]
 801347c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801347e:	1a9b      	subs	r3, r3, r2
 8013480:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013482:	9309      	str	r3, [sp, #36]	; 0x24
 8013484:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013486:	4413      	add	r3, r2
 8013488:	9308      	str	r3, [sp, #32]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801348a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801348c:	9306      	str	r3, [sp, #24]
            q31_t sum0 = bias[0] + biasR[0];
 801348e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013492:	9c02      	ldr	r4, [sp, #8]
 8013494:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8013496:	6808      	ldr	r0, [r1, #0]
 8013498:	9e05      	ldr	r6, [sp, #20]
 801349a:	1962      	adds	r2, r4, r5
 801349c:	9903      	ldr	r1, [sp, #12]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	198f      	adds	r7, r1, r6
            sum0 += cols_8b[0]*ksrc[0];
 80134a2:	f99b e000 	ldrsb.w	lr, [fp]
 80134a6:	4621      	mov	r1, r4
            q31_t sum0 = bias[0] + biasR[0];
 80134a8:	4403      	add	r3, r0
            sum0 += cols_8b[0]*ksrc[0];
 80134aa:	5764      	ldrsb	r4, [r4, r5]
            sum0 += cols_8b[1]*ksrc[1];
 80134ac:	f992 0001 	ldrsb.w	r0, [r2, #1]
            sum0 += cols_8b[0]*ksrc[0];
 80134b0:	fb14 340e 	smlabb	r4, r4, lr, r3
 80134b4:	9704      	str	r7, [sp, #16]
            sum0 += cols_8b[1]*ksrc[1];
 80134b6:	f99b 7001 	ldrsb.w	r7, [fp, #1]
            sum1 += cols_8b[2]*ksrc[0];
 80134ba:	f992 c002 	ldrsb.w	ip, [r2, #2]
            sum0 += cols_8b[2]*ksrc[2];
 80134be:	f99b 6002 	ldrsb.w	r6, [fp, #2]
            sum0 += cols_8b[1]*ksrc[1];
 80134c2:	fb10 4407 	smlabb	r4, r0, r7, r4
            sum1 += cols_8b[3]*ksrc[1];
 80134c6:	f992 5003 	ldrsb.w	r5, [r2, #3]
            sum1 += cols_8b[2]*ksrc[0];
 80134ca:	fb1e 330c 	smlabb	r3, lr, ip, r3
            sum0 += cols_8b[2]*ksrc[2];
 80134ce:	fb1c 4406 	smlabb	r4, ip, r6, r4
            sum0 += cols_8b[3]*ksrc[3];
 80134d2:	f99b e003 	ldrsb.w	lr, [fp, #3]
            sum1 += cols_8b[4]*ksrc[2];
 80134d6:	f992 0004 	ldrsb.w	r0, [r2, #4]
            sum1 += cols_8b[3]*ksrc[1];
 80134da:	fb17 3305 	smlabb	r3, r7, r5, r3
            sum0 += cols_8b[3]*ksrc[3];
 80134de:	fb15 440e 	smlabb	r4, r5, lr, r4
            sum0 += cols_8b[4]*ksrc[4];
 80134e2:	f99b 7004 	ldrsb.w	r7, [fp, #4]
            sum1 += cols_8b[5]*ksrc[3];
 80134e6:	f992 5005 	ldrsb.w	r5, [r2, #5]
            sum1 += cols_8b[4]*ksrc[2];
 80134ea:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[5]*ksrc[5];
 80134ee:	f99b 8005 	ldrsb.w	r8, [fp, #5]
            sum0 += cols_8b[4]*ksrc[4];
 80134f2:	fb10 4407 	smlabb	r4, r0, r7, r4
            sum1 += cols_8b[5]*ksrc[3];
 80134f6:	fb1e 3305 	smlabb	r3, lr, r5, r3
            sum1 += cols_8b[6]*ksrc[4];
 80134fa:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum0 += cols_8b[5]*ksrc[5];
 80134fe:	fb15 4408 	smlabb	r4, r5, r8, r4
            sum0 += cols_8b[6]*ksrc[6];
 8013502:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum1 += cols_8b[6]*ksrc[4];
 8013506:	fb17 3e00 	smlabb	lr, r7, r0, r3
            sum0 += cols_8b[0]*ksrc[7];
 801350a:	f99b 6007 	ldrsb.w	r6, [fp, #7]
 801350e:	f991 3006 	ldrsb.w	r3, [r1, #6]
            sum0 += cols_8b[6]*ksrc[6];
 8013512:	fb10 4005 	smlabb	r0, r0, r5, r4
            sum0 += cols_8b[1]*ksrc[8];
 8013516:	f99b 4008 	ldrsb.w	r4, [fp, #8]
            sum0 += cols_8b[0]*ksrc[7];
 801351a:	fb13 0006 	smlabb	r0, r3, r6, r0
            sum0 += cols_8b[1]*ksrc[8];
 801351e:	f991 3007 	ldrsb.w	r3, [r1, #7]
            sum1 += cols_8b[2]*ksrc[7];
 8013522:	f991 7008 	ldrsb.w	r7, [r1, #8]
            sum0 += cols_8b[1]*ksrc[8];
 8013526:	fb13 0004 	smlabb	r0, r3, r4, r0
            sum1 += cols_8b[7]*ksrc[5];
 801352a:	f992 3007 	ldrsb.w	r3, [r2, #7]
            sum1 += cols_8b[3]*ksrc[8];
 801352e:	f991 c009 	ldrsb.w	ip, [r1, #9]
            sum0 += cols_8b[2]*ksrc[9];
 8013532:	f99b 9009 	ldrsb.w	r9, [fp, #9]
            sum1 += cols_8b[7]*ksrc[5];
 8013536:	fb18 e303 	smlabb	r3, r8, r3, lr
            sum0 += cols_8b[3]*ksrc[10];
 801353a:	f99b e00a 	ldrsb.w	lr, [fp, #10]
            sum1 += cols_8b[8]*ksrc[6];
 801353e:	f992 2008 	ldrsb.w	r2, [r2, #8]
            sum0 += cols_8b[2]*ksrc[9];
 8013542:	fb17 0009 	smlabb	r0, r7, r9, r0
            sum1 += cols_8b[4]*ksrc[9];
 8013546:	f991 800a 	ldrsb.w	r8, [r1, #10]
            sum1 += cols_8b[8]*ksrc[6];
 801354a:	fb15 3202 	smlabb	r2, r5, r2, r3
            sum0 += cols_8b[4]*ksrc[11];
 801354e:	f99b 300b 	ldrsb.w	r3, [fp, #11]
            sum0 += cols_8b[3]*ksrc[10];
 8013552:	fb1c 000e 	smlabb	r0, ip, lr, r0
            sum1 += cols_8b[5]*ksrc[10];
 8013556:	f991 500b 	ldrsb.w	r5, [r1, #11]
            sum1 += cols_8b[2]*ksrc[7];
 801355a:	fb16 2607 	smlabb	r6, r6, r7, r2
            sum0 += cols_8b[5]*ksrc[12];
 801355e:	f99b 200c 	ldrsb.w	r2, [fp, #12]
            sum0 += cols_8b[4]*ksrc[11];
 8013562:	fb18 0003 	smlabb	r0, r8, r3, r0
            sum1 += cols_8b[6]*ksrc[11];
 8013566:	f991 700c 	ldrsb.w	r7, [r1, #12]
            sum1 += cols_8b[3]*ksrc[8];
 801356a:	fb14 640c 	smlabb	r4, r4, ip, r6
            sum1 += cols_8b[7]*ksrc[12];
 801356e:	f991 c00d 	ldrsb.w	ip, [r1, #13]
            sum0 += cols_8b[5]*ksrc[12];
 8013572:	fb15 0002 	smlabb	r0, r5, r2, r0
            sum0 += cols_8b[0]*ksrc[14];
 8013576:	9903      	ldr	r1, [sp, #12]
            sum0 += cols_8b[6]*ksrc[13];
 8013578:	f99b 600d 	ldrsb.w	r6, [fp, #13]
            sum1 += cols_8b[4]*ksrc[9];
 801357c:	fb19 4808 	smlabb	r8, r9, r8, r4
            sum0 += cols_8b[0]*ksrc[14];
 8013580:	f99b 900e 	ldrsb.w	r9, [fp, #14]
            sum0 += cols_8b[6]*ksrc[13];
 8013584:	fb17 0a06 	smlabb	sl, r7, r6, r0
            sum0 += cols_8b[0]*ksrc[14];
 8013588:	f991 000c 	ldrsb.w	r0, [r1, #12]
            sum1 += cols_8b[5]*ksrc[10];
 801358c:	fb1e 8805 	smlabb	r8, lr, r5, r8
            sum1 += cols_8b[8]*ksrc[13];
 8013590:	9c02      	ldr	r4, [sp, #8]
            sum0 += cols_8b[1]*ksrc[15];
 8013592:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum0 += cols_8b[0]*ksrc[14];
 8013596:	fb10 a009 	smlabb	r0, r0, r9, sl
            sum0 += cols_8b[1]*ksrc[15];
 801359a:	f991 e00d 	ldrsb.w	lr, [r1, #13]
            sum1 += cols_8b[6]*ksrc[11];
 801359e:	fb13 8307 	smlabb	r3, r3, r7, r8
            sum1 += cols_8b[2]*ksrc[14];
 80135a2:	f991 700e 	ldrsb.w	r7, [r1, #14]
 80135a6:	3404      	adds	r4, #4
            sum1 += cols_8b[3]*ksrc[15];
 80135a8:	9903      	ldr	r1, [sp, #12]
            sum0 += cols_8b[1]*ksrc[15];
 80135aa:	fb1e 0005 	smlabb	r0, lr, r5, r0
            sum1 += cols_8b[7]*ksrc[12];
 80135ae:	fb12 320c 	smlabb	r2, r2, ip, r3
            sum0 += cols_8b[2]*ksrc[16];
 80135b2:	f99b e010 	ldrsb.w	lr, [fp, #16]
            sum1 += cols_8b[8]*ksrc[13];
 80135b6:	f994 300a 	ldrsb.w	r3, [r4, #10]
 80135ba:	3104      	adds	r1, #4
            sum1 += cols_8b[3]*ksrc[15];
 80135bc:	f991 800b 	ldrsb.w	r8, [r1, #11]
            sum0 += cols_8b[2]*ksrc[16];
 80135c0:	fb17 000e 	smlabb	r0, r7, lr, r0
            sum0 += cols_8b[3]*ksrc[17];
 80135c4:	f99b c011 	ldrsb.w	ip, [fp, #17]
            sum1 += cols_8b[8]*ksrc[13];
 80135c8:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum1 += cols_8b[4]*ksrc[16];
 80135cc:	f991 300c 	ldrsb.w	r3, [r1, #12]
            sum0 += cols_8b[4]*ksrc[18];
 80135d0:	f99b 6012 	ldrsb.w	r6, [fp, #18]
            sum0 += cols_8b[3]*ksrc[17];
 80135d4:	fb18 000c 	smlabb	r0, r8, ip, r0
            sum1 += cols_8b[2]*ksrc[14];
 80135d8:	fb19 2207 	smlabb	r2, r9, r7, r2
 80135dc:	9402      	str	r4, [sp, #8]
            sum1 += cols_8b[5]*ksrc[17];
 80135de:	f991 700d 	ldrsb.w	r7, [r1, #13]
            sum0 += cols_8b[4]*ksrc[18];
 80135e2:	fb13 0006 	smlabb	r0, r3, r6, r0
            sum0 += cols_8b[5]*ksrc[19];
 80135e6:	f99b 4013 	ldrsb.w	r4, [fp, #19]
            sum1 += cols_8b[3]*ksrc[15];
 80135ea:	fb15 2208 	smlabb	r2, r5, r8, r2
            sum0 += cols_8b[6]*ksrc[20];
 80135ee:	f99b a014 	ldrsb.w	sl, [fp, #20]
            sum1 += cols_8b[6]*ksrc[18];
 80135f2:	f991 500e 	ldrsb.w	r5, [r1, #14]
            sum0 += cols_8b[5]*ksrc[19];
 80135f6:	fb17 0804 	smlabb	r8, r7, r4, r0
            sum1 += cols_8b[4]*ksrc[16];
 80135fa:	fb1e 2303 	smlabb	r3, lr, r3, r2
            sum0 += cols_8b[0]*ksrc[21];
 80135fe:	9804      	ldr	r0, [sp, #16]
            sum0 += cols_8b[6]*ksrc[20];
 8013600:	fb15 820a 	smlabb	r2, r5, sl, r8
            sum0 += cols_8b[0]*ksrc[21];
 8013604:	f99b e015 	ldrsb.w	lr, [fp, #21]
 8013608:	f990 9012 	ldrsb.w	r9, [r0, #18]
            sum1 += cols_8b[5]*ksrc[17];
 801360c:	fb1c 3307 	smlabb	r3, ip, r7, r3
            sum0 += cols_8b[1]*ksrc[22];
 8013610:	f990 c013 	ldrsb.w	ip, [r0, #19]
 8013614:	f99b 7016 	ldrsb.w	r7, [fp, #22]
            sum0 += cols_8b[0]*ksrc[21];
 8013618:	fb19 220e 	smlabb	r2, r9, lr, r2
            sum1 += cols_8b[2]*ksrc[21];
 801361c:	f990 8014 	ldrsb.w	r8, [r0, #20]
            sum1 += cols_8b[6]*ksrc[18];
 8013620:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum1 += cols_8b[7]*ksrc[19];
 8013624:	f991 900f 	ldrsb.w	r9, [r1, #15]
            sum0 += cols_8b[1]*ksrc[22];
 8013628:	fb1c 2207 	smlabb	r2, ip, r7, r2
            sum0 += cols_8b[2]*ksrc[23];
 801362c:	f99b 6017 	ldrsb.w	r6, [fp, #23]
            sum1 += cols_8b[7]*ksrc[19];
 8013630:	fb14 3309 	smlabb	r3, r4, r9, r3
            sum1 += cols_8b[8]*ksrc[20];
 8013634:	f991 4010 	ldrsb.w	r4, [r1, #16]
            sum1 += cols_8b[3]*ksrc[22];
 8013638:	f990 c015 	ldrsb.w	ip, [r0, #21]
            sum0 += cols_8b[2]*ksrc[23];
 801363c:	fb18 2206 	smlabb	r2, r8, r6, r2
            sum1 += cols_8b[8]*ksrc[20];
 8013640:	fb1a 3304 	smlabb	r3, sl, r4, r3
            sum0 += cols_8b[3]*ksrc[24];
 8013644:	f99b 5018 	ldrsb.w	r5, [fp, #24]
            sum1 += cols_8b[4]*ksrc[23];
 8013648:	f990 9016 	ldrsb.w	r9, [r0, #22]
            sum1 += cols_8b[2]*ksrc[21];
 801364c:	fb1e 3308 	smlabb	r3, lr, r8, r3
            sum0 += cols_8b[4]*ksrc[25];
 8013650:	f99b a019 	ldrsb.w	sl, [fp, #25]
            sum0 += cols_8b[3]*ksrc[24];
 8013654:	fb1c 2205 	smlabb	r2, ip, r5, r2
            sum0 += cols_8b[5]*ksrc[26];
 8013658:	f99b 801a 	ldrsb.w	r8, [fp, #26]
            sum1 += cols_8b[3]*ksrc[22];
 801365c:	fb17 330c 	smlabb	r3, r7, ip, r3
 8013660:	9103      	str	r1, [sp, #12]
            sum0 += cols_8b[4]*ksrc[25];
 8013662:	fb19 220a 	smlabb	r2, r9, sl, r2
            sum1 += cols_8b[4]*ksrc[23];
 8013666:	4601      	mov	r1, r0
 8013668:	fb16 3609 	smlabb	r6, r6, r9, r3
            sum1 += cols_8b[5]*ksrc[24];
 801366c:	f990 0017 	ldrsb.w	r0, [r0, #23]
            sum1 += cols_8b[6]*ksrc[25];
 8013670:	f991 4018 	ldrsb.w	r4, [r1, #24]
            sum0 += cols_8b[6]*ksrc[27];
 8013674:	f99b e01b 	ldrsb.w	lr, [fp, #27]
            sum1 += cols_8b[5]*ksrc[24];
 8013678:	fb15 6600 	smlabb	r6, r5, r0, r6
            sum0 += cols_8b[5]*ksrc[26];
 801367c:	fb10 2208 	smlabb	r2, r0, r8, r2
            sum0 += cols_8b[0]*ksrc[28];
 8013680:	9b01      	ldr	r3, [sp, #4]
            sum0 += cols_8b[1]*ksrc[29];
 8013682:	9d01      	ldr	r5, [sp, #4]
            sum1 += cols_8b[7]*ksrc[26];
 8013684:	f991 c019 	ldrsb.w	ip, [r1, #25]
            sum0 += cols_8b[6]*ksrc[27];
 8013688:	fb14 220e 	smlabb	r2, r4, lr, r2
            sum1 += cols_8b[8]*ksrc[27];
 801368c:	f991 701a 	ldrsb.w	r7, [r1, #26]
            sum1 += cols_8b[6]*ksrc[25];
 8013690:	fb1a 6404 	smlabb	r4, sl, r4, r6
            sum0 += cols_8b[0]*ksrc[28];
 8013694:	f99b 101c 	ldrsb.w	r1, [fp, #28]
 8013698:	f993 3018 	ldrsb.w	r3, [r3, #24]
            sum1 += cols_8b[7]*ksrc[26];
 801369c:	fb18 440c 	smlabb	r4, r8, ip, r4
            sum0 += cols_8b[1]*ksrc[29];
 80136a0:	f995 9019 	ldrsb.w	r9, [r5, #25]
            sum0 += cols_8b[0]*ksrc[28];
 80136a4:	fb13 2301 	smlabb	r3, r3, r1, r2
            sum0 += cols_8b[1]*ksrc[29];
 80136a8:	f99b 201d 	ldrsb.w	r2, [fp, #29]
            sum1 += cols_8b[2]*ksrc[28];
 80136ac:	f995 a01a 	ldrsb.w	sl, [r5, #26]
            sum1 += cols_8b[8]*ksrc[27];
 80136b0:	fb1e 4407 	smlabb	r4, lr, r7, r4
            sum0 += cols_8b[1]*ksrc[29];
 80136b4:	fb19 3302 	smlabb	r3, r9, r2, r3
            sum0 += cols_8b[2]*ksrc[30];
 80136b8:	f99b 601e 	ldrsb.w	r6, [fp, #30]
            sum1 += cols_8b[3]*ksrc[29];
 80136bc:	f995 001b 	ldrsb.w	r0, [r5, #27]
            sum1 += cols_8b[2]*ksrc[28];
 80136c0:	fb11 440a 	smlabb	r4, r1, sl, r4
            sum0 += cols_8b[2]*ksrc[30];
 80136c4:	fb1a 3806 	smlabb	r8, sl, r6, r3
            sum0 += cols_8b[3]*ksrc[31];
 80136c8:	f99b 301f 	ldrsb.w	r3, [fp, #31]
            sum1 += cols_8b[4]*ksrc[30];
 80136cc:	462f      	mov	r7, r5
            sum0 += cols_8b[4]*ksrc[32];
 80136ce:	f99b 9020 	ldrsb.w	r9, [fp, #32]
            sum1 += cols_8b[4]*ksrc[30];
 80136d2:	f995 501c 	ldrsb.w	r5, [r5, #28]
            sum0 += cols_8b[3]*ksrc[31];
 80136d6:	fb10 8803 	smlabb	r8, r0, r3, r8
            sum1 += cols_8b[3]*ksrc[29];
 80136da:	fb12 4400 	smlabb	r4, r2, r0, r4
            sum1 += cols_8b[5]*ksrc[31];
 80136de:	f997 a01d 	ldrsb.w	sl, [r7, #29]
            sum0 += cols_8b[5]*ksrc[33];
 80136e2:	f99b e021 	ldrsb.w	lr, [fp, #33]	; 0x21
            sum0 += cols_8b[4]*ksrc[32];
 80136e6:	fb15 8809 	smlabb	r8, r5, r9, r8
            sum1 += cols_8b[4]*ksrc[30];
 80136ea:	fb16 4405 	smlabb	r4, r6, r5, r4
            sum0 += cols_8b[6]*ksrc[34];
 80136ee:	f99b c022 	ldrsb.w	ip, [fp, #34]	; 0x22
            sum0 += cols_8b[5]*ksrc[33];
 80136f2:	fb1a 880e 	smlabb	r8, sl, lr, r8
            sum1 += cols_8b[5]*ksrc[31];
 80136f6:	4639      	mov	r1, r7
 80136f8:	fb13 440a 	smlabb	r4, r3, sl, r4
            sum1 += cols_8b[6]*ksrc[32];
 80136fc:	f997 701e 	ldrsb.w	r7, [r7, #30]
 8013700:	9a05      	ldr	r2, [sp, #20]
            sum0 += cols_8b[6]*ksrc[34];
 8013702:	fb17 880c 	smlabb	r8, r7, ip, r8
            sum0 += cols_8b[0]*ksrc[35];
 8013706:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum1 += cols_8b[6]*ksrc[32];
 801370a:	fb19 4407 	smlabb	r4, r9, r7, r4
            sum1 += cols_8b[7]*ksrc[33];
 801370e:	9f01      	ldr	r7, [sp, #4]
 8013710:	4411      	add	r1, r2
            sum0 += cols_8b[1]*ksrc[36];
 8013712:	f99b 5024 	ldrsb.w	r5, [fp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[33];
 8013716:	f997 701f 	ldrsb.w	r7, [r7, #31]
            sum0 += cols_8b[0]*ksrc[35];
 801371a:	f991 201e 	ldrsb.w	r2, [r1, #30]
            sum1 += cols_8b[7]*ksrc[33];
 801371e:	fb1e 4707 	smlabb	r7, lr, r7, r4
            sum1 += cols_8b[8]*ksrc[34];
 8013722:	9c01      	ldr	r4, [sp, #4]
            sum0 += cols_8b[0]*ksrc[35];
 8013724:	fb12 8200 	smlabb	r2, r2, r0, r8
            sum0 += cols_8b[1]*ksrc[36];
 8013728:	f991 801f 	ldrsb.w	r8, [r1, #31]
            sum1 += cols_8b[8]*ksrc[34];
 801372c:	f994 4020 	ldrsb.w	r4, [r4, #32]
            sum1 += cols_8b[2]*ksrc[35];
 8013730:	f991 6020 	ldrsb.w	r6, [r1, #32]
            sum0 += cols_8b[1]*ksrc[36];
 8013734:	fb18 2205 	smlabb	r2, r8, r5, r2
            sum0 += cols_8b[2]*ksrc[37];
 8013738:	f99b 3025 	ldrsb.w	r3, [fp, #37]	; 0x25
            sum1 += cols_8b[8]*ksrc[34];
 801373c:	fb1c 7404 	smlabb	r4, ip, r4, r7
            sum1 += cols_8b[3]*ksrc[36];
 8013740:	f991 9021 	ldrsb.w	r9, [r1, #33]	; 0x21
            sum0 += cols_8b[3]*ksrc[38];
 8013744:	f99b 8026 	ldrsb.w	r8, [fp, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[37];
 8013748:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum1 += cols_8b[2]*ksrc[35];
 801374c:	fb10 4406 	smlabb	r4, r0, r6, r4
            sum1 += cols_8b[4]*ksrc[37];
 8013750:	f991 a022 	ldrsb.w	sl, [r1, #34]	; 0x22
            sum0 += cols_8b[4]*ksrc[39];
 8013754:	f99b c027 	ldrsb.w	ip, [fp, #39]	; 0x27
            sum0 += cols_8b[3]*ksrc[38];
 8013758:	fb19 2208 	smlabb	r2, r9, r8, r2
            sum1 += cols_8b[3]*ksrc[36];
 801375c:	fb15 4009 	smlabb	r0, r5, r9, r4
            sum1 += cols_8b[5]*ksrc[38];
 8013760:	f991 e023 	ldrsb.w	lr, [r1, #35]	; 0x23
            sum0 += cols_8b[4]*ksrc[39];
 8013764:	fb1a 220c 	smlabb	r2, sl, ip, r2
            sum0 += cols_8b[5]*ksrc[40];
 8013768:	f99b 6028 	ldrsb.w	r6, [fp, #40]	; 0x28
            sum1 += cols_8b[4]*ksrc[37];
 801376c:	fb13 030a 	smlabb	r3, r3, sl, r0
 8013770:	9c01      	ldr	r4, [sp, #4]
 8013772:	9d07      	ldr	r5, [sp, #28]
            sum0 += cols_8b[5]*ksrc[40];
 8013774:	fb1e 2206 	smlabb	r2, lr, r6, r2
            sum1 += cols_8b[6]*ksrc[39];
 8013778:	f991 7024 	ldrsb.w	r7, [r1, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[38];
 801377c:	fb18 3e0e 	smlabb	lr, r8, lr, r3
 8013780:	442c      	add	r4, r5
            sum0 = (float) sum0 * *scales;
 8013782:	9b29      	ldr	r3, [sp, #164]	; 0xa4
            sum0 += cols_8b[6]*ksrc[41];
 8013784:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            sum1 += cols_8b[7]*ksrc[40];
 8013788:	f991 9025 	ldrsb.w	r9, [r1, #37]	; 0x25
            sum1 += cols_8b[8]*ksrc[41];
 801378c:	f991 0026 	ldrsb.w	r0, [r1, #38]	; 0x26
            sum0 += cols_8b[6]*ksrc[41];
 8013790:	fb17 2105 	smlabb	r1, r7, r5, r2
            sum0 += cols_8b[0]*ksrc[42];
 8013794:	f99b a02a 	ldrsb.w	sl, [fp, #42]	; 0x2a
            sum0 = (float) sum0 * *scales;
 8013798:	ed93 7a00 	vldr	s14, [r3]
            sum0 += cols_8b[0]*ksrc[42];
 801379c:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
 80137a0:	9b01      	ldr	r3, [sp, #4]
 80137a2:	fb12 120a 	smlabb	r2, r2, sl, r1
            sum0 += cols_8b[1]*ksrc[43];
 80137a6:	f99b 802b 	ldrsb.w	r8, [fp, #43]	; 0x2b
 80137aa:	f994 1025 	ldrsb.w	r1, [r4, #37]	; 0x25
 80137ae:	3304      	adds	r3, #4
 80137b0:	fb11 2208 	smlabb	r2, r1, r8, r2
 80137b4:	9301      	str	r3, [sp, #4]
            sum1 += cols_8b[6]*ksrc[39];
 80137b6:	fb1c e307 	smlabb	r3, ip, r7, lr
            sum1 += cols_8b[2]*ksrc[42];
 80137ba:	f994 c026 	ldrsb.w	ip, [r4, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[44];
 80137be:	f99b e02c 	ldrsb.w	lr, [fp, #44]	; 0x2c
            sum1 += cols_8b[7]*ksrc[40];
 80137c2:	fb16 3309 	smlabb	r3, r6, r9, r3
            sum1 += cols_8b[3]*ksrc[43];
 80137c6:	f994 6027 	ldrsb.w	r6, [r4, #39]	; 0x27
            sum0 += cols_8b[2]*ksrc[44];
 80137ca:	fb1c 220e 	smlabb	r2, ip, lr, r2
            sum0 += cols_8b[3]*ksrc[45];
 80137ce:	f99b 702d 	ldrsb.w	r7, [fp, #45]	; 0x2d
            sum1 += cols_8b[4]*ksrc[44];
 80137d2:	f994 9028 	ldrsb.w	r9, [r4, #40]	; 0x28
            sum1 += cols_8b[8]*ksrc[41];
 80137d6:	fb15 3300 	smlabb	r3, r5, r0, r3
            sum0 += cols_8b[4]*ksrc[46];
 80137da:	f99b 102e 	ldrsb.w	r1, [fp, #46]	; 0x2e
            sum0 += cols_8b[3]*ksrc[45];
 80137de:	fb16 2207 	smlabb	r2, r6, r7, r2
            sum1 += cols_8b[2]*ksrc[42];
 80137e2:	fb1a 330c 	smlabb	r3, sl, ip, r3
            sum1 += cols_8b[5]*ksrc[45];
 80137e6:	f994 a029 	ldrsb.w	sl, [r4, #41]	; 0x29
            sum0 += cols_8b[5]*ksrc[47];
 80137ea:	f99b c02f 	ldrsb.w	ip, [fp, #47]	; 0x2f
            sum0 += cols_8b[4]*ksrc[46];
 80137ee:	fb19 2201 	smlabb	r2, r9, r1, r2
            sum1 += cols_8b[6]*ksrc[46];
 80137f2:	f994 502a 	ldrsb.w	r5, [r4, #42]	; 0x2a
            sum1 += cols_8b[3]*ksrc[43];
 80137f6:	fb18 3806 	smlabb	r8, r8, r6, r3
            sum0 += cols_8b[5]*ksrc[47];
 80137fa:	fb1a 230c 	smlabb	r3, sl, ip, r2
            sum0 += cols_8b[6]*ksrc[48];
 80137fe:	f99b 2030 	ldrsb.w	r2, [fp, #48]	; 0x30
            sum1 += cols_8b[4]*ksrc[44];
 8013802:	fb1e 8809 	smlabb	r8, lr, r9, r8
            sum0 += cols_8b[6]*ksrc[48];
 8013806:	fb15 3002 	smlabb	r0, r5, r2, r3
            sum1 += cols_8b[5]*ksrc[45];
 801380a:	fb17 880a 	smlabb	r8, r7, sl, r8
            sum0 += cols_8b[6]*ksrc[48];
 801380e:	ee07 0a90 	vmov	s15, r0
            sum1 += cols_8b[7]*ksrc[47];
 8013812:	f994 002b 	ldrsb.w	r0, [r4, #43]	; 0x2b
            sum1 += cols_8b[6]*ksrc[46];
 8013816:	fb11 8805 	smlabb	r8, r1, r5, r8
            sum1 += cols_8b[8]*ksrc[48];
 801381a:	f994 402c 	ldrsb.w	r4, [r4, #44]	; 0x2c
            sum0 = (float) sum0 * *scales;
 801381e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013822:	9906      	ldr	r1, [sp, #24]
            sum1 += cols_8b[7]*ksrc[47];
 8013824:	fb1c 8800 	smlabb	r8, ip, r0, r8
            sum0 += output_offset;
 8013828:	982b      	ldr	r0, [sp, #172]	; 0xac
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801382a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            sum0 = (float) sum0 * *scales;
 801382c:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[8]*ksrc[48];
 8013830:	fb12 8804 	smlabb	r8, r2, r4, r8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013834:	1b4b      	subs	r3, r1, r5
            sum0 = (float) sum0 * *scales;
 8013836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801383a:	ee17 2a90 	vmov	r2, s15
            sum1 = (float) sum1 * *scales;
 801383e:	ee07 8a90 	vmov	s15, r8
            sum0 += output_offset;
 8013842:	4402      	add	r2, r0
            sum0 = MAX(sum0, activation_min);
 8013844:	982c      	ldr	r0, [sp, #176]	; 0xb0
            sum1 = (float) sum1 * *scales;
 8013846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = MAX(sum0, activation_min);
 801384a:	4282      	cmp	r2, r0
 801384c:	bfb8      	it	lt
 801384e:	4602      	movlt	r2, r0
            sum0 = MIN(sum0, activation_max);
 8013850:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8013852:	4282      	cmp	r2, r0
 8013854:	bfa8      	it	ge
 8013856:	4602      	movge	r2, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801385a:	541a      	strb	r2, [r3, r0]
            sum1 = (float) sum1 * *scales;
 801385c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801385e:	ed92 7a00 	vldr	s14, [r2]
            sum1 += output_offset;
 8013862:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            sum1 = (float) sum1 * *scales;
 8013864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801386c:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8013870:	4413      	add	r3, r2
            sum1 = MAX(sum1, activation_min);
 8013872:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013874:	4293      	cmp	r3, r2
 8013876:	bfb8      	it	lt
 8013878:	4613      	movlt	r3, r2
            sum1 = MIN(sum1, activation_max);
 801387a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801387c:	4293      	cmp	r3, r2
 801387e:	bfa8      	it	ge
 8013880:	4613      	movge	r3, r2
 8013882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013884:	188a      	adds	r2, r1, r2
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8013886:	700b      	strb	r3, [r1, #0]
        for (j = 0; j < output_x / 2; j++) {
 8013888:	9b01      	ldr	r3, [sp, #4]
 801388a:	9206      	str	r2, [sp, #24]
 801388c:	9a08      	ldr	r2, [sp, #32]
 801388e:	429a      	cmp	r2, r3
 8013890:	f47f adfd 	bne.w	801348e <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0xb6>
 8013894:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013896:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013898:	4413      	add	r3, r2
 801389a:	932e      	str	r3, [sp, #184]	; 0xb8
 801389c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if (output_x & 1) {
 801389e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138a0:	3301      	adds	r3, #1
 80138a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80138a4:	2a00      	cmp	r2, #0
 80138a6:	f000 816f 	beq.w	8013b88 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7b0>
            q31_t sum = bias[0] + biasR[0];
 80138aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            cols_8b += column_x + 6;
 80138ac:	9e12      	ldr	r6, [sp, #72]	; 0x48
            q31_t sum = bias[0] + biasR[0];
 80138ae:	6813      	ldr	r3, [r2, #0]
 80138b0:	9910      	ldr	r1, [sp, #64]	; 0x40
            sum += cols_8b[0]*ksrc[7];
 80138b2:	4637      	mov	r7, r6
            cols_8b += column_x + 6;
 80138b4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80138b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80138b8:	1990      	adds	r0, r2, r6
            q31_t sum = bias[0] + biasR[0];
 80138ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138bc:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 80138be:	f99b 5000 	ldrsb.w	r5, [fp]
            q31_t sum = bias[0] + biasR[0];
 80138c2:	6812      	ldr	r2, [r2, #0]
 80138c4:	9110      	str	r1, [sp, #64]	; 0x40
            sum += cols_8b[0]*ksrc[0];
 80138c6:	992e      	ldr	r1, [sp, #184]	; 0xb8
            q31_t sum = bias[0] + biasR[0];
 80138c8:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 80138ca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[0]*ksrc[0];
 80138cc:	f991 4000 	ldrsb.w	r4, [r1]
            cols_8b += column_x + 6;
 80138d0:	1981      	adds	r1, r0, r6
            sum += cols_8b[1]*ksrc[1];
 80138d2:	f992 2001 	ldrsb.w	r2, [r2, #1]
            sum += cols_8b[0]*ksrc[0];
 80138d6:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 80138da:	f99b 5001 	ldrsb.w	r5, [fp, #1]
            sum += cols_8b[2]*ksrc[2];
 80138de:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[1]*ksrc[1];
 80138e0:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 80138e4:	f99b 5002 	ldrsb.w	r5, [fp, #2]
 80138e8:	f994 4002 	ldrsb.w	r4, [r4, #2]
            sum += cols_8b[3]*ksrc[3];
 80138ec:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[2]*ksrc[2];
 80138ee:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 80138f2:	f99b 5003 	ldrsb.w	r5, [fp, #3]
 80138f6:	f992 2003 	ldrsb.w	r2, [r2, #3]
            sum += cols_8b[4]*ksrc[4];
 80138fa:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[3]*ksrc[3];
 80138fc:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8013900:	f99b 5004 	ldrsb.w	r5, [fp, #4]
 8013904:	f994 4004 	ldrsb.w	r4, [r4, #4]
            sum += cols_8b[5]*ksrc[5];
 8013908:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[4]*ksrc[4];
 801390a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 801390e:	f99b 5005 	ldrsb.w	r5, [fp, #5]
 8013912:	f992 2005 	ldrsb.w	r2, [r2, #5]
            sum += cols_8b[6]*ksrc[6];
 8013916:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[5]*ksrc[5];
 8013918:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[6];
 801391c:	f99b 5006 	ldrsb.w	r5, [fp, #6]
 8013920:	f994 4006 	ldrsb.w	r4, [r4, #6]
            sum += cols_8b[0]*ksrc[7];
 8013924:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[6]*ksrc[6];
 8013926:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 801392a:	5792      	ldrsb	r2, [r2, r6]
 801392c:	f99b 5007 	ldrsb.w	r5, [fp, #7]
            sum += cols_8b[1]*ksrc[8];
 8013930:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[7];
 8013934:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 8013938:	f99b 5008 	ldrsb.w	r5, [fp, #8]
            sum += cols_8b[2]*ksrc[9];
 801393c:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[8];
 8013940:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 8013944:	f99b 5009 	ldrsb.w	r5, [fp, #9]
            sum += cols_8b[3]*ksrc[10];
 8013948:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[9];
 801394c:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 8013950:	f99b 500a 	ldrsb.w	r5, [fp, #10]
            sum += cols_8b[4]*ksrc[11];
 8013954:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[10];
 8013958:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 801395c:	f99b 500b 	ldrsb.w	r5, [fp, #11]
            sum += cols_8b[5]*ksrc[12];
 8013960:	f990 4005 	ldrsb.w	r4, [r0, #5]
            sum += cols_8b[4]*ksrc[11];
 8013964:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 8013968:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum += cols_8b[6]*ksrc[13];
 801396c:	f990 2006 	ldrsb.w	r2, [r0, #6]
            sum += cols_8b[5]*ksrc[12];
 8013970:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 8013974:	f99b 500d 	ldrsb.w	r5, [fp, #13]
            sum += cols_8b[0]*ksrc[14];
 8013978:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[6]*ksrc[13];
 801397a:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 801397e:	f99b 500e 	ldrsb.w	r5, [fp, #14]
 8013982:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
            sum += cols_8b[1]*ksrc[15];
 8013986:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[14];
 801398a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 801398e:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum += cols_8b[2]*ksrc[16];
 8013992:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[15];
 8013996:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 801399a:	f99b 5010 	ldrsb.w	r5, [fp, #16]
            sum += cols_8b[3]*ksrc[17];
 801399e:	f991 2003 	ldrsb.w	r2, [r1, #3]
            sum += cols_8b[2]*ksrc[16];
 80139a2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 80139a6:	f99b 5011 	ldrsb.w	r5, [fp, #17]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 80139aa:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
            sum += cols_8b[4]*ksrc[18];
 80139ac:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[17];
 80139b0:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 80139b4:	f99b 5012 	ldrsb.w	r5, [fp, #18]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 80139b8:	46b4      	mov	ip, r6
            sum += cols_8b[5]*ksrc[19];
 80139ba:	f991 2005 	ldrsb.w	r2, [r1, #5]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 80139be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
            sum += cols_8b[4]*ksrc[18];
 80139c0:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 80139c4:	f99b 5013 	ldrsb.w	r5, [fp, #19]
            sum += cols_8b[6]*ksrc[20];
 80139c8:	f991 4006 	ldrsb.w	r4, [r1, #6]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 80139cc:	44b4      	add	ip, r6
            sum += cols_8b[5]*ksrc[19];
 80139ce:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[20];
 80139d2:	f99b 6014 	ldrsb.w	r6, [fp, #20]
            cols_8b += column_x + 6;
 80139d6:	19ca      	adds	r2, r1, r7
            sum += cols_8b[0]*ksrc[21];
 80139d8:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 80139dc:	fb14 3506 	smlabb	r5, r4, r6, r3
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 80139e0:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
            sum += cols_8b[0]*ksrc[21];
 80139e4:	f99b 3015 	ldrsb.w	r3, [fp, #21]
            sum += cols_8b[1]*ksrc[22];
 80139e8:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[0]*ksrc[21];
 80139ec:	fb10 5503 	smlabb	r5, r0, r3, r5
            sum += cols_8b[1]*ksrc[22];
 80139f0:	f99b 3016 	ldrsb.w	r3, [fp, #22]
            sum += cols_8b[2]*ksrc[23];
 80139f4:	f992 4002 	ldrsb.w	r4, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 80139f8:	fb17 5503 	smlabb	r5, r7, r3, r5
            sum += cols_8b[2]*ksrc[23];
 80139fc:	f99b 0017 	ldrsb.w	r0, [fp, #23]
            sum += cols_8b[3]*ksrc[24];
 8013a00:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[2]*ksrc[23];
 8013a04:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[3]*ksrc[24];
 8013a08:	f99b 0018 	ldrsb.w	r0, [fp, #24]
            sum += cols_8b[4]*ksrc[25];
 8013a0c:	f992 4004 	ldrsb.w	r4, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 8013a10:	fb13 5500 	smlabb	r5, r3, r0, r5
            sum += cols_8b[4]*ksrc[25];
 8013a14:	f99b 0019 	ldrsb.w	r0, [fp, #25]
            sum += cols_8b[5]*ksrc[26];
 8013a18:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 8013a1c:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[5]*ksrc[26];
 8013a20:	f99b 401a 	ldrsb.w	r4, [fp, #26]
            sum += cols_8b[0]*ksrc[28];
 8013a24:	9f12      	ldr	r7, [sp, #72]	; 0x48
            sum += cols_8b[6]*ksrc[27];
 8013a26:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 8013a2a:	fb13 5404 	smlabb	r4, r3, r4, r5
            sum += cols_8b[6]*ksrc[27];
 8013a2e:	f99b 301b 	ldrsb.w	r3, [fp, #27]
            sum += cols_8b[0]*ksrc[28];
 8013a32:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            cols_8b += column_x + 6;
 8013a36:	19d1      	adds	r1, r2, r7
            sum += cols_8b[6]*ksrc[27];
 8013a38:	fb10 4303 	smlabb	r3, r0, r3, r4
            sum += cols_8b[0]*ksrc[28];
 8013a3c:	f99b 401c 	ldrsb.w	r4, [fp, #28]
            sum += cols_8b[1]*ksrc[29];
 8013a40:	f991 0001 	ldrsb.w	r0, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 8013a44:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[29];
 8013a48:	f99b 501d 	ldrsb.w	r5, [fp, #29]
            sum += cols_8b[2]*ksrc[30];
 8013a4c:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 8013a50:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[2]*ksrc[30];
 8013a54:	f99b 501e 	ldrsb.w	r5, [fp, #30]
            sum += cols_8b[3]*ksrc[31];
 8013a58:	f991 0003 	ldrsb.w	r0, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 8013a5c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[31];
 8013a60:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum += cols_8b[4]*ksrc[32];
 8013a64:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 8013a68:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[4]*ksrc[32];
 8013a6c:	f99b 5020 	ldrsb.w	r5, [fp, #32]
            sum += cols_8b[5]*ksrc[33];
 8013a70:	f991 0005 	ldrsb.w	r0, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 8013a74:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[33];
 8013a78:	f99b 6021 	ldrsb.w	r6, [fp, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 8013a7c:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 8013a80:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum += cols_8b[6]*ksrc[34];
 8013a84:	f99b 5022 	ldrsb.w	r5, [fp, #34]	; 0x22
            cols_8b += column_x + 6;
 8013a88:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[35];
 8013a8a:	f912 2017 	ldrsb.w	r2, [r2, r7, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 8013a8e:	fb14 0605 	smlabb	r6, r4, r5, r0
            sum += cols_8b[0]*ksrc[35];
 8013a92:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum += cols_8b[1]*ksrc[36];
 8013a96:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[0]*ksrc[35];
 8013a9a:	fb12 6600 	smlabb	r6, r2, r0, r6
            sum += cols_8b[1]*ksrc[36];
 8013a9e:	f99b 4024 	ldrsb.w	r4, [fp, #36]	; 0x24
            sum += cols_8b[2]*ksrc[37];
 8013aa2:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 8013aa6:	fb17 6604 	smlabb	r6, r7, r4, r6
            sum += cols_8b[2]*ksrc[37];
 8013aaa:	f99b 2025 	ldrsb.w	r2, [fp, #37]	; 0x25
            sum += cols_8b[3]*ksrc[38];
 8013aae:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[2]*ksrc[37];
 8013ab2:	fb10 6602 	smlabb	r6, r0, r2, r6
            sum += cols_8b[3]*ksrc[38];
 8013ab6:	f99b 2026 	ldrsb.w	r2, [fp, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 8013aba:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 8013abe:	fb14 6602 	smlabb	r6, r4, r2, r6
            sum += cols_8b[4]*ksrc[39];
 8013ac2:	f99b 4027 	ldrsb.w	r4, [fp, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 8013ac6:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 8013aca:	fb10 6404 	smlabb	r4, r0, r4, r6
            sum += cols_8b[5]*ksrc[40];
 8013ace:	f99b 0028 	ldrsb.w	r0, [fp, #40]	; 0x28
            cols_8b += column_x + 6;
 8013ad2:	9f12      	ldr	r7, [sp, #72]	; 0x48
            sum += cols_8b[5]*ksrc[40];
 8013ad4:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum += cols_8b[6]*ksrc[41];
 8013ad8:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8013adc:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            cols_8b += column_x + 6;
 8013ae0:	443b      	add	r3, r7
            sum += cols_8b[0]*ksrc[42];
 8013ae2:	f911 4017 	ldrsb.w	r4, [r1, r7, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 8013ae6:	fb12 0205 	smlabb	r2, r2, r5, r0
            sum += cols_8b[0]*ksrc[42];
 8013aea:	f99b 502a 	ldrsb.w	r5, [fp, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 8013aee:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 8013af2:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[1]*ksrc[43];
 8013af6:	f99b 502b 	ldrsb.w	r5, [fp, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 8013afa:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 8013afe:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[44];
 8013b02:	f99b 502c 	ldrsb.w	r5, [fp, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 8013b06:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 8013b0a:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[45];
 8013b0e:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 8013b12:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 8013b16:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[46];
 8013b1a:	f99b 502e 	ldrsb.w	r5, [fp, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 8013b1e:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 8013b22:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[5]*ksrc[47];
 8013b26:	f99b 502f 	ldrsb.w	r5, [fp, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 8013b2a:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 8013b2e:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[6]*ksrc[48];
 8013b32:	f99b 5030 	ldrsb.w	r5, [fp, #48]	; 0x30
            sum = (float) sum * *scales;
 8013b36:	9829      	ldr	r0, [sp, #164]	; 0xa4
            sum += cols_8b[6]*ksrc[48];
 8013b38:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013b3c:	9e11      	ldr	r6, [sp, #68]	; 0x44
            sum = (float) sum * *scales;
 8013b3e:	ed90 7a00 	vldr	s14, [r0]
 8013b42:	ee07 2a90 	vmov	s15, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013b46:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8013b48:	9f17      	ldr	r7, [sp, #92]	; 0x5c
            sum = (float) sum * *scales;
 8013b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013b4e:	1a71      	subs	r1, r6, r1
            sum += output_offset;
 8013b50:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8013b52:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 8013b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b58:	9611      	str	r6, [sp, #68]	; 0x44
 8013b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b5e:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8013b62:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8013b64:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013b66:	4293      	cmp	r3, r2
 8013b68:	bfb8      	it	lt
 8013b6a:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8013b6c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	bfa8      	it	ge
 8013b72:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013b74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b76:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 8013b78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	f47f ac68 	bne.w	8013452 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7a>
    }
}
 8013b82:	b01f      	add	sp, #124	; 0x7c
 8013b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8013b88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013b8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013b8c:	4413      	add	r3, r2
 8013b8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013b90:	932e      	str	r3, [sp, #184]	; 0xb8
 8013b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b94:	4413      	add	r3, r2
 8013b96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013b98:	9311      	str	r3, [sp, #68]	; 0x44
 8013b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b9c:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8013b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ba0:	9310      	str	r3, [sp, #64]	; 0x40
 8013ba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	f47f ac54 	bne.w	8013452 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7a>
}
 8013baa:	b01f      	add	sp, #124	; 0x7c
 8013bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013bb0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>:
{
 8013bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb4:	b093      	sub	sp, #76	; 0x4c
 8013bb6:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 8013bb8:	f101 0e05 	add.w	lr, r1, #5
{
 8013bbc:	4615      	mov	r5, r2
 8013bbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013bc0:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8013bc4:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8013bc8:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8013bcc:	1cd8      	adds	r0, r3, #3
 8013bce:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    for(i = 0; i < input_x + 6; i++){
 8013bd2:	2100      	movs	r1, #0
{
 8013bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bd6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8013bda:	9310      	str	r3, [sp, #64]	; 0x40
 8013bdc:	f99d 30a4 	ldrsb.w	r3, [sp, #164]	; 0xa4
    for(i = 0; i < input_x + 6; i++){
 8013be0:	3101      	adds	r1, #1
 8013be2:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 8013be4:	f800 3c03 	strb.w	r3, [r0, #-3]
 8013be8:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 8013bea:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8013bec:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 8013bf0:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 8013bf4:	4571      	cmp	r1, lr
 8013bf6:	ddf3      	ble.n	8013be0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x30>
    for(i = 0; i < input_y; i++){
 8013bf8:	b1cd      	cbz	r5, 8013c2e <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x7e>
 8013bfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013bfc:	4610      	mov	r0, r2
 8013bfe:	2600      	movs	r6, #0
 8013c00:	1d8f      	adds	r7, r1, #6
 8013c02:	19d1      	adds	r1, r2, r7
 8013c04:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 8013c06:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 8013c08:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 8013c0a:	fa1f fc86 	uxth.w	ip, r6
        *cols_8b++ = PAD8;//left
 8013c0e:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 8013c10:	f801 3c03 	strb.w	r3, [r1, #-3]
 8013c14:	4438      	add	r0, r7
    for(i = 0; i < input_y; i++){
 8013c16:	4565      	cmp	r5, ip
        *cols_8b++ = PAD8;//right
 8013c18:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 8013c1c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8013c20:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 8013c22:	d8ef      	bhi.n	8013c04 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x54>
 8013c24:	1e69      	subs	r1, r5, #1
 8013c26:	b289      	uxth	r1, r1
 8013c28:	fb01 7707 	mla	r7, r1, r7, r7
 8013c2c:	443a      	add	r2, r7
 8013c2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013c30:	1e88      	subs	r0, r1, #2
 8013c32:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8013c36:	4288      	cmp	r0, r1
 8013c38:	f200 8092 	bhi.w	8013d60 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1b0>
 8013c3c:	2000      	movs	r0, #0
 8013c3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013c40:	4606      	mov	r6, r0
 8013c42:	f363 0007 	bfi	r0, r3, #0, #8
 8013c46:	f101 0c06 	add.w	ip, r1, #6
 8013c4a:	4611      	mov	r1, r2
 8013c4c:	f363 200f 	bfi	r0, r3, #8, #8
 8013c50:	ea4f 079c 	mov.w	r7, ip, lsr #2
 8013c54:	f363 4017 	bfi	r0, r3, #16, #8
 8013c58:	f363 601f 	bfi	r0, r3, #24, #8
 8013c5c:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;
 8013c5e:	6008      	str	r0, [r1, #0]
 8013c60:	6048      	str	r0, [r1, #4]
 8013c62:	310c      	adds	r1, #12
 8013c64:	42b7      	cmp	r7, r6
 8013c66:	f841 0c04 	str.w	r0, [r1, #-4]
 8013c6a:	d8f7      	bhi.n	8013c5c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xac>
 8013c6c:	f02c 0003 	bic.w	r0, ip, #3
 8013c70:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8013c74:	4560      	cmp	r0, ip
 8013c76:	b287      	uxth	r7, r0
 8013c78:	eb02 0106 	add.w	r1, r2, r6
 8013c7c:	d010      	beq.n	8013ca0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
    for(i = 0; i < input_x + 6; i++){
 8013c7e:	1c78      	adds	r0, r7, #1
        *cols_8b++ = PAD8;
 8013c80:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 8013c82:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 8013c84:	b282      	uxth	r2, r0
        *cols_8b++ = PAD8;
 8013c86:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8013c88:	4572      	cmp	r2, lr
 8013c8a:	dc09      	bgt.n	8013ca0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
 8013c8c:	1cba      	adds	r2, r7, #2
        *cols_8b++ = PAD8;
 8013c8e:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 8013c90:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 8013c92:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8013c94:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 8013c96:	4596      	cmp	lr, r2
 8013c98:	db02      	blt.n	8013ca0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
        *cols_8b++ = PAD8;
 8013c9a:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 8013c9c:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 8013c9e:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 8013ca0:	2c00      	cmp	r4, #0
 8013ca2:	d059      	beq.n	8013d58 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1a8>
 8013ca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ca6:	1e63      	subs	r3, r4, #1
 8013ca8:	1e56      	subs	r6, r2, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8013caa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	b2b6      	uxth	r6, r6
 8013cb2:	3214      	adds	r2, #20
 8013cb4:	3301      	adds	r3, #1
 8013cb6:	1c77      	adds	r7, r6, #1
 8013cb8:	9211      	str	r2, [sp, #68]	; 0x44
 8013cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013cbc:	3607      	adds	r6, #7
 8013cbe:	fb07 f804 	mul.w	r8, r7, r4
 8013cc2:	18d3      	adds	r3, r2, r3
 8013cc4:	960d      	str	r6, [sp, #52]	; 0x34
 8013cc6:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 8013cc8:	b1f5      	cbz	r5, 8013d08 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x158>
 8013cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ccc:	b1e3      	cbz	r3, 8013d08 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x158>
 8013cce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013cd0:	f04f 0e00 	mov.w	lr, #0
 8013cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013cd6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013cda:	eb03 0c02 	add.w	ip, r3, r2
 8013cde:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8013ce0:	eb07 000c 	add.w	r0, r7, ip
 8013ce4:	4662      	mov	r2, ip
 8013ce6:	464b      	mov	r3, r9
                *cols_8b++ = *src;// + input_offset;
 8013ce8:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8013cec:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8013cee:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8013cf2:	4282      	cmp	r2, r0
 8013cf4:	d1f8      	bne.n	8013ce8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x138>
 8013cf6:	f10e 0e01 	add.w	lr, lr, #1
 8013cfa:	44c1      	add	r9, r8
 8013cfc:	44b4      	add	ip, r6
        for(i = 0; i < input_y; i++){
 8013cfe:	fa1f f38e 	uxth.w	r3, lr
 8013d02:	429d      	cmp	r5, r3
 8013d04:	d8ec      	bhi.n	8013ce0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x130>
 8013d06:	960d      	str	r6, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013d08:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8013d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d0c:	9604      	str	r6, [sp, #16]
 8013d0e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d12:	9603      	str	r6, [sp, #12]
 8013d14:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8013d16:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013d18:	9601      	str	r6, [sp, #4]
 8013d1a:	f106 0904 	add.w	r9, r6, #4
 8013d1e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8013d20:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8013d22:	9302      	str	r3, [sp, #8]
        input++;
 8013d24:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013d26:	9600      	str	r6, [sp, #0]
        ksrc += 49;
 8013d28:	3631      	adds	r6, #49	; 0x31
        input++;
 8013d2a:	930b      	str	r3, [sp, #44]	; 0x2c
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013d2c:	465b      	mov	r3, fp
 8013d2e:	9207      	str	r2, [sp, #28]
 8013d30:	4652      	mov	r2, sl
 8013d32:	9106      	str	r1, [sp, #24]
 8013d34:	f10b 0b04 	add.w	fp, fp, #4
 8013d38:	9005      	str	r0, [sp, #20]
 8013d3a:	f10a 0a04 	add.w	sl, sl, #4
 8013d3e:	9408      	str	r4, [sp, #32]
 8013d40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013d42:	9810      	ldr	r0, [sp, #64]	; 0x40
        ksrc += 49;
 8013d44:	961c      	str	r6, [sp, #112]	; 0x70
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013d46:	f7ff fb47 	bl	80133d8 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>
    for (c = 0; c < input_ch; c++){
 8013d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d002      	beq.n	8013d58 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1a8>
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8013d52:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8013d56:	e7b7      	b.n	8013cc8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x118>
}
 8013d58:	2000      	movs	r0, #0
 8013d5a:	b013      	add	sp, #76	; 0x4c
 8013d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d60:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8013d62:	2100      	movs	r1, #0
 8013d64:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 8013d66:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 8013d6a:	f802 3c02 	strb.w	r3, [r2, #-2]
 8013d6e:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8013d70:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8013d72:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 8013d76:	4571      	cmp	r1, lr
 8013d78:	ddf4      	ble.n	8013d64 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1b4>
 8013d7a:	e791      	b.n	8013ca0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>

08013d7c <getInput>:
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

signed char* getInput() {
    return &buffer0[25600];
}
 8013d7c:	4800      	ldr	r0, [pc, #0]	; (8013d80 <getInput+0x4>)
 8013d7e:	4770      	bx	lr
 8013d80:	2000ae98 	.word	0x2000ae98

08013d84 <getOutput>:
signed char* getOutput() {
    return NNoutput;
}
 8013d84:	4800      	ldr	r0, [pc, #0]	; (8013d88 <getOutput+0x4>)
 8013d86:	4770      	bx	lr
 8013d88:	20004b38 	.word	0x20004b38

08013d8c <invoke>:
void end2endinference(q7_t* img){
    invoke(NULL);
}
void invoke(float* labels){
 8013d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/* layer 0:CONV_2D */
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 8013d90:	4fdf      	ldr	r7, [pc, #892]	; (8014110 <invoke+0x384>)
 8013d92:	2601      	movs	r6, #1
 8013d94:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 8013d98:	f04f 0b28 	mov.w	fp, #40	; 0x28
 8013d9c:	f5a7 45c8 	sub.w	r5, r7, #25600	; 0x6400
 8013da0:	f04f 0a10 	mov.w	sl, #16
 8013da4:	f507 437a 	add.w	r3, r7, #64000	; 0xfa00
 8013da8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013dac:	2250      	movs	r2, #80	; 0x50
 8013dae:	f8df e384 	ldr.w	lr, [pc, #900]	; 8014134 <invoke+0x3a8>
 8013db2:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8014138 <invoke+0x3ac>
 8013db6:	4638      	mov	r0, r7
 8013db8:	f8df 9380 	ldr.w	r9, [pc, #896]	; 801413c <invoke+0x3b0>
 8013dbc:	4611      	mov	r1, r2
void invoke(float* labels){
 8013dbe:	ed2d 8b04 	vpush	{d8-d9}
 8013dc2:	b095      	sub	sp, #84	; 0x54
/* layer 7:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
/* layer 8:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,scales8,8,128,-128,127,&buffer0[25600],20,20,16,sbuf);
/* layer 9:ADD */
add_fpreq(6400, &buffer0[25600],0.07699620723724365,8,&buffer0[19200],0.08598089963197708,-22,0.10197763890028,-20,&buffer0[32000]);
 8013dc4:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 8014114 <invoke+0x388>
/* layer 18:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
/* layer 19:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,scales17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
/* layer 20:ADD */
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 8013dc8:	eddf 8ad3 	vldr	s17, [pc, #844]	; 8014118 <invoke+0x38c>
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 8013dcc:	9710      	str	r7, [sp, #64]	; 0x40
 8013dce:	277f      	movs	r7, #127	; 0x7f
 8013dd0:	9604      	str	r6, [sp, #16]
 8013dd2:	4ed2      	ldr	r6, [pc, #840]	; (801411c <invoke+0x390>)
 8013dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013dd8:	2303      	movs	r3, #3
 8013dda:	9507      	str	r5, [sp, #28]
 8013ddc:	f8cd b020 	str.w	fp, [sp, #32]
 8013de0:	9403      	str	r4, [sp, #12]
 8013de2:	f8cd 9008 	str.w	r9, [sp, #8]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8013de6:	f04f 090a 	mov.w	r9, #10
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 8013dea:	f8cd e004 	str.w	lr, [sp, #4]
 8013dee:	9600      	str	r6, [sp, #0]
/* layer 43:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
/* layer 44:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
/* layer 45:ADD */
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 8013df0:	ed9f 8acb 	vldr	s16, [pc, #812]	; 8014120 <invoke+0x394>
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 8013df4:	e9cd 8c0c 	strd	r8, ip, [sp, #48]	; 0x30
 8013df8:	e9cd ba09 	strd	fp, sl, [sp, #36]	; 0x24
 8013dfc:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8013e00:	f001 fc92 	bl	8015728 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],40,40,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],40,40,16,sbuf,-128);
 8013e04:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013e06:	f8df e338 	ldr.w	lr, [pc, #824]	; 8014140 <invoke+0x3b4>
 8013e0a:	4653      	mov	r3, sl
 8013e0c:	f8df c334 	ldr.w	ip, [pc, #820]	; 8014144 <invoke+0x3b8>
 8013e10:	465a      	mov	r2, fp
 8013e12:	960c      	str	r6, [sp, #48]	; 0x30
 8013e14:	2680      	movs	r6, #128	; 0x80
 8013e16:	9508      	str	r5, [sp, #32]
 8013e18:	4659      	mov	r1, fp
 8013e1a:	940d      	str	r4, [sp, #52]	; 0x34
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[0],40,40,48,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8013e22:	f04f 0814 	mov.w	r8, #20
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],40,40,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],40,40,16,sbuf,-128);
 8013e26:	9404      	str	r4, [sp, #16]
 8013e28:	9605      	str	r6, [sp, #20]
 8013e2a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8013e2e:	f8df e318 	ldr.w	lr, [pc, #792]	; 8014148 <invoke+0x3bc>
 8013e32:	f8df c318 	ldr.w	ip, [pc, #792]	; 801414c <invoke+0x3c0>
 8013e36:	e9cd ba0a 	strd	fp, sl, [sp, #40]	; 0x28
 8013e3a:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8013e3e:	e9cd ce00 	strd	ip, lr, [sp]
 8013e42:	f7fd f9ef 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[0],40,40,16,(const q7_t*) weight2,bias2,scales2,-4,128,-128,127,&buffer0[76800],40,40,8,sbuf);
 8013e46:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013e48:	f8df c304 	ldr.w	ip, [pc, #772]	; 8014150 <invoke+0x3c4>
 8013e4c:	4653      	mov	r3, sl
 8013e4e:	960b      	str	r6, [sp, #44]	; 0x2c
 8013e50:	2680      	movs	r6, #128	; 0x80
 8013e52:	f8df e300 	ldr.w	lr, [pc, #768]	; 8014154 <invoke+0x3c8>
 8013e56:	465a      	mov	r2, fp
 8013e58:	9604      	str	r6, [sp, #16]
 8013e5a:	f505 3696 	add.w	r6, r5, #76800	; 0x12c00
 8013e5e:	f8cd c004 	str.w	ip, [sp, #4]
 8013e62:	4659      	mov	r1, fp
 8013e64:	9607      	str	r6, [sp, #28]
 8013e66:	2608      	movs	r6, #8
 8013e68:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8014158 <invoke+0x3cc>
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	960a      	str	r6, [sp, #40]	; 0x28
 8013e70:	f06f 0603 	mvn.w	r6, #3
 8013e74:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013e78:	f8cd b020 	str.w	fp, [sp, #32]
 8013e7c:	f8cd c000 	str.w	ip, [sp]
 8013e80:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8013e84:	e9cd e602 	strd	lr, r6, [sp, #8]
 8013e88:	f000 ffea 	bl	8014e60 <convolve_1x1_s8_ch16_fpreq>
convolve_1x1_s8_ch8_fpreq(&buffer0[76800],40,40,8,(const q7_t*) weight3,bias3,scales3,-128,4,-128,127,&buffer0[0],40,40,48,sbuf);
 8013e8c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013e8e:	f04f 0e04 	mov.w	lr, #4
 8013e92:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 801415c <invoke+0x3d0>
 8013e96:	960b      	str	r6, [sp, #44]	; 0x2c
 8013e98:	2630      	movs	r6, #48	; 0x30
 8013e9a:	f8cd e010 	str.w	lr, [sp, #16]
 8013e9e:	465a      	mov	r2, fp
 8013ea0:	f8cd c008 	str.w	ip, [sp, #8]
 8013ea4:	4659      	mov	r1, fp
 8013ea6:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 8014160 <invoke+0x3d4>
 8013eaa:	f505 3096 	add.w	r0, r5, #76800	; 0x12c00
 8013eae:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8014164 <invoke+0x3d8>
 8013eb2:	2308      	movs	r3, #8
 8013eb4:	9507      	str	r5, [sp, #28]
 8013eb6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013eba:	f8cd b020 	str.w	fp, [sp, #32]
 8013ebe:	9403      	str	r4, [sp, #12]
 8013ec0:	960a      	str	r6, [sp, #40]	; 0x28
 8013ec2:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8013ec6:	e9cd ce00 	strd	ip, lr, [sp]
 8013eca:	f001 fa69 	bl	80153a0 <convolve_1x1_s8_ch8_fpreq>
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[0],40,40,48,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8013ece:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013ed0:	f8df e294 	ldr.w	lr, [pc, #660]	; 8014168 <invoke+0x3dc>
 8013ed4:	2330      	movs	r3, #48	; 0x30
 8013ed6:	f8df c294 	ldr.w	ip, [pc, #660]	; 801416c <invoke+0x3e0>
 8013eda:	465a      	mov	r2, fp
 8013edc:	960c      	str	r6, [sp, #48]	; 0x30
 8013ede:	2680      	movs	r6, #128	; 0x80
 8013ee0:	9508      	str	r5, [sp, #32]
 8013ee2:	4659      	mov	r1, fp
 8013ee4:	940d      	str	r4, [sp, #52]	; 0x34
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013eea:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8013eee:	f8df e280 	ldr.w	lr, [pc, #640]	; 8014170 <invoke+0x3e4>
 8013ef2:	f8df c280 	ldr.w	ip, [pc, #640]	; 8014174 <invoke+0x3e8>
 8013ef6:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8013efa:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8013efe:	e9cd ce00 	strd	ip, lr, [sp]
 8013f02:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8013f06:	f7fd fc83 	bl	8011810 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight5,bias5,scales5,-22,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 8013f0a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013f0c:	f06f 0e15 	mvn.w	lr, #21
 8013f10:	f8df c264 	ldr.w	ip, [pc, #612]	; 8014178 <invoke+0x3ec>
 8013f14:	960b      	str	r6, [sp, #44]	; 0x2c
 8013f16:	2680      	movs	r6, #128	; 0x80
 8013f18:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8013f1c:	4642      	mov	r2, r8
 8013f1e:	9604      	str	r6, [sp, #16]
 8013f20:	f505 4696 	add.w	r6, r5, #19200	; 0x4b00
 8013f24:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013f28:	4641      	mov	r1, r8
 8013f2a:	f8cd 8020 	str.w	r8, [sp, #32]
 8013f2e:	4628      	mov	r0, r5
 8013f30:	9607      	str	r6, [sp, #28]
 8013f32:	2330      	movs	r3, #48	; 0x30
 8013f34:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8013f38:	f8df e240 	ldr.w	lr, [pc, #576]	; 801417c <invoke+0x3f0>
 8013f3c:	f8df c240 	ldr.w	ip, [pc, #576]	; 8014180 <invoke+0x3f4>
 8013f40:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8013f44:	e9cd ce00 	strd	ip, lr, [sp]
 8013f48:	f001 f94a 	bl	80151e0 <convolve_1x1_s8_ch48_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[19200],20,20,16,(const q7_t*) weight6,bias6,scales6,-128,22,-128,127,&buffer0[0],20,20,48,sbuf);
 8013f4c:	f04f 0e16 	mov.w	lr, #22
 8013f50:	f8df c230 	ldr.w	ip, [pc, #560]	; 8014184 <invoke+0x3f8>
 8013f54:	4630      	mov	r0, r6
 8013f56:	2130      	movs	r1, #48	; 0x30
 8013f58:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013f5a:	f8cd c008 	str.w	ip, [sp, #8]
 8013f5e:	4653      	mov	r3, sl
 8013f60:	f8df c224 	ldr.w	ip, [pc, #548]	; 8014188 <invoke+0x3fc>
 8013f64:	4642      	mov	r2, r8
 8013f66:	960b      	str	r6, [sp, #44]	; 0x2c
 8013f68:	9507      	str	r5, [sp, #28]
 8013f6a:	910a      	str	r1, [sp, #40]	; 0x28
 8013f6c:	4641      	mov	r1, r8
 8013f6e:	e9cd 4e03 	strd	r4, lr, [sp, #12]
 8013f72:	f8df e218 	ldr.w	lr, [pc, #536]	; 801418c <invoke+0x400>
 8013f76:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8013f7a:	e9cd ce00 	strd	ip, lr, [sp]
 8013f7e:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8013f82:	f000 ff6d 	bl	8014e60 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8013f86:	f8df e208 	ldr.w	lr, [pc, #520]	; 8014190 <invoke+0x404>
 8013f8a:	f8df c208 	ldr.w	ip, [pc, #520]	; 8014194 <invoke+0x408>
 8013f8e:	2330      	movs	r3, #48	; 0x30
 8013f90:	960f      	str	r6, [sp, #60]	; 0x3c
 8013f92:	4642      	mov	r2, r8
 8013f94:	960c      	str	r6, [sp, #48]	; 0x30
 8013f96:	2680      	movs	r6, #128	; 0x80
 8013f98:	9508      	str	r5, [sp, #32]
 8013f9a:	4641      	mov	r1, r8
 8013f9c:	940d      	str	r4, [sp, #52]	; 0x34
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013fa4:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8013fa8:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8014198 <invoke+0x40c>
 8013fac:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 801419c <invoke+0x410>
 8013fb0:	e9cd 830a 	strd	r8, r3, [sp, #40]	; 0x28
 8013fb4:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8013fb8:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8013fbc:	e9cd ce00 	strd	ip, lr, [sp]
 8013fc0:	f7fd f930 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,scales8,8,128,-128,127,&buffer0[25600],20,20,16,sbuf);
 8013fc4:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 80141a0 <invoke+0x414>
 8013fc8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013fca:	217f      	movs	r1, #127	; 0x7f
 8013fcc:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80141a4 <invoke+0x418>
 8013fd0:	4642      	mov	r2, r8
 8013fd2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013fd4:	4628      	mov	r0, r5
 8013fd6:	9707      	str	r7, [sp, #28]
 8013fd8:	2780      	movs	r7, #128	; 0x80
 8013fda:	960b      	str	r6, [sp, #44]	; 0x2c
 8013fdc:	2330      	movs	r3, #48	; 0x30
 8013fde:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8013fe2:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8013fe6:	e9cd 4105 	strd	r4, r1, [sp, #20]
 8013fea:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80141a8 <invoke+0x41c>
 8013fee:	2108      	movs	r1, #8
 8013ff0:	f8cd c000 	str.w	ip, [sp]
 8013ff4:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8013ff8:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8013ffc:	4641      	mov	r1, r8
convolve_1x1_s8_ch16_fpreq(&buffer0[32000],20,20,16,(const q7_t*) weight9,bias9,scales9,-128,20,-128,127,&buffer0[0],20,20,48,sbuf);
 8013ffe:	277f      	movs	r7, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,scales8,8,128,-128,127,&buffer0[25600],20,20,16,sbuf);
 8014000:	f001 f8ee 	bl	80151e0 <convolve_1x1_s8_ch48_fpreq>
add_fpreq(6400, &buffer0[25600],0.07699620723724365,8,&buffer0[19200],0.08598089963197708,-22,0.10197763890028,-20,&buffer0[32000]);
 8014004:	f505 4296 	add.w	r2, r5, #19200	; 0x4b00
 8014008:	eeb0 2a49 	vmov.f32	s4, s18
 801400c:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8014124 <invoke+0x398>
 8014010:	eefb 2a04 	vmov.f32	s5, #180	; 0xc1a00000 -20.0
 8014014:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8014128 <invoke+0x39c>
 8014018:	eefb 1a06 	vmov.f32	s3, #182	; 0xc1b00000 -22.0
 801401c:	f502 5348 	add.w	r3, r2, #12800	; 0x3200
 8014020:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8014024:	f502 51c8 	add.w	r1, r2, #6400	; 0x1900
 8014028:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801402c:	f000 feca 	bl	8014dc4 <add_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[32000],20,20,16,(const q7_t*) weight9,bias9,scales9,-128,20,-128,127,&buffer0[0],20,20,48,sbuf);
 8014030:	f8df e178 	ldr.w	lr, [pc, #376]	; 80141ac <invoke+0x420>
 8014034:	f8df c178 	ldr.w	ip, [pc, #376]	; 80141b0 <invoke+0x424>
 8014038:	2130      	movs	r1, #48	; 0x30
 801403a:	960b      	str	r6, [sp, #44]	; 0x2c
 801403c:	4653      	mov	r3, sl
 801403e:	9507      	str	r5, [sp, #28]
 8014040:	4642      	mov	r2, r8
 8014042:	910a      	str	r1, [sp, #40]	; 0x28
 8014044:	f505 40fa 	add.w	r0, r5, #32000	; 0x7d00
 8014048:	4641      	mov	r1, r8
 801404a:	e9cd ce01 	strd	ip, lr, [sp, #4]
 801404e:	f8df c164 	ldr.w	ip, [pc, #356]	; 80141b4 <invoke+0x428>
 8014052:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8014056:	e9cd 4803 	strd	r4, r8, [sp, #12]
 801405a:	e9cd 8808 	strd	r8, r8, [sp, #32]
 801405e:	f8cd c000 	str.w	ip, [sp]
 8014062:	f000 fefd 	bl	8014e60 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8014066:	f8df c150 	ldr.w	ip, [pc, #336]	; 80141b8 <invoke+0x42c>
 801406a:	f8df e150 	ldr.w	lr, [pc, #336]	; 80141bc <invoke+0x430>
 801406e:	2330      	movs	r3, #48	; 0x30
 8014070:	f8cd c00c 	str.w	ip, [sp, #12]
 8014074:	4642      	mov	r2, r8
 8014076:	f8df c148 	ldr.w	ip, [pc, #328]	; 80141c0 <invoke+0x434>
 801407a:	4641      	mov	r1, r8
 801407c:	960f      	str	r6, [sp, #60]	; 0x3c
 801407e:	4628      	mov	r0, r5
 8014080:	960c      	str	r6, [sp, #48]	; 0x30
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,scales11,-4,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 8014082:	f505 4696 	add.w	r6, r5, #19200	; 0x4b00
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8014086:	9508      	str	r5, [sp, #32]
 8014088:	940d      	str	r4, [sp, #52]	; 0x34
 801408a:	930b      	str	r3, [sp, #44]	; 0x2c
 801408c:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8014090:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8014094:	2780      	movs	r7, #128	; 0x80
 8014096:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80141c4 <invoke+0x438>
 801409a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801409e:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 80140a2:	f8cd c000 	str.w	ip, [sp]
 80140a6:	f7fd f8bd 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,scales11,-4,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 80140aa:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80141c8 <invoke+0x43c>
 80140ae:	9607      	str	r6, [sp, #28]
 80140b0:	267f      	movs	r6, #127	; 0x7f
 80140b2:	f8df c118 	ldr.w	ip, [pc, #280]	; 80141cc <invoke+0x440>
 80140b6:	f06f 0303 	mvn.w	r3, #3
 80140ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80140bc:	4642      	mov	r2, r8
 80140be:	9303      	str	r3, [sp, #12]
 80140c0:	4641      	mov	r1, r8
 80140c2:	970b      	str	r7, [sp, #44]	; 0x2c
 80140c4:	4628      	mov	r0, r5
 80140c6:	f8cd 8020 	str.w	r8, [sp, #32]
 80140ca:	2330      	movs	r3, #48	; 0x30
 80140cc:	e9cd ce01 	strd	ip, lr, [sp, #4]
 80140d0:	e9cd 4605 	strd	r4, r6, [sp, #20]
 80140d4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80141d0 <invoke+0x444>
 80140d8:	2680      	movs	r6, #128	; 0x80
 80140da:	e9cd 8a09 	strd	r8, sl, [sp, #36]	; 0x24
 80140de:	f8cd c000 	str.w	ip, [sp]
 80140e2:	9604      	str	r6, [sp, #16]
convolve_1x1_s8_ch16_fpreq(&buffer0[25600],20,20,16,(const q7_t*) weight12,bias12,scales12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 80140e4:	267f      	movs	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,scales11,-4,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 80140e6:	f001 f87b 	bl	80151e0 <convolve_1x1_s8_ch48_fpreq>
add_fpreq(6400, &buffer0[19200],0.024848325178027153,-4,&buffer0[32000],0.10197763890028,-20,0.10464993864297867,-15,&buffer0[25600]);
 80140ea:	f505 43c8 	add.w	r3, r5, #25600	; 0x6400
 80140ee:	eeb0 1a49 	vmov.f32	s2, s18
 80140f2:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 801412c <invoke+0x3a0>
 80140f6:	f503 52c8 	add.w	r2, r3, #6400	; 0x1900
 80140fa:	eefa 2a0e 	vmov.f32	s5, #174	; 0xc1700000 -15.0
 80140fe:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 8014102:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8014130 <invoke+0x3a4>
 8014106:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 801410a:	f5a2 5148 	sub.w	r1, r2, #12800	; 0x3200
 801410e:	e061      	b.n	80141d4 <invoke+0x448>
 8014110:	2000ae98 	.word	0x2000ae98
 8014114:	3dd0d9a7 	.word	0x3dd0d9a7
 8014118:	3d8fd9c1 	.word	0x3d8fd9c1
 801411c:	08039d30 	.word	0x08039d30
 8014120:	3d20b771 	.word	0x3d20b771
 8014124:	3db016c1 	.word	0x3db016c1
 8014128:	3d9db030 	.word	0x3d9db030
 801412c:	3dd652b5 	.word	0x3dd652b5
 8014130:	3ccb8eb7 	.word	0x3ccb8eb7
 8014134:	0802b440 	.word	0x0802b440
 8014138:	2001b660 	.word	0x2001b660
 801413c:	08033da8 	.word	0x08033da8
 8014140:	08033de8 	.word	0x08033de8
 8014144:	080313c8 	.word	0x080313c8
 8014148:	0802e9e8 	.word	0x0802e9e8
 801414c:	0801cf08 	.word	0x0801cf08
 8014150:	0802ba60 	.word	0x0802ba60
 8014154:	080349a8 	.word	0x080349a8
 8014158:	0803cfa0 	.word	0x0803cfa0
 801415c:	08035fa8 	.word	0x08035fa8
 8014160:	0802c6a0 	.word	0x0802c6a0
 8014164:	08049ce0 	.word	0x08049ce0
 8014168:	080386a8 	.word	0x080386a8
 801416c:	080331a8 	.word	0x080331a8
 8014170:	080307c8 	.word	0x080307c8
 8014174:	08026c40 	.word	0x08026c40
 8014178:	08039a70 	.word	0x08039a70
 801417c:	0802e7e8 	.word	0x0802e7e8
 8014180:	080916a0 	.word	0x080916a0
 8014184:	08039ab0 	.word	0x08039ab0
 8014188:	080919a0 	.word	0x080919a0
 801418c:	0802e828 	.word	0x0802e828
 8014190:	08039b70 	.word	0x08039b70
 8014194:	08033ce8 	.word	0x08033ce8
 8014198:	08031308 	.word	0x08031308
 801419c:	0802b290 	.word	0x0802b290
 80141a0:	08039c30 	.word	0x08039c30
 80141a4:	0802e8e8 	.word	0x0802e8e8
 80141a8:	08091ca0 	.word	0x08091ca0
 80141ac:	08039c70 	.word	0x08039c70
 80141b0:	0802e928 	.word	0x0802e928
 80141b4:	08091fa0 	.word	0x08091fa0
 80141b8:	08033e28 	.word	0x08033e28
 80141bc:	08031408 	.word	0x08031408
 80141c0:	0802ea28 	.word	0x0802ea28
 80141c4:	0801cf98 	.word	0x0801cf98
 80141c8:	08033ee8 	.word	0x08033ee8
 80141cc:	0802b480 	.word	0x0802b480
 80141d0:	08039ee0 	.word	0x08039ee0
 80141d4:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80141d8:	f000 fdf4 	bl	8014dc4 <add_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[25600],20,20,16,(const q7_t*) weight12,bias12,scales12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 80141dc:	f8df e3b8 	ldr.w	lr, [pc, #952]	; 8014598 <invoke+0x80c>
 80141e0:	f8df c3b8 	ldr.w	ip, [pc, #952]	; 801459c <invoke+0x810>
 80141e4:	2030      	movs	r0, #48	; 0x30
 80141e6:	4653      	mov	r3, sl
 80141e8:	4642      	mov	r2, r8
 80141ea:	970b      	str	r7, [sp, #44]	; 0x2c
 80141ec:	4641      	mov	r1, r8
 80141ee:	900a      	str	r0, [sp, #40]	; 0x28
 80141f0:	f505 40c8 	add.w	r0, r5, #25600	; 0x6400
 80141f4:	9507      	str	r5, [sp, #28]
 80141f6:	9403      	str	r4, [sp, #12]
 80141f8:	f8cd c000 	str.w	ip, [sp]
 80141fc:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8014200:	260f      	movs	r6, #15
 8014202:	9604      	str	r6, [sp, #16]
 8014204:	4ed8      	ldr	r6, [pc, #864]	; (8014568 <invoke+0x7dc>)
 8014206:	e9cd e601 	strd	lr, r6, [sp, #4]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 801420a:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch16_fpreq(&buffer0[25600],20,20,16,(const q7_t*) weight12,bias12,scales12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 801420c:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8014210:	f000 fe26 	bl	8014e60 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8014214:	9605      	str	r6, [sp, #20]
 8014216:	267f      	movs	r6, #127	; 0x7f
 8014218:	f8df e384 	ldr.w	lr, [pc, #900]	; 80145a0 <invoke+0x814>
 801421c:	2330      	movs	r3, #48	; 0x30
 801421e:	f8df c384 	ldr.w	ip, [pc, #900]	; 80145a4 <invoke+0x818>
 8014222:	4642      	mov	r2, r8
 8014224:	4641      	mov	r1, r8
 8014226:	930b      	str	r3, [sp, #44]	; 0x2c
 8014228:	4628      	mov	r0, r5
 801422a:	970c      	str	r7, [sp, #48]	; 0x30
 801422c:	9508      	str	r5, [sp, #32]
 801422e:	940d      	str	r4, [sp, #52]	; 0x34
 8014230:	9404      	str	r4, [sp, #16]
 8014232:	f8cd c000 	str.w	ip, [sp]
convolve_1x1_s8_ch48_fpreq(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,scales14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8014236:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80145a8 <invoke+0x81c>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 801423a:	e9cd 4606 	strd	r4, r6, [sp, #24]
 801423e:	4ecb      	ldr	r6, [pc, #812]	; (801456c <invoke+0x7e0>)
 8014240:	9603      	str	r6, [sp, #12]
 8014242:	4ecb      	ldr	r6, [pc, #812]	; (8014570 <invoke+0x7e4>)
 8014244:	e9cd e601 	strd	lr, r6, [sp, #4]
convolve_1x1_s8_ch48_fpreq(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,scales14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8014248:	2680      	movs	r6, #128	; 0x80
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 801424a:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 801424e:	f7ff fcaf 	bl	8013bb0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,scales14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8014252:	9604      	str	r6, [sp, #16]
 8014254:	970f      	str	r7, [sp, #60]	; 0x3c
 8014256:	267f      	movs	r6, #127	; 0x7f
 8014258:	970b      	str	r7, [sp, #44]	; 0x2c
 801425a:	2718      	movs	r7, #24
 801425c:	f06f 0c0f 	mvn.w	ip, #15
 8014260:	f8df e348 	ldr.w	lr, [pc, #840]	; 80145ac <invoke+0x820>
 8014264:	970a      	str	r7, [sp, #40]	; 0x28
 8014266:	464a      	mov	r2, r9
 8014268:	4fc2      	ldr	r7, [pc, #776]	; (8014574 <invoke+0x7e8>)
 801426a:	4649      	mov	r1, r9
 801426c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014270:	4628      	mov	r0, r5
 8014272:	f8cd 9020 	str.w	r9, [sp, #32]
 8014276:	2330      	movs	r3, #48	; 0x30
 8014278:	f8cd e004 	str.w	lr, [sp, #4]
 801427c:	9700      	str	r7, [sp, #0]
 801427e:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8014282:	f505 5661 	add.w	r6, r5, #14400	; 0x3840
 8014286:	e9cd 8c02 	strd	r8, ip, [sp, #8]
 801428a:	9607      	str	r6, [sp, #28]
 801428c:	f000 ffa8 	bl	80151e0 <convolve_1x1_s8_ch48_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[14400],10,10,24,(const q7_t*) weight15,bias15,scales15,-128,16,-128,127,&buffer0[0],10,10,144,sbuf);
 8014290:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014292:	f8df e31c 	ldr.w	lr, [pc, #796]	; 80145b0 <invoke+0x824>
 8014296:	464a      	mov	r2, r9
 8014298:	970b      	str	r7, [sp, #44]	; 0x2c
 801429a:	277f      	movs	r7, #127	; 0x7f
 801429c:	f8df c314 	ldr.w	ip, [pc, #788]	; 80145b4 <invoke+0x828>
 80142a0:	4649      	mov	r1, r9
 80142a2:	f8df 8314 	ldr.w	r8, [pc, #788]	; 80145b8 <invoke+0x82c>
 80142a6:	4630      	mov	r0, r6
 80142a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80142ac:	2318      	movs	r3, #24
 80142ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80142b2:	9507      	str	r5, [sp, #28]
 80142b4:	f8cd c000 	str.w	ip, [sp]
 80142b8:	e9cd 4705 	strd	r4, r7, [sp, #20]
 80142bc:	2790      	movs	r7, #144	; 0x90
 80142be:	e9cd 4a03 	strd	r4, sl, [sp, #12]
 80142c2:	e9cd e801 	strd	lr, r8, [sp, #4]
 80142c6:	970a      	str	r7, [sp, #40]	; 0x28
 80142c8:	f000 feaa 	bl	8015020 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
 80142cc:	463b      	mov	r3, r7
 80142ce:	970b      	str	r7, [sp, #44]	; 0x2c
 80142d0:	2780      	movs	r7, #128	; 0x80
 80142d2:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 80145bc <invoke+0x830>
 80142d6:	464a      	mov	r2, r9
 80142d8:	9705      	str	r7, [sp, #20]
 80142da:	4649      	mov	r1, r9
 80142dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80142de:	4628      	mov	r0, r5
 80142e0:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80145c0 <invoke+0x834>
 80142e4:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 80145c4 <invoke+0x838>
 80142e8:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80145c8 <invoke+0x83c>
 80142ec:	9406      	str	r4, [sp, #24]
 80142ee:	9404      	str	r4, [sp, #16]
 80142f0:	9508      	str	r5, [sp, #32]
 80142f2:	e9cd 740c 	strd	r7, r4, [sp, #48]	; 0x30
 80142f6:	277f      	movs	r7, #127	; 0x7f
 80142f8:	9707      	str	r7, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,scales17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
 80142fa:	2780      	movs	r7, #128	; 0x80
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
 80142fc:	e9cd 8a02 	strd	r8, sl, [sp, #8]
 8014300:	e9cd ce00 	strd	ip, lr, [sp]
 8014304:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 8014308:	f7fc ff8c 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,scales17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
 801430c:	f506 6a16 	add.w	sl, r6, #2400	; 0x960
 8014310:	f06f 0c0d 	mvn.w	ip, #13
 8014314:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 80145cc <invoke+0x840>
 8014318:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80145d0 <invoke+0x844>
 801431c:	2218      	movs	r2, #24
 801431e:	f8cd e004 	str.w	lr, [sp, #4]
 8014322:	4649      	mov	r1, r9
 8014324:	920a      	str	r2, [sp, #40]	; 0x28
 8014326:	4628      	mov	r0, r5
 8014328:	464a      	mov	r2, r9
 801432a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801432e:	f8cd 9020 	str.w	r9, [sp, #32]
 8014332:	2390      	movs	r3, #144	; 0x90
 8014334:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8014338:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801433a:	970b      	str	r7, [sp, #44]	; 0x2c
 801433c:	277f      	movs	r7, #127	; 0x7f
 801433e:	e9cd 7a06 	strd	r7, sl, [sp, #24]
 8014342:	4f8d      	ldr	r7, [pc, #564]	; (8014578 <invoke+0x7ec>)
 8014344:	e9cd 8c02 	strd	r8, ip, [sp, #8]
 8014348:	9700      	str	r7, [sp, #0]
 801434a:	f001 f909 	bl	8015560 <convolve_1x1_s8_fpreq>
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 801434e:	eeb0 2a68 	vmov.f32	s4, s17
 8014352:	eef8 2a08 	vmov.f32	s5, #136	; 0xc0400000 -3.0
 8014356:	ed9f 1a89 	vldr	s2, [pc, #548]	; 801457c <invoke+0x7f0>
 801435a:	eefb 1a00 	vmov.f32	s3, #176	; 0xc1800000 -16.0
 801435e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8014580 <invoke+0x7f4>
 8014362:	eefa 0a0c 	vmov.f32	s1, #172	; 0xc1600000 -14.0
 8014366:	4632      	mov	r2, r6
 8014368:	4651      	mov	r1, sl
 801436a:	f5aa 5396 	sub.w	r3, sl, #4800	; 0x12c0
 801436e:	f44f 6016 	mov.w	r0, #2400	; 0x960
convolve_1x1_s8_ch24_fpreq(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,scales18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 8014372:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80145d4 <invoke+0x848>
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 8014376:	f000 fd25 	bl	8014dc4 <add_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,scales18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 801437a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801437c:	f8df e258 	ldr.w	lr, [pc, #600]	; 80145d8 <invoke+0x84c>
 8014380:	464a      	mov	r2, r9
 8014382:	970b      	str	r7, [sp, #44]	; 0x2c
 8014384:	277f      	movs	r7, #127	; 0x7f
 8014386:	f8df c254 	ldr.w	ip, [pc, #596]	; 80145dc <invoke+0x850>
 801438a:	4649      	mov	r1, r9
 801438c:	9507      	str	r5, [sp, #28]
 801438e:	2318      	movs	r3, #24
 8014390:	9403      	str	r4, [sp, #12]
 8014392:	f5a6 6016 	sub.w	r0, r6, #2400	; 0x960
 8014396:	f8cd c000 	str.w	ip, [sp]
 801439a:	e9cd 4705 	strd	r4, r7, [sp, #20]
 801439e:	2778      	movs	r7, #120	; 0x78
 80143a0:	970a      	str	r7, [sp, #40]	; 0x28
 80143a2:	2703      	movs	r7, #3
 80143a4:	e9cd e801 	strd	lr, r8, [sp, #4]
 80143a8:	e9cd 9908 	strd	r9, r9, [sp, #32]
 80143ac:	9704      	str	r7, [sp, #16]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 80143ae:	f04f 0805 	mov.w	r8, #5
convolve_1x1_s8_ch24_fpreq(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,scales18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 80143b2:	f000 fe35 	bl	8015020 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel5x5_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,120,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[0],10,10,120,sbuf,-128);
 80143b6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80143b8:	f8df e224 	ldr.w	lr, [pc, #548]	; 80145e0 <invoke+0x854>
 80143bc:	2378      	movs	r3, #120	; 0x78
 80143be:	970c      	str	r7, [sp, #48]	; 0x30
 80143c0:	277f      	movs	r7, #127	; 0x7f
 80143c2:	f8df c220 	ldr.w	ip, [pc, #544]	; 80145e4 <invoke+0x858>
 80143c6:	464a      	mov	r2, r9
 80143c8:	9508      	str	r5, [sp, #32]
 80143ca:	4649      	mov	r1, r9
 80143cc:	940d      	str	r4, [sp, #52]	; 0x34
 80143ce:	4628      	mov	r0, r5
 80143d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80143d4:	e9cd 4706 	strd	r4, r7, [sp, #24]
 80143d8:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80143dc:	2780      	movs	r7, #128	; 0x80
 80143de:	f8df e208 	ldr.w	lr, [pc, #520]	; 80145e8 <invoke+0x85c>
 80143e2:	f8df c208 	ldr.w	ip, [pc, #520]	; 80145ec <invoke+0x860>
 80143e6:	e9cd 930a 	strd	r9, r3, [sp, #40]	; 0x28
 80143ea:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80143ee:	e9cd ce00 	strd	ip, lr, [sp]
 80143f2:	f7fd fd19 	bl	8011e28 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],10,10,120,(const q7_t*) weight20,bias20,scales20,-3,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 80143f6:	9607      	str	r6, [sp, #28]
 80143f8:	267f      	movs	r6, #127	; 0x7f
 80143fa:	f06f 0e02 	mvn.w	lr, #2
 80143fe:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 80145f0 <invoke+0x864>
 8014402:	2118      	movs	r1, #24
 8014404:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014406:	464a      	mov	r2, r9
 8014408:	f8cd c008 	str.w	ip, [sp, #8]
 801440c:	2378      	movs	r3, #120	; 0x78
 801440e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 80145f4 <invoke+0x868>
 8014412:	4628      	mov	r0, r5
 8014414:	970b      	str	r7, [sp, #44]	; 0x2c
 8014416:	910a      	str	r1, [sp, #40]	; 0x28
 8014418:	4649      	mov	r1, r9
 801441a:	e9cd 4605 	strd	r4, r6, [sp, #20]
 801441e:	2680      	movs	r6, #128	; 0x80
 8014420:	e9cd e603 	strd	lr, r6, [sp, #12]
 8014424:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80145f8 <invoke+0x86c>
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 8014428:	2601      	movs	r6, #1
convolve_1x1_s8_fpreq(&buffer0[0],10,10,120,(const q7_t*) weight20,bias20,scales20,-3,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 801442a:	e9cd ce00 	strd	ip, lr, [sp]
 801442e:	e9cd 9908 	strd	r9, r9, [sp, #32]
 8014432:	f001 f895 	bl	8015560 <convolve_1x1_s8_fpreq>
add_fpreq(2400, &buffer0[14400],0.018893597647547722,-3,&buffer0[12000],0.07023955136537552,-3,0.07366174459457397,-1,&buffer0[16800]);
 8014436:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 801443a:	f5aa 6116 	sub.w	r1, sl, #2400	; 0x960
 801443e:	eeb0 1a68 	vmov.f32	s2, s17
 8014442:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
 8014446:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 8014584 <invoke+0x7f8>
 801444a:	eef0 0a61 	vmov.f32	s1, s3
 801444e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8014588 <invoke+0x7fc>
 8014452:	4653      	mov	r3, sl
 8014454:	f5a1 6216 	sub.w	r2, r1, #2400	; 0x960
 8014458:	f44f 6016 	mov.w	r0, #2400	; 0x960
 801445c:	f000 fcb2 	bl	8014dc4 <add_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 8014460:	f8df e198 	ldr.w	lr, [pc, #408]	; 80145fc <invoke+0x870>
 8014464:	f8df c198 	ldr.w	ip, [pc, #408]	; 8014600 <invoke+0x874>
 8014468:	2290      	movs	r2, #144	; 0x90
 801446a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801446e:	4649      	mov	r1, r9
 8014470:	920a      	str	r2, [sp, #40]	; 0x28
 8014472:	2318      	movs	r3, #24
 8014474:	464a      	mov	r2, r9
 8014476:	f8cd 9020 	str.w	r9, [sp, #32]
 801447a:	9403      	str	r4, [sp, #12]
 801447c:	4650      	mov	r0, sl
 801447e:	970b      	str	r7, [sp, #44]	; 0x2c
 8014480:	9507      	str	r5, [sp, #28]
 8014482:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8014486:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8014604 <invoke+0x878>
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 801448a:	e9cd 6404 	strd	r6, r4, [sp, #16]
 801448e:	267f      	movs	r6, #127	; 0x7f
 8014490:	9606      	str	r6, [sp, #24]
 8014492:	4e3e      	ldr	r6, [pc, #248]	; (801458c <invoke+0x800>)
 8014494:	e9cd e601 	strd	lr, r6, [sp, #4]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8014498:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 801449a:	f000 fdc1 	bl	8015020 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 801449e:	f8df e168 	ldr.w	lr, [pc, #360]	; 8014608 <invoke+0x87c>
 80144a2:	2390      	movs	r3, #144	; 0x90
 80144a4:	9605      	str	r6, [sp, #20]
 80144a6:	267f      	movs	r6, #127	; 0x7f
 80144a8:	f8df c160 	ldr.w	ip, [pc, #352]	; 801460c <invoke+0x880>
 80144ac:	464a      	mov	r2, r9
 80144ae:	9607      	str	r6, [sp, #28]
 80144b0:	4649      	mov	r1, r9
 80144b2:	4e37      	ldr	r6, [pc, #220]	; (8014590 <invoke+0x804>)
 80144b4:	4628      	mov	r0, r5
 80144b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80144b8:	940d      	str	r4, [sp, #52]	; 0x34
 80144ba:	9406      	str	r4, [sp, #24]
 80144bc:	9404      	str	r4, [sp, #16]
 80144be:	970c      	str	r7, [sp, #48]	; 0x30
 80144c0:	9508      	str	r5, [sp, #32]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,scales23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 80144c2:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8014610 <invoke+0x884>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 80144c6:	e9cd a602 	strd	sl, r6, [sp, #8]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,scales23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 80144ca:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_fpreq(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,scales24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 80144cc:	f04f 0a0b 	mov.w	sl, #11
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 80144d0:	e9cd ce00 	strd	ip, lr, [sp]
 80144d4:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 80144d8:	f7ff fb6a 	bl	8013bb0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,scales23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 80144dc:	f8df e134 	ldr.w	lr, [pc, #308]	; 8014614 <invoke+0x888>
 80144e0:	f8df c134 	ldr.w	ip, [pc, #308]	; 8014618 <invoke+0x88c>
 80144e4:	4642      	mov	r2, r8
 80144e6:	970f      	str	r7, [sp, #60]	; 0x3c
 80144e8:	4641      	mov	r1, r8
 80144ea:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80144ee:	2390      	movs	r3, #144	; 0x90
 80144f0:	f8cd 8020 	str.w	r8, [sp, #32]
 80144f4:	4628      	mov	r0, r5
 80144f6:	e9cd 6404 	strd	r6, r4, [sp, #16]
 80144fa:	267f      	movs	r6, #127	; 0x7f
 80144fc:	e9cd b70a 	strd	fp, r7, [sp, #40]	; 0x28
 8014500:	9606      	str	r6, [sp, #24]
 8014502:	f06f 070a 	mvn.w	r7, #10
 8014506:	4e23      	ldr	r6, [pc, #140]	; (8014594 <invoke+0x808>)
 8014508:	e9cd 9702 	strd	r9, r7, [sp, #8]
 801450c:	e9cd ce00 	strd	ip, lr, [sp]
 8014510:	9607      	str	r6, [sp, #28]
 8014512:	f001 f825 	bl	8015560 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_fpreq(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,scales24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 8014516:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014518:	f8df e100 	ldr.w	lr, [pc, #256]	; 801461c <invoke+0x890>
 801451c:	465b      	mov	r3, fp
 801451e:	970b      	str	r7, [sp, #44]	; 0x2c
 8014520:	277f      	movs	r7, #127	; 0x7f
 8014522:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8014620 <invoke+0x894>
 8014526:	4642      	mov	r2, r8
 8014528:	9706      	str	r7, [sp, #24]
 801452a:	27f0      	movs	r7, #240	; 0xf0
 801452c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8014624 <invoke+0x898>
 8014530:	4641      	mov	r1, r8
 8014532:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8014536:	4630      	mov	r0, r6
 8014538:	f8cd 8020 	str.w	r8, [sp, #32]
 801453c:	9405      	str	r4, [sp, #20]
 801453e:	9403      	str	r4, [sp, #12]
 8014540:	9507      	str	r5, [sp, #28]
 8014542:	970a      	str	r7, [sp, #40]	; 0x28
 8014544:	f8cd a010 	str.w	sl, [sp, #16]
 8014548:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 801454c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8014628 <invoke+0x89c>
convolve_1x1_s8_fpreq(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,scales24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 8014550:	e9cd e901 	strd	lr, r9, [sp, #4]
 8014554:	f001 f804 	bl	8015560 <convolve_1x1_s8_fpreq>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 8014558:	463b      	mov	r3, r7
 801455a:	970b      	str	r7, [sp, #44]	; 0x2c
 801455c:	2780      	movs	r7, #128	; 0x80
 801455e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 801462c <invoke+0x8a0>
 8014562:	4642      	mov	r2, r8
 8014564:	9705      	str	r7, [sp, #20]
 8014566:	e063      	b.n	8014630 <invoke+0x8a4>
 8014568:	08033f28 	.word	0x08033f28
 801456c:	08033fe8 	.word	0x08033fe8
 8014570:	080314c8 	.word	0x080314c8
 8014574:	0803a4e0 	.word	0x0803a4e0
 8014578:	0803b6e0 	.word	0x0803b6e0
 801457c:	3d813fea 	.word	0x3d813fea
 8014580:	3d845949 	.word	0x3d845949
 8014584:	3d96dbf8 	.word	0x3d96dbf8
 8014588:	3c9ac6bf 	.word	0x3c9ac6bf
 801458c:	08034a28 	.word	0x08034a28
 8014590:	08034c68 	.word	0x08034c68
 8014594:	20006208 	.word	0x20006208
 8014598:	0802b4c0 	.word	0x0802b4c0
 801459c:	0803a1e0 	.word	0x0803a1e0
 80145a0:	0802eae8 	.word	0x0802eae8
 80145a4:	0801d148 	.word	0x0801d148
 80145a8:	080340a8 	.word	0x080340a8
 80145ac:	0802b580 	.word	0x0802b580
 80145b0:	0802b5e0 	.word	0x0802b5e0
 80145b4:	0803a960 	.word	0x0803a960
 80145b8:	08034108 	.word	0x08034108
 80145bc:	0802eba8 	.word	0x0802eba8
 80145c0:	0801da78 	.word	0x0801da78
 80145c4:	08034348 	.word	0x08034348
 80145c8:	08031588 	.word	0x08031588
 80145cc:	0802b820 	.word	0x0802b820
 80145d0:	08034588 	.word	0x08034588
 80145d4:	080345e8 	.word	0x080345e8
 80145d8:	0802b880 	.word	0x0802b880
 80145dc:	0803c460 	.word	0x0803c460
 80145e0:	080347c8 	.word	0x080347c8
 80145e4:	080317c8 	.word	0x080317c8
 80145e8:	0802ede8 	.word	0x0802ede8
 80145ec:	0801df88 	.word	0x0801df88
 80145f0:	080349c8 	.word	0x080349c8
 80145f4:	0803d020 	.word	0x0803d020
 80145f8:	0802ba80 	.word	0x0802ba80
 80145fc:	0802bae0 	.word	0x0802bae0
 8014600:	0803db60 	.word	0x0803db60
 8014604:	080319a8 	.word	0x080319a8
 8014608:	0802efc8 	.word	0x0802efc8
 801460c:	0801eb40 	.word	0x0801eb40
 8014610:	08034ea8 	.word	0x08034ea8
 8014614:	0802bd20 	.word	0x0802bd20
 8014618:	0803e8e0 	.word	0x0803e8e0
 801461c:	0802bdc0 	.word	0x0802bdc0
 8014620:	0803ff60 	.word	0x0803ff60
 8014624:	08034f48 	.word	0x08034f48
 8014628:	08035308 	.word	0x08035308
 801462c:	08031be8 	.word	0x08031be8
 8014630:	4641      	mov	r1, r8
 8014632:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014634:	4628      	mov	r0, r5
 8014636:	f8df e3e4 	ldr.w	lr, [pc, #996]	; 8014a1c <invoke+0xc90>
 801463a:	970c      	str	r7, [sp, #48]	; 0x30
 801463c:	277f      	movs	r7, #127	; 0x7f
 801463e:	f8df c3e0 	ldr.w	ip, [pc, #992]	; 8014a20 <invoke+0xc94>
 8014642:	9707      	str	r7, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 8014644:	2701      	movs	r7, #1
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 8014646:	940d      	str	r4, [sp, #52]	; 0x34
 8014648:	9406      	str	r4, [sp, #24]
 801464a:	9404      	str	r4, [sp, #16]
 801464c:	9508      	str	r5, [sp, #32]
 801464e:	e9cd 9a02 	strd	r9, sl, [sp, #8]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 8014652:	f04f 0980 	mov.w	r9, #128	; 0x80
 8014656:	f506 7a7a 	add.w	sl, r6, #1000	; 0x3e8
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 801465a:	e9cd ce00 	strd	ip, lr, [sp]
 801465e:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8014662:	f7fe fdd3 	bl	801320c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 8014666:	f8df e3bc 	ldr.w	lr, [pc, #956]	; 8014a24 <invoke+0xc98>
 801466a:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 8014a28 <invoke+0xc9c>
 801466e:	4642      	mov	r2, r8
 8014670:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8014674:	4641      	mov	r1, r8
 8014676:	f8cd c000 	str.w	ip, [sp]
 801467a:	4628      	mov	r0, r5
 801467c:	f8cd 8020 	str.w	r8, [sp, #32]
 8014680:	23f0      	movs	r3, #240	; 0xf0
 8014682:	9405      	str	r4, [sp, #20]
 8014684:	f8cd a01c 	str.w	sl, [sp, #28]
 8014688:	e9cd 7903 	strd	r7, r9, [sp, #12]
 801468c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801468e:	f04f 097f 	mov.w	r9, #127	; 0x7f
 8014692:	e9cd b70a 	strd	fp, r7, [sp, #40]	; 0x28
 8014696:	4fd3      	ldr	r7, [pc, #844]	; (80149e4 <invoke+0xc58>)
 8014698:	f8cd 9018 	str.w	r9, [sp, #24]
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 801469c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 80146a0:	e9cd e701 	strd	lr, r7, [sp, #4]
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 80146a4:	f505 6758 	add.w	r7, r5, #3456	; 0xd80
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 80146a8:	f000 ff5a 	bl	8015560 <convolve_1x1_s8_fpreq>
add_fpreq(1000, &buffer0[7000],0.04340619966387749,1,&buffer0[6000],0.0489354208111763,-11,0.04974109306931496,-3,&buffer0[8000]);
 80146ac:	eef8 2a08 	vmov.f32	s5, #136	; 0xc0400000 -3.0
 80146b0:	ed9f 2acd 	vldr	s4, [pc, #820]	; 80149e8 <invoke+0xc5c>
 80146b4:	eefa 1a06 	vmov.f32	s3, #166	; 0xc1300000 -11.0
 80146b8:	ed9f 1acc 	vldr	s2, [pc, #816]	; 80149ec <invoke+0xc60>
 80146bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80146c0:	ed9f 0acb 	vldr	s0, [pc, #812]	; 80149f0 <invoke+0xc64>
 80146c4:	4651      	mov	r1, sl
 80146c6:	f50a 737a 	add.w	r3, sl, #1000	; 0x3e8
 80146ca:	4632      	mov	r2, r6
 80146cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146d0:	f000 fb78 	bl	8014dc4 <add_fpreq>
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 80146d4:	9713      	str	r7, [sp, #76]	; 0x4c
convolve_1x1_s8_fpreq(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,scales27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 80146d6:	2703      	movs	r7, #3
 80146d8:	f8df e350 	ldr.w	lr, [pc, #848]	; 8014a2c <invoke+0xca0>
 80146dc:	f8df c350 	ldr.w	ip, [pc, #848]	; 8014a30 <invoke+0xca4>
 80146e0:	465b      	mov	r3, fp
 80146e2:	f8df a350 	ldr.w	sl, [pc, #848]	; 8014a34 <invoke+0xca8>
 80146e6:	22f0      	movs	r2, #240	; 0xf0
 80146e8:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
 80146ec:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80146f0:	920a      	str	r2, [sp, #40]	; 0x28
 80146f2:	4641      	mov	r1, r8
 80146f4:	4642      	mov	r2, r8
 80146f6:	f8cd 8020 	str.w	r8, [sp, #32]
 80146fa:	9403      	str	r4, [sp, #12]
 80146fc:	f505 50fa 	add.w	r0, r5, #8000	; 0x1f40
 8014700:	9507      	str	r5, [sp, #28]
 8014702:	f8cd b018 	str.w	fp, [sp, #24]
 8014706:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 801470a:	f8df b32c 	ldr.w	fp, [pc, #812]	; 8014a38 <invoke+0xcac>
convolve_1x1_s8_fpreq(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,scales27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 801470e:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8014712:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014714:	970b      	str	r7, [sp, #44]	; 0x2c
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 8014716:	2780      	movs	r7, #128	; 0x80
convolve_1x1_s8_fpreq(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,scales27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 8014718:	e9cd ea01 	strd	lr, sl, [sp, #4]
 801471c:	f000 ff20 	bl	8015560 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 8014720:	9705      	str	r7, [sp, #20]
 8014722:	277f      	movs	r7, #127	; 0x7f
 8014724:	f8df e314 	ldr.w	lr, [pc, #788]	; 8014a3c <invoke+0xcb0>
 8014728:	23f0      	movs	r3, #240	; 0xf0
 801472a:	f8df c314 	ldr.w	ip, [pc, #788]	; 8014a40 <invoke+0xcb4>
 801472e:	9707      	str	r7, [sp, #28]
 8014730:	4642      	mov	r2, r8
 8014732:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014734:	4641      	mov	r1, r8
 8014736:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8014a44 <invoke+0xcb8>
 801473a:	4628      	mov	r0, r5
 801473c:	930b      	str	r3, [sp, #44]	; 0x2c
 801473e:	940d      	str	r4, [sp, #52]	; 0x34
 8014740:	9406      	str	r4, [sp, #24]
 8014742:	9404      	str	r4, [sp, #16]
 8014744:	970c      	str	r7, [sp, #48]	; 0x30
 8014746:	9508      	str	r5, [sp, #32]
 8014748:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801474c:	e9cd ce00 	strd	ip, lr, [sp]
 8014750:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8014754:	f7fc fd66 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8014758:	f04f 0b0f 	mov.w	fp, #15
 801475c:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 8014a48 <invoke+0xcbc>
 8014760:	2230      	movs	r2, #48	; 0x30
 8014762:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8014a4c <invoke+0xcc0>
 8014766:	4641      	mov	r1, r8
 8014768:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8014a50 <invoke+0xcc4>
 801476c:	4628      	mov	r0, r5
 801476e:	920a      	str	r2, [sp, #40]	; 0x28
 8014770:	23f0      	movs	r3, #240	; 0xf0
 8014772:	4642      	mov	r2, r8
 8014774:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8014778:	9405      	str	r4, [sp, #20]
 801477a:	970b      	str	r7, [sp, #44]	; 0x2c
 801477c:	f8cd c000 	str.w	ip, [sp]
 8014780:	e9cd 6807 	strd	r6, r8, [sp, #28]
 8014784:	2680      	movs	r6, #128	; 0x80
 8014786:	e9cd b603 	strd	fp, r6, [sp, #12]
 801478a:	267f      	movs	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 801478c:	f06f 0b0e 	mvn.w	fp, #14
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8014790:	e9cd ea01 	strd	lr, sl, [sp, #4]
 8014794:	9606      	str	r6, [sp, #24]
 8014796:	f000 fee3 	bl	8015560 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 801479a:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8014a54 <invoke+0xcc8>
 801479e:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 8014a58 <invoke+0xccc>
 80147a2:	4642      	mov	r2, r8
 80147a4:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8014a5c <invoke+0xcd0>
 80147a8:	4641      	mov	r1, r8
 80147aa:	9606      	str	r6, [sp, #24]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 80147ac:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 80147ae:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80147b2:	2330      	movs	r3, #48	; 0x30
 80147b4:	f8cd 8020 	str.w	r8, [sp, #32]
 80147b8:	9405      	str	r4, [sp, #20]
 80147ba:	9403      	str	r4, [sp, #12]
 80147bc:	970b      	str	r7, [sp, #44]	; 0x2c
 80147be:	9507      	str	r5, [sp, #28]
 80147c0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80147c4:	f8cd b010 	str.w	fp, [sp, #16]
 80147c8:	f8cd c000 	str.w	ip, [sp]
 80147cc:	4889      	ldr	r0, [pc, #548]	; (80149f4 <invoke+0xc68>)
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 80147ce:	f8df b290 	ldr.w	fp, [pc, #656]	; 8014a60 <invoke+0xcd4>
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 80147d2:	e9cd ea01 	strd	lr, sl, [sp, #4]
 80147d6:	f000 fd03 	bl	80151e0 <convolve_1x1_s8_ch48_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 80147da:	f8df a288 	ldr.w	sl, [pc, #648]	; 8014a64 <invoke+0xcd8>
 80147de:	f8df e288 	ldr.w	lr, [pc, #648]	; 8014a68 <invoke+0xcdc>
 80147e2:	464b      	mov	r3, r9
 80147e4:	f8df c284 	ldr.w	ip, [pc, #644]	; 8014a6c <invoke+0xce0>
 80147e8:	4642      	mov	r2, r8
 80147ea:	9605      	str	r6, [sp, #20]
 80147ec:	267f      	movs	r6, #127	; 0x7f
 80147ee:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80147f2:	4641      	mov	r1, r8
 80147f4:	940d      	str	r4, [sp, #52]	; 0x34
 80147f6:	4628      	mov	r0, r5
 80147f8:	9406      	str	r4, [sp, #24]
 80147fa:	9404      	str	r4, [sp, #16]
 80147fc:	9607      	str	r6, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 80147fe:	2680      	movs	r6, #128	; 0x80
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 8014800:	970c      	str	r7, [sp, #48]	; 0x30
 8014802:	9508      	str	r5, [sp, #32]
 8014804:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8014808:	e9cd ce00 	strd	ip, lr, [sp]
 801480c:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8014810:	f7fc fd08 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 8014814:	464b      	mov	r3, r9
 8014816:	f06f 090a 	mvn.w	r9, #10
 801481a:	f8df e254 	ldr.w	lr, [pc, #596]	; 8014a70 <invoke+0xce4>
 801481e:	f8df c254 	ldr.w	ip, [pc, #596]	; 8014a74 <invoke+0xce8>
 8014822:	2230      	movs	r2, #48	; 0x30
 8014824:	f8df a250 	ldr.w	sl, [pc, #592]	; 8014a78 <invoke+0xcec>
 8014828:	4641      	mov	r1, r8
 801482a:	920a      	str	r2, [sp, #40]	; 0x28
 801482c:	4628      	mov	r0, r5
 801482e:	4642      	mov	r2, r8
 8014830:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8014834:	f8cd 8020 	str.w	r8, [sp, #32]
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8014838:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 801483c:	9405      	str	r4, [sp, #20]
 801483e:	970b      	str	r7, [sp, #44]	; 0x2c
 8014840:	f8cd a008 	str.w	sl, [sp, #8]
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 8014844:	f06f 0a04 	mvn.w	sl, #4
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 8014848:	e9cd 9603 	strd	r9, r6, [sp, #12]
 801484c:	267f      	movs	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 801484e:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8014a7c <invoke+0xcf0>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 8014852:	9606      	str	r6, [sp, #24]
 8014854:	f505 5696 	add.w	r6, r5, #4800	; 0x12c0
 8014858:	e9cd ce00 	strd	ip, lr, [sp]
 801485c:	9607      	str	r6, [sp, #28]
 801485e:	f000 fe7f 	bl	8015560 <convolve_1x1_s8_fpreq>
add_fpreq(1200, &buffer0[4800],0.04923376813530922,-11,&buffer0[6000],0.04425579309463501,15,0.05336926504969597,5,&buffer0[7200]);
 8014862:	4631      	mov	r1, r6
 8014864:	f506 6296 	add.w	r2, r6, #1200	; 0x4b0
 8014868:	f506 6316 	add.w	r3, r6, #2400	; 0x960
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 801486c:	267f      	movs	r6, #127	; 0x7f
add_fpreq(1200, &buffer0[4800],0.04923376813530922,-11,&buffer0[6000],0.04425579309463501,15,0.05336926504969597,5,&buffer0[7200]);
 801486e:	eef1 2a04 	vmov.f32	s5, #20	; 0x40a00000  5.0
 8014872:	ed9f 2a61 	vldr	s4, [pc, #388]	; 80149f8 <invoke+0xc6c>
 8014876:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 801487a:	ed9f 1a60 	vldr	s2, [pc, #384]	; 80149fc <invoke+0xc70>
 801487e:	eefa 0a06 	vmov.f32	s1, #166	; 0xc1300000 -11.0
 8014882:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8014a00 <invoke+0xc74>
 8014886:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 801488a:	f000 fa9b 	bl	8014dc4 <add_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 801488e:	9606      	str	r6, [sp, #24]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8014890:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 8014892:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8014a80 <invoke+0xcf4>
 8014896:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8014a84 <invoke+0xcf8>
 801489a:	21f0      	movs	r1, #240	; 0xf0
 801489c:	970f      	str	r7, [sp, #60]	; 0x3c
 801489e:	4642      	mov	r2, r8
 80148a0:	970b      	str	r7, [sp, #44]	; 0x2c
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 80148a2:	4637      	mov	r7, r6
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 80148a4:	2603      	movs	r6, #3
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 80148a6:	910a      	str	r1, [sp, #40]	; 0x28
 80148a8:	9405      	str	r4, [sp, #20]
 80148aa:	4641      	mov	r1, r8
 80148ac:	9403      	str	r4, [sp, #12]
 80148ae:	f505 50e1 	add.w	r0, r5, #7200	; 0x1c20
 80148b2:	9507      	str	r5, [sp, #28]
 80148b4:	2330      	movs	r3, #48	; 0x30
 80148b6:	f8cd a010 	str.w	sl, [sp, #16]
 80148ba:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 80148be:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8014a88 <invoke+0xcfc>
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 80148c2:	e9cd e901 	strd	lr, r9, [sp, #4]
 80148c6:	e9cd 8808 	strd	r8, r8, [sp, #32]
 80148ca:	f000 fc89 	bl	80151e0 <convolve_1x1_s8_ch48_fpreq>
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 80148ce:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8014a8c <invoke+0xd00>
 80148d2:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8014a90 <invoke+0xd04>
 80148d6:	23f0      	movs	r3, #240	; 0xf0
 80148d8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8014a94 <invoke+0xd08>
 80148dc:	4642      	mov	r2, r8
 80148de:	4641      	mov	r1, r8
 80148e0:	f04f 087f 	mov.w	r8, #127	; 0x7f
 80148e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80148e6:	4628      	mov	r0, r5
 80148e8:	9705      	str	r7, [sp, #20]
 80148ea:	940d      	str	r4, [sp, #52]	; 0x34
 80148ec:	9406      	str	r4, [sp, #24]
 80148ee:	9404      	str	r4, [sp, #16]
 80148f0:	f8cd 801c 	str.w	r8, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 80148f4:	f06f 0806 	mvn.w	r8, #6
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 80148f8:	9508      	str	r5, [sp, #32]
 80148fa:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
 80148fe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014900:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8014904:	e9cd ce00 	strd	ip, lr, [sp]
 8014908:	960c      	str	r6, [sp, #48]	; 0x30
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 801490a:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 801490e:	f7fd fd91 	bl	8012434 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8014912:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014914:	2203      	movs	r2, #3
 8014916:	f8df e180 	ldr.w	lr, [pc, #384]	; 8014a98 <invoke+0xd0c>
 801491a:	960b      	str	r6, [sp, #44]	; 0x2c
 801491c:	f505 5687 	add.w	r6, r5, #4320	; 0x10e0
 8014920:	f8df c178 	ldr.w	ip, [pc, #376]	; 8014a9c <invoke+0xd10>
 8014924:	4611      	mov	r1, r2
 8014926:	9607      	str	r6, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8014928:	4626      	mov	r6, r4
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 801492a:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8014aa0 <invoke+0xd14>
 801492e:	23f0      	movs	r3, #240	; 0xf0
 8014930:	9209      	str	r2, [sp, #36]	; 0x24
 8014932:	4628      	mov	r0, r5
 8014934:	9208      	str	r2, [sp, #32]
 8014936:	f8cd a018 	str.w	sl, [sp, #24]
 801493a:	f8cd 800c 	str.w	r8, [sp, #12]
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 801493e:	4690      	mov	r8, r2
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8014940:	f8cd 9008 	str.w	r9, [sp, #8]
 8014944:	f8cd e004 	str.w	lr, [sp, #4]
 8014948:	f8cd c000 	str.w	ip, [sp]
 801494c:	9712      	str	r7, [sp, #72]	; 0x48
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 801494e:	9510      	str	r5, [sp, #64]	; 0x40
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8014950:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8014954:	2460      	movs	r4, #96	; 0x60
 8014956:	4657      	mov	r7, sl
 8014958:	940a      	str	r4, [sp, #40]	; 0x28
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 801495a:	4654      	mov	r4, sl
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 801495c:	f000 fe00 	bl	8015560 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8014960:	9605      	str	r6, [sp, #20]
 8014962:	9603      	str	r6, [sp, #12]
 8014964:	f505 5087 	add.w	r0, r5, #4320	; 0x10e0
 8014968:	4635      	mov	r5, r6
 801496a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801496c:	f04f 0e07 	mov.w	lr, #7
 8014970:	f8df c130 	ldr.w	ip, [pc, #304]	; 8014aa4 <invoke+0xd18>
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 8014974:	46b1      	mov	r9, r6
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8014976:	960b      	str	r6, [sp, #44]	; 0x2c
 8014978:	4e22      	ldr	r6, [pc, #136]	; (8014a04 <invoke+0xc78>)
 801497a:	4642      	mov	r2, r8
 801497c:	9706      	str	r7, [sp, #24]
 801497e:	4641      	mov	r1, r8
 8014980:	9601      	str	r6, [sp, #4]
 8014982:	2360      	movs	r3, #96	; 0x60
 8014984:	4e20      	ldr	r6, [pc, #128]	; (8014a08 <invoke+0xc7c>)
/* layer 46:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 8014986:	f44f 7ac0 	mov.w	sl, #384	; 0x180
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 801498a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801498c:	9600      	str	r6, [sp, #0]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 801498e:	4e1f      	ldr	r6, [pc, #124]	; (8014a0c <invoke+0xc80>)
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8014990:	f8cd e010 	str.w	lr, [sp, #16]
 8014994:	f8cd c008 	str.w	ip, [sp, #8]
 8014998:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801499c:	f8cd 8020 	str.w	r8, [sp, #32]
 80149a0:	9707      	str	r7, [sp, #28]
 80149a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80149a6:	f000 fddb 	bl	8015560 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 80149aa:	4f19      	ldr	r7, [pc, #100]	; (8014a10 <invoke+0xc84>)
 80149ac:	9603      	str	r6, [sp, #12]
 80149ae:	465b      	mov	r3, fp
 80149b0:	4e18      	ldr	r6, [pc, #96]	; (8014a14 <invoke+0xc88>)
 80149b2:	4642      	mov	r2, r8
 80149b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80149b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80149b8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80149bc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80149c0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80149c4:	9105      	str	r1, [sp, #20]
 80149c6:	4641      	mov	r1, r8
 80149c8:	950d      	str	r5, [sp, #52]	; 0x34
 80149ca:	9506      	str	r5, [sp, #24]
 80149cc:	9504      	str	r5, [sp, #16]
 80149ce:	9407      	str	r4, [sp, #28]
 80149d0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80149d4:	9008      	str	r0, [sp, #32]
 80149d6:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80149da:	4e0f      	ldr	r6, [pc, #60]	; (8014a18 <invoke+0xc8c>)
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 80149dc:	f06f 0701 	mvn.w	r7, #1
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 80149e0:	9600      	str	r6, [sp, #0]
 80149e2:	e061      	b.n	8014aa8 <invoke+0xd1c>
 80149e4:	080356c8 	.word	0x080356c8
 80149e8:	3d4bbd51 	.word	0x3d4bbd51
 80149ec:	3d487082 	.word	0x3d487082
 80149f0:	3d31cab3 	.word	0x3d31cab3
 80149f4:	20006208 	.word	0x20006208
 80149f8:	3d5a99bb 	.word	0x3d5a99bb
 80149fc:	3d354590 	.word	0x3d354590
 8014a00:	3d49a959 	.word	0x3d49a959
 8014a04:	0802d060 	.word	0x0802d060
 8014a08:	08056d60 	.word	0x08056d60
 8014a0c:	080377a8 	.word	0x080377a8
 8014a10:	08032a28 	.word	0x08032a28
 8014a14:	08030048 	.word	0x08030048
 8014a18:	08025b60 	.word	0x08025b60
 8014a1c:	0802f208 	.word	0x0802f208
 8014a20:	080206d0 	.word	0x080206d0
 8014a24:	0802c180 	.word	0x0802c180
 8014a28:	080424e0 	.word	0x080424e0
 8014a2c:	0802c220 	.word	0x0802c220
 8014a30:	08044a60 	.word	0x08044a60
 8014a34:	08035768 	.word	0x08035768
 8014a38:	08035b28 	.word	0x08035b28
 8014a3c:	0802f5c8 	.word	0x0802f5c8
 8014a40:	080234c0 	.word	0x080234c0
 8014a44:	08031fa8 	.word	0x08031fa8
 8014a48:	0802c5e0 	.word	0x0802c5e0
 8014a4c:	08046fe0 	.word	0x08046fe0
 8014a50:	08035ee8 	.word	0x08035ee8
 8014a54:	08036068 	.word	0x08036068
 8014a58:	0802c760 	.word	0x0802c760
 8014a5c:	08049e60 	.word	0x08049e60
 8014a60:	08036368 	.word	0x08036368
 8014a64:	08032368 	.word	0x08032368
 8014a68:	0802f988 	.word	0x0802f988
 8014a6c:	08023d30 	.word	0x08023d30
 8014a70:	0802ca60 	.word	0x0802ca60
 8014a74:	0804c260 	.word	0x0804c260
 8014a78:	08036668 	.word	0x08036668
 8014a7c:	08036728 	.word	0x08036728
 8014a80:	0802cb20 	.word	0x0802cb20
 8014a84:	0804e660 	.word	0x0804e660
 8014a88:	08036ae8 	.word	0x08036ae8
 8014a8c:	08032668 	.word	0x08032668
 8014a90:	0802fc88 	.word	0x0802fc88
 8014a94:	080243f0 	.word	0x080243f0
 8014a98:	0802cee0 	.word	0x0802cee0
 8014a9c:	08051360 	.word	0x08051360
 8014aa0:	08036ea8 	.word	0x08036ea8
 8014aa4:	08037028 	.word	0x08037028
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8014aa8:	4ea5      	ldr	r6, [pc, #660]	; (8014d40 <invoke+0xfb4>)
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 8014aaa:	f7fc fbbb 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8014aae:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8014d78 <invoke+0xfec>
 8014ab2:	2260      	movs	r2, #96	; 0x60
 8014ab4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014ab6:	465b      	mov	r3, fp
 8014ab8:	940f      	str	r4, [sp, #60]	; 0x3c
/* layer 48:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
/* layer 49:ADD */
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
/* layer 50:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 8014aba:	f44f 7b90 	mov.w	fp, #288	; 0x120
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8014abe:	9406      	str	r4, [sp, #24]
 8014ac0:	4ca0      	ldr	r4, [pc, #640]	; (8014d44 <invoke+0xfb8>)
 8014ac2:	920a      	str	r2, [sp, #40]	; 0x28
 8014ac4:	4642      	mov	r2, r8
 8014ac6:	9104      	str	r1, [sp, #16]
 8014ac8:	4641      	mov	r1, r8
 8014aca:	9505      	str	r5, [sp, #20]
 8014acc:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8014ad0:	9407      	str	r4, [sp, #28]
 8014ad2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014ad4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8014ad8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014adc:	4e9a      	ldr	r6, [pc, #616]	; (8014d48 <invoke+0xfbc>)
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 8014ade:	4f9b      	ldr	r7, [pc, #620]	; (8014d4c <invoke+0xfc0>)
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8014ae0:	e9cd 6c00 	strd	r6, ip, [sp]
 8014ae4:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8014ae8:	f000 fd3a 	bl	8015560 <convolve_1x1_s8_fpreq>
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 8014aec:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8014af0:	eeb0 2a48 	vmov.f32	s4, s16
 8014af4:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8014d50 <invoke+0xfc4>
 8014af8:	eefa 2a02 	vmov.f32	s5, #162	; 0xc1100000 -9.0
 8014afc:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8014d54 <invoke+0xfc8>
 8014b00:	eef9 1a0c 	vmov.f32	s3, #156	; 0xc0e00000 -7.0
 8014b04:	4621      	mov	r1, r4
 8014b06:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 8014b0a:	f5a4 7258 	sub.w	r2, r4, #864	; 0x360
 8014b0e:	464b      	mov	r3, r9
 8014b10:	f44f 7058 	mov.w	r0, #864	; 0x360
 8014b14:	f000 f956 	bl	8014dc4 <add_fpreq>
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 8014b18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014b1a:	f8df c260 	ldr.w	ip, [pc, #608]	; 8014d7c <invoke+0xff0>
 8014b1e:	f04f 0e09 	mov.w	lr, #9
 8014b22:	9406      	str	r4, [sp, #24]
 8014b24:	4642      	mov	r2, r8
 8014b26:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014b28:	4641      	mov	r1, r8
 8014b2a:	4e8b      	ldr	r6, [pc, #556]	; (8014d58 <invoke+0xfcc>)
 8014b2c:	4648      	mov	r0, r9
 8014b2e:	940b      	str	r4, [sp, #44]	; 0x2c
 8014b30:	2360      	movs	r3, #96	; 0x60
 8014b32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014b34:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8014b38:	f8cd 8020 	str.w	r8, [sp, #32]
 8014b3c:	9505      	str	r5, [sp, #20]
 8014b3e:	9503      	str	r5, [sp, #12]
 8014b40:	9407      	str	r4, [sp, #28]
 8014b42:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8014b46:	f8cd e010 	str.w	lr, [sp, #16]
 8014b4a:	9600      	str	r6, [sp, #0]
 8014b4c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8014b50:	4e82      	ldr	r6, [pc, #520]	; (8014d5c <invoke+0xfd0>)
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8014b52:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8014d80 <invoke+0xff4>
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 8014b56:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8014b5a:	f000 fd01 	bl	8015560 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8014b5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014b60:	f8df e220 	ldr.w	lr, [pc, #544]	; 8014d84 <invoke+0xff8>
 8014b64:	4642      	mov	r2, r8
 8014b66:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014b68:	4641      	mov	r1, r8
 8014b6a:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8014d88 <invoke+0xffc>
 8014b6e:	4653      	mov	r3, sl
 8014b70:	4f7b      	ldr	r7, [pc, #492]	; (8014d60 <invoke+0xfd4>)
 8014b72:	950d      	str	r5, [sp, #52]	; 0x34
 8014b74:	9703      	str	r7, [sp, #12]
/* layer 51:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,scales43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
/* layer 52:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8014b76:	27a0      	movs	r7, #160	; 0xa0
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8014b78:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8014b7a:	f06f 0605 	mvn.w	r6, #5
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8014b7e:	9008      	str	r0, [sp, #32]
 8014b80:	e9cd 5406 	strd	r5, r4, [sp, #24]
 8014b84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014b86:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8014b8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014b8c:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8014b90:	e9cd a40b 	strd	sl, r4, [sp, #44]	; 0x2c
 8014b94:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8014b98:	f7fc fb44 	bl	8011224 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8014b9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014b9e:	9411      	str	r4, [sp, #68]	; 0x44
 8014ba0:	4653      	mov	r3, sl
 8014ba2:	940b      	str	r4, [sp, #44]	; 0x2c
 8014ba4:	f500 5487 	add.w	r4, r0, #4320	; 0x10e0
 8014ba8:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8014d8c <invoke+0x1000>
 8014bac:	f04f 0a60 	mov.w	sl, #96	; 0x60
 8014bb0:	9407      	str	r4, [sp, #28]
 8014bb2:	4642      	mov	r2, r8
 8014bb4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014bb6:	4641      	mov	r1, r8
 8014bb8:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8014d90 <invoke+0x1004>
 8014bbc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8014bc0:	f8cd c000 	str.w	ip, [sp]
 8014bc4:	9603      	str	r6, [sp, #12]
/* layer 53:AVERAGE_POOL_2D */
avg_pooling(&buffer0[2592],3,3,160,3,3,1,1,-128,127,&buffer0[0]);
 8014bc6:	2601      	movs	r6, #1
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8014bc8:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8014bcc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014bce:	e9cd e901 	strd	lr, r9, [sp, #4]
 8014bd2:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8014bd6:	9404      	str	r4, [sp, #16]
 8014bd8:	4654      	mov	r4, sl
 8014bda:	f000 fcc1 	bl	8015560 <convolve_1x1_s8_fpreq>
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 8014bde:	4961      	ldr	r1, [pc, #388]	; (8014d64 <invoke+0xfd8>)
 8014be0:	eeb0 1a48 	vmov.f32	s2, s16
 8014be4:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8014d68 <invoke+0xfdc>
 8014be8:	eefa 2a08 	vmov.f32	s5, #168	; 0xc1400000 -12.0
 8014bec:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8014d6c <invoke+0xfe0>
 8014bf0:	eefa 1a02 	vmov.f32	s3, #162	; 0xc1100000 -9.0
 8014bf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014bf6:	eef9 0a08 	vmov.f32	s1, #152	; 0xc0c00000 -6.0
 8014bfa:	f5a1 63d8 	sub.w	r3, r1, #1728	; 0x6c0
 8014bfe:	f44f 7058 	mov.w	r0, #864	; 0x360
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 8014c02:	f04f 0a0c 	mov.w	sl, #12
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 8014c06:	f000 f8dd 	bl	8014dc4 <add_fpreq>
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 8014c0a:	4623      	mov	r3, r4
 8014c0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014c0e:	4642      	mov	r2, r8
 8014c10:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014c12:	f8df e180 	ldr.w	lr, [pc, #384]	; 8014d94 <invoke+0x1008>
 8014c16:	f8df c180 	ldr.w	ip, [pc, #384]	; 8014d98 <invoke+0x100c>
 8014c1a:	9407      	str	r4, [sp, #28]
 8014c1c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014d9c <invoke+0x1010>
 8014c20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014c22:	910b      	str	r1, [sp, #44]	; 0x2c
 8014c24:	4641      	mov	r1, r8
 8014c26:	9503      	str	r5, [sp, #12]
 8014c28:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014c2c:	f8cd a010 	str.w	sl, [sp, #16]
 8014c30:	f8cd c000 	str.w	ip, [sp]
 8014c34:	484e      	ldr	r0, [pc, #312]	; (8014d70 <invoke+0xfe4>)
 8014c36:	950f      	str	r5, [sp, #60]	; 0x3c
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,scales43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
 8014c38:	f8df a164 	ldr.w	sl, [pc, #356]	; 8014da0 <invoke+0x1014>
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 8014c3c:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8014c40:	e9cd e901 	strd	lr, r9, [sp, #4]
 8014c44:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8014c48:	f000 fc8a 	bl	8015560 <convolve_1x1_s8_fpreq>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,scales43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
 8014c4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c50:	4642      	mov	r2, r8
 8014c52:	9513      	str	r5, [sp, #76]	; 0x4c
 8014c54:	4641      	mov	r1, r8
 8014c56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014c58:	f8df e148 	ldr.w	lr, [pc, #328]	; 8014da4 <invoke+0x1018>
 8014c5c:	f8df c148 	ldr.w	ip, [pc, #328]	; 8014da8 <invoke+0x101c>
 8014c60:	950d      	str	r5, [sp, #52]	; 0x34
 8014c62:	940f      	str	r4, [sp, #60]	; 0x3c
 8014c64:	9407      	str	r4, [sp, #28]
 8014c66:	9506      	str	r5, [sp, #24]
 8014c68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014c6a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014c6c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8014dac <invoke+0x1020>
 8014c70:	930c      	str	r3, [sp, #48]	; 0x30
 8014c72:	465b      	mov	r3, fp
 8014c74:	9505      	str	r5, [sp, #20]
 8014c76:	9404      	str	r4, [sp, #16]
 8014c78:	9008      	str	r0, [sp, #32]
 8014c7a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014c7e:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8014c82:	e9cd ce00 	strd	ip, lr, [sp]
 8014c86:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8014c8a:	f7fe fabf 	bl	801320c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8014c8e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014c90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014c92:	f04f 0a09 	mov.w	sl, #9
 8014c96:	f8df e118 	ldr.w	lr, [pc, #280]	; 8014db0 <invoke+0x1024>
 8014c9a:	465b      	mov	r3, fp
 8014c9c:	f8df c114 	ldr.w	ip, [pc, #276]	; 8014db4 <invoke+0x1028>
 8014ca0:	f500 6222 	add.w	r2, r0, #2592	; 0xa20
 8014ca4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014ca6:	9406      	str	r4, [sp, #24]
 8014ca8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8014db8 <invoke+0x102c>
 8014cac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014cae:	9207      	str	r2, [sp, #28]
 8014cb0:	4642      	mov	r2, r8
 8014cb2:	910b      	str	r1, [sp, #44]	; 0x2c
 8014cb4:	4641      	mov	r1, r8
 8014cb6:	9405      	str	r4, [sp, #20]
 8014cb8:	9504      	str	r5, [sp, #16]
 8014cba:	f8cd a00c 	str.w	sl, [sp, #12]
/* layer 54:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,scales45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 8014cbe:	f04f 0a02 	mov.w	sl, #2
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8014cc2:	970a      	str	r7, [sp, #40]	; 0x28
 8014cc4:	f8cd 9000 	str.w	r9, [sp]
convolve_1x1_s8_fpreq(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,scales45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 8014cc8:	f06f 0908 	mvn.w	r9, #8
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8014ccc:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8014cd0:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8014cd4:	f000 fc44 	bl	8015560 <convolve_1x1_s8_fpreq>
avg_pooling(&buffer0[2592],3,3,160,3,3,1,1,-128,127,&buffer0[0]);
 8014cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014cdc:	4642      	mov	r2, r8
 8014cde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014ce0:	4641      	mov	r1, r8
 8014ce2:	9306      	str	r3, [sp, #24]
 8014ce4:	463b      	mov	r3, r7
 8014ce6:	9405      	str	r4, [sp, #20]
 8014ce8:	9504      	str	r5, [sp, #16]
 8014cea:	4821      	ldr	r0, [pc, #132]	; (8014d70 <invoke+0xfe4>)
 8014cec:	e9cd 8800 	strd	r8, r8, [sp]
 8014cf0:	e9cd 6602 	strd	r6, r6, [sp, #8]
 8014cf4:	f002 f838 	bl	8016d68 <avg_pooling>
convolve_1x1_s8_fpreq(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,scales45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 8014cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cfa:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8014dbc <invoke+0x1030>
 8014cfe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014d02:	eb03 0b07 	add.w	fp, r3, r7
 8014d06:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8014dc0 <invoke+0x1034>
 8014d0a:	463b      	mov	r3, r7
 8014d0c:	4f19      	ldr	r7, [pc, #100]	; (8014d74 <invoke+0xfe8>)
 8014d0e:	4632      	mov	r2, r6
 8014d10:	9406      	str	r4, [sp, #24]
 8014d12:	9505      	str	r5, [sp, #20]
 8014d14:	f8cd b01c 	str.w	fp, [sp, #28]
 8014d18:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8014d1c:	9700      	str	r7, [sp, #0]
 8014d1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014d22:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8014d26:	910b      	str	r1, [sp, #44]	; 0x2c
 8014d28:	4631      	mov	r1, r6
 8014d2a:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8014d2e:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8014d32:	f000 fc15 	bl	8015560 <convolve_1x1_s8_fpreq>
}
 8014d36:	b015      	add	sp, #84	; 0x54
 8014d38:	ecbd 8b04 	vpop	{d8-d9}
 8014d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d40:	08037f28 	.word	0x08037f28
 8014d44:	20005ed8 	.word	0x20005ed8
 8014d48:	08062160 	.word	0x08062160
 8014d4c:	0802d960 	.word	0x0802d960
 8014d50:	3d2cd156 	.word	0x3d2cd156
 8014d54:	3d244ccb 	.word	0x3d244ccb
 8014d58:	0806d560 	.word	0x0806d560
 8014d5c:	08026df0 	.word	0x08026df0
 8014d60:	08038768 	.word	0x08038768
 8014d64:	20005b78 	.word	0x20005b78
 8014d68:	3d2bef7e 	.word	0x3d2bef7e
 8014d6c:	3c9e4244 	.word	0x3c9e4244
 8014d70:	200054b8 	.word	0x200054b8
 8014d74:	08091560 	.word	0x08091560
 8014d78:	0802d7e0 	.word	0x0802d7e0
 8014d7c:	080380a8 	.word	0x080380a8
 8014d80:	08038d68 	.word	0x08038d68
 8014d84:	08033268 	.word	0x08033268
 8014d88:	08030888 	.word	0x08030888
 8014d8c:	0802df60 	.word	0x0802df60
 8014d90:	08076560 	.word	0x08076560
 8014d94:	0802e0e0 	.word	0x0802e0e0
 8014d98:	0807f560 	.word	0x0807f560
 8014d9c:	08038ee8 	.word	0x08038ee8
 8014da0:	08039368 	.word	0x08039368
 8014da4:	08030e88 	.word	0x08030e88
 8014da8:	08027b70 	.word	0x08027b70
 8014dac:	08033868 	.word	0x08033868
 8014db0:	080397e8 	.word	0x080397e8
 8014db4:	0802e560 	.word	0x0802e560
 8014db8:	08086160 	.word	0x08086160
 8014dbc:	08039a68 	.word	0x08039a68
 8014dc0:	0802e7e0 	.word	0x0802e7e0

08014dc4 <add_fpreq>:
#include "tinyengine_function.h"

tinyengine_status add_fpreq(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data) {
  for (int i = 0; i < size; ++i) {
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	dd49      	ble.n	8014e5c <add_fpreq+0x98>
 8014dc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			const float zero_y, int8_t* output_data) {
 8014dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd0:	ed2d 8b06 	vpush	{d8-d10}
 8014dd4:	eec7 aa82 	vdiv.f32	s21, s15, s4
 8014dd8:	460c      	mov	r4, r1
 8014dda:	4690      	mov	r8, r2
 8014ddc:	1e5d      	subs	r5, r3, #1
 8014dde:	180e      	adds	r6, r1, r0
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
      clamped_output = TN_MAX(clamped_output, -128);
 8014de0:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8014de4:	eeb0 8a40 	vmov.f32	s16, s0
 8014de8:	eef0 8a60 	vmov.f32	s17, s1
 8014dec:	eeb0 9a41 	vmov.f32	s18, s2
 8014df0:	eef0 9a61 	vmov.f32	s19, s3
 8014df4:	eeb0 aa62 	vmov.f32	s20, s5
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8014df8:	f918 3b01 	ldrsb.w	r3, [r8], #1
 8014dfc:	ee07 3a90 	vmov	s15, r3
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8014e00:	f914 3b01 	ldrsb.w	r3, [r4], #1
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8014e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8014e08:	ee07 3a10 	vmov	s14, r3
 8014e0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8014e10:	ee77 7ae9 	vsub.f32	s15, s15, s19
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8014e14:	ee37 7a68 	vsub.f32	s14, s14, s17
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8014e18:	ee67 7a89 	vmul.f32	s15, s15, s18
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 8014e1c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014e20:	eeb0 7a4a 	vmov.f32	s14, s20
 8014e24:	eea7 7aaa 	vfma.f32	s14, s15, s21
 8014e28:	ee17 0a10 	vmov	r0, s14
 8014e2c:	f7f2 f926 	bl	800707c <__aeabi_f2d>
 8014e30:	ec41 0b10 	vmov	d0, r0, r1
 8014e34:	f003 f92a 	bl	801808c <round>
 8014e38:	ec51 0b10 	vmov	r0, r1, d0
 8014e3c:	f7f2 fc26 	bl	800768c <__aeabi_d2iz>
      clamped_output = TN_MAX(clamped_output, -128);
 8014e40:	42b8      	cmp	r0, r7
 8014e42:	bfb8      	it	lt
 8014e44:	4638      	movlt	r0, r7
      clamped_output = TN_MIN(clamped_output, 127);
 8014e46:	287f      	cmp	r0, #127	; 0x7f
 8014e48:	bfa8      	it	ge
 8014e4a:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 8014e4c:	42b4      	cmp	r4, r6
      output_data[i] = (int8_t)(clamped_output);
 8014e4e:	f805 0f01 	strb.w	r0, [r5, #1]!
  for (int i = 0; i < size; ++i) {
 8014e52:	d1d1      	bne.n	8014df8 <add_fpreq+0x34>
  }
}
 8014e54:	ecbd 8b06 	vpop	{d8-d10}
 8014e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e5c:	4770      	bx	lr
 8014e5e:	bf00      	nop

08014e60 <convolve_1x1_s8_ch16_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8014e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e64:	b091      	sub	sp, #68	; 0x44
 8014e66:	469a      	mov	sl, r3
 8014e68:	4607      	mov	r7, r0
 8014e6a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8014e6e:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8014e72:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8014e76:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8014e7a:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8014e7c:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8014e80:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8014e84:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8014e86:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8014e88:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8014e8a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8014e8c:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8014e90:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8014e94:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014e96:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8014e9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8014e9e:	9307      	str	r3, [sp, #28]
 8014ea0:	d055      	beq.n	8014f4e <convolve_1x1_s8_ch16_fpreq+0xee>
 8014ea2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014ea4:	464d      	mov	r5, r9
 8014ea6:	2600      	movs	r6, #0
 8014ea8:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8014eac:	b25b      	sxtb	r3, r3
 8014eae:	9406      	str	r4, [sp, #24]
 8014eb0:	9308      	str	r3, [sp, #32]
 8014eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014eb4:	b21b      	sxth	r3, r3
 8014eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014eb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014eba:	b21b      	sxth	r3, r3
 8014ebc:	930a      	str	r3, [sp, #40]	; 0x28
 8014ebe:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8014ec2:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8014ec4:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8014ec6:	b335      	cbz	r5, 8014f16 <convolve_1x1_s8_ch16_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8014ec8:	4642      	mov	r2, r8
		while (cnt > 0) {
 8014eca:	46ae      	mov	lr, r5
 8014ecc:	9c06      	ldr	r4, [sp, #24]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8014ece:	680b      	ldr	r3, [r1, #0]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014ed0:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8014ed4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014ed8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014edc:	fa93 f304 	sadd16	r3, r3, r4
 8014ee0:	fa9c fc04 	sadd16	ip, ip, r4
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8014ee4:	f8c2 c000 	str.w	ip, [r2]
 8014ee8:	3108      	adds	r1, #8
 8014eea:	6053      	str	r3, [r2, #4]
 8014eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014ef0:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8014ef4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014ef8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014efc:	fa93 f304 	sadd16	r3, r3, r4
 8014f00:	fa9c fc04 	sadd16	ip, ip, r4
 8014f04:	f1be 0e01 	subs.w	lr, lr, #1
 8014f08:	f8c2 c008 	str.w	ip, [r2, #8]
 8014f0c:	60d3      	str	r3, [r2, #12]
 8014f0e:	f102 0210 	add.w	r2, r2, #16
 8014f12:	d1dc      	bne.n	8014ece <convolve_1x1_s8_ch16_fpreq+0x6e>
 8014f14:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
 8014f16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f18:	465a      	mov	r2, fp
 8014f1a:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8014f1c:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
 8014f1e:	9c08      	ldr	r4, [sp, #32]
 8014f20:	9005      	str	r0, [sp, #20]
 8014f22:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014f24:	9304      	str	r3, [sp, #16]
 8014f26:	9102      	str	r1, [sp, #8]
 8014f28:	4641      	mov	r1, r8
 8014f2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014f2c:	9001      	str	r0, [sp, #4]
 8014f2e:	4648      	mov	r0, r9
 8014f30:	9400      	str	r4, [sp, #0]
 8014f32:	f8cd a00c 	str.w	sl, [sp, #12]
 8014f36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014f38:	f001 f992 	bl	8016260 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8014f3c:	9b07      	ldr	r3, [sp, #28]
 8014f3e:	4427      	add	r7, r4
 8014f40:	429e      	cmp	r6, r3
 8014f42:	d1bf      	bne.n	8014ec4 <convolve_1x1_s8_ch16_fpreq+0x64>
 8014f44:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8014f48:	46a9      	mov	r9, r5
 8014f4a:	9c06      	ldr	r4, [sp, #24]
 8014f4c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8014f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f50:	461a      	mov	r2, r3
 8014f52:	07d2      	lsls	r2, r2, #31
 8014f54:	d560      	bpl.n	8015018 <convolve_1x1_s8_ch16_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8014f56:	3b01      	subs	r3, #1
 8014f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f5a:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8014f5e:	f1b9 0f00 	cmp.w	r9, #0
 8014f62:	d013      	beq.n	8014f8c <convolve_1x1_s8_ch16_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8014f64:	4642      	mov	r2, r8
 8014f66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014f68:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014f6c:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8014f70:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014f74:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f78:	fa93 f304 	sadd16	r3, r3, r4
 8014f7c:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8014f80:	3e01      	subs	r6, #1
 8014f82:	6011      	str	r1, [r2, #0]
 8014f84:	6053      	str	r3, [r2, #4]
 8014f86:	f102 0208 	add.w	r2, r2, #8
 8014f8a:	d1ed      	bne.n	8014f68 <convolve_1x1_s8_ch16_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8014f8c:	f1bb 0f00 	cmp.w	fp, #0
 8014f90:	d042      	beq.n	8015018 <convolve_1x1_s8_ch16_fpreq+0x1b8>
 8014f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f94:	eb00 0a0b 	add.w	sl, r0, fp
 8014f98:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8014f9c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8014fa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014fa2:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8014fa6:	fa1f fe8e 	uxth.w	lr, lr
 8014faa:	f1a3 0904 	sub.w	r9, r3, #4
 8014fae:	f10e 0e01 	add.w	lr, lr, #1
 8014fb2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8014fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8014fb8:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8014fbc:	b19a      	cbz	r2, 8014fe6 <convolve_1x1_s8_ch16_fpreq+0x186>
 8014fbe:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8014fc2:	4644      	mov	r4, r8
 8014fc4:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8014fc8:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8014fca:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014fce:	fa2f f282 	sxtb16	r2, r2
 8014fd2:	fa2f f181 	sxtb16	r1, r1

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014fd6:	fb22 3306 	smlad	r3, r2, r6, r3
 8014fda:	6862      	ldr	r2, [r4, #4]
 8014fdc:	3408      	adds	r4, #8
 8014fde:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8014fe2:	42bd      	cmp	r5, r7
 8014fe4:	d1ee      	bne.n	8014fc4 <convolve_1x1_s8_ch16_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8014fe6:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8014fea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8014fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014ff0:	ecfc 7a01 	vldmia	ip!, {s15}
 8014ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ffc:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8015000:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8015002:	4293      	cmp	r3, r2
 8015004:	bfb8      	it	lt
 8015006:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8015008:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801500a:	4293      	cmp	r3, r2
 801500c:	bfa8      	it	ge
 801500e:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8015010:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8015014:	4550      	cmp	r0, sl
 8015016:	d1ce      	bne.n	8014fb6 <convolve_1x1_s8_ch16_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8015018:	2000      	movs	r0, #0
 801501a:	b011      	add	sp, #68	; 0x44
 801501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015020 <convolve_1x1_s8_ch24_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8015020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015024:	b091      	sub	sp, #68	; 0x44
 8015026:	469a      	mov	sl, r3
 8015028:	4607      	mov	r7, r0
 801502a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 801502e:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8015032:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8015036:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 801503a:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 801503c:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8015040:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8015044:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8015046:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8015048:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 801504a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801504c:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8015050:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8015054:	9821      	ldr	r0, [sp, #132]	; 0x84
 8015056:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 801505a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801505e:	9307      	str	r3, [sp, #28]
 8015060:	d055      	beq.n	801510e <convolve_1x1_s8_ch24_fpreq+0xee>
 8015062:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015064:	464d      	mov	r5, r9
 8015066:	2600      	movs	r6, #0
 8015068:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 801506c:	b25b      	sxtb	r3, r3
 801506e:	9406      	str	r4, [sp, #24]
 8015070:	9308      	str	r3, [sp, #32]
 8015072:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015074:	b21b      	sxth	r3, r3
 8015076:	930b      	str	r3, [sp, #44]	; 0x2c
 8015078:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801507a:	b21b      	sxth	r3, r3
 801507c:	930a      	str	r3, [sp, #40]	; 0x28
 801507e:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8015082:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8015084:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8015086:	b335      	cbz	r5, 80150d6 <convolve_1x1_s8_ch24_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8015088:	4642      	mov	r2, r8
		while (cnt > 0) {
 801508a:	46ae      	mov	lr, r5
 801508c:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 801508e:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015090:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015094:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015098:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801509c:	fa93 f304 	sadd16	r3, r3, r4
 80150a0:	fa9c fc04 	sadd16	ip, ip, r4
 80150a4:	f8c2 c000 	str.w	ip, [r2]
 80150a8:	3108      	adds	r1, #8
 80150aa:	6053      	str	r3, [r2, #4]
 80150ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80150b0:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80150b4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80150b8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80150bc:	fa93 f304 	sadd16	r3, r3, r4
 80150c0:	fa9c fc04 	sadd16	ip, ip, r4
 80150c4:	f1be 0e01 	subs.w	lr, lr, #1
 80150c8:	f8c2 c008 	str.w	ip, [r2, #8]
 80150cc:	60d3      	str	r3, [r2, #12]
 80150ce:	f102 0210 	add.w	r2, r2, #16
 80150d2:	d1dc      	bne.n	801508e <convolve_1x1_s8_ch24_fpreq+0x6e>
 80150d4:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
 80150d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80150d8:	465a      	mov	r2, fp
 80150da:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80150dc:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
 80150de:	9c08      	ldr	r4, [sp, #32]
 80150e0:	9005      	str	r0, [sp, #20]
 80150e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80150e4:	9304      	str	r3, [sp, #16]
 80150e6:	9102      	str	r1, [sp, #8]
 80150e8:	4641      	mov	r1, r8
 80150ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80150ec:	9001      	str	r0, [sp, #4]
 80150ee:	4648      	mov	r0, r9
 80150f0:	9400      	str	r4, [sp, #0]
 80150f2:	f8cd a00c 	str.w	sl, [sp, #12]
 80150f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80150f8:	f001 f9f0 	bl	80164dc <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80150fc:	9b07      	ldr	r3, [sp, #28]
 80150fe:	4427      	add	r7, r4
 8015100:	429e      	cmp	r6, r3
 8015102:	d1bf      	bne.n	8015084 <convolve_1x1_s8_ch24_fpreq+0x64>
 8015104:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8015108:	46a9      	mov	r9, r5
 801510a:	9c06      	ldr	r4, [sp, #24]
 801510c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801510e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015110:	461a      	mov	r2, r3
 8015112:	07d2      	lsls	r2, r2, #31
 8015114:	d560      	bpl.n	80151d8 <convolve_1x1_s8_ch24_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8015116:	3b01      	subs	r3, #1
 8015118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801511a:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801511e:	f1b9 0f00 	cmp.w	r9, #0
 8015122:	d013      	beq.n	801514c <convolve_1x1_s8_ch24_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8015124:	4642      	mov	r2, r8
 8015126:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015128:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801512c:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015130:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015134:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015138:	fa93 f304 	sadd16	r3, r3, r4
 801513c:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8015140:	3e01      	subs	r6, #1
 8015142:	6011      	str	r1, [r2, #0]
 8015144:	6053      	str	r3, [r2, #4]
 8015146:	f102 0208 	add.w	r2, r2, #8
 801514a:	d1ed      	bne.n	8015128 <convolve_1x1_s8_ch24_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801514c:	f1bb 0f00 	cmp.w	fp, #0
 8015150:	d042      	beq.n	80151d8 <convolve_1x1_s8_ch24_fpreq+0x1b8>
 8015152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015154:	eb00 0a0b 	add.w	sl, r0, fp
 8015158:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 801515c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8015160:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015162:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8015166:	fa1f fe8e 	uxth.w	lr, lr
 801516a:	f1a3 0904 	sub.w	r9, r3, #4
 801516e:	f10e 0e01 	add.w	lr, lr, #1
 8015172:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8015176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8015178:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 801517c:	b19a      	cbz	r2, 80151a6 <convolve_1x1_s8_ch24_fpreq+0x186>
 801517e:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8015182:	4644      	mov	r4, r8
 8015184:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8015188:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 801518a:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801518e:	fa2f f282 	sxtb16	r2, r2
 8015192:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015196:	fb22 3306 	smlad	r3, r2, r6, r3
 801519a:	6862      	ldr	r2, [r4, #4]
 801519c:	3408      	adds	r4, #8
 801519e:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 80151a2:	42bd      	cmp	r5, r7
 80151a4:	d1ee      	bne.n	8015184 <convolve_1x1_s8_ch24_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 80151a6:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 80151aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 80151ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80151b0:	ecfc 7a01 	vldmia	ip!, {s15}
 80151b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151bc:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 80151c0:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 80151c2:	4293      	cmp	r3, r2
 80151c4:	bfb8      	it	lt
 80151c6:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 80151c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80151ca:	4293      	cmp	r3, r2
 80151cc:	bfa8      	it	ge
 80151ce:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 80151d0:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80151d4:	4550      	cmp	r0, sl
 80151d6:	d1ce      	bne.n	8015176 <convolve_1x1_s8_ch24_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 80151d8:	2000      	movs	r0, #0
 80151da:	b011      	add	sp, #68	; 0x44
 80151dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080151e0 <convolve_1x1_s8_ch48_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 80151e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e4:	b091      	sub	sp, #68	; 0x44
 80151e6:	469a      	mov	sl, r3
 80151e8:	4607      	mov	r7, r0
 80151ea:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 80151ee:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 80151f2:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 80151f6:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 80151fa:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 80151fc:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8015200:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8015204:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8015206:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8015208:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 801520a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801520c:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8015210:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8015214:	9821      	ldr	r0, [sp, #132]	; 0x84
 8015216:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 801521a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801521e:	9307      	str	r3, [sp, #28]
 8015220:	d055      	beq.n	80152ce <convolve_1x1_s8_ch48_fpreq+0xee>
 8015222:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015224:	464d      	mov	r5, r9
 8015226:	2600      	movs	r6, #0
 8015228:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 801522c:	b25b      	sxtb	r3, r3
 801522e:	9406      	str	r4, [sp, #24]
 8015230:	9308      	str	r3, [sp, #32]
 8015232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015234:	b21b      	sxth	r3, r3
 8015236:	930b      	str	r3, [sp, #44]	; 0x2c
 8015238:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801523a:	b21b      	sxth	r3, r3
 801523c:	930a      	str	r3, [sp, #40]	; 0x28
 801523e:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8015242:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8015244:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8015246:	b335      	cbz	r5, 8015296 <convolve_1x1_s8_ch48_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8015248:	4642      	mov	r2, r8
		while (cnt > 0) {
 801524a:	46ae      	mov	lr, r5
 801524c:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 801524e:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015250:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015254:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015258:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801525c:	fa93 f304 	sadd16	r3, r3, r4
 8015260:	fa9c fc04 	sadd16	ip, ip, r4
 8015264:	f8c2 c000 	str.w	ip, [r2]
 8015268:	3108      	adds	r1, #8
 801526a:	6053      	str	r3, [r2, #4]
 801526c:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015270:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015274:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015278:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801527c:	fa93 f304 	sadd16	r3, r3, r4
 8015280:	fa9c fc04 	sadd16	ip, ip, r4
 8015284:	f1be 0e01 	subs.w	lr, lr, #1
 8015288:	f8c2 c008 	str.w	ip, [r2, #8]
 801528c:	60d3      	str	r3, [r2, #12]
 801528e:	f102 0210 	add.w	r2, r2, #16
 8015292:	d1dc      	bne.n	801524e <convolve_1x1_s8_ch48_fpreq+0x6e>
 8015294:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
 8015296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015298:	465a      	mov	r2, fp
 801529a:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801529c:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
 801529e:	9c08      	ldr	r4, [sp, #32]
 80152a0:	9005      	str	r0, [sp, #20]
 80152a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80152a4:	9304      	str	r3, [sp, #16]
 80152a6:	9102      	str	r1, [sp, #8]
 80152a8:	4641      	mov	r1, r8
 80152aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80152ac:	9001      	str	r0, [sp, #4]
 80152ae:	4648      	mov	r0, r9
 80152b0:	9400      	str	r4, [sp, #0]
 80152b2:	f8cd a00c 	str.w	sl, [sp, #12]
 80152b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80152b8:	f000 fd66 	bl	8015d88 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80152bc:	9b07      	ldr	r3, [sp, #28]
 80152be:	4427      	add	r7, r4
 80152c0:	429e      	cmp	r6, r3
 80152c2:	d1bf      	bne.n	8015244 <convolve_1x1_s8_ch48_fpreq+0x64>
 80152c4:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 80152c8:	46a9      	mov	r9, r5
 80152ca:	9c06      	ldr	r4, [sp, #24]
 80152cc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80152ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152d0:	461a      	mov	r2, r3
 80152d2:	07d2      	lsls	r2, r2, #31
 80152d4:	d560      	bpl.n	8015398 <convolve_1x1_s8_ch48_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80152d6:	3b01      	subs	r3, #1
 80152d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152da:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 80152de:	f1b9 0f00 	cmp.w	r9, #0
 80152e2:	d013      	beq.n	801530c <convolve_1x1_s8_ch48_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 80152e4:	4642      	mov	r2, r8
 80152e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80152e8:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80152ec:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80152f0:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80152f4:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80152f8:	fa93 f304 	sadd16	r3, r3, r4
 80152fc:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8015300:	3e01      	subs	r6, #1
 8015302:	6011      	str	r1, [r2, #0]
 8015304:	6053      	str	r3, [r2, #4]
 8015306:	f102 0208 	add.w	r2, r2, #8
 801530a:	d1ed      	bne.n	80152e8 <convolve_1x1_s8_ch48_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801530c:	f1bb 0f00 	cmp.w	fp, #0
 8015310:	d042      	beq.n	8015398 <convolve_1x1_s8_ch48_fpreq+0x1b8>
 8015312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015314:	eb00 0a0b 	add.w	sl, r0, fp
 8015318:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 801531c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8015320:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015322:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8015326:	fa1f fe8e 	uxth.w	lr, lr
 801532a:	f1a3 0904 	sub.w	r9, r3, #4
 801532e:	f10e 0e01 	add.w	lr, lr, #1
 8015332:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8015336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8015338:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 801533c:	b19a      	cbz	r2, 8015366 <convolve_1x1_s8_ch48_fpreq+0x186>
 801533e:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8015342:	4644      	mov	r4, r8
 8015344:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8015348:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 801534a:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801534e:	fa2f f282 	sxtb16	r2, r2
 8015352:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015356:	fb22 3306 	smlad	r3, r2, r6, r3
 801535a:	6862      	ldr	r2, [r4, #4]
 801535c:	3408      	adds	r4, #8
 801535e:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8015362:	42bd      	cmp	r5, r7
 8015364:	d1ee      	bne.n	8015344 <convolve_1x1_s8_ch48_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8015366:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 801536a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 801536c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015370:	ecfc 7a01 	vldmia	ip!, {s15}
 8015374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801537c:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8015380:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8015382:	4293      	cmp	r3, r2
 8015384:	bfb8      	it	lt
 8015386:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8015388:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801538a:	4293      	cmp	r3, r2
 801538c:	bfa8      	it	ge
 801538e:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8015390:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8015394:	4550      	cmp	r0, sl
 8015396:	d1ce      	bne.n	8015336 <convolve_1x1_s8_ch48_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8015398:	2000      	movs	r0, #0
 801539a:	b011      	add	sp, #68	; 0x44
 801539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080153a0 <convolve_1x1_s8_ch8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 80153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a4:	b091      	sub	sp, #68	; 0x44
 80153a6:	469a      	mov	sl, r3
 80153a8:	4607      	mov	r7, r0
 80153aa:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 80153ae:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 80153b2:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 80153b6:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 80153ba:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 80153bc:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80153c0:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 80153c4:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 80153c6:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80153c8:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 80153ca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80153cc:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 80153d0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 80153d4:	9821      	ldr	r0, [sp, #132]	; 0x84
 80153d6:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 80153da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80153de:	9307      	str	r3, [sp, #28]
 80153e0:	d055      	beq.n	801548e <convolve_1x1_s8_ch8_fpreq+0xee>
 80153e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153e4:	464d      	mov	r5, r9
 80153e6:	2600      	movs	r6, #0
 80153e8:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80153ec:	b25b      	sxtb	r3, r3
 80153ee:	9406      	str	r4, [sp, #24]
 80153f0:	9308      	str	r3, [sp, #32]
 80153f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80153f4:	b21b      	sxth	r3, r3
 80153f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80153f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80153fa:	b21b      	sxth	r3, r3
 80153fc:	930a      	str	r3, [sp, #40]	; 0x28
 80153fe:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8015402:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8015404:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8015406:	b335      	cbz	r5, 8015456 <convolve_1x1_s8_ch8_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8015408:	4642      	mov	r2, r8
		while (cnt > 0) {
 801540a:	46ae      	mov	lr, r5
 801540c:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 801540e:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015410:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015414:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015418:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801541c:	fa93 f304 	sadd16	r3, r3, r4
 8015420:	fa9c fc04 	sadd16	ip, ip, r4
 8015424:	f8c2 c000 	str.w	ip, [r2]
 8015428:	3108      	adds	r1, #8
 801542a:	6053      	str	r3, [r2, #4]
 801542c:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015430:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015434:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015438:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801543c:	fa93 f304 	sadd16	r3, r3, r4
 8015440:	fa9c fc04 	sadd16	ip, ip, r4
 8015444:	f1be 0e01 	subs.w	lr, lr, #1
 8015448:	f8c2 c008 	str.w	ip, [r2, #8]
 801544c:	60d3      	str	r3, [r2, #12]
 801544e:	f102 0210 	add.w	r2, r2, #16
 8015452:	d1dc      	bne.n	801540e <convolve_1x1_s8_ch8_fpreq+0x6e>
 8015454:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8015456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015458:	465a      	mov	r2, fp
 801545a:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801545c:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 801545e:	9c08      	ldr	r4, [sp, #32]
 8015460:	9005      	str	r0, [sp, #20]
 8015462:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015464:	9304      	str	r3, [sp, #16]
 8015466:	9102      	str	r1, [sp, #8]
 8015468:	4641      	mov	r1, r8
 801546a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801546c:	9001      	str	r0, [sp, #4]
 801546e:	4648      	mov	r0, r9
 8015470:	9400      	str	r4, [sp, #0]
 8015472:	f8cd a00c 	str.w	sl, [sp, #12]
 8015476:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015478:	f001 f9ba 	bl	80167f0 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801547c:	9b07      	ldr	r3, [sp, #28]
 801547e:	4427      	add	r7, r4
 8015480:	429e      	cmp	r6, r3
 8015482:	d1bf      	bne.n	8015404 <convolve_1x1_s8_ch8_fpreq+0x64>
 8015484:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8015488:	46a9      	mov	r9, r5
 801548a:	9c06      	ldr	r4, [sp, #24]
 801548c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801548e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015490:	461a      	mov	r2, r3
 8015492:	07d2      	lsls	r2, r2, #31
 8015494:	d560      	bpl.n	8015558 <convolve_1x1_s8_ch8_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8015496:	3b01      	subs	r3, #1
 8015498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801549a:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801549e:	f1b9 0f00 	cmp.w	r9, #0
 80154a2:	d013      	beq.n	80154cc <convolve_1x1_s8_ch8_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 80154a4:	4642      	mov	r2, r8
 80154a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80154a8:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80154ac:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80154b0:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80154b4:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80154b8:	fa93 f304 	sadd16	r3, r3, r4
 80154bc:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 80154c0:	3e01      	subs	r6, #1
 80154c2:	6011      	str	r1, [r2, #0]
 80154c4:	6053      	str	r3, [r2, #4]
 80154c6:	f102 0208 	add.w	r2, r2, #8
 80154ca:	d1ed      	bne.n	80154a8 <convolve_1x1_s8_ch8_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80154cc:	f1bb 0f00 	cmp.w	fp, #0
 80154d0:	d042      	beq.n	8015558 <convolve_1x1_s8_ch8_fpreq+0x1b8>
 80154d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154d4:	eb00 0a0b 	add.w	sl, r0, fp
 80154d8:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 80154dc:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80154e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154e2:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80154e6:	fa1f fe8e 	uxth.w	lr, lr
 80154ea:	f1a3 0904 	sub.w	r9, r3, #4
 80154ee:	f10e 0e01 	add.w	lr, lr, #1
 80154f2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 80154f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 80154f8:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 80154fc:	b19a      	cbz	r2, 8015526 <convolve_1x1_s8_ch8_fpreq+0x186>
 80154fe:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8015502:	4644      	mov	r4, r8
 8015504:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8015508:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 801550a:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801550e:	fa2f f282 	sxtb16	r2, r2
 8015512:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015516:	fb22 3306 	smlad	r3, r2, r6, r3
 801551a:	6862      	ldr	r2, [r4, #4]
 801551c:	3408      	adds	r4, #8
 801551e:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8015522:	42bd      	cmp	r5, r7
 8015524:	d1ee      	bne.n	8015504 <convolve_1x1_s8_ch8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8015526:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 801552a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 801552c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015530:	ecfc 7a01 	vldmia	ip!, {s15}
 8015534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801553c:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8015540:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8015542:	4293      	cmp	r3, r2
 8015544:	bfb8      	it	lt
 8015546:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8015548:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801554a:	4293      	cmp	r3, r2
 801554c:	bfa8      	it	ge
 801554e:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8015550:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8015554:	4550      	cmp	r0, sl
 8015556:	d1ce      	bne.n	80154f6 <convolve_1x1_s8_ch8_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8015558:	2000      	movs	r0, #0
 801555a:	b011      	add	sp, #68	; 0x44
 801555c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015560 <convolve_1x1_s8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8015560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8015564:	f013 0603 	ands.w	r6, r3, #3
		const uint16_t output_ch, q15_t *runtime_buf) {
 8015568:	b091      	sub	sp, #68	; 0x44
 801556a:	4604      	mov	r4, r0
 801556c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801556e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8015570:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 8015574:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8015578:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 801557c:	f040 80cf 	bne.w	801571e <convolve_1x1_s8_fpreq+0x1be>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 8015580:	fb01 f202 	mul.w	r2, r1, r2
 8015584:	4698      	mov	r8, r3
	const int channel_div4 = (input_ch >> 2);
 8015586:	089b      	lsrs	r3, r3, #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8015588:	991e      	ldr	r1, [sp, #120]	; 0x78
 801558a:	4627      	mov	r7, r4
 801558c:	940f      	str	r4, [sp, #60]	; 0x3c
	const int channel_div4 = (input_ch >> 2);
 801558e:	fa1f f983 	uxth.w	r9, r3
 8015592:	930c      	str	r3, [sp, #48]	; 0x30

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8015594:	1053      	asrs	r3, r2, #1
	const int32_t num_elements = output_x * output_y;
 8015596:	920d      	str	r2, [sp, #52]	; 0x34
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8015598:	b20c      	sxth	r4, r1
	const int channel_div4 = (input_ch >> 2);
 801559a:	46cb      	mov	fp, r9
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801559c:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80155a0:	9308      	str	r3, [sp, #32]
 80155a2:	d054      	beq.n	801564e <convolve_1x1_s8_fpreq+0xee>
 80155a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80155a6:	46ab      	mov	fp, r5
 80155a8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80155ac:	464d      	mov	r5, r9
 80155ae:	b25b      	sxtb	r3, r3
 80155b0:	9407      	str	r4, [sp, #28]
 80155b2:	9309      	str	r3, [sp, #36]	; 0x24
 80155b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80155b6:	b21b      	sxth	r3, r3
 80155b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80155ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80155bc:	b21b      	sxth	r3, r3
 80155be:	930a      	str	r3, [sp, #40]	; 0x28
 80155c0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80155c4:	4699      	mov	r9, r3
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 80155c6:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 80155c8:	b335      	cbz	r5, 8015618 <convolve_1x1_s8_fpreq+0xb8>
		q15_t *dst = two_column_buffer;
 80155ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
		while (cnt > 0) {
 80155cc:	46ae      	mov	lr, r5
 80155ce:	9c07      	ldr	r4, [sp, #28]
    memcpy(&val, *in_q7, 4);
 80155d0:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80155d2:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80155d6:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80155da:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80155de:	fa93 f304 	sadd16	r3, r3, r4
 80155e2:	fa9c fc04 	sadd16	ip, ip, r4
 80155e6:	f8c2 c000 	str.w	ip, [r2]
 80155ea:	3108      	adds	r1, #8
 80155ec:	6053      	str	r3, [r2, #4]
 80155ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80155f2:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80155f6:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80155fa:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80155fe:	fa93 f304 	sadd16	r3, r3, r4
 8015602:	fa9c fc04 	sadd16	ip, ip, r4
 8015606:	f1be 0e01 	subs.w	lr, lr, #1
 801560a:	f8c2 c008 	str.w	ip, [r2, #8]
 801560e:	60d3      	str	r3, [r2, #12]
 8015610:	f102 0210 	add.w	r2, r2, #16
 8015614:	d1dc      	bne.n	80155d0 <convolve_1x1_s8_fpreq+0x70>
 8015616:	9407      	str	r4, [sp, #28]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8015618:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801561a:	4652      	mov	r2, sl
 801561c:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801561e:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8015620:	9005      	str	r0, [sp, #20]
 8015622:	444f      	add	r7, r9
 8015624:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015626:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015628:	9304      	str	r3, [sp, #16]
 801562a:	9102      	str	r1, [sp, #8]
 801562c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801562e:	9001      	str	r0, [sp, #4]
 8015630:	4658      	mov	r0, fp
 8015632:	f8cd 800c 	str.w	r8, [sp, #12]
 8015636:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015638:	9400      	str	r4, [sp, #0]
 801563a:	f001 f8d9 	bl	80167f0 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801563e:	9b08      	ldr	r3, [sp, #32]
 8015640:	429e      	cmp	r6, r3
 8015642:	d1c0      	bne.n	80155c6 <convolve_1x1_s8_fpreq+0x66>
 8015644:	46a9      	mov	r9, r5
 8015646:	9c07      	ldr	r4, [sp, #28]
 8015648:	465d      	mov	r5, fp
 801564a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 801564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015650:	07da      	lsls	r2, r3, #31
 8015652:	d560      	bpl.n	8015716 <convolve_1x1_s8_fpreq+0x1b6>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8015654:	3b01      	subs	r3, #1
 8015656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015658:	fb08 2803 	mla	r8, r8, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 801565c:	f1b9 0f00 	cmp.w	r9, #0
 8015660:	d013      	beq.n	801568a <convolve_1x1_s8_fpreq+0x12a>
		q15_t *dst = two_column_buffer;
 8015662:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8015664:	f858 3b04 	ldr.w	r3, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015668:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 801566c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015670:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015674:	fa93 f304 	sadd16	r3, r3, r4
 8015678:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 801567c:	f1bb 0b01 	subs.w	fp, fp, #1
 8015680:	6011      	str	r1, [r2, #0]
 8015682:	6053      	str	r3, [r2, #4]
 8015684:	f102 0208 	add.w	r2, r2, #8
 8015688:	d1ec      	bne.n	8015664 <convolve_1x1_s8_fpreq+0x104>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801568a:	f1ba 0f00 	cmp.w	sl, #0
 801568e:	d042      	beq.n	8015716 <convolve_1x1_s8_fpreq+0x1b6>
 8015690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015692:	4482      	add	sl, r0
 8015694:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8015698:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 801569c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801569e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80156a2:	fa1f fe8e 	uxth.w	lr, lr
 80156a6:	f1a3 0804 	sub.w	r8, r3, #4
 80156aa:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80156ae:	f10e 0e01 	add.w	lr, lr, #1
 80156b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 80156b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 80156b8:	f858 3f04 	ldr.w	r3, [r8, #4]!
			while (col_count) {
 80156bc:	b19a      	cbz	r2, 80156e6 <convolve_1x1_s8_fpreq+0x186>
 80156be:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 80156c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80156c4:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 80156c8:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80156ca:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80156ce:	fa2f f282 	sxtb16	r2, r2
 80156d2:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80156d6:	fb22 3306 	smlad	r3, r2, r6, r3
 80156da:	6862      	ldr	r2, [r4, #4]
 80156dc:	3408      	adds	r4, #8
 80156de:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 80156e2:	42bd      	cmp	r5, r7
 80156e4:	d1ee      	bne.n	80156c4 <convolve_1x1_s8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 80156e6:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 80156ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 80156ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80156f0:	ecfc 7a01 	vldmia	ip!, {s15}
 80156f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80156f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156fc:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8015700:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8015702:	4293      	cmp	r3, r2
 8015704:	bfb8      	it	lt
 8015706:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8015708:	454b      	cmp	r3, r9
 801570a:	bfa8      	it	ge
 801570c:	464b      	movge	r3, r9
			*out++ = (q7_t) sum;
 801570e:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8015712:	4550      	cmp	r0, sl
 8015714:	d1cf      	bne.n	80156b6 <convolve_1x1_s8_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8015716:	2000      	movs	r0, #0
}
 8015718:	b011      	add	sp, #68	; 0x44
 801571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 801571e:	2001      	movs	r0, #1
}
 8015720:	b011      	add	sp, #68	; 0x44
 8015722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015726:	bf00      	nop

08015728 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>:
		const float *scales, const int32_t output_offset,
		const int32_t input_offset, const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf,
		q7_t pad_value) {
 8015728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801572c:	b09b      	sub	sp, #108	; 0x6c
 801572e:	468c      	mov	ip, r1
 8015730:	461f      	mov	r7, r3
 8015732:	4686      	mov	lr, r0
	q15_t *two_column_buf = runtime_buf;
	q7_t *out = output;

	q15_t pad16 = pad_value;
	const int16_t inoff16 = input_offset;
	q15_t pad_out = pad16 + inoff16;
 8015734:	9928      	ldr	r1, [sp, #160]	; 0xa0
		q7_t pad_value) {
 8015736:	f99d 20c4 	ldrsb.w	r2, [sp, #196]	; 0xc4
	q15_t pad_out = pad16 + inoff16;
 801573a:	fa1f fa81 	uxth.w	sl, r1
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801573e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
		q7_t pad_value) {
 8015740:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
	q15_t pad_out = pad16 + inoff16;
 8015744:	4452      	add	r2, sl
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8015746:	b21c      	sxth	r4, r3
		q7_t pad_value) {
 8015748:	9115      	str	r1, [sp, #84]	; 0x54
	q15_t pad_out = pad16 + inoff16;
 801574a:	fa0f f882 	sxth.w	r8, r2
		q7_t pad_value) {
 801574e:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
 8015752:	eac8 4308 	pkhbt	r3, r8, r8, lsl #16
 8015756:	469b      	mov	fp, r3
		q7_t pad_value) {
 8015758:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 801575c:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
		q7_t pad_value) {
 8015760:	9309      	str	r3, [sp, #36]	; 0x24
 8015762:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8015766:	9314      	str	r3, [sp, #80]	; 0x50

	const q7_t *ip_a0 = kernel;

	for (int i = 0; i < output_ch; i += 2) {
 8015768:	2900      	cmp	r1, #0
 801576a:	f000 80bc 	beq.w	80158e6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1be>
 801576e:	3901      	subs	r1, #1
 8015770:	2036      	movs	r0, #54	; 0x36
 8015772:	9b30      	ldr	r3, [sp, #192]	; 0xc0
	const q7_t *ip_a0 = kernel;
 8015774:	464a      	mov	r2, r9
 8015776:	0849      	lsrs	r1, r1, #1
 8015778:	fb01 0000 	mla	r0, r1, r0, r0
 801577c:	eb09 0500 	add.w	r5, r9, r0
    memcpy(&val, *in_q7, 4);
 8015780:	6811      	ldr	r1, [r2, #0]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8015782:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015786:	fa2f f181 	sxtb16	r1, r1
    q31_t inA = arm_nn_read_q7x4_ia(&source);
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
    q31_t inAbuf2 = __SXTB16(inA);

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801578a:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801578e:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8015792:	e9c3 1600 	strd	r1, r6, [r3]
    memcpy(&val, *in_q7, 4);
 8015796:	f8d2 101b 	ldr.w	r1, [r2, #27]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801579a:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801579e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80157a2:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80157a6:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80157aa:	f8c3 603a 	str.w	r6, [r3, #58]	; 0x3a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80157ae:	f8c3 1036 	str.w	r1, [r3, #54]	; 0x36
    memcpy(&val, *in_q7, 4);
 80157b2:	6851      	ldr	r1, [r2, #4]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80157b4:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80157b8:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80157bc:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80157c0:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 80157c4:	e9c3 1602 	strd	r1, r6, [r3, #8]
    memcpy(&val, *in_q7, 4);
 80157c8:	f8d2 101f 	ldr.w	r1, [r2, #31]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80157cc:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80157d0:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80157d4:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80157d8:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80157dc:	f8c3 6042 	str.w	r6, [r3, #66]	; 0x42
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80157e0:	f8c3 103e 	str.w	r1, [r3, #62]	; 0x3e
    memcpy(&val, *in_q7, 4);
 80157e4:	6891      	ldr	r1, [r2, #8]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80157e6:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80157ea:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80157ee:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80157f2:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 80157f6:	e9c3 1604 	strd	r1, r6, [r3, #16]
    memcpy(&val, *in_q7, 4);
 80157fa:	f8d2 1023 	ldr.w	r1, [r2, #35]	; 0x23
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80157fe:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015802:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015806:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801580a:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801580e:	f8c3 604a 	str.w	r6, [r3, #74]	; 0x4a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015812:	f8c3 1046 	str.w	r1, [r3, #70]	; 0x46
    memcpy(&val, *in_q7, 4);
 8015816:	68d1      	ldr	r1, [r2, #12]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8015818:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801581c:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015820:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015824:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8015828:	e9c3 1606 	strd	r1, r6, [r3, #24]
    memcpy(&val, *in_q7, 4);
 801582c:	f8d2 1027 	ldr.w	r1, [r2, #39]	; 0x27
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8015830:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015834:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015838:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801583c:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015840:	f8c3 6052 	str.w	r6, [r3, #82]	; 0x52
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015844:	f8c3 104e 	str.w	r1, [r3, #78]	; 0x4e
    memcpy(&val, *in_q7, 4);
 8015848:	6911      	ldr	r1, [r2, #16]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801584a:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801584e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015852:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015856:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801585a:	e9c3 1608 	strd	r1, r6, [r3, #32]
    memcpy(&val, *in_q7, 4);
 801585e:	f8d2 102b 	ldr.w	r1, [r2, #43]	; 0x2b
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8015862:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015866:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801586a:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801586e:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015872:	f8c3 605a 	str.w	r6, [r3, #90]	; 0x5a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015876:	f8c3 1056 	str.w	r1, [r3, #86]	; 0x56
    memcpy(&val, *in_q7, 4);
 801587a:	6951      	ldr	r1, [r2, #20]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 801587c:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015880:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015884:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015888:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 801588c:	e9c3 160a 	strd	r1, r6, [r3, #40]	; 0x28
    memcpy(&val, *in_q7, 4);
 8015890:	f8d2 102f 	ldr.w	r1, [r2, #47]	; 0x2f
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8015894:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015898:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801589c:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80158a0:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80158a4:	f8c3 6062 	str.w	r6, [r3, #98]	; 0x62
 80158a8:	3236      	adds	r2, #54	; 0x36
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80158aa:	f8c3 105e 	str.w	r1, [r3, #94]	; 0x5e
 80158ae:	336c      	adds	r3, #108	; 0x6c
		dst1_31 += 2;
		dst2_31 += 2;
		//25, 26, 27
		dst1 = dst1_31;
		dst2 = dst2_31;
		dst1[0] = *ip_a0++;
 80158b0:	f912 1c1e 	ldrsb.w	r1, [r2, #-30]
 80158b4:	f823 1c3c 	strh.w	r1, [r3, #-60]
		dst1[1] = *ip_a0++;
 80158b8:	f912 1c1d 	ldrsb.w	r1, [r2, #-29]
 80158bc:	f823 1c3a 	strh.w	r1, [r3, #-58]
		dst1[2] = *ip_a0++;
 80158c0:	f912 1c1c 	ldrsb.w	r1, [r2, #-28]
 80158c4:	f823 1c38 	strh.w	r1, [r3, #-56]
		dst2[0] = *ip_a1++;
 80158c8:	f912 1c03 	ldrsb.w	r1, [r2, #-3]
 80158cc:	f823 1c06 	strh.w	r1, [r3, #-6]
		dst2[1] = *ip_a1++;
 80158d0:	f912 1c02 	ldrsb.w	r1, [r2, #-2]
 80158d4:	f823 1c04 	strh.w	r1, [r3, #-4]
		dst2[2] = *ip_a1++;
 80158d8:	f912 1c01 	ldrsb.w	r1, [r2, #-1]
	for (int i = 0; i < output_ch; i += 2) {
 80158dc:	42aa      	cmp	r2, r5
		dst2[2] = *ip_a1++;
 80158de:	f823 1c02 	strh.w	r1, [r3, #-2]
	for (int i = 0; i < output_ch; i += 2) {
 80158e2:	f47f af4d 	bne.w	8015780 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x58>

		/* skip row */
		ip_a0 += 27;
	}

	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 80158e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	f000 8152 	beq.w	8015b92 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>
 80158ee:	4639      	mov	r1, r7

			two_column_buf += 27;
			/* Computation is filed for every 2 columns */
			if (two_column_buf == runtime_buf + 2 * 27) {

				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 80158f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158f4:	970d      	str	r7, [sp, #52]	; 0x34
			int input_row_offset = 3 * input_x;
 80158f6:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 80158fa:	00ca      	lsls	r2, r1, #3
 80158fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80158fe:	900f      	str	r0, [sp, #60]	; 0x3c
					src3 = src2 + input_row_offset;
 8015900:	4670      	mov	r0, lr
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8015902:	9219      	str	r2, [sp, #100]	; 0x64
 8015904:	440a      	add	r2, r1
					src3 = src2 + input_row_offset;
 8015906:	4438      	add	r0, r7
 8015908:	465e      	mov	r6, fp
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 801590a:	9216      	str	r2, [sp, #88]	; 0x58
 801590c:	461a      	mov	r2, r3
					src3 = src2 + input_row_offset;
 801590e:	9018      	str	r0, [sp, #96]	; 0x60
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8015910:	2000      	movs	r0, #0
 8015912:	326c      	adds	r2, #108	; 0x6c
 8015914:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8015918:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 801591c:	9010      	str	r0, [sp, #64]	; 0x40
 801591e:	920a      	str	r2, [sp, #40]	; 0x28
 8015920:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8015924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015926:	2a00      	cmp	r2, #0
 8015928:	f000 80b2 	beq.w	8015a90 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x368>
			const int16_t base_idx_y = (i_out_y * 2) - 1;
 801592c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8015930:	2500      	movs	r5, #0
					src = input + (base_idx_y * input_x) * input_ch;
 8015932:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015934:	970b      	str	r7, [sp, #44]	; 0x2c
 8015936:	fb02 f209 	mul.w	r2, r2, r9
 801593a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801593e:	920e      	str	r2, [sp, #56]	; 0x38
 8015940:	fb01 0202 	mla	r2, r1, r2, r0
 8015944:	9211      	str	r2, [sp, #68]	; 0x44
					src2 = src + input_row_offset;
 8015946:	443a      	add	r2, r7
 8015948:	9212      	str	r2, [sp, #72]	; 0x48
					src3 = src2 + input_row_offset;
 801594a:	443a      	add	r2, r7
 801594c:	9213      	str	r2, [sp, #76]	; 0x4c
 801594e:	b2ad      	uxth	r5, r5
			if (base_idx_y != -1) {
 8015950:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8015954:	ea4f 0245 	mov.w	r2, r5, lsl #1
 8015958:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801595c:	b212      	sxth	r2, r2
 801595e:	f000 811c 	beq.w	8015b9a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x472>
				if (base_idx_x != -1) { //load all for now and unroll all
 8015962:	1c50      	adds	r0, r2, #1
 8015964:	f000 8155 	beq.w	8015c12 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x4ea>
							+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8015968:	990e      	ldr	r1, [sp, #56]	; 0x38
 801596a:	440a      	add	r2, r1
 801596c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015970:	fb01 0202 	mla	r2, r1, r2, r0
					src2 = src + input_row_offset;
 8015974:	990b      	ldr	r1, [sp, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8015976:	f8d2 c000 	ldr.w	ip, [r2]
 801597a:	1850      	adds	r0, r2, r1
 801597c:	fa2f fb8c 	sxtb16	fp, ip
					src3 = src2 + input_row_offset;
 8015980:	1841      	adds	r1, r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8015982:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015986:	fa2f fc8c 	sxtb16	ip, ip
					q7_q15_offset_ele(src, dst)
 801598a:	eacc 4e2b 	pkhtb	lr, ip, fp, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801598e:	fa9e fe04 	sadd16	lr, lr, r4
 8015992:	eacb 4c0c 	pkhbt	ip, fp, ip, lsl #16
 8015996:	fa9c fc04 	sadd16	ip, ip, r4
 801599a:	f8c3 e004 	str.w	lr, [r3, #4]
 801599e:	f8c3 c000 	str.w	ip, [r3]
 80159a2:	f8d2 c004 	ldr.w	ip, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80159a6:	fa2f fe8c 	sxtb16	lr, ip
  return (op1 >> op2) | (op1 << (32U - op2));
 80159aa:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80159ae:	fa2f fc8c 	sxtb16	ip, ip
					q7_q15_offset_ele(src, dst)
 80159b2:	eacc 4b2e 	pkhtb	fp, ip, lr, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80159b6:	fa9b fb04 	sadd16	fp, fp, r4
 80159ba:	eace 4c0c 	pkhbt	ip, lr, ip, lsl #16
 80159be:	fa9c fc04 	sadd16	ip, ip, r4
 80159c2:	f8c3 c008 	str.w	ip, [r3, #8]
 80159c6:	f8c3 b00c 	str.w	fp, [r3, #12]
					*dst++ = *src++ + input_offset;
 80159ca:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80159ce:	4452      	add	r2, sl
 80159d0:	821a      	strh	r2, [r3, #16]
 80159d2:	6802      	ldr	r2, [r0, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80159d4:	fa2f fc82 	sxtb16	ip, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80159d8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80159dc:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 80159e0:	eac2 4e2c 	pkhtb	lr, r2, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80159e4:	fa9e fe04 	sadd16	lr, lr, r4
 80159e8:	eacc 4202 	pkhbt	r2, ip, r2, lsl #16
 80159ec:	fa92 f204 	sadd16	r2, r2, r4
 80159f0:	f8c3 e016 	str.w	lr, [r3, #22]
 80159f4:	f8c3 2012 	str.w	r2, [r3, #18]
 80159f8:	6842      	ldr	r2, [r0, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80159fa:	fa2f fc82 	sxtb16	ip, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80159fe:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015a02:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8015a06:	eac2 4e2c 	pkhtb	lr, r2, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a0a:	fa9e fe04 	sadd16	lr, lr, r4
 8015a0e:	eacc 4202 	pkhbt	r2, ip, r2, lsl #16
 8015a12:	fa92 f204 	sadd16	r2, r2, r4
 8015a16:	f8c3 201a 	str.w	r2, [r3, #26]
 8015a1a:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 8015a1e:	f990 2008 	ldrsb.w	r2, [r0, #8]
					*dst2++ = *src2++ + input_offset;
 8015a22:	4452      	add	r2, sl
 8015a24:	845a      	strh	r2, [r3, #34]	; 0x22
 8015a26:	680a      	ldr	r2, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015a28:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015a2c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015a30:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8015a34:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a38:	fa9c fc04 	sadd16	ip, ip, r4
 8015a3c:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8015a40:	fa92 f204 	sadd16	r2, r2, r4
 8015a44:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8015a48:	625a      	str	r2, [r3, #36]	; 0x24
 8015a4a:	684a      	ldr	r2, [r1, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015a4c:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015a50:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015a54:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8015a58:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a5c:	fa9c fc04 	sadd16	ip, ip, r4
 8015a60:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8015a64:	fa92 f204 	sadd16	r2, r2, r4
 8015a68:	62da      	str	r2, [r3, #44]	; 0x2c
			two_column_buf += 27;
 8015a6a:	3336      	adds	r3, #54	; 0x36
 8015a6c:	f843 cc06 	str.w	ip, [r3, #-6]
					*dst3++ = *src3++ + input_offset;
 8015a70:	f991 2008 	ldrsb.w	r2, [r1, #8]
 8015a74:	4452      	add	r2, sl
 8015a76:	f823 2c02 	strh.w	r2, [r3, #-2]
			if (two_column_buf == runtime_buf + 2 * 27) {
 8015a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	f000 8133 	beq.w	8015ce8 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5c0>
 8015a82:	3501      	adds	r5, #1
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8015a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a86:	b22d      	sxth	r5, r5
 8015a88:	4295      	cmp	r5, r2
 8015a8a:	f6ff af60 	blt.w	801594e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x226>
 8015a8e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a92:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015a94:	3202      	adds	r2, #2
 8015a96:	3101      	adds	r1, #1
 8015a98:	b292      	uxth	r2, r2
 8015a9a:	b209      	sxth	r1, r1
 8015a9c:	920f      	str	r2, [sp, #60]	; 0x3c
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8015a9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015aa0:	9110      	str	r1, [sp, #64]	; 0x40
 8015aa2:	4291      	cmp	r1, r2
 8015aa4:	f6ff af3e 	blt.w	8015924 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1fc>
			}
		}
	}

	/* left-over because odd number of output pixels */
	if (two_column_buf != runtime_buf) {
 8015aa8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015aaa:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8015aae:	4293      	cmp	r3, r2
 8015ab0:	d06f      	beq.n	8015b92 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>
		const q7_t *ker_a = kernel;
		int i;

		for (i = 0; i < output_ch; i++) {
 8015ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d06c      	beq.n	8015b92 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;

			/* 4 multiply and accumulates are done in one loop. */
			uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8015ab8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015aba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015abc:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8015abe:	440a      	add	r2, r1
 8015ac0:	4617      	mov	r7, r2
 8015ac2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8015ac4:	f3c7 088f 	ubfx	r8, r7, #2, #16
 8015ac8:	f1a2 0c04 	sub.w	ip, r2, #4
 8015acc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
				sum = __SMLAD(ker_a2, ip_b2, sum);

				col_count--;
			}
			/* Handle left over mac */
			col_count = input_ch * kernel_y * kernel_x & 0x3;
 8015ace:	f007 0703 	and.w	r7, r7, #3
 8015ad2:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
 8015ad6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8015ada:	4413      	add	r3, r2
 8015adc:	fa1f fe8e 	uxth.w	lr, lr
 8015ae0:	469b      	mov	fp, r3
 8015ae2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015ae4:	f10e 0e01 	add.w	lr, lr, #1
 8015ae8:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 8015aec:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8015af0:	46f0      	mov	r8, lr
 8015af2:	4696      	mov	lr, r2
			while (col_count) {
 8015af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
			q31_t sum = bias[i];
 8015af6:	f85c 1f04 	ldr.w	r1, [ip, #4]!
			while (col_count) {
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f000 813e 	beq.w	8015d7c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x654>
 8015b00:	eb09 050a 	add.w	r5, r9, sl
 8015b04:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8015b06:	f859 3b04 	ldr.w	r3, [r9], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8015b0a:	fa2f f293 	sxtb16	r2, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015b0e:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015b12:	eac2 4423 	pkhtb	r4, r2, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015b16:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
    memcpy(&val, *in_q15, 4);
 8015b1a:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015b1c:	fb23 1102 	smlad	r1, r3, r2, r1
 8015b20:	6843      	ldr	r3, [r0, #4]
 8015b22:	3008      	adds	r0, #8
 8015b24:	fb24 1103 	smlad	r1, r4, r3, r1
 8015b28:	45a9      	cmp	r9, r5
 8015b2a:	d1ec      	bne.n	8015b06 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x3de>
    *in_q15 += 2;
 8015b2c:	4643      	mov	r3, r8
			while (col_count) {
 8015b2e:	b1b7      	cbz	r7, 8015b5e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
				q7_t ker_a1 = *ker_a++;
				q15_t ip_b1 = *ip_as_col++;
				sum += ker_a1 * ip_b1;
 8015b30:	f999 2000 	ldrsb.w	r2, [r9]
			while (col_count) {
 8015b34:	2f01      	cmp	r7, #1
				sum += ker_a1 * ip_b1;
 8015b36:	8818      	ldrh	r0, [r3, #0]
 8015b38:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 8015b3c:	f000 811b 	beq.w	8015d76 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x64e>
				sum += ker_a1 * ip_b1;
 8015b40:	f999 2001 	ldrsb.w	r2, [r9, #1]
			while (col_count) {
 8015b44:	2f02      	cmp	r7, #2
				sum += ker_a1 * ip_b1;
 8015b46:	8858      	ldrh	r0, [r3, #2]
 8015b48:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 8015b4c:	f000 8118 	beq.w	8015d80 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x658>
				sum += ker_a1 * ip_b1;
 8015b50:	889a      	ldrh	r2, [r3, #4]
				q7_t ker_a1 = *ker_a++;
 8015b52:	f109 0903 	add.w	r9, r9, #3
				sum += ker_a1 * ip_b1;
 8015b56:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 8015b5a:	fb12 1103 	smlabb	r1, r2, r3, r1
				col_count--;
			}

			sum = (float) sum * scales[i];
 8015b5e:	ee07 1a90 	vmov	s15, r1
			sum += output_offset;
 8015b62:	9a27      	ldr	r2, [sp, #156]	; 0x9c
			sum = (float) sum * scales[i];
 8015b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015b68:	ecf6 7a01 	vldmia	r6!, {s15}
 8015b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015b74:	ee17 3a90 	vmov	r3, s15
			sum += output_offset;
 8015b78:	4413      	add	r3, r2
			sum = MAX(sum, output_activation_min);
 8015b7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	bfb8      	it	lt
 8015b80:	4613      	movlt	r3, r2
			sum = MIN(sum, output_activation_max);
 8015b82:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015b84:	4293      	cmp	r3, r2
 8015b86:	bfa8      	it	ge
 8015b88:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8015b8a:	f80e 3b01 	strb.w	r3, [lr], #1
		for (i = 0; i < output_ch; i++) {
 8015b8e:	45de      	cmp	lr, fp
 8015b90:	d1b0      	bne.n	8015af4 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x3cc>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8015b92:	2000      	movs	r0, #0
 8015b94:	b01b      	add	sp, #108	; 0x6c
 8015b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (base_idx_x != -1) {	//load all for now and unroll all
 8015b9a:	1c51      	adds	r1, r2, #1
				*dst++ = pad_out;
 8015b9c:	f8a3 8000 	strh.w	r8, [r3]
				*dst_31++ = pad_out_q15x2;
 8015ba0:	f8c3 6002 	str.w	r6, [r3, #2]
				*dst_31++ = pad_out_q15x2;
 8015ba4:	f8c3 6006 	str.w	r6, [r3, #6]
				*dst_31++ = pad_out_q15x2;
 8015ba8:	f8c3 600a 	str.w	r6, [r3, #10]
				*dst_31++ = pad_out_q15x2;
 8015bac:	f8c3 600e 	str.w	r6, [r3, #14]
				if (base_idx_x != -1) {	//load all for now and unroll all
 8015bb0:	f000 80b6 	beq.w	8015d20 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5f8>
					src2 = input + (base_idx_x) * input_ch;
 8015bb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015bb8:	fb01 0202 	mla	r2, r1, r2, r0
					src3 = src2 + input_row_offset;
 8015bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8015bbe:	6810      	ldr	r0, [r2, #0]
 8015bc0:	1851      	adds	r1, r2, r1
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bc2:	fa2f fc80 	sxtb16	ip, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8015bc6:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bca:	fa2f f080 	sxtb16	r0, r0
					q7_q15_offset_ele(src2, dst2)
 8015bce:	eac0 4e2c 	pkhtb	lr, r0, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015bd2:	fa9e fe04 	sadd16	lr, lr, r4
 8015bd6:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 8015bda:	fa90 f004 	sadd16	r0, r0, r4
 8015bde:	f8c3 e016 	str.w	lr, [r3, #22]
 8015be2:	f8c3 0012 	str.w	r0, [r3, #18]
 8015be6:	6850      	ldr	r0, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015be8:	fa2f fc80 	sxtb16	ip, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8015bec:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bf0:	fa2f f080 	sxtb16	r0, r0
					q7_q15_offset_ele(src2, dst2)
 8015bf4:	eac0 4e2c 	pkhtb	lr, r0, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015bf8:	fa9e fe04 	sadd16	lr, lr, r4
 8015bfc:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 8015c00:	fa90 f004 	sadd16	r0, r0, r4
 8015c04:	f8c3 001a 	str.w	r0, [r3, #26]
 8015c08:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 8015c0c:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015c10:	e707      	b.n	8015a22 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x2fa>
 8015c12:	9f11      	ldr	r7, [sp, #68]	; 0x44
					*dst++ = pad_out;
 8015c14:	f8a3 8000 	strh.w	r8, [r3]
					*dst++ = pad_out;
 8015c18:	f8a3 8002 	strh.w	r8, [r3, #2]
					*dst++ = pad_out;
 8015c1c:	f8a3 8004 	strh.w	r8, [r3, #4]
					*dst2++ = pad_out;
 8015c20:	f8a3 8012 	strh.w	r8, [r3, #18]
					*dst2++ = pad_out;
 8015c24:	f8a3 8014 	strh.w	r8, [r3, #20]
					*dst2++ = pad_out;
 8015c28:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 8015c2c:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 8015c30:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 8015c34:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
 8015c38:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c3a:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c3e:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c42:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 8015c46:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c4a:	fa90 f004 	sadd16	r0, r0, r4
 8015c4e:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8015c52:	fa92 f204 	sadd16	r2, r2, r4
 8015c56:	f8c3 000a 	str.w	r0, [r3, #10]
 8015c5a:	f8c3 2006 	str.w	r2, [r3, #6]
					*dst++ = *src++ + input_offset;
 8015c5e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015c62:	4452      	add	r2, sl
 8015c64:	81da      	strh	r2, [r3, #14]
					*dst++ = *src++ + input_offset;
 8015c66:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8015c6a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015c6c:	4452      	add	r2, sl
 8015c6e:	821a      	strh	r2, [r3, #16]
 8015c70:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c72:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c76:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c7a:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8015c7e:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c82:	fa90 f004 	sadd16	r0, r0, r4
 8015c86:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8015c8a:	fa92 f204 	sadd16	r2, r2, r4
 8015c8e:	619a      	str	r2, [r3, #24]
 8015c90:	61d8      	str	r0, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 8015c92:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015c96:	4452      	add	r2, sl
 8015c98:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8015c9a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8015c9e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8015ca0:	4452      	add	r2, sl
 8015ca2:	845a      	strh	r2, [r3, #34]	; 0x22
 8015ca4:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015ca6:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015caa:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015cae:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8015cb2:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015cb6:	fa90 f004 	sadd16	r0, r0, r4
 8015cba:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8015cbe:	fa92 f204 	sadd16	r2, r2, r4
 8015cc2:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
			two_column_buf += 27;
 8015cc6:	3336      	adds	r3, #54	; 0x36
 8015cc8:	f843 0c08 	str.w	r0, [r3, #-8]
					*dst3++ = *src3++ + input_offset;
 8015ccc:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015cd0:	4452      	add	r2, sl
 8015cd2:	f823 2c04 	strh.w	r2, [r3, #-4]
					*dst3++ = *src3++ + input_offset;
 8015cd6:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8015cda:	4452      	add	r2, sl
 8015cdc:	f823 2c02 	strh.w	r2, [r3, #-2]
			if (two_column_buf == runtime_buf + 2 * 27) {
 8015ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ce2:	4293      	cmp	r3, r2
 8015ce4:	f47f aecd 	bne.w	8015a82 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x35a>
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8015ce8:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8015cea:	3501      	adds	r5, #1
 8015cec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015cee:	9702      	str	r7, [sp, #8]
 8015cf0:	b22d      	sxth	r5, r5
 8015cf2:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8015cf4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015cf6:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015cf8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015cfa:	9701      	str	r7, [sp, #4]
 8015cfc:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8015cfe:	9306      	str	r3, [sp, #24]
 8015d00:	9205      	str	r2, [sp, #20]
 8015d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015d04:	9104      	str	r1, [sp, #16]
 8015d06:	9003      	str	r0, [sp, #12]
 8015d08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015d0a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8015d0c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8015d0e:	9700      	str	r7, [sp, #0]
 8015d10:	f000 fec0 	bl	8016a94 <mat_mult_kernel3_input3_s8_s16_fpreq>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8015d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8015d16:	902b      	str	r0, [sp, #172]	; 0xac
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8015d18:	429d      	cmp	r5, r3
 8015d1a:	da29      	bge.n	8015d70 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x648>
 8015d1c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015d1e:	e616      	b.n	801594e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x226>
 8015d20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
					*dst2++ = pad_out;
 8015d22:	f8a3 8012 	strh.w	r8, [r3, #18]
					*dst2++ = pad_out;
 8015d26:	f8a3 8014 	strh.w	r8, [r3, #20]
					*dst2++ = pad_out;
 8015d2a:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 8015d2e:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 8015d32:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 8015d36:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
 8015d3a:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015d3c:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015d40:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015d44:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8015d48:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d4c:	fa90 f004 	sadd16	r0, r0, r4
 8015d50:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8015d54:	fa92 f204 	sadd16	r2, r2, r4
 8015d58:	619a      	str	r2, [r3, #24]
 8015d5a:	61d8      	str	r0, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 8015d5c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015d60:	4452      	add	r2, sl
 8015d62:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8015d64:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8015d68:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8015d6a:	4452      	add	r2, sl
 8015d6c:	845a      	strh	r2, [r3, #34]	; 0x22
 8015d6e:	e799      	b.n	8015ca4 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x57c>
 8015d70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8015d72:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015d74:	e68c      	b.n	8015a90 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x368>
				q7_t ker_a1 = *ker_a++;
 8015d76:	f109 0901 	add.w	r9, r9, #1
 8015d7a:	e6f0      	b.n	8015b5e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
			while (col_count) {
 8015d7c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015d7e:	e6d6      	b.n	8015b2e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x406>
				q7_t ker_a1 = *ker_a++;
 8015d80:	f109 0902 	add.w	r9, r9, #2
 8015d84:	e6eb      	b.n	8015b5e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
 8015d86:	bf00      	nop

08015d88 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch48_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8015d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d8c:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8015d8e:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 8015d90:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 8015d94:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 8015d96:	9505      	str	r5, [sp, #20]
 8015d98:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8015d9c:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8015d9e:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 8015da2:	920a      	str	r2, [sp, #40]	; 0x28
 8015da4:	9506      	str	r5, [sp, #24]
 8015da6:	9707      	str	r7, [sp, #28]
 8015da8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 8015daa:	f000 8254 	beq.w	8016256 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x4ce>
 8015dae:	3308      	adds	r3, #8
 8015db0:	3402      	adds	r4, #2
 8015db2:	3e01      	subs	r6, #1
 8015db4:	f105 0210 	add.w	r2, r5, #16
 8015db8:	9302      	str	r3, [sp, #8]
 8015dba:	f105 0308 	add.w	r3, r5, #8
 8015dbe:	9403      	str	r4, [sp, #12]
 8015dc0:	b2b4      	uxth	r4, r6
 8015dc2:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8015dc4:	eb01 0e47 	add.w	lr, r1, r7, lsl #1
 8015dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015dca:	940b      	str	r4, [sp, #44]	; 0x2c
 8015dcc:	3302      	adds	r3, #2
 8015dce:	9304      	str	r3, [sp, #16]
 8015dd0:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8015dd4:	9308      	str	r3, [sp, #32]
 8015dd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015dda:	9309      	str	r3, [sp, #36]	; 0x24
 8015ddc:	6805      	ldr	r5, [r0, #0]
 8015dde:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015de0:	fa2f f885 	sxtb16	r8, r5
 8015de4:	18c6      	adds	r6, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015de6:	ea4f 2535 	mov.w	r5, r5, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 8015dea:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015dec:	fa2f fb85 	sxtb16	fp, r5
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8015df0:	9d01      	ldr	r5, [sp, #4]
		const float scale_0 = scales[0];
 8015df2:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8015df6:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 8015dfa:	680f      	ldr	r7, [r1, #0]
 8015dfc:	f8de c000 	ldr.w	ip, [lr]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8015e00:	f855 9c08 	ldr.w	r9, [r5, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015e04:	fb28 9307 	smlad	r3, r8, r7, r9
    memcpy(&val, *in_q7, 4);
 8015e08:	6834      	ldr	r4, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015e0a:	fa2f f284 	sxtb16	r2, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8015e0e:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015e12:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015e16:	fb28 980c 	smlad	r8, r8, ip, r9
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8015e1a:	f855 9c04 	ldr.w	r9, [r5, #-4]
 8015e1e:	fb22 9707 	smlad	r7, r2, r7, r9
    memcpy(&val, *in_q15, 4);
 8015e22:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8015e26:	fb22 920c 	smlad	r2, r2, ip, r9
 8015e2a:	f8de c004 	ldr.w	ip, [lr, #4]
 8015e2e:	fb2b 330a 	smlad	r3, fp, sl, r3
 8015e32:	fb2b 850c 	smlad	r5, fp, ip, r8
 8015e36:	fb24 770a 	smlad	r7, r4, sl, r7
 8015e3a:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8015e3e:	fb24 240c 	smlad	r4, r4, ip, r2
    memcpy(&val, *in_q7, 4);
 8015e42:	f8d0 9004 	ldr.w	r9, [r0, #4]
    memcpy(&val, *in_q15, 4);
 8015e46:	f8de 8008 	ldr.w	r8, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8015e4a:	ea4f 2c39 	mov.w	ip, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015e4e:	fa2f f989 	sxtb16	r9, r9
 8015e52:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015e56:	fb29 330a 	smlad	r3, r9, sl, r3
    memcpy(&val, *in_q7, 4);
 8015e5a:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015e5c:	fa2f fb82 	sxtb16	fp, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015e60:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015e64:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015e68:	fb29 5508 	smlad	r5, r9, r8, r5
 8015e6c:	fb2b 770a 	smlad	r7, fp, sl, r7
    memcpy(&val, *in_q15, 4);
 8015e70:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8015e74:	fb2b 4b08 	smlad	fp, fp, r8, r4
 8015e78:	f8de 400c 	ldr.w	r4, [lr, #12]
 8015e7c:	fb2c 330a 	smlad	r3, ip, sl, r3
 8015e80:	fb2c 5904 	smlad	r9, ip, r4, r5
 8015e84:	fb22 770a 	smlad	r7, r2, sl, r7
 8015e88:	f8d1 a010 	ldr.w	sl, [r1, #16]
 8015e8c:	fb22 b204 	smlad	r2, r2, r4, fp
    memcpy(&val, *in_q7, 4);
 8015e90:	6884      	ldr	r4, [r0, #8]
    memcpy(&val, *in_q15, 4);
 8015e92:	f8de c010 	ldr.w	ip, [lr, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8015e96:	ea4f 2b34 	mov.w	fp, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015e9a:	fa2f f484 	sxtb16	r4, r4
 8015e9e:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015ea2:	fb24 330a 	smlad	r3, r4, sl, r3
    memcpy(&val, *in_q7, 4);
 8015ea6:	68b5      	ldr	r5, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015ea8:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8015eac:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015eb0:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015eb4:	fb24 940c 	smlad	r4, r4, ip, r9
 8015eb8:	fb28 770a 	smlad	r7, r8, sl, r7
    memcpy(&val, *in_q15, 4);
 8015ebc:	f8d1 a014 	ldr.w	sl, [r1, #20]
 8015ec0:	fb28 220c 	smlad	r2, r8, ip, r2
 8015ec4:	f8de 9014 	ldr.w	r9, [lr, #20]
 8015ec8:	fb2b 330a 	smlad	r3, fp, sl, r3
 8015ecc:	fb2b 4c09 	smlad	ip, fp, r9, r4
 8015ed0:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8015ed4:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015ed8:	fb25 2509 	smlad	r5, r5, r9, r2
    memcpy(&val, *in_q7, 4);
 8015edc:	68c4      	ldr	r4, [r0, #12]
    memcpy(&val, *in_q15, 4);
 8015ede:	f8de b018 	ldr.w	fp, [lr, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 8015ee2:	ea4f 2934 	mov.w	r9, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015ee6:	fa2f f484 	sxtb16	r4, r4
 8015eea:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015eee:	fb24 3208 	smlad	r2, r4, r8, r3
    memcpy(&val, *in_q7, 4);
 8015ef2:	68f7      	ldr	r7, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015ef4:	fa2f f387 	sxtb16	r3, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8015ef8:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015efc:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015f00:	fb24 c40b 	smlad	r4, r4, fp, ip
 8015f04:	fb23 a808 	smlad	r8, r3, r8, sl
    memcpy(&val, *in_q15, 4);
 8015f08:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8015f0c:	fb23 550b 	smlad	r5, r3, fp, r5
 8015f10:	f8de b01c 	ldr.w	fp, [lr, #28]
 8015f14:	fb29 220a 	smlad	r2, r9, sl, r2
 8015f18:	fb29 440b 	smlad	r4, r9, fp, r4
 8015f1c:	fb27 8a0a 	smlad	sl, r7, sl, r8
 8015f20:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8015f24:	fb27 5b0b 	smlad	fp, r7, fp, r5
    memcpy(&val, *in_q7, 4);
 8015f28:	6903      	ldr	r3, [r0, #16]
    memcpy(&val, *in_q15, 4);
 8015f2a:	f8de 8020 	ldr.w	r8, [lr, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 8015f2e:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015f32:	fa2f f383 	sxtb16	r3, r3
 8015f36:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015f3a:	fb23 220c 	smlad	r2, r3, ip, r2
    memcpy(&val, *in_q7, 4);
 8015f3e:	6937      	ldr	r7, [r6, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015f40:	fa2f f587 	sxtb16	r5, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8015f44:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015f48:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015f4c:	fb23 4408 	smlad	r4, r3, r8, r4
 8015f50:	fb25 ac0c 	smlad	ip, r5, ip, sl
    memcpy(&val, *in_q15, 4);
 8015f54:	f8d1 a024 	ldr.w	sl, [r1, #36]	; 0x24
 8015f58:	fb25 bb08 	smlad	fp, r5, r8, fp
 8015f5c:	f8de 8024 	ldr.w	r8, [lr, #36]	; 0x24
 8015f60:	fb29 220a 	smlad	r2, r9, sl, r2
 8015f64:	fb29 4908 	smlad	r9, r9, r8, r4
 8015f68:	fb27 ca0a 	smlad	sl, r7, sl, ip
 8015f6c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015f6e:	fb27 bb08 	smlad	fp, r7, r8, fp
    memcpy(&val, *in_q7, 4);
 8015f72:	6944      	ldr	r4, [r0, #20]
    memcpy(&val, *in_q15, 4);
 8015f74:	f8de 7028 	ldr.w	r7, [lr, #40]	; 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 8015f78:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015f7c:	fa2f f484 	sxtb16	r4, r4
 8015f80:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015f84:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 8015f88:	6975      	ldr	r5, [r6, #20]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015f8a:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8015f8e:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015f92:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015f96:	fb24 9407 	smlad	r4, r4, r7, r9
 8015f9a:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 8015f9e:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 8015fa2:	fb28 bb07 	smlad	fp, r8, r7, fp
 8015fa6:	f8de 702c 	ldr.w	r7, [lr, #44]	; 0x2c
 8015faa:	fb2c 220a 	smlad	r2, ip, sl, r2
 8015fae:	fb2c 4407 	smlad	r4, ip, r7, r4
 8015fb2:	fb25 3a0a 	smlad	sl, r5, sl, r3
 8015fb6:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
 8015fba:	fb25 b707 	smlad	r7, r5, r7, fp
    memcpy(&val, *in_q7, 4);
 8015fbe:	6983      	ldr	r3, [r0, #24]
    memcpy(&val, *in_q15, 4);
 8015fc0:	f8de 8030 	ldr.w	r8, [lr, #48]	; 0x30
  return (op1 >> op2) | (op1 << (32U - op2));
 8015fc4:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015fc8:	fa2f f383 	sxtb16	r3, r3
 8015fcc:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015fd0:	fb23 2209 	smlad	r2, r3, r9, r2
    memcpy(&val, *in_q7, 4);
 8015fd4:	69b5      	ldr	r5, [r6, #24]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015fd6:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8015fda:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015fde:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015fe2:	fb23 4408 	smlad	r4, r3, r8, r4
 8015fe6:	fb2b a909 	smlad	r9, fp, r9, sl
    memcpy(&val, *in_q15, 4);
 8015fea:	f8d1 a034 	ldr.w	sl, [r1, #52]	; 0x34
 8015fee:	fb2b 7708 	smlad	r7, fp, r8, r7
 8015ff2:	f8de 8034 	ldr.w	r8, [lr, #52]	; 0x34
 8015ff6:	fb2c 220a 	smlad	r2, ip, sl, r2
 8015ffa:	fb2c 4c08 	smlad	ip, ip, r8, r4
 8015ffe:	fb25 9a0a 	smlad	sl, r5, sl, r9
 8016002:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8016004:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 8016008:	69c4      	ldr	r4, [r0, #28]
    memcpy(&val, *in_q15, 4);
 801600a:	f8de b038 	ldr.w	fp, [lr, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
 801600e:	ea4f 2934 	mov.w	r9, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016012:	fa2f f484 	sxtb16	r4, r4
 8016016:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801601a:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 801601e:	69f5      	ldr	r5, [r6, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016020:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8016024:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016028:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801602c:	fb24 c40b 	smlad	r4, r4, fp, ip
 8016030:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 8016034:	f8d1 a03c 	ldr.w	sl, [r1, #60]	; 0x3c
 8016038:	fb28 770b 	smlad	r7, r8, fp, r7
 801603c:	f8de b03c 	ldr.w	fp, [lr, #60]	; 0x3c
 8016040:	fb29 220a 	smlad	r2, r9, sl, r2
 8016044:	fb29 440b 	smlad	r4, r9, fp, r4
 8016048:	fb25 3a0a 	smlad	sl, r5, sl, r3
 801604c:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
 8016050:	fb25 770b 	smlad	r7, r5, fp, r7
    memcpy(&val, *in_q7, 4);
 8016054:	6a03      	ldr	r3, [r0, #32]
    memcpy(&val, *in_q15, 4);
 8016056:	f8de 8040 	ldr.w	r8, [lr, #64]	; 0x40
  return (op1 >> op2) | (op1 << (32U - op2));
 801605a:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801605e:	fa2f f383 	sxtb16	r3, r3
 8016062:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016066:	fb23 220c 	smlad	r2, r3, ip, r2
    memcpy(&val, *in_q7, 4);
 801606a:	6a35      	ldr	r5, [r6, #32]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801606c:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8016070:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016074:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016078:	fb23 4408 	smlad	r4, r3, r8, r4
 801607c:	fb2b ac0c 	smlad	ip, fp, ip, sl
    memcpy(&val, *in_q15, 4);
 8016080:	f8d1 a044 	ldr.w	sl, [r1, #68]	; 0x44
 8016084:	fb2b 7708 	smlad	r7, fp, r8, r7
 8016088:	f8de 8044 	ldr.w	r8, [lr, #68]	; 0x44
 801608c:	fb29 220a 	smlad	r2, r9, sl, r2
 8016090:	fb29 4908 	smlad	r9, r9, r8, r4
 8016094:	fb25 ca0a 	smlad	sl, r5, sl, ip
 8016098:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 801609a:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 801609e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    memcpy(&val, *in_q15, 4);
 80160a0:	f8de b048 	ldr.w	fp, [lr, #72]	; 0x48
  return (op1 >> op2) | (op1 << (32U - op2));
 80160a4:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80160a8:	fa2f f484 	sxtb16	r4, r4
 80160ac:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80160b0:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 80160b4:	6a75      	ldr	r5, [r6, #36]	; 0x24
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80160b6:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80160ba:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80160be:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80160c2:	fb24 940b 	smlad	r4, r4, fp, r9
 80160c6:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 80160ca:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 80160ce:	fb28 770b 	smlad	r7, r8, fp, r7
 80160d2:	f8de b04c 	ldr.w	fp, [lr, #76]	; 0x4c
 80160d6:	fb2c 220a 	smlad	r2, ip, sl, r2
 80160da:	fb2c 440b 	smlad	r4, ip, fp, r4
 80160de:	fb25 3a0a 	smlad	sl, r5, sl, r3
 80160e2:	f8d1 9050 	ldr.w	r9, [r1, #80]	; 0x50
 80160e6:	fb25 770b 	smlad	r7, r5, fp, r7
    memcpy(&val, *in_q7, 4);
 80160ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
    memcpy(&val, *in_q15, 4);
 80160ec:	f8de 8050 	ldr.w	r8, [lr, #80]	; 0x50
  return (op1 >> op2) | (op1 << (32U - op2));
 80160f0:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80160f4:	fa2f f383 	sxtb16	r3, r3
 80160f8:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80160fc:	fb23 2209 	smlad	r2, r3, r9, r2
    memcpy(&val, *in_q7, 4);
 8016100:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016102:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8016106:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801610a:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801610e:	fb23 4408 	smlad	r4, r3, r8, r4
 8016112:	fb2b a909 	smlad	r9, fp, r9, sl
    memcpy(&val, *in_q15, 4);
 8016116:	f8d1 a054 	ldr.w	sl, [r1, #84]	; 0x54
 801611a:	fb2b 7708 	smlad	r7, fp, r8, r7
 801611e:	f8de 8054 	ldr.w	r8, [lr, #84]	; 0x54
 8016122:	fb2c 220a 	smlad	r2, ip, sl, r2
 8016126:	fb2c 4408 	smlad	r4, ip, r8, r4
 801612a:	fb25 9a0a 	smlad	sl, r5, sl, r9
 801612e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8016130:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 8016134:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    memcpy(&val, *in_q15, 4);
 8016138:	f8de 9058 	ldr.w	r9, [lr, #88]	; 0x58
  return (op1 >> op2) | (op1 << (32U - op2));
 801613c:	ea4f 2c38 	mov.w	ip, r8, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016140:	fa2f f888 	sxtb16	r8, r8
 8016144:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016148:	fb28 2203 	smlad	r2, r8, r3, r2
    memcpy(&val, *in_q7, 4);
 801614c:	6af6      	ldr	r6, [r6, #44]	; 0x2c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801614e:	fa2f f586 	sxtb16	r5, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 8016152:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016156:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801615a:	fb28 4409 	smlad	r4, r8, r9, r4
 801615e:	fb25 aa03 	smlad	sl, r5, r3, sl
    memcpy(&val, *in_q15, 4);
 8016162:	f8d1 b05c 	ldr.w	fp, [r1, #92]	; 0x5c
 8016166:	fb25 7709 	smlad	r7, r5, r9, r7
 801616a:	f8de 505c 	ldr.w	r5, [lr, #92]	; 0x5c
 801616e:	fb2c 220b 	smlad	r2, ip, fp, r2
 8016172:	fb2c 4405 	smlad	r4, ip, r5, r4
 8016176:	fb26 aa0b 	smlad	sl, r6, fp, sl
 801617a:	fb26 7705 	smlad	r7, r6, r5, r7
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 801617e:	ee07 2a10 	vmov	s14, r2
 8016182:	9d01      	ldr	r5, [sp, #4]
		ch_0_out_0 += out_offset;
 8016184:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016186:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801618a:	ee07 4a10 	vmov	s14, r4
 801618e:	3508      	adds	r5, #8
 8016190:	9b02      	ldr	r3, [sp, #8]
 8016192:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016196:	ee07 aa10 	vmov	s14, sl
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 801619a:	ee25 5a26 	vmul.f32	s10, s10, s13
 801619e:	9501      	str	r5, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80161a0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80161a4:	ee07 7a10 	vmov	s14, r7
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80161a8:	ee66 6a26 	vmul.f32	s13, s12, s13
 80161ac:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80161ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 80161b2:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80161b4:	ee25 6aa7 	vmul.f32	s12, s11, s15
 80161b8:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 80161ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80161bc:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80161c0:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 80161c4:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80161c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80161ca:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80161ce:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 80161d2:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80161d4:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80161d8:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80161dc:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 80161e0:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80161e4:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 80161e6:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80161e8:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 80161ec:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80161ee:	9e05      	ldr	r6, [sp, #20]
 80161f0:	42b5      	cmp	r5, r6
 80161f2:	bfb8      	it	lt
 80161f4:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80161f6:	42b4      	cmp	r4, r6
 80161f8:	bfb8      	it	lt
 80161fa:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 80161fc:	42b2      	cmp	r2, r6
 80161fe:	bfb8      	it	lt
 8016200:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016202:	42bd      	cmp	r5, r7
 8016204:	bfa8      	it	ge
 8016206:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8016208:	45b4      	cmp	ip, r6
 801620a:	bfb8      	it	lt
 801620c:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801620e:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8016210:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8016212:	bfa8      	it	ge
 8016214:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8016216:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8016218:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801621c:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801621e:	bfa8      	it	ge
 8016220:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8016222:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 8016224:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8016226:	bfa8      	it	ge
 8016228:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 801622a:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 801622e:	f806 2c01 	strb.w	r2, [r6, #-1]
 8016232:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8016234:	f805 3c01 	strb.w	r3, [r5, #-1]
 8016238:	1cab      	adds	r3, r5, #2
	while (row_count) {
 801623a:	9d01      	ldr	r5, [sp, #4]
 801623c:	9303      	str	r3, [sp, #12]
 801623e:	9b08      	ldr	r3, [sp, #32]
 8016240:	9204      	str	r2, [sp, #16]
 8016242:	42ab      	cmp	r3, r5
 8016244:	f47f adca 	bne.w	8015ddc <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x54>
 8016248:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801624a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801624c:	3401      	adds	r4, #1
 801624e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8016252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016254:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8016256:	4620      	mov	r0, r4
 8016258:	b00d      	add	sp, #52	; 0x34
 801625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625e:	bf00      	nop

08016260 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8016260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016264:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8016266:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 8016268:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 801626c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 801626e:	9505      	str	r5, [sp, #20]
 8016270:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8016274:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8016276:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 801627a:	920a      	str	r2, [sp, #40]	; 0x28
 801627c:	9506      	str	r5, [sp, #24]
 801627e:	9707      	str	r7, [sp, #28]
 8016280:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 8016282:	f000 8127 	beq.w	80164d4 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x274>
 8016286:	3308      	adds	r3, #8
 8016288:	3402      	adds	r4, #2
 801628a:	3e01      	subs	r6, #1
 801628c:	f105 0210 	add.w	r2, r5, #16
 8016290:	9302      	str	r3, [sp, #8]
 8016292:	f105 0308 	add.w	r3, r5, #8
 8016296:	9403      	str	r4, [sp, #12]
 8016298:	b2b4      	uxth	r4, r6
 801629a:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 801629c:	eb01 0a47 	add.w	sl, r1, r7, lsl #1
 80162a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80162a4:	3302      	adds	r3, #2
 80162a6:	9304      	str	r3, [sp, #16]
 80162a8:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 80162ac:	9308      	str	r3, [sp, #32]
 80162ae:	f107 0310 	add.w	r3, r7, #16
 80162b2:	9309      	str	r3, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 80162b4:	6806      	ldr	r6, [r0, #0]
 80162b6:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80162b8:	fa2f f886 	sxtb16	r8, r6
 80162bc:	18c7      	adds	r7, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80162be:	ea4f 2636 	mov.w	r6, r6, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 80162c2:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80162c4:	fa2f fb86 	sxtb16	fp, r6
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80162c8:	9e01      	ldr	r6, [sp, #4]
		const float scale_0 = scales[0];
 80162ca:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 80162ce:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 80162d2:	f8d1 c000 	ldr.w	ip, [r1]
 80162d6:	f8da 2000 	ldr.w	r2, [sl]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80162da:	f856 ec08 	ldr.w	lr, [r6, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80162de:	fb28 e30c 	smlad	r3, r8, ip, lr
    memcpy(&val, *in_q7, 4);
 80162e2:	683d      	ldr	r5, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80162e4:	fa2f f485 	sxtb16	r4, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80162e8:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80162ec:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80162f0:	fb28 e802 	smlad	r8, r8, r2, lr
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 80162f4:	f856 ec04 	ldr.w	lr, [r6, #-4]
 80162f8:	fb24 ec0c 	smlad	ip, r4, ip, lr
    memcpy(&val, *in_q15, 4);
 80162fc:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8016300:	fb24 e402 	smlad	r4, r4, r2, lr
 8016304:	f8da 2004 	ldr.w	r2, [sl, #4]
 8016308:	fb2b 3309 	smlad	r3, fp, r9, r3
 801630c:	fb2b 8602 	smlad	r6, fp, r2, r8
 8016310:	fb25 cc09 	smlad	ip, r5, r9, ip
 8016314:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8016318:	fb25 4502 	smlad	r5, r5, r2, r4
    memcpy(&val, *in_q7, 4);
 801631c:	f8d0 e004 	ldr.w	lr, [r0, #4]
    memcpy(&val, *in_q15, 4);
 8016320:	f8da b008 	ldr.w	fp, [sl, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016324:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016328:	fa2f fe8e 	sxtb16	lr, lr
 801632c:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016330:	fb2e 3309 	smlad	r3, lr, r9, r3
    memcpy(&val, *in_q7, 4);
 8016334:	687c      	ldr	r4, [r7, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016336:	fa2f f884 	sxtb16	r8, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 801633a:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801633e:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016342:	fb2e 660b 	smlad	r6, lr, fp, r6
 8016346:	fb28 cc09 	smlad	ip, r8, r9, ip
    memcpy(&val, *in_q15, 4);
 801634a:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801634e:	fb28 550b 	smlad	r5, r8, fp, r5
 8016352:	f8da 800c 	ldr.w	r8, [sl, #12]
 8016356:	fb22 3309 	smlad	r3, r2, r9, r3
 801635a:	fb22 6608 	smlad	r6, r2, r8, r6
 801635e:	fb24 c909 	smlad	r9, r4, r9, ip
 8016362:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8016366:	fb24 5408 	smlad	r4, r4, r8, r5
    memcpy(&val, *in_q7, 4);
 801636a:	6882      	ldr	r2, [r0, #8]
    memcpy(&val, *in_q15, 4);
 801636c:	f8da b010 	ldr.w	fp, [sl, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016370:	ea4f 2832 	mov.w	r8, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016374:	fa2f f282 	sxtb16	r2, r2
 8016378:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801637c:	fb22 330e 	smlad	r3, r2, lr, r3
    memcpy(&val, *in_q7, 4);
 8016380:	68bd      	ldr	r5, [r7, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016382:	fa2f fc85 	sxtb16	ip, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8016386:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801638a:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801638e:	fb22 660b 	smlad	r6, r2, fp, r6
 8016392:	fb2c 9e0e 	smlad	lr, ip, lr, r9
    memcpy(&val, *in_q15, 4);
 8016396:	f8d1 9014 	ldr.w	r9, [r1, #20]
 801639a:	fb2c 440b 	smlad	r4, ip, fp, r4
 801639e:	f8da b014 	ldr.w	fp, [sl, #20]
 80163a2:	fb28 3309 	smlad	r3, r8, r9, r3
 80163a6:	fb28 660b 	smlad	r6, r8, fp, r6
 80163aa:	fb25 ee09 	smlad	lr, r5, r9, lr
 80163ae:	698a      	ldr	r2, [r1, #24]
 80163b0:	fb25 4b0b 	smlad	fp, r5, fp, r4
    memcpy(&val, *in_q7, 4);
 80163b4:	f8d0 900c 	ldr.w	r9, [r0, #12]
    memcpy(&val, *in_q15, 4);
 80163b8:	f8da c018 	ldr.w	ip, [sl, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 80163bc:	ea4f 2839 	mov.w	r8, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80163c0:	fa2f f989 	sxtb16	r9, r9
 80163c4:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80163c8:	fb29 3302 	smlad	r3, r9, r2, r3
    memcpy(&val, *in_q7, 4);
 80163cc:	68ff      	ldr	r7, [r7, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80163ce:	fa2f f487 	sxtb16	r4, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 80163d2:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80163d6:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80163da:	fb29 660c 	smlad	r6, r9, ip, r6
 80163de:	fb24 ee02 	smlad	lr, r4, r2, lr
    memcpy(&val, *in_q15, 4);
 80163e2:	69cd      	ldr	r5, [r1, #28]
 80163e4:	fb24 bb0c 	smlad	fp, r4, ip, fp
 80163e8:	f8da 401c 	ldr.w	r4, [sl, #28]
 80163ec:	fb28 3305 	smlad	r3, r8, r5, r3
 80163f0:	fb28 6604 	smlad	r6, r8, r4, r6
 80163f4:	fb27 ee05 	smlad	lr, r7, r5, lr
 80163f8:	fb27 bb04 	smlad	fp, r7, r4, fp
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80163fc:	ee07 3a10 	vmov	s14, r3
 8016400:	9c01      	ldr	r4, [sp, #4]
 8016402:	9b02      	ldr	r3, [sp, #8]
 8016404:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016408:	ee07 6a10 	vmov	s14, r6
 801640c:	3408      	adds	r4, #8
		ch_0_out_0 += out_offset;
 801640e:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016410:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016414:	ee07 ea10 	vmov	s14, lr
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016418:	ee25 5a26 	vmul.f32	s10, s10, s13
 801641c:	9401      	str	r4, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 801641e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016422:	ee07 ba10 	vmov	s14, fp
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016426:	ee66 6a26 	vmul.f32	s13, s12, s13
 801642a:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 801642c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 8016430:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016432:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8016436:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 8016438:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 801643a:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 801643e:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 8016442:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016448:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801644c:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8016450:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016452:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016456:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 801645a:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 801645e:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016462:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 8016464:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016466:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 801646a:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801646c:	9e05      	ldr	r6, [sp, #20]
 801646e:	42b5      	cmp	r5, r6
 8016470:	bfb8      	it	lt
 8016472:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8016474:	42b4      	cmp	r4, r6
 8016476:	bfb8      	it	lt
 8016478:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801647a:	42b2      	cmp	r2, r6
 801647c:	bfb8      	it	lt
 801647e:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016480:	42bd      	cmp	r5, r7
 8016482:	bfa8      	it	ge
 8016484:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8016486:	45b4      	cmp	ip, r6
 8016488:	bfb8      	it	lt
 801648a:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801648c:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 801648e:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8016490:	bfa8      	it	ge
 8016492:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8016494:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8016496:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801649a:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801649c:	bfa8      	it	ge
 801649e:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80164a0:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80164a2:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80164a4:	bfa8      	it	ge
 80164a6:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80164a8:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 80164ac:	f806 2c01 	strb.w	r2, [r6, #-1]
 80164b0:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 80164b2:	f805 3c01 	strb.w	r3, [r5, #-1]
 80164b6:	1cab      	adds	r3, r5, #2
	while (row_count) {
 80164b8:	9c01      	ldr	r4, [sp, #4]
 80164ba:	9303      	str	r3, [sp, #12]
 80164bc:	9b08      	ldr	r3, [sp, #32]
 80164be:	9204      	str	r2, [sp, #16]
 80164c0:	42a3      	cmp	r3, r4
 80164c2:	f47f aef7 	bne.w	80162b4 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x54>
 80164c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80164c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ca:	3401      	adds	r4, #1
 80164cc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80164d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164d2:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 80164d4:	4620      	mov	r0, r4
 80164d6:	b00d      	add	sp, #52	; 0x34
 80164d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164dc <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch24_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 80164dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e0:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 80164e2:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 80164e4:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 80164e8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 80164ea:	9505      	str	r5, [sp, #20]
 80164ec:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 80164f0:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 80164f2:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 80164f6:	920a      	str	r2, [sp, #40]	; 0x28
 80164f8:	9506      	str	r5, [sp, #24]
 80164fa:	9707      	str	r7, [sp, #28]
 80164fc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 80164fe:	f000 8173 	beq.w	80167e8 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x30c>
 8016502:	3308      	adds	r3, #8
 8016504:	3402      	adds	r4, #2
 8016506:	3e01      	subs	r6, #1
 8016508:	f105 0210 	add.w	r2, r5, #16
 801650c:	9302      	str	r3, [sp, #8]
 801650e:	f105 0308 	add.w	r3, r5, #8
 8016512:	9403      	str	r4, [sp, #12]
 8016514:	b2b4      	uxth	r4, r6
 8016516:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8016518:	eb01 0e47 	add.w	lr, r1, r7, lsl #1
 801651c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801651e:	940b      	str	r4, [sp, #44]	; 0x2c
 8016520:	3302      	adds	r3, #2
 8016522:	9304      	str	r3, [sp, #16]
 8016524:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8016528:	9308      	str	r3, [sp, #32]
 801652a:	f107 0318 	add.w	r3, r7, #24
 801652e:	9309      	str	r3, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 8016530:	6805      	ldr	r5, [r0, #0]
 8016532:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016534:	fa2f f885 	sxtb16	r8, r5
 8016538:	18c6      	adds	r6, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 801653a:	ea4f 2535 	mov.w	r5, r5, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 801653e:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016540:	fa2f fb85 	sxtb16	fp, r5
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8016544:	9d01      	ldr	r5, [sp, #4]
		const float scale_0 = scales[0];
 8016546:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 801654a:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 801654e:	f8d1 c000 	ldr.w	ip, [r1]
 8016552:	f8de 7000 	ldr.w	r7, [lr]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8016556:	f855 9c08 	ldr.w	r9, [r5, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801655a:	fb28 930c 	smlad	r3, r8, ip, r9
    memcpy(&val, *in_q7, 4);
 801655e:	6834      	ldr	r4, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016560:	fa2f f284 	sxtb16	r2, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8016564:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016568:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801656c:	fb28 9807 	smlad	r8, r8, r7, r9
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8016570:	f855 ac04 	ldr.w	sl, [r5, #-4]
 8016574:	fb22 ac0c 	smlad	ip, r2, ip, sl
    memcpy(&val, *in_q15, 4);
 8016578:	f8d1 9004 	ldr.w	r9, [r1, #4]
 801657c:	fb22 a207 	smlad	r2, r2, r7, sl
 8016580:	f8de 7004 	ldr.w	r7, [lr, #4]
 8016584:	fb2b 3309 	smlad	r3, fp, r9, r3
 8016588:	fb2b 8507 	smlad	r5, fp, r7, r8
 801658c:	fb24 cc09 	smlad	ip, r4, r9, ip
 8016590:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8016594:	fb24 2407 	smlad	r4, r4, r7, r2
    memcpy(&val, *in_q7, 4);
 8016598:	f8d0 a004 	ldr.w	sl, [r0, #4]
    memcpy(&val, *in_q15, 4);
 801659c:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80165a0:	ea4f 273a 	mov.w	r7, sl, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80165a4:	fa2f fa8a 	sxtb16	sl, sl
 80165a8:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80165ac:	fb2a 3309 	smlad	r3, sl, r9, r3
    memcpy(&val, *in_q7, 4);
 80165b0:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80165b2:	fa2f f882 	sxtb16	r8, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80165b6:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80165ba:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80165be:	fb2a 550b 	smlad	r5, sl, fp, r5
 80165c2:	fb28 cc09 	smlad	ip, r8, r9, ip
    memcpy(&val, *in_q15, 4);
 80165c6:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80165ca:	fb28 440b 	smlad	r4, r8, fp, r4
 80165ce:	f8de 800c 	ldr.w	r8, [lr, #12]
 80165d2:	fb27 3309 	smlad	r3, r7, r9, r3
 80165d6:	fb27 5a08 	smlad	sl, r7, r8, r5
 80165da:	fb22 cc09 	smlad	ip, r2, r9, ip
 80165de:	f8d1 9010 	ldr.w	r9, [r1, #16]
 80165e2:	fb22 4208 	smlad	r2, r2, r8, r4
    memcpy(&val, *in_q7, 4);
 80165e6:	6885      	ldr	r5, [r0, #8]
    memcpy(&val, *in_q15, 4);
 80165e8:	f8de 7010 	ldr.w	r7, [lr, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 80165ec:	ea4f 2435 	mov.w	r4, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80165f0:	fa2f f585 	sxtb16	r5, r5
 80165f4:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80165f8:	fb25 3309 	smlad	r3, r5, r9, r3
    memcpy(&val, *in_q7, 4);
 80165fc:	f8d6 8008 	ldr.w	r8, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016600:	fa2f fb88 	sxtb16	fp, r8
  return (op1 >> op2) | (op1 << (32U - op2));
 8016604:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016608:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801660c:	fb25 a507 	smlad	r5, r5, r7, sl
 8016610:	fb2b cc09 	smlad	ip, fp, r9, ip
    memcpy(&val, *in_q15, 4);
 8016614:	f8d1 9014 	ldr.w	r9, [r1, #20]
 8016618:	fb2b 2207 	smlad	r2, fp, r7, r2
 801661c:	f8de a014 	ldr.w	sl, [lr, #20]
 8016620:	fb24 3309 	smlad	r3, r4, r9, r3
 8016624:	fb24 570a 	smlad	r7, r4, sl, r5
 8016628:	fb28 c909 	smlad	r9, r8, r9, ip
 801662c:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8016630:	fb28 220a 	smlad	r2, r8, sl, r2
    memcpy(&val, *in_q7, 4);
 8016634:	68c4      	ldr	r4, [r0, #12]
    memcpy(&val, *in_q15, 4);
 8016636:	f8de a018 	ldr.w	sl, [lr, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 801663a:	ea4f 2834 	mov.w	r8, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801663e:	fa2f f484 	sxtb16	r4, r4
 8016642:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016646:	fb24 330c 	smlad	r3, r4, ip, r3
    memcpy(&val, *in_q7, 4);
 801664a:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801664c:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8016650:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016654:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016658:	fb24 740a 	smlad	r4, r4, sl, r7
 801665c:	fb2b 9c0c 	smlad	ip, fp, ip, r9
    memcpy(&val, *in_q15, 4);
 8016660:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8016664:	fb2b 220a 	smlad	r2, fp, sl, r2
 8016668:	f8de a01c 	ldr.w	sl, [lr, #28]
 801666c:	fb28 3309 	smlad	r3, r8, r9, r3
 8016670:	fb28 440a 	smlad	r4, r8, sl, r4
 8016674:	fb25 c909 	smlad	r9, r5, r9, ip
 8016678:	6a0f      	ldr	r7, [r1, #32]
 801667a:	fb25 2a0a 	smlad	sl, r5, sl, r2
    memcpy(&val, *in_q7, 4);
 801667e:	6902      	ldr	r2, [r0, #16]
    memcpy(&val, *in_q15, 4);
 8016680:	f8de b020 	ldr.w	fp, [lr, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016684:	ea4f 2832 	mov.w	r8, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016688:	fa2f f282 	sxtb16	r2, r2
 801668c:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016690:	fb22 3307 	smlad	r3, r2, r7, r3
    memcpy(&val, *in_q7, 4);
 8016694:	6935      	ldr	r5, [r6, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016696:	fa2f fc85 	sxtb16	ip, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 801669a:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801669e:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166a2:	fb22 440b 	smlad	r4, r2, fp, r4
 80166a6:	fb2c 9707 	smlad	r7, ip, r7, r9
    memcpy(&val, *in_q15, 4);
 80166aa:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80166ae:	fb2c aa0b 	smlad	sl, ip, fp, sl
 80166b2:	f8de b024 	ldr.w	fp, [lr, #36]	; 0x24
 80166b6:	fb28 3309 	smlad	r3, r8, r9, r3
 80166ba:	fb28 440b 	smlad	r4, r8, fp, r4
 80166be:	fb25 7709 	smlad	r7, r5, r9, r7
 80166c2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80166c4:	fb25 aa0b 	smlad	sl, r5, fp, sl
    memcpy(&val, *in_q7, 4);
 80166c8:	f8d0 9014 	ldr.w	r9, [r0, #20]
    memcpy(&val, *in_q15, 4);
 80166cc:	f8de c028 	ldr.w	ip, [lr, #40]	; 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 80166d0:	ea4f 2839 	mov.w	r8, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80166d4:	fa2f f989 	sxtb16	r9, r9
 80166d8:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166dc:	fb29 3302 	smlad	r3, r9, r2, r3
    memcpy(&val, *in_q7, 4);
 80166e0:	6976      	ldr	r6, [r6, #20]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80166e2:	fa2f fb86 	sxtb16	fp, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 80166e6:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80166ea:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166ee:	fb29 440c 	smlad	r4, r9, ip, r4
 80166f2:	fb2b 7702 	smlad	r7, fp, r2, r7
    memcpy(&val, *in_q15, 4);
 80166f6:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80166f8:	fb2b aa0c 	smlad	sl, fp, ip, sl
 80166fc:	f8de b02c 	ldr.w	fp, [lr, #44]	; 0x2c
 8016700:	fb28 3305 	smlad	r3, r8, r5, r3
 8016704:	fb28 440b 	smlad	r4, r8, fp, r4
 8016708:	fb26 7705 	smlad	r7, r6, r5, r7
 801670c:	fb26 aa0b 	smlad	sl, r6, fp, sl
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016710:	ee07 3a10 	vmov	s14, r3
 8016714:	9d01      	ldr	r5, [sp, #4]
		ch_0_out_0 += out_offset;
 8016716:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016718:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801671c:	ee07 4a10 	vmov	s14, r4
 8016720:	3508      	adds	r5, #8
 8016722:	9b02      	ldr	r3, [sp, #8]
 8016724:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016728:	ee07 7a10 	vmov	s14, r7
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 801672c:	ee25 5a26 	vmul.f32	s10, s10, s13
 8016730:	9501      	str	r5, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016732:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016736:	ee07 aa10 	vmov	s14, sl
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801673a:	ee66 6a26 	vmul.f32	s13, s12, s13
 801673e:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016740:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 8016744:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016746:	ee25 6aa7 	vmul.f32	s12, s11, s15
 801674a:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 801674c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 801674e:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016752:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 8016756:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 801675c:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016760:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8016764:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016766:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801676a:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 801676e:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8016772:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016776:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 8016778:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 801677a:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 801677e:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8016780:	9e05      	ldr	r6, [sp, #20]
 8016782:	42b5      	cmp	r5, r6
 8016784:	bfb8      	it	lt
 8016786:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8016788:	42b4      	cmp	r4, r6
 801678a:	bfb8      	it	lt
 801678c:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801678e:	42b2      	cmp	r2, r6
 8016790:	bfb8      	it	lt
 8016792:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016794:	42bd      	cmp	r5, r7
 8016796:	bfa8      	it	ge
 8016798:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801679a:	45b4      	cmp	ip, r6
 801679c:	bfb8      	it	lt
 801679e:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80167a0:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 80167a2:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80167a4:	bfa8      	it	ge
 80167a6:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80167a8:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 80167aa:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80167ae:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80167b0:	bfa8      	it	ge
 80167b2:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80167b4:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80167b6:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80167b8:	bfa8      	it	ge
 80167ba:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80167bc:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 80167c0:	f806 2c01 	strb.w	r2, [r6, #-1]
 80167c4:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 80167c6:	f805 3c01 	strb.w	r3, [r5, #-1]
 80167ca:	1cab      	adds	r3, r5, #2
	while (row_count) {
 80167cc:	9d01      	ldr	r5, [sp, #4]
 80167ce:	9303      	str	r3, [sp, #12]
 80167d0:	9b08      	ldr	r3, [sp, #32]
 80167d2:	9204      	str	r2, [sp, #16]
 80167d4:	42ab      	cmp	r3, r5
 80167d6:	f47f aeab 	bne.w	8016530 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x54>
 80167da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167de:	3401      	adds	r4, #1
 80167e0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80167e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167e6:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 80167e8:	4620      	mov	r0, r4
 80167ea:	b00d      	add	sp, #52	; 0x34
 80167ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167f0 <mat_mult_kernel_s8_s16_reordered_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 80167f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f4:	b093      	sub	sp, #76	; 0x4c
 80167f6:	4683      	mov	fp, r0
 80167f8:	460e      	mov	r6, r1
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 80167fa:	9821      	ldr	r0, [sp, #132]	; 0x84
		const int32_t *const output_bias, q7_t *out_0) {
 80167fc:	910b      	str	r1, [sp, #44]	; 0x2c
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 80167fe:	0851      	lsrs	r1, r2, #1
	q7_t *out_1 = out_0 + output_ch;
 8016800:	eb00 0402 	add.w	r4, r0, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8016804:	f9bd 0074 	ldrsh.w	r0, [sp, #116]	; 0x74
 8016808:	9210      	str	r2, [sp, #64]	; 0x40
 801680a:	9007      	str	r0, [sp, #28]
 801680c:	f9bd 0078 	ldrsh.w	r0, [sp, #120]	; 0x78
 8016810:	930f      	str	r3, [sp, #60]	; 0x3c
 8016812:	9008      	str	r0, [sp, #32]
 8016814:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
	q7_t *out_1 = out_0 + output_ch;
 8016818:	940e      	str	r4, [sp, #56]	; 0x38
		const int32_t *const output_bias, q7_t *out_0) {
 801681a:	9006      	str	r0, [sp, #24]
	while (row_count) {
 801681c:	f000 80d8 	beq.w	80169d0 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1e0>
		q31_t ch_0_out_0 = *bias;
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		uint16_t col_count = num_col_a / 4;
 8016820:	0885      	lsrs	r5, r0, #2
 8016822:	3901      	subs	r1, #1
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8016824:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8016828:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801682a:	461f      	mov	r7, r3
 801682c:	b289      	uxth	r1, r1
 801682e:	900c      	str	r0, [sp, #48]	; 0x30
 8016830:	3210      	adds	r2, #16
 8016832:	9820      	ldr	r0, [sp, #128]	; 0x80
 8016834:	1e6b      	subs	r3, r5, #1
 8016836:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		uint16_t col_count = num_col_a / 4;
 801683a:	950a      	str	r5, [sp, #40]	; 0x28
 801683c:	3008      	adds	r0, #8
 801683e:	b29b      	uxth	r3, r3
 8016840:	9209      	str	r2, [sp, #36]	; 0x24
 8016842:	463a      	mov	r2, r7
 8016844:	9003      	str	r0, [sp, #12]
 8016846:	3301      	adds	r3, #1
 8016848:	9821      	ldr	r0, [sp, #132]	; 0x84
 801684a:	3208      	adds	r2, #8
 801684c:	009b      	lsls	r3, r3, #2
 801684e:	9111      	str	r1, [sp, #68]	; 0x44
 8016850:	3002      	adds	r0, #2
 8016852:	9202      	str	r2, [sp, #8]
 8016854:	930d      	str	r3, [sp, #52]	; 0x34
 8016856:	9005      	str	r0, [sp, #20]
 8016858:	1ca0      	adds	r0, r4, #2
 801685a:	9004      	str	r0, [sp, #16]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 801685c:	9b06      	ldr	r3, [sp, #24]
 801685e:	eb0b 0903 	add.w	r9, fp, r3
		const float scale_0 = scales[0];
 8016862:	9b02      	ldr	r3, [sp, #8]
 8016864:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8016868:	ed53 7a01 	vldr	s15, [r3, #-4]
		q31_t ch_0_out_0 = *bias;
 801686c:	9b03      	ldr	r3, [sp, #12]
 801686e:	f853 cc08 	ldr.w	ip, [r3, #-8]
		q31_t ch_1_out_0 = *bias;
 8016872:	f853 0c04 	ldr.w	r0, [r3, #-4]
		/* accumulate over the vector */
		while (col_count) {
 8016876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016878:	2b00      	cmp	r3, #0
 801687a:	f000 8107 	beq.w	8016a8c <mat_mult_kernel_s8_s16_reordered_fpreq+0x29c>
 801687e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		q31_t ch_1_out_1 = *bias++;
 8016880:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 8016882:	4665      	mov	r5, ip
 8016884:	46ca      	mov	sl, r9
 8016886:	445b      	add	r3, fp
		const q15_t *ip_b0 = input_b;
 8016888:	e9dd e80b 	ldrd	lr, r8, [sp, #44]	; 0x2c
 801688c:	9301      	str	r3, [sp, #4]
    memcpy(&val, *in_q7, 4);
 801688e:	f85b 2b04 	ldr.w	r2, [fp], #4
    memcpy(&val, *in_q15, 4);
 8016892:	f8de 7000 	ldr.w	r7, [lr]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016896:	ea4f 2632 	mov.w	r6, r2, ror #8
 801689a:	f8d8 9000 	ldr.w	r9, [r8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801689e:	fa2f f686 	sxtb16	r6, r6
 80168a2:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80168a6:	fb22 cc07 	smlad	ip, r2, r7, ip
    memcpy(&val, *in_q7, 4);
 80168aa:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80168ae:	fa2f f483 	sxtb16	r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80168b2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80168b6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80168ba:	fb22 5209 	smlad	r2, r2, r9, r5
 80168be:	fb24 0007 	smlad	r0, r4, r7, r0
    memcpy(&val, *in_q15, 4);
 80168c2:	f8de 7004 	ldr.w	r7, [lr, #4]
 80168c6:	f10e 0e08 	add.w	lr, lr, #8
 80168ca:	fb24 1109 	smlad	r1, r4, r9, r1
 80168ce:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80168d2:	f108 0808 	add.w	r8, r8, #8
 80168d6:	fb26 cc07 	smlad	ip, r6, r7, ip
 80168da:	fb26 2504 	smlad	r5, r6, r4, r2
 80168de:	fb23 0007 	smlad	r0, r3, r7, r0
 80168e2:	fb23 1104 	smlad	r1, r3, r4, r1
		while (col_count) {
 80168e6:	9b01      	ldr	r3, [sp, #4]
 80168e8:	459b      	cmp	fp, r3
 80168ea:	d1d0      	bne.n	801688e <mat_mult_kernel_s8_s16_reordered_fpreq+0x9e>
 80168ec:	9b06      	ldr	r3, [sp, #24]
 80168ee:	449b      	add	fp, r3
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80168f0:	ee07 ca10 	vmov	s14, ip
		ch_0_out_0 += out_offset;
 80168f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80168f6:	9b02      	ldr	r3, [sp, #8]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80168f8:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80168fc:	ee07 5a10 	vmov	s14, r5
 8016900:	3308      	adds	r3, #8
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
		ch_1_out_1 += out_offset;
 8016902:	9d1c      	ldr	r5, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016904:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016908:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 801690c:	ee25 5a26 	vmul.f32	s10, s10, s13
 8016910:	9302      	str	r3, [sp, #8]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016912:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016916:	ee07 1a10 	vmov	s14, r1
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801691a:	ee66 6a26 	vmul.f32	s13, s12, s13
 801691e:	9f03      	ldr	r7, [sp, #12]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016924:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8016928:	3708      	adds	r7, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 801692a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801692e:	9703      	str	r7, [sp, #12]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016930:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016938:	ee17 0a10 	vmov	r0, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 801693c:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8016940:	4420      	add	r0, r4
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016942:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016946:	ee17 1a10 	vmov	r1, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 801694a:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 801694e:	442b      	add	r3, r5
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016950:	9d08      	ldr	r5, [sp, #32]
		ch_0_out_1 += out_offset;
 8016952:	4421      	add	r1, r4
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016954:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8016958:	4422      	add	r2, r4
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801695a:	9c07      	ldr	r4, [sp, #28]
 801695c:	42a0      	cmp	r0, r4
 801695e:	bfb8      	it	lt
 8016960:	4620      	movlt	r0, r4
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8016962:	42a1      	cmp	r1, r4
 8016964:	bfb8      	it	lt
 8016966:	4621      	movlt	r1, r4
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8016968:	42a2      	cmp	r2, r4
 801696a:	bfb8      	it	lt
 801696c:	4622      	movlt	r2, r4
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801696e:	42a8      	cmp	r0, r5
 8016970:	bfa8      	it	ge
 8016972:	4628      	movge	r0, r5
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8016974:	42a3      	cmp	r3, r4
 8016976:	bfb8      	it	lt
 8016978:	4623      	movlt	r3, r4
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801697a:	42a9      	cmp	r1, r5
		*out_0++ = (q7_t) ch_0_out_0;
 801697c:	9c05      	ldr	r4, [sp, #20]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801697e:	bfa8      	it	ge
 8016980:	4629      	movge	r1, r5
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8016982:	42aa      	cmp	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8016984:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8016988:	bfa8      	it	ge
 801698a:	462a      	movge	r2, r5
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801698c:	42ab      	cmp	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 801698e:	9804      	ldr	r0, [sp, #16]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8016990:	bfa8      	it	ge
 8016992:	462b      	movge	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 8016994:	f800 1c02 	strb.w	r1, [r0, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8016998:	f804 2c01 	strb.w	r2, [r4, #-1]
 801699c:	1ca2      	adds	r2, r4, #2
		*out_1++ = (q7_t) ch_1_out_1;
 801699e:	f800 3c01 	strb.w	r3, [r0, #-1]
 80169a2:	1c83      	adds	r3, r0, #2
 80169a4:	9205      	str	r2, [sp, #20]
 80169a6:	9304      	str	r3, [sp, #16]
	while (row_count) {
 80169a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169aa:	42bb      	cmp	r3, r7
 80169ac:	f47f af56 	bne.w	801685c <mat_mult_kernel_s8_s16_reordered_fpreq+0x6c>
 80169b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80169b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169b4:	3101      	adds	r1, #1
 80169b6:	00cb      	lsls	r3, r1, #3
 80169b8:	0049      	lsls	r1, r1, #1
 80169ba:	441a      	add	r2, r3
 80169bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80169be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169c0:	441a      	add	r2, r3
 80169c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169c4:	440b      	add	r3, r1
 80169c6:	9220      	str	r2, [sp, #128]	; 0x80
 80169c8:	9321      	str	r3, [sp, #132]	; 0x84
 80169ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169cc:	440b      	add	r3, r1
 80169ce:	930e      	str	r3, [sp, #56]	; 0x38
		/* skip row */
		ip_a0 += num_col_a;
		row_count--;
	}

	if (output_ch & 1) {
 80169d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169d2:	07da      	lsls	r2, r3, #31
 80169d4:	d554      	bpl.n	8016a80 <mat_mult_kernel_s8_s16_reordered_fpreq+0x290>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;

		/* Init accumulator with bias for channel N + 1 */
		q31_t ch_0_out_0 = *bias;
 80169d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80169d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		q31_t ch_0_out_0 = *bias;
 80169da:	6819      	ldr	r1, [r3, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80169dc:	9b06      	ldr	r3, [sp, #24]
		q31_t ch_0_out_1 = ch_0_out_0;
 80169de:	460a      	mov	r2, r1

		int32_t col_count = num_col_a / 4;
		while (col_count) {
 80169e0:	089d      	lsrs	r5, r3, #2
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80169e2:	eb06 0443 	add.w	r4, r6, r3, lsl #1
		while (col_count) {
 80169e6:	d018      	beq.n	8016a1a <mat_mult_kernel_s8_s16_reordered_fpreq+0x22a>
    memcpy(&val, *in_q7, 4);
 80169e8:	f85b 3b04 	ldr.w	r3, [fp], #4
    memcpy(&val, *in_q15, 4);
 80169ec:	6837      	ldr	r7, [r6, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80169ee:	ea4f 2033 	mov.w	r0, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80169f2:	fa2f f383 	sxtb16	r3, r3
 80169f6:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80169fa:	fb23 1107 	smlad	r1, r3, r7, r1
 80169fe:	6827      	ldr	r7, [r4, #0]
 8016a00:	fb23 2207 	smlad	r2, r3, r7, r2
 8016a04:	6877      	ldr	r7, [r6, #4]
 8016a06:	3408      	adds	r4, #8
 8016a08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016a0c:	3608      	adds	r6, #8
 8016a0e:	fb20 1107 	smlad	r1, r0, r7, r1
 8016a12:	fb20 2203 	smlad	r2, r0, r3, r2
 8016a16:	3d01      	subs	r5, #1
 8016a18:	d1e6      	bne.n	80169e8 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1f8>
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8016a1a:	ee07 1a90 	vmov	s15, r1
 8016a1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8016a20:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 += out_offset;
 8016a24:	9a1c      	ldr	r2, [sp, #112]	; 0x70
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8016a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a2a:	edd1 6a00 	vldr	s13, [r1]
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016a2e:	9808      	ldr	r0, [sp, #32]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8016a30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		*out_0++ = (q7_t) ch_0_out_0;
 8016a34:	9c21      	ldr	r4, [sp, #132]	; 0x84
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8016a36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a3e:	ee17 3a90 	vmov	r3, s15
		ch_0_out_0 += out_offset;
 8016a42:	4413      	add	r3, r2
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8016a44:	9a07      	ldr	r2, [sp, #28]
 8016a46:	4293      	cmp	r3, r2
 8016a48:	bfb8      	it	lt
 8016a4a:	4613      	movlt	r3, r2
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016a4c:	4283      	cmp	r3, r0
 8016a4e:	bfa8      	it	ge
 8016a50:	4603      	movge	r3, r0
		*out_0++ = (q7_t) ch_0_out_0;
 8016a52:	7023      	strb	r3, [r4, #0]
 8016a54:	4623      	mov	r3, r4
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8016a56:	edd1 7a00 	vldr	s15, [r1]
		*out_0++ = (q7_t) ch_0_out_0;
 8016a5a:	3301      	adds	r3, #1
		ch_0_out_1 += out_offset;
 8016a5c:	991c      	ldr	r1, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8016a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_0_out_0;
 8016a62:	9321      	str	r3, [sp, #132]	; 0x84
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8016a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a68:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 += out_offset;
 8016a6c:	440b      	add	r3, r1
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8016a6e:	4293      	cmp	r3, r2
 8016a70:	bfb8      	it	lt
 8016a72:	4613      	movlt	r3, r2
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;
 8016a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8016a76:	4283      	cmp	r3, r0
 8016a78:	bfa8      	it	ge
 8016a7a:	4603      	movge	r3, r0
		*out_1++ = (q7_t) ch_0_out_1;
 8016a7c:	7013      	strb	r3, [r2, #0]
 8016a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8016a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a82:	4413      	add	r3, r2
 8016a84:	4618      	mov	r0, r3
 8016a86:	b013      	add	sp, #76	; 0x4c
 8016a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (col_count) {
 8016a8c:	46cb      	mov	fp, r9
		q31_t ch_1_out_1 = *bias++;
 8016a8e:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 8016a90:	4665      	mov	r5, ip
 8016a92:	e72d      	b.n	80168f0 <mat_mult_kernel_s8_s16_reordered_fpreq+0x100>

08016a94 <mat_mult_kernel3_input3_s8_s16_fpreq>:

q7_t* mat_mult_kernel3_input3_s8_s16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8016a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a98:	b087      	sub	sp, #28
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8016a9a:	9815      	ldr	r0, [sp, #84]	; 0x54
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8016a9c:	9204      	str	r2, [sp, #16]
	q7_t *out_1 = out_0 + output_ch;
 8016a9e:	4410      	add	r0, r2
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q15_t *ksrc = &kbuf[0];
	/* this loop over rows in A */
	while (row_count) {
 8016aa0:	0852      	lsrs	r2, r2, #1
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8016aa2:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8016aa6:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 8016aaa:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
 8016aae:	9d14      	ldr	r5, [sp, #80]	; 0x50
	while (row_count) {
 8016ab0:	f000 8157 	beq.w	8016d62 <mat_mult_kernel3_input3_s8_s16_fpreq+0x2ce>
 8016ab4:	3308      	adds	r3, #8
 8016ab6:	3a01      	subs	r2, #1
 8016ab8:	f105 0410 	add.w	r4, r5, #16
 8016abc:	3002      	adds	r0, #2
 8016abe:	9300      	str	r3, [sp, #0]
 8016ac0:	b292      	uxth	r2, r2
 8016ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8016ac4:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8016ac8:	f105 0908 	add.w	r9, r5, #8
 8016acc:	9001      	str	r0, [sp, #4]
 8016ace:	3302      	adds	r3, #2
 8016ad0:	9205      	str	r2, [sp, #20]
 8016ad2:	9302      	str	r3, [sp, #8]
 8016ad4:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 8016ad8:	9303      	str	r3, [sp, #12]
 8016ada:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016adc:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
		const q31_t *ip31_b0 = ip_b0;
		const q31_t *ip31_b1 = ip_b1;
		const float scale_0 = scales[0];
 8016ae0:	9b00      	ldr	r3, [sp, #0]
 8016ae2:	6808      	ldr	r0, [r1, #0]
 8016ae4:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8016ae8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8016aec:	f8d8 2000 	ldr.w	r2, [r8]
		//------------------4
		q31_t a01, a02, a11, a12;
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[0], b0, ch_0_out_0);
 8016af0:	f85e 4c6c 	ldr.w	r4, [lr, #-108]
 8016af4:	f859 5c08 	ldr.w	r5, [r9, #-8]
 8016af8:	fb24 5300 	smlad	r3, r4, r0, r5
 8016afc:	fb24 5402 	smlad	r4, r4, r2, r5
		ch_0_out_1 = __SMLAD(ksrc_31[0], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[0], b0, ch_1_out_0);
 8016b00:	f85e 7c36 	ldr.w	r7, [lr, #-54]
 8016b04:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8016b08:	fb27 6000 	smlad	r0, r7, r0, r6
 8016b0c:	fb27 6202 	smlad	r2, r7, r2, r6
 8016b10:	684d      	ldr	r5, [r1, #4]
 8016b12:	f8d8 7004 	ldr.w	r7, [r8, #4]
		ch_1_out_1 = __SMLAD(ksrc2_31[0], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[1], b0, ch_0_out_0);
 8016b16:	f85e 6c68 	ldr.w	r6, [lr, #-104]
 8016b1a:	fb26 3305 	smlad	r3, r6, r5, r3
 8016b1e:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[1], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[1], b0, ch_1_out_0);
 8016b22:	f85e 6c32 	ldr.w	r6, [lr, #-50]
 8016b26:	fb26 0005 	smlad	r0, r6, r5, r0
 8016b2a:	fb26 2707 	smlad	r7, r6, r7, r2
 8016b2e:	688a      	ldr	r2, [r1, #8]
 8016b30:	f8d8 c008 	ldr.w	ip, [r8, #8]

		//------------------8
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[2], b0, ch_0_out_0);
 8016b34:	f85e 5c64 	ldr.w	r5, [lr, #-100]
 8016b38:	fb25 3302 	smlad	r3, r5, r2, r3
 8016b3c:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[2], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[2], b0, ch_1_out_0);
 8016b40:	f85e 6c2e 	ldr.w	r6, [lr, #-46]
 8016b44:	fb26 0002 	smlad	r0, r6, r2, r0
 8016b48:	fb26 760c 	smlad	r6, r6, ip, r7
 8016b4c:	68ca      	ldr	r2, [r1, #12]
 8016b4e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
		ch_1_out_1 = __SMLAD(ksrc2_31[2], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[3], b0, ch_0_out_0);
 8016b52:	f85e 5c60 	ldr.w	r5, [lr, #-96]
 8016b56:	fb25 3302 	smlad	r3, r5, r2, r3
 8016b5a:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[3], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[3], b0, ch_1_out_0);
 8016b5e:	f85e 5c2a 	ldr.w	r5, [lr, #-42]
 8016b62:	fb25 0002 	smlad	r0, r5, r2, r0
 8016b66:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8016b6a:	690e      	ldr	r6, [r1, #16]
 8016b6c:	f8d8 5010 	ldr.w	r5, [r8, #16]

		//------------------12
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[4], b0, ch_0_out_0);
 8016b70:	f85e 2c5c 	ldr.w	r2, [lr, #-92]
 8016b74:	fb22 3306 	smlad	r3, r2, r6, r3
 8016b78:	fb22 4405 	smlad	r4, r2, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[4], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[4], b0, ch_1_out_0);
 8016b7c:	f85e 2c26 	ldr.w	r2, [lr, #-38]
 8016b80:	fb22 0006 	smlad	r0, r2, r6, r0
 8016b84:	fb22 c505 	smlad	r5, r2, r5, ip
 8016b88:	694e      	ldr	r6, [r1, #20]
 8016b8a:	f8d8 2014 	ldr.w	r2, [r8, #20]
		ch_1_out_1 = __SMLAD(ksrc2_31[4], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[5], b0, ch_0_out_0);
 8016b8e:	f85e 7c58 	ldr.w	r7, [lr, #-88]
 8016b92:	fb27 3306 	smlad	r3, r7, r6, r3
 8016b96:	fb27 4402 	smlad	r4, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[5], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[5], b0, ch_1_out_0);
 8016b9a:	f85e 7c22 	ldr.w	r7, [lr, #-34]
 8016b9e:	fb27 0006 	smlad	r0, r7, r6, r0
 8016ba2:	fb27 5202 	smlad	r2, r7, r2, r5
 8016ba6:	698d      	ldr	r5, [r1, #24]
 8016ba8:	f8d8 7018 	ldr.w	r7, [r8, #24]
		ch_1_out_1 = __SMLAD(ksrc2_31[5], b1, ch_1_out_1);

		//------------------16
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[6], b0, ch_0_out_0);
 8016bac:	f85e 6c54 	ldr.w	r6, [lr, #-84]
 8016bb0:	fb26 3305 	smlad	r3, r6, r5, r3
 8016bb4:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[6], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[6], b0, ch_1_out_0);
 8016bb8:	f85e 6c1e 	ldr.w	r6, [lr, #-30]
 8016bbc:	fb26 0005 	smlad	r0, r6, r5, r0
 8016bc0:	fb26 2707 	smlad	r7, r6, r7, r2
 8016bc4:	69ca      	ldr	r2, [r1, #28]
 8016bc6:	f8d8 c01c 	ldr.w	ip, [r8, #28]
		ch_1_out_1 = __SMLAD(ksrc2_31[6], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[7], b0, ch_0_out_0);
 8016bca:	f85e 5c50 	ldr.w	r5, [lr, #-80]
 8016bce:	fb25 3302 	smlad	r3, r5, r2, r3
 8016bd2:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[7], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[7], b0, ch_1_out_0);
 8016bd6:	f85e 6c1a 	ldr.w	r6, [lr, #-26]
 8016bda:	fb26 0002 	smlad	r0, r6, r2, r0
 8016bde:	fb26 760c 	smlad	r6, r6, ip, r7
 8016be2:	6a0a      	ldr	r2, [r1, #32]
 8016be4:	f8d8 c020 	ldr.w	ip, [r8, #32]
		ch_1_out_1 = __SMLAD(ksrc2_31[7], b1, ch_1_out_1);

		//------------------20
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[8], b0, ch_0_out_0);
 8016be8:	f85e 7c4c 	ldr.w	r7, [lr, #-76]
 8016bec:	fb27 3302 	smlad	r3, r7, r2, r3
 8016bf0:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[8], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[8], b0, ch_1_out_0);
 8016bf4:	f85e 5c16 	ldr.w	r5, [lr, #-22]
 8016bf8:	fb25 0002 	smlad	r0, r5, r2, r0
 8016bfc:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8016c00:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8016c02:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
		ch_1_out_1 = __SMLAD(ksrc2_31[8], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[9], b0, ch_0_out_0);
 8016c06:	f85e 7c48 	ldr.w	r7, [lr, #-72]
 8016c0a:	fb27 3306 	smlad	r3, r7, r6, r3
 8016c0e:	fb27 4405 	smlad	r4, r7, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[9], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[9], b0, ch_1_out_0);
 8016c12:	f85e 2c12 	ldr.w	r2, [lr, #-18]
 8016c16:	fb22 0006 	smlad	r0, r2, r6, r0
 8016c1a:	fb22 c505 	smlad	r5, r2, r5, ip
 8016c1e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8016c20:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
		ch_1_out_1 = __SMLAD(ksrc2_31[9], b1, ch_1_out_1);

		//------------------24
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[10], b0, ch_0_out_0);
 8016c24:	f85e 7c44 	ldr.w	r7, [lr, #-68]
 8016c28:	fb27 3306 	smlad	r3, r7, r6, r3
 8016c2c:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[10], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[10], b0, ch_1_out_0);
 8016c30:	f85e 2c0e 	ldr.w	r2, [lr, #-14]
 8016c34:	fb22 0006 	smlad	r0, r2, r6, r0
 8016c38:	fb22 520c 	smlad	r2, r2, ip, r5
 8016c3c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8016c3e:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
		ch_1_out_1 = __SMLAD(ksrc2_31[10], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[11], b0, ch_0_out_0);
 8016c42:	f85e 7c40 	ldr.w	r7, [lr, #-64]
 8016c46:	fb27 3306 	smlad	r3, r7, r6, r3
 8016c4a:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[11], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[11], b0, ch_1_out_0);
 8016c4e:	f85e 5c0a 	ldr.w	r5, [lr, #-10]
 8016c52:	fb25 0006 	smlad	r0, r5, r6, r0
 8016c56:	fb25 2c0c 	smlad	ip, r5, ip, r2
 8016c5a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8016c5c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
		ch_1_out_1 = __SMLAD(ksrc2_31[11], b1, ch_1_out_1);

		//------------------25,26,27
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[12], b0, ch_0_out_0);
 8016c60:	f85e 7c3c 	ldr.w	r7, [lr, #-60]
 8016c64:	fb27 3306 	smlad	r3, r7, r6, r3
 8016c68:	fb27 4702 	smlad	r7, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[12], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[12], b0, ch_1_out_0);
 8016c6c:	f85e 5c06 	ldr.w	r5, [lr, #-6]
 8016c70:	fb25 0606 	smlad	r6, r5, r6, r0
 8016c74:	fb25 c502 	smlad	r5, r5, r2, ip
 8016c78:	9a00      	ldr	r2, [sp, #0]
 8016c7a:	f109 0908 	add.w	r9, r9, #8
		ch_1_out_1 = __SMLAD(ksrc2_31[12], b1, ch_1_out_1);
		q15_t _b0 = *ip_b0++;
		q15_t _b1 = *ip_b1++;

		ch_0_out_0 += ksrc[26] * _b0;
 8016c7e:	f93e 4c38 	ldrsh.w	r4, [lr, #-56]
 8016c82:	f10e 0e6c 	add.w	lr, lr, #108	; 0x6c
		q15_t _b0 = *ip_b0++;
 8016c86:	f9b1 0034 	ldrsh.w	r0, [r1, #52]	; 0x34
 8016c8a:	3208      	adds	r2, #8
		q15_t _b1 = *ip_b1++;
 8016c8c:	f9b8 c034 	ldrsh.w	ip, [r8, #52]	; 0x34
		ch_0_out_0 += ksrc[26] * _b0;
 8016c90:	fb04 3300 	mla	r3, r4, r0, r3
 8016c94:	9200      	str	r2, [sp, #0]
		ch_0_out_1 += ksrc[26] * _b1;
 8016c96:	fb04 740c 	mla	r4, r4, ip, r7
		ch_1_out_0 += ksrc2[26] * _b0;
 8016c9a:	f93e 2c6e 	ldrsh.w	r2, [lr, #-110]
		ch_0_out_0 += ksrc[26] * _b0;
 8016c9e:	ee05 3a10 	vmov	s10, r3
		ch_1_out_0 += ksrc2[26] * _b0;
 8016ca2:	fb00 6002 	mla	r0, r0, r2, r6
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016ca6:	ee07 4a10 	vmov	s14, r4
		ch_1_out_1 += ksrc2[26] * _b1;
 8016caa:	fb0c 5202 	mla	r2, ip, r2, r5
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016cae:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016cb2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016cb6:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 += out_offset;
 8016cba:	9d10      	ldr	r5, [sp, #64]	; 0x40
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016cbc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016cc0:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016cc4:	ee25 5a26 	vmul.f32	s10, s10, s13
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016cc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016ccc:	ee66 6a26 	vmul.f32	s13, s12, s13
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016cd0:	ee25 6aa7 	vmul.f32	s12, s11, s15
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016cd8:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8016ce0:	ee17 4a10 	vmov	r4, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016ce4:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8016ce8:	442c      	add	r4, r5
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8016cea:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8016cee:	ee17 0a10 	vmov	r0, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016cf2:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8016cf6:	4554      	cmp	r4, sl
		ch_1_out_1 += out_offset;
 8016cf8:	442b      	add	r3, r5
		ch_0_out_1 += out_offset;
 8016cfa:	4428      	add	r0, r5
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8016cfc:	ee17 2a10 	vmov	r2, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8016d00:	bfb8      	it	lt
 8016d02:	4654      	movlt	r4, sl
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8016d04:	4550      	cmp	r0, sl
		ch_1_out_0 += out_offset;
 8016d06:	442a      	add	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8016d08:	9d02      	ldr	r5, [sp, #8]
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8016d0a:	bfb8      	it	lt
 8016d0c:	4650      	movlt	r0, sl
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8016d0e:	4552      	cmp	r2, sl
 8016d10:	bfb8      	it	lt
 8016d12:	4652      	movlt	r2, sl
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8016d14:	455c      	cmp	r4, fp
 8016d16:	bfa8      	it	ge
 8016d18:	465c      	movge	r4, fp
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8016d1a:	4553      	cmp	r3, sl
 8016d1c:	bfb8      	it	lt
 8016d1e:	4653      	movlt	r3, sl
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8016d20:	4558      	cmp	r0, fp
		*out_0++ = (q7_t) ch_0_out_0;
 8016d22:	f805 4c02 	strb.w	r4, [r5, #-2]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8016d26:	bfa8      	it	ge
 8016d28:	4658      	movge	r0, fp
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8016d2a:	455a      	cmp	r2, fp
		*out_1++ = (q7_t) ch_0_out_1;
 8016d2c:	9c01      	ldr	r4, [sp, #4]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8016d2e:	bfa8      	it	ge
 8016d30:	465a      	movge	r2, fp
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8016d32:	455b      	cmp	r3, fp
		*out_1++ = (q7_t) ch_0_out_1;
 8016d34:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8016d38:	bfa8      	it	ge
 8016d3a:	465b      	movge	r3, fp
		*out_0++ = (q7_t) ch_1_out_0;
 8016d3c:	f805 2c01 	strb.w	r2, [r5, #-1]
 8016d40:	1caa      	adds	r2, r5, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8016d42:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016d46:	1ca3      	adds	r3, r4, #2
 8016d48:	9202      	str	r2, [sp, #8]
 8016d4a:	9301      	str	r3, [sp, #4]
	while (row_count) {
 8016d4c:	9b03      	ldr	r3, [sp, #12]
 8016d4e:	454b      	cmp	r3, r9
 8016d50:	f47f aec6 	bne.w	8016ae0 <mat_mult_kernel3_input3_s8_s16_fpreq+0x4c>
 8016d54:	9805      	ldr	r0, [sp, #20]
 8016d56:	9b04      	ldr	r3, [sp, #16]
 8016d58:	3001      	adds	r0, #1
 8016d5a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8016d5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d60:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8016d62:	b007      	add	sp, #28
 8016d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d68 <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 8016d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6c:	b089      	sub	sp, #36	; 0x24
 8016d6e:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
 8016d72:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016d76:	9006      	str	r0, [sp, #24]
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 8016d78:	fb05 f00c 	mul.w	r0, r5, ip
{
 8016d7c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8016d80:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
	const int divider_half = ((sample_h * sample_w) / 2);
 8016d84:	9001      	str	r0, [sp, #4]
 8016d86:	1040      	asrs	r0, r0, #1
{
 8016d88:	9107      	str	r1, [sp, #28]
	const int divider_half = ((sample_h * sample_w) / 2);
 8016d8a:	9003      	str	r0, [sp, #12]
	for(c = 0; c < input_c; c++){
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d053      	beq.n	8016e38 <avg_pooling+0xd0>
 8016d90:	2900      	cmp	r1, #0
 8016d92:	d051      	beq.n	8016e38 <avg_pooling+0xd0>
 8016d94:	f1bb 0f00 	cmp.w	fp, #0
 8016d98:	d04e      	beq.n	8016e38 <avg_pooling+0xd0>
 8016d9a:	fb02 fe03 	mul.w	lr, r2, r3
 8016d9e:	2200      	movs	r2, #0
 8016da0:	9205      	str	r2, [sp, #20]
 8016da2:	fb03 f205 	mul.w	r2, r3, r5
 8016da6:	9202      	str	r2, [sp, #8]
		for(h = 0; h < output_h; h++){
 8016da8:	2200      	movs	r2, #0
 8016daa:	9204      	str	r2, [sp, #16]
					avg -= divider_half;

				int out = avg / (sample_h * sample_w);
				out = TN_MAX(out, out_activation_min);
				out = TN_MIN(out, out_activation_max);
				output[(w + h * output_w) * input_c + c] = out;
 8016dac:	fb02 f80b 	mul.w	r8, r2, fp
			for(w = 0; w < output_w; w++){
 8016db0:	f04f 0a00 	mov.w	sl, #0
					int height = sh + h * sample_h;
 8016db4:	fb02 f90c 	mul.w	r9, r2, ip
 8016db8:	9a05      	ldr	r2, [sp, #20]
 8016dba:	fb03 2808 	mla	r8, r3, r8, r2
 8016dbe:	fb0e 2909 	mla	r9, lr, r9, r2
 8016dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016dc4:	4490      	add	r8, r2
 8016dc6:	9a06      	ldr	r2, [sp, #24]
 8016dc8:	4491      	add	r9, r2
				for(sh = 0; sh < sample_h; sh++){
 8016dca:	f1bc 0f00 	cmp.w	ip, #0
 8016dce:	d036      	beq.n	8016e3e <avg_pooling+0xd6>
				int avg = 0;
 8016dd0:	2000      	movs	r0, #0
				for(sh = 0; sh < sample_h; sh++){
 8016dd2:	464f      	mov	r7, r9
 8016dd4:	4606      	mov	r6, r0
					for(sw = 0; sw < sample_w; sw++){
 8016dd6:	b145      	cbz	r5, 8016dea <avg_pooling+0x82>
 8016dd8:	4639      	mov	r1, r7
 8016dda:	2200      	movs	r2, #0
 8016ddc:	3201      	adds	r2, #1
						avg += input[(width + height * input_w) * input_c + c];
 8016dde:	f991 4000 	ldrsb.w	r4, [r1]
 8016de2:	4419      	add	r1, r3
					for(sw = 0; sw < sample_w; sw++){
 8016de4:	4295      	cmp	r5, r2
						avg += input[(width + height * input_w) * input_c + c];
 8016de6:	4420      	add	r0, r4
					for(sw = 0; sw < sample_w; sw++){
 8016de8:	d1f8      	bne.n	8016ddc <avg_pooling+0x74>
				for(sh = 0; sh < sample_h; sh++){
 8016dea:	3601      	adds	r6, #1
 8016dec:	4477      	add	r7, lr
 8016dee:	45b4      	cmp	ip, r6
 8016df0:	d1f1      	bne.n	8016dd6 <avg_pooling+0x6e>
				if (avg > 0)
 8016df2:	2800      	cmp	r0, #0
 8016df4:	dd24      	ble.n	8016e40 <avg_pooling+0xd8>
					avg += divider_half;
 8016df6:	9a03      	ldr	r2, [sp, #12]
 8016df8:	4402      	add	r2, r0
 8016dfa:	9902      	ldr	r1, [sp, #8]
			for(w = 0; w < output_w; w++){
 8016dfc:	f10a 0a01 	add.w	sl, sl, #1
 8016e00:	4489      	add	r9, r1
				int out = avg / (sample_h * sample_w);
 8016e02:	9901      	ldr	r1, [sp, #4]
 8016e04:	fb92 f2f1 	sdiv	r2, r2, r1
				out = TN_MAX(out, out_activation_min);
 8016e08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016e0a:	428a      	cmp	r2, r1
 8016e0c:	bfb8      	it	lt
 8016e0e:	460a      	movlt	r2, r1
				out = TN_MIN(out, out_activation_max);
 8016e10:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016e12:	428a      	cmp	r2, r1
 8016e14:	bfa8      	it	ge
 8016e16:	460a      	movge	r2, r1
			for(w = 0; w < output_w; w++){
 8016e18:	45da      	cmp	sl, fp
				output[(w + h * output_w) * input_c + c] = out;
 8016e1a:	f888 2000 	strb.w	r2, [r8]
 8016e1e:	4498      	add	r8, r3
			for(w = 0; w < output_w; w++){
 8016e20:	d1d3      	bne.n	8016dca <avg_pooling+0x62>
		for(h = 0; h < output_h; h++){
 8016e22:	9a04      	ldr	r2, [sp, #16]
 8016e24:	9907      	ldr	r1, [sp, #28]
 8016e26:	3201      	adds	r2, #1
 8016e28:	428a      	cmp	r2, r1
 8016e2a:	9204      	str	r2, [sp, #16]
 8016e2c:	dbbe      	blt.n	8016dac <avg_pooling+0x44>
	for(c = 0; c < input_c; c++){
 8016e2e:	9a05      	ldr	r2, [sp, #20]
 8016e30:	3201      	adds	r2, #1
 8016e32:	429a      	cmp	r2, r3
 8016e34:	9205      	str	r2, [sp, #20]
 8016e36:	d1b7      	bne.n	8016da8 <avg_pooling+0x40>
			}
		}
	}
}
 8016e38:	b009      	add	sp, #36	; 0x24
 8016e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int avg = 0;
 8016e3e:	4660      	mov	r0, ip
					avg -= divider_half;
 8016e40:	9a03      	ldr	r2, [sp, #12]
 8016e42:	1a82      	subs	r2, r0, r2
 8016e44:	e7d9      	b.n	8016dfa <avg_pooling+0x92>
 8016e46:	bf00      	nop

08016e48 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8016e48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016e4c:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8016e50:	07d1      	lsls	r1, r2, #31
 8016e52:	d503      	bpl.n	8016e5c <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8016e54:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8016e58:	07d2      	lsls	r2, r2, #31
 8016e5a:	d401      	bmi.n	8016e60 <__io_putchar+0x18>
  
#include "stm32746g_discovery.h"

volatile int32_t ITM_RxBuffer;

int __io_putchar(int ch) { return ITM_SendChar(ch); }
 8016e5c:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8016e5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	2a00      	cmp	r2, #0
 8016e64:	d0fb      	beq.n	8016e5e <__io_putchar+0x16>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8016e66:	b2c3      	uxtb	r3, r0
 8016e68:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016e6c:	7013      	strb	r3, [r2, #0]
 8016e6e:	4770      	bx	lr

08016e70 <__io_getchar>:
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;                           /* no character available */

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 8016e70:	4b05      	ldr	r3, [pc, #20]	; (8016e88 <__io_getchar+0x18>)
 8016e72:	4a06      	ldr	r2, [pc, #24]	; (8016e8c <__io_getchar+0x1c>)
 8016e74:	6819      	ldr	r1, [r3, #0]
 8016e76:	4291      	cmp	r1, r2
 8016e78:	d002      	beq.n	8016e80 <__io_getchar+0x10>
  {
    ch = ITM_RxBuffer;
 8016e7a:	6818      	ldr	r0, [r3, #0]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 8016e7c:	601a      	str	r2, [r3, #0]
 8016e7e:	4770      	bx	lr
  int32_t ch = -1;                           /* no character available */
 8016e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

int __io_getchar(void) { return ITM_ReceiveChar(); }
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	2001ba20 	.word	0x2001ba20
 8016e8c:	5aa55aa5 	.word	0x5aa55aa5

08016e90 <_write>:

extern int errno;
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));

int _write(int fd, const void *buffer, unsigned int count) {
 8016e90:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for (i = 0; i < count; i++) {
 8016e92:	4616      	mov	r6, r2
 8016e94:	b142      	cbz	r2, 8016ea8 <_write+0x18>
 8016e96:	188d      	adds	r5, r1, r2
 8016e98:	1e4c      	subs	r4, r1, #1
 8016e9a:	3d01      	subs	r5, #1
    __io_putchar(((char *)buffer)[i]);
 8016e9c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8016ea0:	f7ff ffd2 	bl	8016e48 <__io_putchar>
  for (i = 0; i < count; i++) {
 8016ea4:	42ac      	cmp	r4, r5
 8016ea6:	d1f9      	bne.n	8016e9c <_write+0xc>
  }

  return count;
}
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	bd70      	pop	{r4, r5, r6, pc}

08016eac <_read>:

int _read(int fd, void *buffer, unsigned int count) {
 8016eac:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for (i = 0; i < count; i++) {
 8016eae:	4616      	mov	r6, r2
 8016eb0:	b142      	cbz	r2, 8016ec4 <_read+0x18>
 8016eb2:	188d      	adds	r5, r1, r2
 8016eb4:	1e4c      	subs	r4, r1, #1
 8016eb6:	3d01      	subs	r5, #1
    ((char *)buffer)[i] = __io_getchar();
 8016eb8:	f7ff ffda 	bl	8016e70 <__io_getchar>
 8016ebc:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < count; i++) {
 8016ec0:	42ac      	cmp	r4, r5
 8016ec2:	d1f9      	bne.n	8016eb8 <_read+0xc>
  }

  return count;
}
 8016ec4:	4630      	mov	r0, r6
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}

08016ec8 <_close>:

int _close(int fd) { return -1; }
 8016ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ecc:	4770      	bx	lr
 8016ece:	bf00      	nop

08016ed0 <_fstat>:

int _fstat(int fd, void *buffer) { return -1; }
 8016ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ed4:	4770      	bx	lr
 8016ed6:	bf00      	nop

08016ed8 <_isatty>:
 8016ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016edc:	4770      	bx	lr
 8016ede:	bf00      	nop

08016ee0 <_lseek>:

int _isatty(int fd) { return -1; }

long _lseek(int fd, long offset, int origin) { return -1; }
 8016ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ee4:	4770      	bx	lr
 8016ee6:	bf00      	nop

08016ee8 <_exit>:

void _exit(int status) {}
 8016ee8:	4770      	bx	lr
 8016eea:	bf00      	nop

08016eec <_ZdaPv>:
 8016eec:	f000 b802 	b.w	8016ef4 <_ZdlPv>

08016ef0 <_Znaj>:
 8016ef0:	f000 b802 	b.w	8016ef8 <_Znwj>

08016ef4 <_ZdlPv>:
 8016ef4:	f001 bb66 	b.w	80185c4 <free>

08016ef8 <_Znwj>:
 8016ef8:	b510      	push	{r4, lr}
 8016efa:	2800      	cmp	r0, #0
 8016efc:	bf14      	ite	ne
 8016efe:	4604      	movne	r4, r0
 8016f00:	2401      	moveq	r4, #1
 8016f02:	4620      	mov	r0, r4
 8016f04:	f001 fb56 	bl	80185b4 <malloc>
 8016f08:	b100      	cbz	r0, 8016f0c <_Znwj+0x14>
 8016f0a:	bd10      	pop	{r4, pc}
 8016f0c:	f000 f9d4 	bl	80172b8 <_ZSt15get_new_handlerv>
 8016f10:	b108      	cbz	r0, 8016f16 <_Znwj+0x1e>
 8016f12:	4780      	blx	r0
 8016f14:	e7f5      	b.n	8016f02 <_Znwj+0xa>
 8016f16:	2004      	movs	r0, #4
 8016f18:	f000 f8a4 	bl	8017064 <__cxa_allocate_exception>
 8016f1c:	4b02      	ldr	r3, [pc, #8]	; (8016f28 <_Znwj+0x30>)
 8016f1e:	6003      	str	r3, [r0, #0]
 8016f20:	4a02      	ldr	r2, [pc, #8]	; (8016f2c <_Znwj+0x34>)
 8016f22:	4903      	ldr	r1, [pc, #12]	; (8016f30 <_Znwj+0x38>)
 8016f24:	f000 f974 	bl	8017210 <__cxa_throw>
 8016f28:	08093d8c 	.word	0x08093d8c
 8016f2c:	08016f3d 	.word	0x08016f3d
 8016f30:	08093d68 	.word	0x08093d68

08016f34 <_ZNKSt9bad_alloc4whatEv>:
 8016f34:	4800      	ldr	r0, [pc, #0]	; (8016f38 <_ZNKSt9bad_alloc4whatEv+0x4>)
 8016f36:	4770      	bx	lr
 8016f38:	08093d58 	.word	0x08093d58

08016f3c <_ZNSt9bad_allocD1Ev>:
 8016f3c:	b510      	push	{r4, lr}
 8016f3e:	4b03      	ldr	r3, [pc, #12]	; (8016f4c <_ZNSt9bad_allocD1Ev+0x10>)
 8016f40:	6003      	str	r3, [r0, #0]
 8016f42:	4604      	mov	r4, r0
 8016f44:	f000 f8ca 	bl	80170dc <_ZNSt9exceptionD1Ev>
 8016f48:	4620      	mov	r0, r4
 8016f4a:	bd10      	pop	{r4, pc}
 8016f4c:	08093d8c 	.word	0x08093d8c

08016f50 <_ZNSt9bad_allocD0Ev>:
 8016f50:	b510      	push	{r4, lr}
 8016f52:	4b05      	ldr	r3, [pc, #20]	; (8016f68 <_ZNSt9bad_allocD0Ev+0x18>)
 8016f54:	6003      	str	r3, [r0, #0]
 8016f56:	4604      	mov	r4, r0
 8016f58:	f000 f8c0 	bl	80170dc <_ZNSt9exceptionD1Ev>
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	2104      	movs	r1, #4
 8016f60:	f000 f804 	bl	8016f6c <_ZdlPvj>
 8016f64:	4620      	mov	r0, r4
 8016f66:	bd10      	pop	{r4, pc}
 8016f68:	08093d8c 	.word	0x08093d8c

08016f6c <_ZdlPvj>:
 8016f6c:	f7ff bfc2 	b.w	8016ef4 <_ZdlPv>

08016f70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 8016f70:	b4f0      	push	{r4, r5, r6, r7}
 8016f72:	4c22      	ldr	r4, [pc, #136]	; (8016ffc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 8016f74:	6863      	ldr	r3, [r4, #4]
 8016f76:	f1a0 0608 	sub.w	r6, r0, #8
 8016f7a:	b31b      	cbz	r3, 8016fc4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 8016f7c:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8016f80:	19f5      	adds	r5, r6, r7
 8016f82:	42ab      	cmp	r3, r5
 8016f84:	d81e      	bhi.n	8016fc4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 8016f86:	d022      	beq.n	8016fce <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 8016f88:	6859      	ldr	r1, [r3, #4]
 8016f8a:	2900      	cmp	r1, #0
 8016f8c:	d031      	beq.n	8016ff2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 8016f8e:	428d      	cmp	r5, r1
 8016f90:	d303      	bcc.n	8016f9a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 8016f92:	e02e      	b.n	8016ff2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 8016f94:	4295      	cmp	r5, r2
 8016f96:	d205      	bcs.n	8016fa4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 8016f98:	4611      	mov	r1, r2
 8016f9a:	684a      	ldr	r2, [r1, #4]
 8016f9c:	1d1c      	adds	r4, r3, #4
 8016f9e:	460b      	mov	r3, r1
 8016fa0:	2a00      	cmp	r2, #0
 8016fa2:	d1f7      	bne.n	8016f94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 8016fa4:	4295      	cmp	r5, r2
 8016fa6:	d01c      	beq.n	8016fe2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 8016fa8:	6823      	ldr	r3, [r4, #0]
 8016faa:	681a      	ldr	r2, [r3, #0]
 8016fac:	1899      	adds	r1, r3, r2
 8016fae:	428e      	cmp	r6, r1
 8016fb0:	d01c      	beq.n	8016fec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 8016fb2:	685b      	ldr	r3, [r3, #4]
 8016fb4:	f840 3c04 	str.w	r3, [r0, #-4]
 8016fb8:	6823      	ldr	r3, [r4, #0]
 8016fba:	f840 7c08 	str.w	r7, [r0, #-8]
 8016fbe:	605e      	str	r6, [r3, #4]
 8016fc0:	bcf0      	pop	{r4, r5, r6, r7}
 8016fc2:	4770      	bx	lr
 8016fc4:	f840 3c04 	str.w	r3, [r0, #-4]
 8016fc8:	6066      	str	r6, [r4, #4]
 8016fca:	bcf0      	pop	{r4, r5, r6, r7}
 8016fcc:	4770      	bx	lr
 8016fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd2:	4417      	add	r7, r2
 8016fd4:	f840 7c08 	str.w	r7, [r0, #-8]
 8016fd8:	f840 3c04 	str.w	r3, [r0, #-4]
 8016fdc:	6066      	str	r6, [r4, #4]
 8016fde:	bcf0      	pop	{r4, r5, r6, r7}
 8016fe0:	4770      	bx	lr
 8016fe2:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016fe6:	604a      	str	r2, [r1, #4]
 8016fe8:	441f      	add	r7, r3
 8016fea:	e7dd      	b.n	8016fa8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 8016fec:	4417      	add	r7, r2
 8016fee:	601f      	str	r7, [r3, #0]
 8016ff0:	e7eb      	b.n	8016fca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 8016ff2:	460a      	mov	r2, r1
 8016ff4:	3404      	adds	r4, #4
 8016ff6:	4619      	mov	r1, r3
 8016ff8:	e7d4      	b.n	8016fa4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 8016ffa:	bf00      	nop
 8016ffc:	2001b9c0 	.word	0x2001b9c0

08017000 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8017000:	b430      	push	{r4, r5}
 8017002:	4c17      	ldr	r4, [pc, #92]	; (8017060 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 8017004:	f100 0208 	add.w	r2, r0, #8
 8017008:	6863      	ldr	r3, [r4, #4]
 801700a:	2a08      	cmp	r2, #8
 801700c:	bf38      	it	cc
 801700e:	2208      	movcc	r2, #8
 8017010:	b303      	cbz	r3, 8017054 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 8017012:	3207      	adds	r2, #7
 8017014:	6819      	ldr	r1, [r3, #0]
 8017016:	f022 0207 	bic.w	r2, r2, #7
 801701a:	428a      	cmp	r2, r1
 801701c:	d804      	bhi.n	8017028 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 801701e:	e01b      	b.n	8017058 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8017020:	6801      	ldr	r1, [r0, #0]
 8017022:	428a      	cmp	r2, r1
 8017024:	d905      	bls.n	8017032 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 8017026:	4603      	mov	r3, r0
 8017028:	6858      	ldr	r0, [r3, #4]
 801702a:	2800      	cmp	r0, #0
 801702c:	d1f8      	bne.n	8017020 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 801702e:	bc30      	pop	{r4, r5}
 8017030:	4770      	bx	lr
 8017032:	3304      	adds	r3, #4
 8017034:	1a8c      	subs	r4, r1, r2
 8017036:	2c07      	cmp	r4, #7
 8017038:	6845      	ldr	r5, [r0, #4]
 801703a:	d908      	bls.n	801704e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 801703c:	1881      	adds	r1, r0, r2
 801703e:	604d      	str	r5, [r1, #4]
 8017040:	5084      	str	r4, [r0, r2]
 8017042:	6818      	ldr	r0, [r3, #0]
 8017044:	6002      	str	r2, [r0, #0]
 8017046:	6019      	str	r1, [r3, #0]
 8017048:	3008      	adds	r0, #8
 801704a:	bc30      	pop	{r4, r5}
 801704c:	4770      	bx	lr
 801704e:	6001      	str	r1, [r0, #0]
 8017050:	601d      	str	r5, [r3, #0]
 8017052:	e7f9      	b.n	8017048 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 8017054:	4618      	mov	r0, r3
 8017056:	e7ea      	b.n	801702e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 8017058:	4618      	mov	r0, r3
 801705a:	1d23      	adds	r3, r4, #4
 801705c:	e7ea      	b.n	8017034 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 801705e:	bf00      	nop
 8017060:	2001b9c0 	.word	0x2001b9c0

08017064 <__cxa_allocate_exception>:
 8017064:	b510      	push	{r4, lr}
 8017066:	f100 0480 	add.w	r4, r0, #128	; 0x80
 801706a:	4620      	mov	r0, r4
 801706c:	f001 faa2 	bl	80185b4 <malloc>
 8017070:	b138      	cbz	r0, 8017082 <__cxa_allocate_exception+0x1e>
 8017072:	4603      	mov	r3, r0
 8017074:	2280      	movs	r2, #128	; 0x80
 8017076:	2100      	movs	r1, #0
 8017078:	4618      	mov	r0, r3
 801707a:	f001 fd14 	bl	8018aa6 <memset>
 801707e:	3080      	adds	r0, #128	; 0x80
 8017080:	bd10      	pop	{r4, pc}
 8017082:	4620      	mov	r0, r4
 8017084:	f7ff ffbc 	bl	8017000 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 8017088:	4603      	mov	r3, r0
 801708a:	2800      	cmp	r0, #0
 801708c:	d1f2      	bne.n	8017074 <__cxa_allocate_exception+0x10>
 801708e:	f000 f849 	bl	8017124 <_ZSt9terminatev>
 8017092:	bf00      	nop

08017094 <__cxa_free_exception>:
 8017094:	4a06      	ldr	r2, [pc, #24]	; (80170b0 <__cxa_free_exception+0x1c>)
 8017096:	6893      	ldr	r3, [r2, #8]
 8017098:	3880      	subs	r0, #128	; 0x80
 801709a:	4298      	cmp	r0, r3
 801709c:	d903      	bls.n	80170a6 <__cxa_free_exception+0x12>
 801709e:	68d2      	ldr	r2, [r2, #12]
 80170a0:	4413      	add	r3, r2
 80170a2:	4298      	cmp	r0, r3
 80170a4:	d301      	bcc.n	80170aa <__cxa_free_exception+0x16>
 80170a6:	f001 ba8d 	b.w	80185c4 <free>
 80170aa:	f7ff bf61 	b.w	8016f70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 80170ae:	bf00      	nop
 80170b0:	2001b9c0 	.word	0x2001b9c0

080170b4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80170b4:	b538      	push	{r3, r4, r5, lr}
 80170b6:	4c08      	ldr	r4, [pc, #32]	; (80170d8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80170b8:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80170bc:	4628      	mov	r0, r5
 80170be:	60e5      	str	r5, [r4, #12]
 80170c0:	f001 fa78 	bl	80185b4 <malloc>
 80170c4:	60a0      	str	r0, [r4, #8]
 80170c6:	b120      	cbz	r0, 80170d2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 80170c8:	2300      	movs	r3, #0
 80170ca:	6060      	str	r0, [r4, #4]
 80170cc:	e9c0 5300 	strd	r5, r3, [r0]
 80170d0:	bd38      	pop	{r3, r4, r5, pc}
 80170d2:	60e0      	str	r0, [r4, #12]
 80170d4:	6060      	str	r0, [r4, #4]
 80170d6:	bd38      	pop	{r3, r4, r5, pc}
 80170d8:	2001b9c0 	.word	0x2001b9c0

080170dc <_ZNSt9exceptionD1Ev>:
 80170dc:	4770      	bx	lr
 80170de:	bf00      	nop

080170e0 <_ZNSt13bad_exceptionD1Ev>:
 80170e0:	4770      	bx	lr
 80170e2:	bf00      	nop

080170e4 <_ZGTtNKSt13bad_exception4whatEv>:
 80170e4:	4800      	ldr	r0, [pc, #0]	; (80170e8 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 80170e6:	4770      	bx	lr
 80170e8:	08093d98 	.word	0x08093d98

080170ec <_ZNSt13bad_exceptionD0Ev>:
 80170ec:	b510      	push	{r4, lr}
 80170ee:	2104      	movs	r1, #4
 80170f0:	4604      	mov	r4, r0
 80170f2:	f7ff ff3b 	bl	8016f6c <_ZdlPvj>
 80170f6:	4620      	mov	r0, r4
 80170f8:	bd10      	pop	{r4, pc}
 80170fa:	bf00      	nop

080170fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80170fc:	b508      	push	{r3, lr}
 80170fe:	4780      	blx	r0
 8017100:	f001 f80e 	bl	8018120 <abort>
 8017104:	f000 fb68 	bl	80177d8 <__cxa_begin_catch>
 8017108:	f001 f80a 	bl	8018120 <abort>
 801710c:	460d      	mov	r5, r1
 801710e:	4604      	mov	r4, r0
 8017110:	f000 fba2 	bl	8017858 <__cxa_end_catch>
 8017114:	3501      	adds	r5, #1
 8017116:	d001      	beq.n	801711c <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8017118:	f000 f9fa 	bl	8017510 <__cxa_end_cleanup>
 801711c:	4620      	mov	r0, r4
 801711e:	f000 faed 	bl	80176fc <__cxa_call_unexpected>
 8017122:	bf00      	nop

08017124 <_ZSt9terminatev>:
 8017124:	b508      	push	{r3, lr}
 8017126:	4b03      	ldr	r3, [pc, #12]	; (8017134 <_ZSt9terminatev+0x10>)
 8017128:	6818      	ldr	r0, [r3, #0]
 801712a:	f3bf 8f5b 	dmb	ish
 801712e:	f7ff ffe5 	bl	80170fc <_ZN10__cxxabiv111__terminateEPFvvE>
 8017132:	bf00      	nop
 8017134:	20000028 	.word	0x20000028

08017138 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8017138:	b508      	push	{r3, lr}
 801713a:	4780      	blx	r0
 801713c:	f7ff fff2 	bl	8017124 <_ZSt9terminatev>

08017140 <_ZSt10unexpectedv>:
 8017140:	b508      	push	{r3, lr}
 8017142:	4b03      	ldr	r3, [pc, #12]	; (8017150 <_ZSt10unexpectedv+0x10>)
 8017144:	6818      	ldr	r0, [r3, #0]
 8017146:	f3bf 8f5b 	dmb	ish
 801714a:	f7ff fff5 	bl	8017138 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801714e:	bf00      	nop
 8017150:	20000024 	.word	0x20000024

08017154 <_ZSt13get_terminatev>:
 8017154:	4b02      	ldr	r3, [pc, #8]	; (8017160 <_ZSt13get_terminatev+0xc>)
 8017156:	6818      	ldr	r0, [r3, #0]
 8017158:	f3bf 8f5b 	dmb	ish
 801715c:	4770      	bx	lr
 801715e:	bf00      	nop
 8017160:	20000028 	.word	0x20000028

08017164 <_ZSt14get_unexpectedv>:
 8017164:	4b02      	ldr	r3, [pc, #8]	; (8017170 <_ZSt14get_unexpectedv+0xc>)
 8017166:	6818      	ldr	r0, [r3, #0]
 8017168:	f3bf 8f5b 	dmb	ish
 801716c:	4770      	bx	lr
 801716e:	bf00      	nop
 8017170:	20000024 	.word	0x20000024

08017174 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8017174:	2801      	cmp	r0, #1
 8017176:	b510      	push	{r4, lr}
 8017178:	d81a      	bhi.n	80171b0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 801717a:	f3bf 8f5b 	dmb	ish
 801717e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8017182:	e853 2f00 	ldrex	r2, [r3]
 8017186:	3a01      	subs	r2, #1
 8017188:	e843 2000 	strex	r0, r2, [r3]
 801718c:	2800      	cmp	r0, #0
 801718e:	d1f8      	bne.n	8017182 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8017190:	f3bf 8f5b 	dmb	ish
 8017194:	b95a      	cbnz	r2, 80171ae <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8017196:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 801719a:	f101 0458 	add.w	r4, r1, #88	; 0x58
 801719e:	b10b      	cbz	r3, 80171a4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 80171a0:	4620      	mov	r0, r4
 80171a2:	4798      	blx	r3
 80171a4:	4620      	mov	r0, r4
 80171a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171aa:	f7ff bf73 	b.w	8017094 <__cxa_free_exception>
 80171ae:	bd10      	pop	{r4, pc}
 80171b0:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80171b4:	f7ff ffa2 	bl	80170fc <_ZN10__cxxabiv111__terminateEPFvvE>

080171b8 <__cxa_init_primary_exception>:
 80171b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ba:	2500      	movs	r5, #0
 80171bc:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 80171c0:	f840 5c80 	str.w	r5, [r0, #-128]
 80171c4:	4604      	mov	r4, r0
 80171c6:	f7ff ffcd 	bl	8017164 <_ZSt14get_unexpectedv>
 80171ca:	f844 0c70 	str.w	r0, [r4, #-112]
 80171ce:	f7ff ffc1 	bl	8017154 <_ZSt13get_terminatev>
 80171d2:	2347      	movs	r3, #71	; 0x47
 80171d4:	2243      	movs	r2, #67	; 0x43
 80171d6:	274e      	movs	r7, #78	; 0x4e
 80171d8:	2655      	movs	r6, #85	; 0x55
 80171da:	490c      	ldr	r1, [pc, #48]	; (801720c <__cxa_init_primary_exception+0x54>)
 80171dc:	f804 3c58 	strb.w	r3, [r4, #-88]
 80171e0:	232b      	movs	r3, #43	; 0x2b
 80171e2:	f804 5c51 	strb.w	r5, [r4, #-81]
 80171e6:	f804 7c57 	strb.w	r7, [r4, #-87]
 80171ea:	f804 6c56 	strb.w	r6, [r4, #-86]
 80171ee:	f844 1c50 	str.w	r1, [r4, #-80]
 80171f2:	f804 2c55 	strb.w	r2, [r4, #-85]
 80171f6:	f804 2c54 	strb.w	r2, [r4, #-84]
 80171fa:	f804 3c53 	strb.w	r3, [r4, #-83]
 80171fe:	f804 3c52 	strb.w	r3, [r4, #-82]
 8017202:	f844 0c6c 	str.w	r0, [r4, #-108]
 8017206:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 801720a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801720c:	08017175 	.word	0x08017175

08017210 <__cxa_throw>:
 8017210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017212:	4605      	mov	r5, r0
 8017214:	460e      	mov	r6, r1
 8017216:	4617      	mov	r7, r2
 8017218:	f000 fb66 	bl	80178e8 <__cxa_get_globals>
 801721c:	6843      	ldr	r3, [r0, #4]
 801721e:	4604      	mov	r4, r0
 8017220:	3301      	adds	r3, #1
 8017222:	463a      	mov	r2, r7
 8017224:	4631      	mov	r1, r6
 8017226:	6063      	str	r3, [r4, #4]
 8017228:	4628      	mov	r0, r5
 801722a:	f7ff ffc5 	bl	80171b8 <__cxa_init_primary_exception>
 801722e:	4604      	mov	r4, r0
 8017230:	2301      	movs	r3, #1
 8017232:	f844 3b28 	str.w	r3, [r4], #40
 8017236:	4620      	mov	r0, r4
 8017238:	f7f1 f940 	bl	80084bc <_Unwind_RaiseException>
 801723c:	4620      	mov	r0, r4
 801723e:	f000 facb 	bl	80177d8 <__cxa_begin_catch>
 8017242:	f7ff ff6f 	bl	8017124 <_ZSt9terminatev>
 8017246:	bf00      	nop

08017248 <__cxa_rethrow>:
 8017248:	b510      	push	{r4, lr}
 801724a:	f000 fb4d 	bl	80178e8 <__cxa_get_globals>
 801724e:	e9d0 4200 	ldrd	r4, r2, [r0]
 8017252:	3201      	adds	r2, #1
 8017254:	6042      	str	r2, [r0, #4]
 8017256:	b164      	cbz	r4, 8017272 <__cxa_rethrow+0x2a>
 8017258:	f894 2020 	ldrb.w	r2, [r4, #32]
 801725c:	2a47      	cmp	r2, #71	; 0x47
 801725e:	d00a      	beq.n	8017276 <__cxa_rethrow+0x2e>
 8017260:	2200      	movs	r2, #0
 8017262:	6002      	str	r2, [r0, #0]
 8017264:	3420      	adds	r4, #32
 8017266:	4620      	mov	r0, r4
 8017268:	f7f1 f94c 	bl	8008504 <_Unwind_Resume_or_Rethrow>
 801726c:	4620      	mov	r0, r4
 801726e:	f000 fab3 	bl	80177d8 <__cxa_begin_catch>
 8017272:	f7ff ff57 	bl	8017124 <_ZSt9terminatev>
 8017276:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 801727a:	2a4e      	cmp	r2, #78	; 0x4e
 801727c:	d1f0      	bne.n	8017260 <__cxa_rethrow+0x18>
 801727e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8017282:	2a55      	cmp	r2, #85	; 0x55
 8017284:	d1ec      	bne.n	8017260 <__cxa_rethrow+0x18>
 8017286:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 801728a:	2a43      	cmp	r2, #67	; 0x43
 801728c:	d1e8      	bne.n	8017260 <__cxa_rethrow+0x18>
 801728e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8017292:	2a43      	cmp	r2, #67	; 0x43
 8017294:	d1e4      	bne.n	8017260 <__cxa_rethrow+0x18>
 8017296:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801729a:	2a2b      	cmp	r2, #43	; 0x2b
 801729c:	d1e0      	bne.n	8017260 <__cxa_rethrow+0x18>
 801729e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80172a2:	2a2b      	cmp	r2, #43	; 0x2b
 80172a4:	d1dc      	bne.n	8017260 <__cxa_rethrow+0x18>
 80172a6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80172aa:	2a01      	cmp	r2, #1
 80172ac:	d8d8      	bhi.n	8017260 <__cxa_rethrow+0x18>
 80172ae:	6962      	ldr	r2, [r4, #20]
 80172b0:	4252      	negs	r2, r2
 80172b2:	6162      	str	r2, [r4, #20]
 80172b4:	e7d6      	b.n	8017264 <__cxa_rethrow+0x1c>
 80172b6:	bf00      	nop

080172b8 <_ZSt15get_new_handlerv>:
 80172b8:	4b02      	ldr	r3, [pc, #8]	; (80172c4 <_ZSt15get_new_handlerv+0xc>)
 80172ba:	6818      	ldr	r0, [r3, #0]
 80172bc:	f3bf 8f5b 	dmb	ish
 80172c0:	4770      	bx	lr
 80172c2:	bf00      	nop
 80172c4:	2001b9d0 	.word	0x2001b9d0

080172c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80172c8:	b510      	push	{r4, lr}
 80172ca:	4b03      	ldr	r3, [pc, #12]	; (80172d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80172cc:	6003      	str	r3, [r0, #0]
 80172ce:	4604      	mov	r4, r0
 80172d0:	f000 f8c2 	bl	8017458 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80172d4:	4620      	mov	r0, r4
 80172d6:	bd10      	pop	{r4, pc}
 80172d8:	08093e88 	.word	0x08093e88

080172dc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80172dc:	b510      	push	{r4, lr}
 80172de:	4b05      	ldr	r3, [pc, #20]	; (80172f4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 80172e0:	6003      	str	r3, [r0, #0]
 80172e2:	4604      	mov	r4, r0
 80172e4:	f000 f8b8 	bl	8017458 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80172e8:	4620      	mov	r0, r4
 80172ea:	210c      	movs	r1, #12
 80172ec:	f7ff fe3e 	bl	8016f6c <_ZdlPvj>
 80172f0:	4620      	mov	r0, r4
 80172f2:	bd10      	pop	{r4, pc}
 80172f4:	08093e88 	.word	0x08093e88

080172f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80172f8:	b570      	push	{r4, r5, r6, lr}
 80172fa:	b082      	sub	sp, #8
 80172fc:	460e      	mov	r6, r1
 80172fe:	9c06      	ldr	r4, [sp, #24]
 8017300:	4294      	cmp	r4, r2
 8017302:	4605      	mov	r5, r0
 8017304:	d009      	beq.n	801731a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 8017306:	68a8      	ldr	r0, [r5, #8]
 8017308:	6805      	ldr	r5, [r0, #0]
 801730a:	9406      	str	r4, [sp, #24]
 801730c:	6a2c      	ldr	r4, [r5, #32]
 801730e:	4631      	mov	r1, r6
 8017310:	46a4      	mov	ip, r4
 8017312:	b002      	add	sp, #8
 8017314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017318:	4760      	bx	ip
 801731a:	4619      	mov	r1, r3
 801731c:	9201      	str	r2, [sp, #4]
 801731e:	9300      	str	r3, [sp, #0]
 8017320:	f000 f862 	bl	80173e8 <_ZNKSt9type_infoeqERKS_>
 8017324:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017328:	2800      	cmp	r0, #0
 801732a:	d0ec      	beq.n	8017306 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 801732c:	2006      	movs	r0, #6
 801732e:	b002      	add	sp, #8
 8017330:	bd70      	pop	{r4, r5, r6, pc}
 8017332:	bf00      	nop

08017334 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8017334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017338:	460e      	mov	r6, r1
 801733a:	b081      	sub	sp, #4
 801733c:	4619      	mov	r1, r3
 801733e:	461f      	mov	r7, r3
 8017340:	4691      	mov	r9, r2
 8017342:	4683      	mov	fp, r0
 8017344:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8017348:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 801734c:	f000 f84c 	bl	80173e8 <_ZNKSt9type_infoeqERKS_>
 8017350:	b170      	cbz	r0, 8017370 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8017352:	2e00      	cmp	r6, #0
 8017354:	602c      	str	r4, [r5, #0]
 8017356:	f885 9004 	strb.w	r9, [r5, #4]
 801735a:	db1d      	blt.n	8017398 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 801735c:	4434      	add	r4, r6
 801735e:	45a0      	cmp	r8, r4
 8017360:	bf0c      	ite	eq
 8017362:	2406      	moveq	r4, #6
 8017364:	2401      	movne	r4, #1
 8017366:	71ac      	strb	r4, [r5, #6]
 8017368:	2000      	movs	r0, #0
 801736a:	b001      	add	sp, #4
 801736c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017370:	4544      	cmp	r4, r8
 8017372:	d016      	beq.n	80173a2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8017374:	f8db 0008 	ldr.w	r0, [fp, #8]
 8017378:	f8d0 c000 	ldr.w	ip, [r0]
 801737c:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 8017380:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8017384:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8017388:	463b      	mov	r3, r7
 801738a:	464a      	mov	r2, r9
 801738c:	4631      	mov	r1, r6
 801738e:	46a4      	mov	ip, r4
 8017390:	b001      	add	sp, #4
 8017392:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017396:	4760      	bx	ip
 8017398:	3602      	adds	r6, #2
 801739a:	d1e5      	bne.n	8017368 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 801739c:	2301      	movs	r3, #1
 801739e:	71ab      	strb	r3, [r5, #6]
 80173a0:	e7e2      	b.n	8017368 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80173a2:	4651      	mov	r1, sl
 80173a4:	4658      	mov	r0, fp
 80173a6:	f000 f81f 	bl	80173e8 <_ZNKSt9type_infoeqERKS_>
 80173aa:	2800      	cmp	r0, #0
 80173ac:	d0e2      	beq.n	8017374 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 80173ae:	f885 9005 	strb.w	r9, [r5, #5]
 80173b2:	e7d9      	b.n	8017368 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

080173b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80173b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173b8:	4607      	mov	r7, r0
 80173ba:	460c      	mov	r4, r1
 80173bc:	4615      	mov	r5, r2
 80173be:	461e      	mov	r6, r3
 80173c0:	f000 f884 	bl	80174cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80173c4:	b108      	cbz	r0, 80173ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 80173c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ca:	68b8      	ldr	r0, [r7, #8]
 80173cc:	6807      	ldr	r7, [r0, #0]
 80173ce:	4621      	mov	r1, r4
 80173d0:	69bc      	ldr	r4, [r7, #24]
 80173d2:	4633      	mov	r3, r6
 80173d4:	462a      	mov	r2, r5
 80173d6:	46a4      	mov	ip, r4
 80173d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173dc:	4760      	bx	ip
 80173de:	bf00      	nop

080173e0 <_ZNSt9type_infoD1Ev>:
 80173e0:	4770      	bx	lr
 80173e2:	bf00      	nop

080173e4 <_ZNKSt9type_info14__is_pointer_pEv>:
 80173e4:	2000      	movs	r0, #0
 80173e6:	4770      	bx	lr

080173e8 <_ZNKSt9type_infoeqERKS_>:
 80173e8:	4281      	cmp	r1, r0
 80173ea:	d00f      	beq.n	801740c <_ZNKSt9type_infoeqERKS_+0x24>
 80173ec:	b508      	push	{r3, lr}
 80173ee:	6840      	ldr	r0, [r0, #4]
 80173f0:	7803      	ldrb	r3, [r0, #0]
 80173f2:	2b2a      	cmp	r3, #42	; 0x2a
 80173f4:	d00c      	beq.n	8017410 <_ZNKSt9type_infoeqERKS_+0x28>
 80173f6:	6849      	ldr	r1, [r1, #4]
 80173f8:	780b      	ldrb	r3, [r1, #0]
 80173fa:	2b2a      	cmp	r3, #42	; 0x2a
 80173fc:	bf08      	it	eq
 80173fe:	3101      	addeq	r1, #1
 8017400:	f7ef fcc6 	bl	8006d90 <strcmp>
 8017404:	fab0 f080 	clz	r0, r0
 8017408:	0940      	lsrs	r0, r0, #5
 801740a:	bd08      	pop	{r3, pc}
 801740c:	2001      	movs	r0, #1
 801740e:	4770      	bx	lr
 8017410:	2000      	movs	r0, #0
 8017412:	bd08      	pop	{r3, pc}

08017414 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8017414:	b570      	push	{r4, r5, r6, lr}
 8017416:	6803      	ldr	r3, [r0, #0]
 8017418:	b084      	sub	sp, #16
 801741a:	2400      	movs	r4, #0
 801741c:	699e      	ldr	r6, [r3, #24]
 801741e:	9400      	str	r4, [sp, #0]
 8017420:	2310      	movs	r3, #16
 8017422:	4615      	mov	r5, r2
 8017424:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017428:	6812      	ldr	r2, [r2, #0]
 801742a:	f88d 4004 	strb.w	r4, [sp, #4]
 801742e:	466b      	mov	r3, sp
 8017430:	47b0      	blx	r6
 8017432:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017436:	f003 0306 	and.w	r3, r3, #6
 801743a:	2b06      	cmp	r3, #6
 801743c:	bf03      	ittte	eq
 801743e:	9b00      	ldreq	r3, [sp, #0]
 8017440:	602b      	streq	r3, [r5, #0]
 8017442:	2001      	moveq	r0, #1
 8017444:	4620      	movne	r0, r4
 8017446:	b004      	add	sp, #16
 8017448:	bd70      	pop	{r4, r5, r6, pc}
 801744a:	bf00      	nop

0801744c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801744c:	9800      	ldr	r0, [sp, #0]
 801744e:	4290      	cmp	r0, r2
 8017450:	bf0c      	ite	eq
 8017452:	2006      	moveq	r0, #6
 8017454:	2001      	movne	r0, #1
 8017456:	4770      	bx	lr

08017458 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8017458:	b510      	push	{r4, lr}
 801745a:	4b03      	ldr	r3, [pc, #12]	; (8017468 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801745c:	6003      	str	r3, [r0, #0]
 801745e:	4604      	mov	r4, r0
 8017460:	f7ff ffbe 	bl	80173e0 <_ZNSt9type_infoD1Ev>
 8017464:	4620      	mov	r0, r4
 8017466:	bd10      	pop	{r4, pc}
 8017468:	08093efc 	.word	0x08093efc

0801746c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801746c:	b510      	push	{r4, lr}
 801746e:	4b05      	ldr	r3, [pc, #20]	; (8017484 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8017470:	6003      	str	r3, [r0, #0]
 8017472:	4604      	mov	r4, r0
 8017474:	f7ff ffb4 	bl	80173e0 <_ZNSt9type_infoD1Ev>
 8017478:	4620      	mov	r0, r4
 801747a:	2108      	movs	r1, #8
 801747c:	f7ff fd76 	bl	8016f6c <_ZdlPvj>
 8017480:	4620      	mov	r0, r4
 8017482:	bd10      	pop	{r4, pc}
 8017484:	08093efc 	.word	0x08093efc

08017488 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8017488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801748c:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 8017490:	9d06      	ldr	r5, [sp, #24]
 8017492:	428d      	cmp	r5, r1
 8017494:	4690      	mov	r8, r2
 8017496:	461f      	mov	r7, r3
 8017498:	4606      	mov	r6, r0
 801749a:	d00c      	beq.n	80174b6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 801749c:	4639      	mov	r1, r7
 801749e:	4630      	mov	r0, r6
 80174a0:	f7ff ffa2 	bl	80173e8 <_ZNKSt9type_infoeqERKS_>
 80174a4:	b120      	cbz	r0, 80174b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 80174a6:	2301      	movs	r3, #1
 80174a8:	6025      	str	r5, [r4, #0]
 80174aa:	f884 8004 	strb.w	r8, [r4, #4]
 80174ae:	71a3      	strb	r3, [r4, #6]
 80174b0:	2000      	movs	r0, #0
 80174b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174b6:	9907      	ldr	r1, [sp, #28]
 80174b8:	f7ff ff96 	bl	80173e8 <_ZNKSt9type_infoeqERKS_>
 80174bc:	2800      	cmp	r0, #0
 80174be:	d0ed      	beq.n	801749c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 80174c0:	f884 8005 	strb.w	r8, [r4, #5]
 80174c4:	2000      	movs	r0, #0
 80174c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ca:	bf00      	nop

080174cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80174cc:	b538      	push	{r3, r4, r5, lr}
 80174ce:	4615      	mov	r5, r2
 80174d0:	461c      	mov	r4, r3
 80174d2:	f7ff ff89 	bl	80173e8 <_ZNKSt9type_infoeqERKS_>
 80174d6:	b120      	cbz	r0, 80174e2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80174d8:	2208      	movs	r2, #8
 80174da:	2306      	movs	r3, #6
 80174dc:	6025      	str	r5, [r4, #0]
 80174de:	60e2      	str	r2, [r4, #12]
 80174e0:	7123      	strb	r3, [r4, #4]
 80174e2:	bd38      	pop	{r3, r4, r5, pc}

080174e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80174e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e8:	4617      	mov	r7, r2
 80174ea:	461c      	mov	r4, r3
 80174ec:	4606      	mov	r6, r0
 80174ee:	460d      	mov	r5, r1
 80174f0:	f7ff ff7a 	bl	80173e8 <_ZNKSt9type_infoeqERKS_>
 80174f4:	b908      	cbnz	r0, 80174fa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 80174f6:	2c03      	cmp	r4, #3
 80174f8:	d901      	bls.n	80174fe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 80174fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174fe:	682b      	ldr	r3, [r5, #0]
 8017500:	463a      	mov	r2, r7
 8017502:	4631      	mov	r1, r6
 8017504:	4628      	mov	r0, r5
 8017506:	695b      	ldr	r3, [r3, #20]
 8017508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801750c:	4718      	bx	r3
 801750e:	bf00      	nop

08017510 <__cxa_end_cleanup>:
 8017510:	b41e      	push	{r1, r2, r3, r4}
 8017512:	f000 f88d 	bl	8017630 <__gnu_end_cleanup>
 8017516:	bc1e      	pop	{r1, r2, r3, r4}
 8017518:	f7f0 ffe2 	bl	80084e0 <_Unwind_Resume>

0801751c <__cxa_type_match>:
 801751c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801751e:	7802      	ldrb	r2, [r0, #0]
 8017520:	2a47      	cmp	r2, #71	; 0x47
 8017522:	b083      	sub	sp, #12
 8017524:	460d      	mov	r5, r1
 8017526:	461f      	mov	r7, r3
 8017528:	d01e      	beq.n	8017568 <__cxa_type_match+0x4c>
 801752a:	2300      	movs	r3, #0
 801752c:	4c25      	ldr	r4, [pc, #148]	; (80175c4 <__cxa_type_match+0xa8>)
 801752e:	9301      	str	r3, [sp, #4]
 8017530:	6823      	ldr	r3, [r4, #0]
 8017532:	4620      	mov	r0, r4
 8017534:	689b      	ldr	r3, [r3, #8]
 8017536:	4798      	blx	r3
 8017538:	b180      	cbz	r0, 801755c <__cxa_type_match+0x40>
 801753a:	9b01      	ldr	r3, [sp, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	9301      	str	r3, [sp, #4]
 8017540:	2602      	movs	r6, #2
 8017542:	682b      	ldr	r3, [r5, #0]
 8017544:	4621      	mov	r1, r4
 8017546:	4628      	mov	r0, r5
 8017548:	691c      	ldr	r4, [r3, #16]
 801754a:	aa01      	add	r2, sp, #4
 801754c:	2301      	movs	r3, #1
 801754e:	47a0      	blx	r4
 8017550:	b130      	cbz	r0, 8017560 <__cxa_type_match+0x44>
 8017552:	9b01      	ldr	r3, [sp, #4]
 8017554:	603b      	str	r3, [r7, #0]
 8017556:	4630      	mov	r0, r6
 8017558:	b003      	add	sp, #12
 801755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801755c:	2601      	movs	r6, #1
 801755e:	e7f0      	b.n	8017542 <__cxa_type_match+0x26>
 8017560:	4606      	mov	r6, r0
 8017562:	4630      	mov	r0, r6
 8017564:	b003      	add	sp, #12
 8017566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017568:	7843      	ldrb	r3, [r0, #1]
 801756a:	2b4e      	cmp	r3, #78	; 0x4e
 801756c:	d1dd      	bne.n	801752a <__cxa_type_match+0xe>
 801756e:	7883      	ldrb	r3, [r0, #2]
 8017570:	2b55      	cmp	r3, #85	; 0x55
 8017572:	d1da      	bne.n	801752a <__cxa_type_match+0xe>
 8017574:	78c3      	ldrb	r3, [r0, #3]
 8017576:	2b43      	cmp	r3, #67	; 0x43
 8017578:	d1d7      	bne.n	801752a <__cxa_type_match+0xe>
 801757a:	7903      	ldrb	r3, [r0, #4]
 801757c:	2b46      	cmp	r3, #70	; 0x46
 801757e:	d015      	beq.n	80175ac <__cxa_type_match+0x90>
 8017580:	7903      	ldrb	r3, [r0, #4]
 8017582:	2b43      	cmp	r3, #67	; 0x43
 8017584:	d1d1      	bne.n	801752a <__cxa_type_match+0xe>
 8017586:	7943      	ldrb	r3, [r0, #5]
 8017588:	2b2b      	cmp	r3, #43	; 0x2b
 801758a:	d1ce      	bne.n	801752a <__cxa_type_match+0xe>
 801758c:	7983      	ldrb	r3, [r0, #6]
 801758e:	2b2b      	cmp	r3, #43	; 0x2b
 8017590:	d1cb      	bne.n	801752a <__cxa_type_match+0xe>
 8017592:	79c3      	ldrb	r3, [r0, #7]
 8017594:	2b01      	cmp	r3, #1
 8017596:	d8c8      	bhi.n	801752a <__cxa_type_match+0xe>
 8017598:	f850 4c20 	ldr.w	r4, [r0, #-32]
 801759c:	d002      	beq.n	80175a4 <__cxa_type_match+0x88>
 801759e:	3058      	adds	r0, #88	; 0x58
 80175a0:	9001      	str	r0, [sp, #4]
 80175a2:	e7c5      	b.n	8017530 <__cxa_type_match+0x14>
 80175a4:	4620      	mov	r0, r4
 80175a6:	f854 4c78 	ldr.w	r4, [r4, #-120]
 80175aa:	e7f9      	b.n	80175a0 <__cxa_type_match+0x84>
 80175ac:	7943      	ldrb	r3, [r0, #5]
 80175ae:	2b4f      	cmp	r3, #79	; 0x4f
 80175b0:	d1e6      	bne.n	8017580 <__cxa_type_match+0x64>
 80175b2:	7983      	ldrb	r3, [r0, #6]
 80175b4:	2b52      	cmp	r3, #82	; 0x52
 80175b6:	d1e3      	bne.n	8017580 <__cxa_type_match+0x64>
 80175b8:	79c3      	ldrb	r3, [r0, #7]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d1e0      	bne.n	8017580 <__cxa_type_match+0x64>
 80175be:	9301      	str	r3, [sp, #4]
 80175c0:	4c01      	ldr	r4, [pc, #4]	; (80175c8 <__cxa_type_match+0xac>)
 80175c2:	e7b5      	b.n	8017530 <__cxa_type_match+0x14>
 80175c4:	08093db4 	.word	0x08093db4
 80175c8:	08093dac 	.word	0x08093dac

080175cc <__cxa_begin_cleanup>:
 80175cc:	b510      	push	{r4, lr}
 80175ce:	4604      	mov	r4, r0
 80175d0:	f000 f98a 	bl	80178e8 <__cxa_get_globals>
 80175d4:	7823      	ldrb	r3, [r4, #0]
 80175d6:	2b47      	cmp	r3, #71	; 0x47
 80175d8:	f1a4 0220 	sub.w	r2, r4, #32
 80175dc:	d004      	beq.n	80175e8 <__cxa_begin_cleanup+0x1c>
 80175de:	6883      	ldr	r3, [r0, #8]
 80175e0:	bb23      	cbnz	r3, 801762c <__cxa_begin_cleanup+0x60>
 80175e2:	6082      	str	r2, [r0, #8]
 80175e4:	2001      	movs	r0, #1
 80175e6:	bd10      	pop	{r4, pc}
 80175e8:	7863      	ldrb	r3, [r4, #1]
 80175ea:	2b4e      	cmp	r3, #78	; 0x4e
 80175ec:	d1f7      	bne.n	80175de <__cxa_begin_cleanup+0x12>
 80175ee:	78a3      	ldrb	r3, [r4, #2]
 80175f0:	2b55      	cmp	r3, #85	; 0x55
 80175f2:	d1f4      	bne.n	80175de <__cxa_begin_cleanup+0x12>
 80175f4:	78e3      	ldrb	r3, [r4, #3]
 80175f6:	2b43      	cmp	r3, #67	; 0x43
 80175f8:	d1f1      	bne.n	80175de <__cxa_begin_cleanup+0x12>
 80175fa:	7923      	ldrb	r3, [r4, #4]
 80175fc:	2b43      	cmp	r3, #67	; 0x43
 80175fe:	d1ee      	bne.n	80175de <__cxa_begin_cleanup+0x12>
 8017600:	7963      	ldrb	r3, [r4, #5]
 8017602:	2b2b      	cmp	r3, #43	; 0x2b
 8017604:	d1eb      	bne.n	80175de <__cxa_begin_cleanup+0x12>
 8017606:	79a3      	ldrb	r3, [r4, #6]
 8017608:	2b2b      	cmp	r3, #43	; 0x2b
 801760a:	d1e8      	bne.n	80175de <__cxa_begin_cleanup+0x12>
 801760c:	79e3      	ldrb	r3, [r4, #7]
 801760e:	2b01      	cmp	r3, #1
 8017610:	d8e5      	bhi.n	80175de <__cxa_begin_cleanup+0x12>
 8017612:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017616:	3301      	adds	r3, #1
 8017618:	2b01      	cmp	r3, #1
 801761a:	f844 3c04 	str.w	r3, [r4, #-4]
 801761e:	d1e1      	bne.n	80175e4 <__cxa_begin_cleanup+0x18>
 8017620:	6883      	ldr	r3, [r0, #8]
 8017622:	f844 3c08 	str.w	r3, [r4, #-8]
 8017626:	6082      	str	r2, [r0, #8]
 8017628:	2001      	movs	r0, #1
 801762a:	bd10      	pop	{r4, pc}
 801762c:	f7ff fd7a 	bl	8017124 <_ZSt9terminatev>

08017630 <__gnu_end_cleanup>:
 8017630:	b508      	push	{r3, lr}
 8017632:	f000 f959 	bl	80178e8 <__cxa_get_globals>
 8017636:	6883      	ldr	r3, [r0, #8]
 8017638:	b383      	cbz	r3, 801769c <__gnu_end_cleanup+0x6c>
 801763a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801763e:	2a47      	cmp	r2, #71	; 0x47
 8017640:	d004      	beq.n	801764c <__gnu_end_cleanup+0x1c>
 8017642:	2200      	movs	r2, #0
 8017644:	6082      	str	r2, [r0, #8]
 8017646:	f103 0020 	add.w	r0, r3, #32
 801764a:	bd08      	pop	{r3, pc}
 801764c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8017650:	2a4e      	cmp	r2, #78	; 0x4e
 8017652:	d1f6      	bne.n	8017642 <__gnu_end_cleanup+0x12>
 8017654:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017658:	2a55      	cmp	r2, #85	; 0x55
 801765a:	d1f2      	bne.n	8017642 <__gnu_end_cleanup+0x12>
 801765c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017660:	2a43      	cmp	r2, #67	; 0x43
 8017662:	d1ee      	bne.n	8017642 <__gnu_end_cleanup+0x12>
 8017664:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017668:	2a43      	cmp	r2, #67	; 0x43
 801766a:	d1ea      	bne.n	8017642 <__gnu_end_cleanup+0x12>
 801766c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8017670:	2a2b      	cmp	r2, #43	; 0x2b
 8017672:	d1e6      	bne.n	8017642 <__gnu_end_cleanup+0x12>
 8017674:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8017678:	2a2b      	cmp	r2, #43	; 0x2b
 801767a:	d1e2      	bne.n	8017642 <__gnu_end_cleanup+0x12>
 801767c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8017680:	2a01      	cmp	r2, #1
 8017682:	d8de      	bhi.n	8017642 <__gnu_end_cleanup+0x12>
 8017684:	69da      	ldr	r2, [r3, #28]
 8017686:	3a01      	subs	r2, #1
 8017688:	61da      	str	r2, [r3, #28]
 801768a:	2a00      	cmp	r2, #0
 801768c:	d1db      	bne.n	8017646 <__gnu_end_cleanup+0x16>
 801768e:	699a      	ldr	r2, [r3, #24]
 8017690:	6082      	str	r2, [r0, #8]
 8017692:	2200      	movs	r2, #0
 8017694:	619a      	str	r2, [r3, #24]
 8017696:	f103 0020 	add.w	r0, r3, #32
 801769a:	bd08      	pop	{r3, pc}
 801769c:	f7ff fd42 	bl	8017124 <_ZSt9terminatev>

080176a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80176a0:	7803      	ldrb	r3, [r0, #0]
 80176a2:	2b47      	cmp	r3, #71	; 0x47
 80176a4:	d001      	beq.n	80176aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 80176a6:	2000      	movs	r0, #0
 80176a8:	4770      	bx	lr
 80176aa:	7843      	ldrb	r3, [r0, #1]
 80176ac:	2b4e      	cmp	r3, #78	; 0x4e
 80176ae:	d1fa      	bne.n	80176a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80176b0:	7883      	ldrb	r3, [r0, #2]
 80176b2:	2b55      	cmp	r3, #85	; 0x55
 80176b4:	d1f7      	bne.n	80176a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80176b6:	78c3      	ldrb	r3, [r0, #3]
 80176b8:	2b43      	cmp	r3, #67	; 0x43
 80176ba:	d1f4      	bne.n	80176a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80176bc:	7903      	ldrb	r3, [r0, #4]
 80176be:	2b43      	cmp	r3, #67	; 0x43
 80176c0:	d1f1      	bne.n	80176a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80176c2:	7943      	ldrb	r3, [r0, #5]
 80176c4:	2b2b      	cmp	r3, #43	; 0x2b
 80176c6:	d1ee      	bne.n	80176a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80176c8:	7983      	ldrb	r3, [r0, #6]
 80176ca:	2b2b      	cmp	r3, #43	; 0x2b
 80176cc:	d1eb      	bne.n	80176a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80176ce:	79c0      	ldrb	r0, [r0, #7]
 80176d0:	2801      	cmp	r0, #1
 80176d2:	bf8c      	ite	hi
 80176d4:	2000      	movhi	r0, #0
 80176d6:	2001      	movls	r0, #1
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop

080176dc <__cxa_call_terminate>:
 80176dc:	b510      	push	{r4, lr}
 80176de:	b130      	cbz	r0, 80176ee <__cxa_call_terminate+0x12>
 80176e0:	4604      	mov	r4, r0
 80176e2:	f000 f879 	bl	80177d8 <__cxa_begin_catch>
 80176e6:	4620      	mov	r0, r4
 80176e8:	f7ff ffda 	bl	80176a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80176ec:	b908      	cbnz	r0, 80176f2 <__cxa_call_terminate+0x16>
 80176ee:	f7ff fd19 	bl	8017124 <_ZSt9terminatev>
 80176f2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80176f6:	f7ff fd01 	bl	80170fc <_ZN10__cxxabiv111__terminateEPFvvE>
 80176fa:	bf00      	nop

080176fc <__cxa_call_unexpected>:
 80176fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017700:	b085      	sub	sp, #20
 8017702:	4602      	mov	r2, r0
 8017704:	f7ff ffcc 	bl	80176a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8017708:	b150      	cbz	r0, 8017720 <__cxa_call_unexpected+0x24>
 801770a:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 801770e:	4610      	mov	r0, r2
 8017710:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8017712:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 8017716:	f000 f85f 	bl	80177d8 <__cxa_begin_catch>
 801771a:	4640      	mov	r0, r8
 801771c:	f7ff fd0c 	bl	8017138 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8017720:	4610      	mov	r0, r2
 8017722:	f000 f859 	bl	80177d8 <__cxa_begin_catch>
 8017726:	f7ff fd0b 	bl	8017140 <_ZSt10unexpectedv>
 801772a:	f000 f855 	bl	80177d8 <__cxa_begin_catch>
 801772e:	f7ff fcf9 	bl	8017124 <_ZSt9terminatev>
 8017732:	f000 f851 	bl	80177d8 <__cxa_begin_catch>
 8017736:	f000 f8d3 	bl	80178e0 <__cxa_get_globals_fast>
 801773a:	6803      	ldr	r3, [r0, #0]
 801773c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8017740:	f10d 0a10 	add.w	sl, sp, #16
 8017744:	2a01      	cmp	r2, #1
 8017746:	bf0c      	ite	eq
 8017748:	681a      	ldreq	r2, [r3, #0]
 801774a:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 801774e:	f04f 0800 	mov.w	r8, #0
 8017752:	3320      	adds	r3, #32
 8017754:	f84a 2d08 	str.w	r2, [sl, #-8]!
 8017758:	f027 0b03 	bic.w	fp, r7, #3
 801775c:	9301      	str	r3, [sp, #4]
 801775e:	46c1      	mov	r9, r8
 8017760:	45b1      	cmp	r9, r6
 8017762:	da1b      	bge.n	801779c <__cxa_call_unexpected+0xa0>
 8017764:	6827      	ldr	r7, [r4, #0]
 8017766:	b107      	cbz	r7, 801776a <__cxa_call_unexpected+0x6e>
 8017768:	4427      	add	r7, r4
 801776a:	4653      	mov	r3, sl
 801776c:	2200      	movs	r2, #0
 801776e:	4639      	mov	r1, r7
 8017770:	9801      	ldr	r0, [sp, #4]
 8017772:	f7ff fed3 	bl	801751c <__cxa_type_match>
 8017776:	b9e8      	cbnz	r0, 80177b4 <__cxa_call_unexpected+0xb8>
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	4914      	ldr	r1, [pc, #80]	; (80177cc <__cxa_call_unexpected+0xd0>)
 801777c:	691b      	ldr	r3, [r3, #16]
 801777e:	9300      	str	r3, [sp, #0]
 8017780:	aa04      	add	r2, sp, #16
 8017782:	2301      	movs	r3, #1
 8017784:	f842 0d04 	str.w	r0, [r2, #-4]!
 8017788:	4638      	mov	r0, r7
 801778a:	9f00      	ldr	r7, [sp, #0]
 801778c:	47b8      	blx	r7
 801778e:	2800      	cmp	r0, #0
 8017790:	bf18      	it	ne
 8017792:	4680      	movne	r8, r0
 8017794:	f109 0901 	add.w	r9, r9, #1
 8017798:	445c      	add	r4, fp
 801779a:	e7e1      	b.n	8017760 <__cxa_call_unexpected+0x64>
 801779c:	f1b8 0f00 	cmp.w	r8, #0
 80177a0:	d010      	beq.n	80177c4 <__cxa_call_unexpected+0xc8>
 80177a2:	2004      	movs	r0, #4
 80177a4:	f7ff fc5e 	bl	8017064 <__cxa_allocate_exception>
 80177a8:	4b09      	ldr	r3, [pc, #36]	; (80177d0 <__cxa_call_unexpected+0xd4>)
 80177aa:	6003      	str	r3, [r0, #0]
 80177ac:	4a09      	ldr	r2, [pc, #36]	; (80177d4 <__cxa_call_unexpected+0xd8>)
 80177ae:	4907      	ldr	r1, [pc, #28]	; (80177cc <__cxa_call_unexpected+0xd0>)
 80177b0:	f7ff fd2e 	bl	8017210 <__cxa_throw>
 80177b4:	f7ff fd48 	bl	8017248 <__cxa_rethrow>
 80177b8:	f000 f84e 	bl	8017858 <__cxa_end_catch>
 80177bc:	f000 f84c 	bl	8017858 <__cxa_end_catch>
 80177c0:	f7ff fea6 	bl	8017510 <__cxa_end_cleanup>
 80177c4:	4628      	mov	r0, r5
 80177c6:	f7ff fc99 	bl	80170fc <_ZN10__cxxabiv111__terminateEPFvvE>
 80177ca:	bf00      	nop
 80177cc:	08093dbc 	.word	0x08093dbc
 80177d0:	08093e40 	.word	0x08093e40
 80177d4:	080170e1 	.word	0x080170e1

080177d8 <__cxa_begin_catch>:
 80177d8:	b538      	push	{r3, r4, r5, lr}
 80177da:	4604      	mov	r4, r0
 80177dc:	f000 f884 	bl	80178e8 <__cxa_get_globals>
 80177e0:	7822      	ldrb	r2, [r4, #0]
 80177e2:	6803      	ldr	r3, [r0, #0]
 80177e4:	2a47      	cmp	r2, #71	; 0x47
 80177e6:	f1a4 0120 	sub.w	r1, r4, #32
 80177ea:	d004      	beq.n	80177f6 <__cxa_begin_catch+0x1e>
 80177ec:	bb8b      	cbnz	r3, 8017852 <__cxa_begin_catch+0x7a>
 80177ee:	461c      	mov	r4, r3
 80177f0:	6001      	str	r1, [r0, #0]
 80177f2:	4620      	mov	r0, r4
 80177f4:	bd38      	pop	{r3, r4, r5, pc}
 80177f6:	7862      	ldrb	r2, [r4, #1]
 80177f8:	2a4e      	cmp	r2, #78	; 0x4e
 80177fa:	d1f7      	bne.n	80177ec <__cxa_begin_catch+0x14>
 80177fc:	78a2      	ldrb	r2, [r4, #2]
 80177fe:	2a55      	cmp	r2, #85	; 0x55
 8017800:	d1f4      	bne.n	80177ec <__cxa_begin_catch+0x14>
 8017802:	78e2      	ldrb	r2, [r4, #3]
 8017804:	2a43      	cmp	r2, #67	; 0x43
 8017806:	d1f1      	bne.n	80177ec <__cxa_begin_catch+0x14>
 8017808:	7922      	ldrb	r2, [r4, #4]
 801780a:	2a43      	cmp	r2, #67	; 0x43
 801780c:	d1ee      	bne.n	80177ec <__cxa_begin_catch+0x14>
 801780e:	7962      	ldrb	r2, [r4, #5]
 8017810:	2a2b      	cmp	r2, #43	; 0x2b
 8017812:	d1eb      	bne.n	80177ec <__cxa_begin_catch+0x14>
 8017814:	79a2      	ldrb	r2, [r4, #6]
 8017816:	2a2b      	cmp	r2, #43	; 0x2b
 8017818:	d1e8      	bne.n	80177ec <__cxa_begin_catch+0x14>
 801781a:	79e2      	ldrb	r2, [r4, #7]
 801781c:	2a01      	cmp	r2, #1
 801781e:	d8e5      	bhi.n	80177ec <__cxa_begin_catch+0x14>
 8017820:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8017824:	2a00      	cmp	r2, #0
 8017826:	db11      	blt.n	801784c <__cxa_begin_catch+0x74>
 8017828:	3201      	adds	r2, #1
 801782a:	6845      	ldr	r5, [r0, #4]
 801782c:	f844 2c0c 	str.w	r2, [r4, #-12]
 8017830:	428b      	cmp	r3, r1
 8017832:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8017836:	6045      	str	r5, [r0, #4]
 8017838:	bf1c      	itt	ne
 801783a:	f844 3c10 	strne.w	r3, [r4, #-16]
 801783e:	6001      	strne	r1, [r0, #0]
 8017840:	4620      	mov	r0, r4
 8017842:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8017844:	f7f0 fa88 	bl	8007d58 <_Unwind_Complete>
 8017848:	4620      	mov	r0, r4
 801784a:	bd38      	pop	{r3, r4, r5, pc}
 801784c:	f1c2 0201 	rsb	r2, r2, #1
 8017850:	e7eb      	b.n	801782a <__cxa_begin_catch+0x52>
 8017852:	f7ff fc67 	bl	8017124 <_ZSt9terminatev>
 8017856:	bf00      	nop

08017858 <__cxa_end_catch>:
 8017858:	b508      	push	{r3, lr}
 801785a:	f000 f841 	bl	80178e0 <__cxa_get_globals_fast>
 801785e:	4602      	mov	r2, r0
 8017860:	6800      	ldr	r0, [r0, #0]
 8017862:	b370      	cbz	r0, 80178c2 <__cxa_end_catch+0x6a>
 8017864:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017868:	2b47      	cmp	r3, #71	; 0x47
 801786a:	d006      	beq.n	801787a <__cxa_end_catch+0x22>
 801786c:	2300      	movs	r3, #0
 801786e:	6013      	str	r3, [r2, #0]
 8017870:	3020      	adds	r0, #32
 8017872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017876:	f7f0 ba71 	b.w	8007d5c <_Unwind_DeleteException>
 801787a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801787e:	2b4e      	cmp	r3, #78	; 0x4e
 8017880:	d1f4      	bne.n	801786c <__cxa_end_catch+0x14>
 8017882:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8017886:	2b55      	cmp	r3, #85	; 0x55
 8017888:	d1f0      	bne.n	801786c <__cxa_end_catch+0x14>
 801788a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801788e:	2b43      	cmp	r3, #67	; 0x43
 8017890:	d1ec      	bne.n	801786c <__cxa_end_catch+0x14>
 8017892:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8017896:	2b43      	cmp	r3, #67	; 0x43
 8017898:	d1e8      	bne.n	801786c <__cxa_end_catch+0x14>
 801789a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801789e:	2b2b      	cmp	r3, #43	; 0x2b
 80178a0:	d1e4      	bne.n	801786c <__cxa_end_catch+0x14>
 80178a2:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80178a6:	2b2b      	cmp	r3, #43	; 0x2b
 80178a8:	d1e0      	bne.n	801786c <__cxa_end_catch+0x14>
 80178aa:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80178ae:	2b01      	cmp	r3, #1
 80178b0:	d8dc      	bhi.n	801786c <__cxa_end_catch+0x14>
 80178b2:	6943      	ldr	r3, [r0, #20]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	db05      	blt.n	80178c4 <__cxa_end_catch+0x6c>
 80178b8:	3b01      	subs	r3, #1
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d007      	beq.n	80178ce <__cxa_end_catch+0x76>
 80178be:	db0d      	blt.n	80178dc <__cxa_end_catch+0x84>
 80178c0:	6143      	str	r3, [r0, #20]
 80178c2:	bd08      	pop	{r3, pc}
 80178c4:	3301      	adds	r3, #1
 80178c6:	d1fb      	bne.n	80178c0 <__cxa_end_catch+0x68>
 80178c8:	6901      	ldr	r1, [r0, #16]
 80178ca:	6011      	str	r1, [r2, #0]
 80178cc:	e7f8      	b.n	80178c0 <__cxa_end_catch+0x68>
 80178ce:	6903      	ldr	r3, [r0, #16]
 80178d0:	6013      	str	r3, [r2, #0]
 80178d2:	3020      	adds	r0, #32
 80178d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80178d8:	f7f0 ba40 	b.w	8007d5c <_Unwind_DeleteException>
 80178dc:	f7ff fc22 	bl	8017124 <_ZSt9terminatev>

080178e0 <__cxa_get_globals_fast>:
 80178e0:	4800      	ldr	r0, [pc, #0]	; (80178e4 <__cxa_get_globals_fast+0x4>)
 80178e2:	4770      	bx	lr
 80178e4:	2001b9d4 	.word	0x2001b9d4

080178e8 <__cxa_get_globals>:
 80178e8:	4800      	ldr	r0, [pc, #0]	; (80178ec <__cxa_get_globals+0x4>)
 80178ea:	4770      	bx	lr
 80178ec:	2001b9d4 	.word	0x2001b9d4

080178f0 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80178f0:	2850      	cmp	r0, #80	; 0x50
 80178f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178f4:	d01c      	beq.n	8017930 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80178f6:	f000 040f 	and.w	r4, r0, #15
 80178fa:	2c0c      	cmp	r4, #12
 80178fc:	d856      	bhi.n	80179ac <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 80178fe:	e8df f004 	tbb	[pc, r4]
 8017902:	4107      	.short	0x4107
 8017904:	551f0751 	.word	0x551f0751
 8017908:	27555555 	.word	0x27555555
 801790c:	0723      	.short	0x0723
 801790e:	1f          	.byte	0x1f
 801790f:	00          	.byte	0x00
 8017910:	4614      	mov	r4, r2
 8017912:	f854 5b04 	ldr.w	r5, [r4], #4
 8017916:	b145      	cbz	r5, 801792a <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 8017918:	f000 0670 	and.w	r6, r0, #112	; 0x70
 801791c:	2e10      	cmp	r6, #16
 801791e:	bf08      	it	eq
 8017920:	4611      	moveq	r1, r2
 8017922:	440d      	add	r5, r1
 8017924:	0602      	lsls	r2, r0, #24
 8017926:	bf48      	it	mi
 8017928:	682d      	ldrmi	r5, [r5, #0]
 801792a:	601d      	str	r5, [r3, #0]
 801792c:	4620      	mov	r0, r4
 801792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017930:	3203      	adds	r2, #3
 8017932:	f022 0403 	bic.w	r4, r2, #3
 8017936:	f854 5b04 	ldr.w	r5, [r4], #4
 801793a:	601d      	str	r5, [r3, #0]
 801793c:	4620      	mov	r0, r4
 801793e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017940:	4614      	mov	r4, r2
 8017942:	f854 5b08 	ldr.w	r5, [r4], #8
 8017946:	e7e6      	b.n	8017916 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8017948:	4614      	mov	r4, r2
 801794a:	f934 5b02 	ldrsh.w	r5, [r4], #2
 801794e:	e7e2      	b.n	8017916 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8017950:	2500      	movs	r5, #0
 8017952:	462f      	mov	r7, r5
 8017954:	4614      	mov	r4, r2
 8017956:	f814 cb01 	ldrb.w	ip, [r4], #1
 801795a:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 801795e:	40be      	lsls	r6, r7
 8017960:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8017964:	ea45 0506 	orr.w	r5, r5, r6
 8017968:	f107 0707 	add.w	r7, r7, #7
 801796c:	d1f3      	bne.n	8017956 <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 801796e:	2f1f      	cmp	r7, #31
 8017970:	d8d1      	bhi.n	8017916 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8017972:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017976:	d0ce      	beq.n	8017916 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8017978:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801797c:	fa06 f707 	lsl.w	r7, r6, r7
 8017980:	433d      	orrs	r5, r7
 8017982:	e7c9      	b.n	8017918 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8017984:	2500      	movs	r5, #0
 8017986:	462f      	mov	r7, r5
 8017988:	4614      	mov	r4, r2
 801798a:	f814 cb01 	ldrb.w	ip, [r4], #1
 801798e:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 8017992:	40be      	lsls	r6, r7
 8017994:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8017998:	ea45 0506 	orr.w	r5, r5, r6
 801799c:	f107 0707 	add.w	r7, r7, #7
 80179a0:	d1f3      	bne.n	801798a <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 80179a2:	e7b8      	b.n	8017916 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80179a4:	4614      	mov	r4, r2
 80179a6:	f834 5b02 	ldrh.w	r5, [r4], #2
 80179aa:	e7b4      	b.n	8017916 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80179ac:	f000 fbb8 	bl	8018120 <abort>

080179b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 80179b0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80179b4:	2820      	cmp	r0, #32
 80179b6:	d011      	beq.n	80179dc <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 80179b8:	d90b      	bls.n	80179d2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 80179ba:	2840      	cmp	r0, #64	; 0x40
 80179bc:	d006      	beq.n	80179cc <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 80179be:	2850      	cmp	r0, #80	; 0x50
 80179c0:	d00a      	beq.n	80179d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 80179c2:	2830      	cmp	r0, #48	; 0x30
 80179c4:	d10d      	bne.n	80179e2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 80179c6:	4608      	mov	r0, r1
 80179c8:	f7f0 bf84 	b.w	80088d4 <_Unwind_GetDataRelBase>
 80179cc:	4608      	mov	r0, r1
 80179ce:	f7f0 bf71 	b.w	80088b4 <_Unwind_GetRegionStart>
 80179d2:	b108      	cbz	r0, 80179d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 80179d4:	2810      	cmp	r0, #16
 80179d6:	d104      	bne.n	80179e2 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 80179d8:	2000      	movs	r0, #0
 80179da:	4770      	bx	lr
 80179dc:	4608      	mov	r0, r1
 80179de:	f7f0 bf7d 	b.w	80088dc <_Unwind_GetTextRelBase>
 80179e2:	b508      	push	{r3, lr}
 80179e4:	f000 fb9c 	bl	8018120 <abort>

080179e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80179e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ea:	460c      	mov	r4, r1
 80179ec:	4615      	mov	r5, r2
 80179ee:	4607      	mov	r7, r0
 80179f0:	b108      	cbz	r0, 80179f6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80179f2:	f7f0 ff5f 	bl	80088b4 <_Unwind_GetRegionStart>
 80179f6:	6028      	str	r0, [r5, #0]
 80179f8:	7826      	ldrb	r6, [r4, #0]
 80179fa:	2eff      	cmp	r6, #255	; 0xff
 80179fc:	f104 0401 	add.w	r4, r4, #1
 8017a00:	d129      	bne.n	8017a56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 8017a02:	6068      	str	r0, [r5, #4]
 8017a04:	7823      	ldrb	r3, [r4, #0]
 8017a06:	752b      	strb	r3, [r5, #20]
 8017a08:	2bff      	cmp	r3, #255	; 0xff
 8017a0a:	f104 0001 	add.w	r0, r4, #1
 8017a0e:	d032      	beq.n	8017a76 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 8017a10:	2310      	movs	r3, #16
 8017a12:	2400      	movs	r4, #0
 8017a14:	752b      	strb	r3, [r5, #20]
 8017a16:	4622      	mov	r2, r4
 8017a18:	f810 1b01 	ldrb.w	r1, [r0], #1
 8017a1c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8017a20:	4093      	lsls	r3, r2
 8017a22:	0609      	lsls	r1, r1, #24
 8017a24:	ea44 0403 	orr.w	r4, r4, r3
 8017a28:	f102 0207 	add.w	r2, r2, #7
 8017a2c:	d4f4      	bmi.n	8017a18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 8017a2e:	4404      	add	r4, r0
 8017a30:	60ec      	str	r4, [r5, #12]
 8017a32:	7803      	ldrb	r3, [r0, #0]
 8017a34:	756b      	strb	r3, [r5, #21]
 8017a36:	2400      	movs	r4, #0
 8017a38:	3001      	adds	r0, #1
 8017a3a:	4622      	mov	r2, r4
 8017a3c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8017a40:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8017a44:	4093      	lsls	r3, r2
 8017a46:	431c      	orrs	r4, r3
 8017a48:	060b      	lsls	r3, r1, #24
 8017a4a:	f102 0207 	add.w	r2, r2, #7
 8017a4e:	d4f5      	bmi.n	8017a3c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8017a50:	4404      	add	r4, r0
 8017a52:	612c      	str	r4, [r5, #16]
 8017a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a56:	4639      	mov	r1, r7
 8017a58:	4630      	mov	r0, r6
 8017a5a:	f7ff ffa9 	bl	80179b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8017a5e:	4622      	mov	r2, r4
 8017a60:	4601      	mov	r1, r0
 8017a62:	1d2b      	adds	r3, r5, #4
 8017a64:	4630      	mov	r0, r6
 8017a66:	f7ff ff43 	bl	80178f0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8017a6a:	4604      	mov	r4, r0
 8017a6c:	1c60      	adds	r0, r4, #1
 8017a6e:	7823      	ldrb	r3, [r4, #0]
 8017a70:	752b      	strb	r3, [r5, #20]
 8017a72:	2bff      	cmp	r3, #255	; 0xff
 8017a74:	d1cc      	bne.n	8017a10 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 8017a76:	2300      	movs	r3, #0
 8017a78:	60eb      	str	r3, [r5, #12]
 8017a7a:	e7da      	b.n	8017a32 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

08017a7c <__gxx_personality_v0>:
 8017a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a80:	f000 0403 	and.w	r4, r0, #3
 8017a84:	b099      	sub	sp, #100	; 0x64
 8017a86:	2300      	movs	r3, #0
 8017a88:	2c01      	cmp	r4, #1
 8017a8a:	4688      	mov	r8, r1
 8017a8c:	4617      	mov	r7, r2
 8017a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8017a90:	f000 8096 	beq.w	8017bc0 <__gxx_personality_v0+0x144>
 8017a94:	d30d      	bcc.n	8017ab2 <__gxx_personality_v0+0x36>
 8017a96:	2c02      	cmp	r4, #2
 8017a98:	f040 825f 	bne.w	8017f5a <__gxx_personality_v0+0x4de>
 8017a9c:	4639      	mov	r1, r7
 8017a9e:	4640      	mov	r0, r8
 8017aa0:	f7f0 fef4 	bl	800888c <__gnu_unwind_frame>
 8017aa4:	2800      	cmp	r0, #0
 8017aa6:	f000 809b 	beq.w	8017be0 <__gxx_personality_v0+0x164>
 8017aaa:	2009      	movs	r0, #9
 8017aac:	b019      	add	sp, #100	; 0x64
 8017aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab2:	0702      	lsls	r2, r0, #28
 8017ab4:	d4f2      	bmi.n	8017a9c <__gxx_personality_v0+0x20>
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	9304      	str	r3, [sp, #16]
 8017aba:	aa18      	add	r2, sp, #96	; 0x60
 8017abc:	2300      	movs	r3, #0
 8017abe:	f842 8d2c 	str.w	r8, [r2, #-44]!
 8017ac2:	4619      	mov	r1, r3
 8017ac4:	9200      	str	r2, [sp, #0]
 8017ac6:	4638      	mov	r0, r7
 8017ac8:	220c      	movs	r2, #12
 8017aca:	f7f0 f96f 	bl	8007dac <_Unwind_VRS_Set>
 8017ace:	4638      	mov	r0, r7
 8017ad0:	f7f0 fef6 	bl	80088c0 <_Unwind_GetLanguageSpecificData>
 8017ad4:	9005      	str	r0, [sp, #20]
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d0e0      	beq.n	8017a9c <__gxx_personality_v0+0x20>
 8017ada:	ab12      	add	r3, sp, #72	; 0x48
 8017adc:	461a      	mov	r2, r3
 8017ade:	9905      	ldr	r1, [sp, #20]
 8017ae0:	9306      	str	r3, [sp, #24]
 8017ae2:	4638      	mov	r0, r7
 8017ae4:	f7ff ff80 	bl	80179e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8017ae8:	4605      	mov	r5, r0
 8017aea:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017aee:	28ff      	cmp	r0, #255	; 0xff
 8017af0:	f000 80e5 	beq.w	8017cbe <__gxx_personality_v0+0x242>
 8017af4:	4639      	mov	r1, r7
 8017af6:	f7ff ff5b 	bl	80179b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8017afa:	4604      	mov	r4, r0
 8017afc:	2300      	movs	r3, #0
 8017afe:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 8017b02:	4619      	mov	r1, r3
 8017b04:	f8cd b000 	str.w	fp, [sp]
 8017b08:	220f      	movs	r2, #15
 8017b0a:	4638      	mov	r0, r7
 8017b0c:	9414      	str	r4, [sp, #80]	; 0x50
 8017b0e:	f7f0 f92b 	bl	8007d68 <_Unwind_VRS_Get>
 8017b12:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017b14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017b16:	f026 0601 	bic.w	r6, r6, #1
 8017b1a:	429d      	cmp	r5, r3
 8017b1c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8017b20:	f080 80d4 	bcs.w	8017ccc <__gxx_personality_v0+0x250>
 8017b24:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8017b28:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8017b2c:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8017b30:	2cff      	cmp	r4, #255	; 0xff
 8017b32:	f04f 0100 	mov.w	r1, #0
 8017b36:	d003      	beq.n	8017b40 <__gxx_personality_v0+0xc4>
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f7ff ff39 	bl	80179b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8017b3e:	4601      	mov	r1, r0
 8017b40:	462a      	mov	r2, r5
 8017b42:	4620      	mov	r0, r4
 8017b44:	4653      	mov	r3, sl
 8017b46:	f7ff fed3 	bl	80178f0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8017b4a:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8017b4e:	2cff      	cmp	r4, #255	; 0xff
 8017b50:	4605      	mov	r5, r0
 8017b52:	f04f 0100 	mov.w	r1, #0
 8017b56:	d003      	beq.n	8017b60 <__gxx_personality_v0+0xe4>
 8017b58:	4620      	mov	r0, r4
 8017b5a:	f7ff ff29 	bl	80179b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8017b5e:	4601      	mov	r1, r0
 8017b60:	462a      	mov	r2, r5
 8017b62:	4620      	mov	r0, r4
 8017b64:	464b      	mov	r3, r9
 8017b66:	f7ff fec3 	bl	80178f0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8017b6a:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8017b6e:	2cff      	cmp	r4, #255	; 0xff
 8017b70:	4605      	mov	r5, r0
 8017b72:	f04f 0100 	mov.w	r1, #0
 8017b76:	d003      	beq.n	8017b80 <__gxx_personality_v0+0x104>
 8017b78:	4620      	mov	r0, r4
 8017b7a:	f7ff ff19 	bl	80179b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8017b7e:	4601      	mov	r1, r0
 8017b80:	462a      	mov	r2, r5
 8017b82:	4620      	mov	r0, r4
 8017b84:	465b      	mov	r3, fp
 8017b86:	f7ff feb3 	bl	80178f0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8017b8a:	2400      	movs	r4, #0
 8017b8c:	4605      	mov	r5, r0
 8017b8e:	4621      	mov	r1, r4
 8017b90:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017b94:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8017b98:	408b      	lsls	r3, r1
 8017b9a:	431c      	orrs	r4, r3
 8017b9c:	0613      	lsls	r3, r2, #24
 8017b9e:	f101 0107 	add.w	r1, r1, #7
 8017ba2:	d4f5      	bmi.n	8017b90 <__gxx_personality_v0+0x114>
 8017ba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ba8:	4413      	add	r3, r2
 8017baa:	42b3      	cmp	r3, r6
 8017bac:	d91f      	bls.n	8017bee <__gxx_personality_v0+0x172>
 8017bae:	9b04      	ldr	r3, [sp, #16]
 8017bb0:	07db      	lsls	r3, r3, #31
 8017bb2:	f100 8091 	bmi.w	8017cd8 <__gxx_personality_v0+0x25c>
 8017bb6:	9b04      	ldr	r3, [sp, #16]
 8017bb8:	071c      	lsls	r4, r3, #28
 8017bba:	d515      	bpl.n	8017be8 <__gxx_personality_v0+0x16c>
 8017bbc:	f7ff fab2 	bl	8017124 <_ZSt9terminatev>
 8017bc0:	f010 0408 	ands.w	r4, r0, #8
 8017bc4:	d01c      	beq.n	8017c00 <__gxx_personality_v0+0x184>
 8017bc6:	aa18      	add	r2, sp, #96	; 0x60
 8017bc8:	f044 0402 	orr.w	r4, r4, #2
 8017bcc:	f842 1d2c 	str.w	r1, [r2, #-44]!
 8017bd0:	4638      	mov	r0, r7
 8017bd2:	9200      	str	r2, [sp, #0]
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	220c      	movs	r2, #12
 8017bd8:	9404      	str	r4, [sp, #16]
 8017bda:	f7f0 f8e7 	bl	8007dac <_Unwind_VRS_Set>
 8017bde:	e776      	b.n	8017ace <__gxx_personality_v0+0x52>
 8017be0:	2008      	movs	r0, #8
 8017be2:	b019      	add	sp, #100	; 0x64
 8017be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017be8:	4640      	mov	r0, r8
 8017bea:	f7ff fd77 	bl	80176dc <__cxa_call_terminate>
 8017bee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017bf0:	4413      	add	r3, r2
 8017bf2:	42b3      	cmp	r3, r6
 8017bf4:	f200 8088 	bhi.w	8017d08 <__gxx_personality_v0+0x28c>
 8017bf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017bfa:	42ab      	cmp	r3, r5
 8017bfc:	d896      	bhi.n	8017b2c <__gxx_personality_v0+0xb0>
 8017bfe:	e7d6      	b.n	8017bae <__gxx_personality_v0+0x132>
 8017c00:	ab12      	add	r3, sp, #72	; 0x48
 8017c02:	9300      	str	r3, [sp, #0]
 8017c04:	9306      	str	r3, [sp, #24]
 8017c06:	220d      	movs	r2, #13
 8017c08:	4623      	mov	r3, r4
 8017c0a:	4621      	mov	r1, r4
 8017c0c:	4638      	mov	r0, r7
 8017c0e:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8017c12:	f7f0 f8a9 	bl	8007d68 <_Unwind_VRS_Get>
 8017c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c18:	429d      	cmp	r5, r3
 8017c1a:	d002      	beq.n	8017c22 <__gxx_personality_v0+0x1a6>
 8017c1c:	2302      	movs	r3, #2
 8017c1e:	9304      	str	r3, [sp, #16]
 8017c20:	e74b      	b.n	8017aba <__gxx_personality_v0+0x3e>
 8017c22:	aa18      	add	r2, sp, #96	; 0x60
 8017c24:	4623      	mov	r3, r4
 8017c26:	f842 8d2c 	str.w	r8, [r2, #-44]!
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	9200      	str	r2, [sp, #0]
 8017c2e:	4638      	mov	r0, r7
 8017c30:	220c      	movs	r2, #12
 8017c32:	f7f0 f8bb 	bl	8007dac <_Unwind_VRS_Set>
 8017c36:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8017c3a:	9303      	str	r3, [sp, #12]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d0d3      	beq.n	8017be8 <__gxx_personality_v0+0x16c>
 8017c40:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8017c44:	461a      	mov	r2, r3
 8017c46:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8017c4a:	9305      	str	r3, [sp, #20]
 8017c4c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8017c50:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8017c54:	4613      	mov	r3, r2
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	461c      	mov	r4, r3
 8017c5a:	f2c0 8127 	blt.w	8017eac <__gxx_personality_v0+0x430>
 8017c5e:	2503      	movs	r5, #3
 8017c60:	a918      	add	r1, sp, #96	; 0x60
 8017c62:	2300      	movs	r3, #0
 8017c64:	f841 8d28 	str.w	r8, [r1, #-40]!
 8017c68:	461a      	mov	r2, r3
 8017c6a:	9100      	str	r1, [sp, #0]
 8017c6c:	4638      	mov	r0, r7
 8017c6e:	4619      	mov	r1, r3
 8017c70:	f7f0 f89c 	bl	8007dac <_Unwind_VRS_Set>
 8017c74:	2300      	movs	r3, #0
 8017c76:	4619      	mov	r1, r3
 8017c78:	2201      	movs	r2, #1
 8017c7a:	f8cd a000 	str.w	sl, [sp]
 8017c7e:	4638      	mov	r0, r7
 8017c80:	940f      	str	r4, [sp, #60]	; 0x3c
 8017c82:	f7f0 f893 	bl	8007dac <_Unwind_VRS_Set>
 8017c86:	2300      	movs	r3, #0
 8017c88:	4619      	mov	r1, r3
 8017c8a:	220f      	movs	r2, #15
 8017c8c:	f8cd 9000 	str.w	r9, [sp]
 8017c90:	4638      	mov	r0, r7
 8017c92:	f7f0 f869 	bl	8007d68 <_Unwind_VRS_Get>
 8017c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c98:	9a03      	ldr	r2, [sp, #12]
 8017c9a:	f8cd 9000 	str.w	r9, [sp]
 8017c9e:	f003 0401 	and.w	r4, r3, #1
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	4314      	orrs	r4, r2
 8017ca6:	4638      	mov	r0, r7
 8017ca8:	4619      	mov	r1, r3
 8017caa:	220f      	movs	r2, #15
 8017cac:	9410      	str	r4, [sp, #64]	; 0x40
 8017cae:	f7f0 f87d 	bl	8007dac <_Unwind_VRS_Set>
 8017cb2:	2d02      	cmp	r5, #2
 8017cb4:	d005      	beq.n	8017cc2 <__gxx_personality_v0+0x246>
 8017cb6:	2007      	movs	r0, #7
 8017cb8:	b019      	add	sp, #100	; 0x64
 8017cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cbe:	2400      	movs	r4, #0
 8017cc0:	e71c      	b.n	8017afc <__gxx_personality_v0+0x80>
 8017cc2:	4640      	mov	r0, r8
 8017cc4:	f7ff fc82 	bl	80175cc <__cxa_begin_cleanup>
 8017cc8:	2007      	movs	r0, #7
 8017cca:	e6ef      	b.n	8017aac <__gxx_personality_v0+0x30>
 8017ccc:	9b04      	ldr	r3, [sp, #16]
 8017cce:	07d9      	lsls	r1, r3, #31
 8017cd0:	f57f af71 	bpl.w	8017bb6 <__gxx_personality_v0+0x13a>
 8017cd4:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8017cd8:	2400      	movs	r4, #0
 8017cda:	9403      	str	r4, [sp, #12]
 8017cdc:	2300      	movs	r3, #0
 8017cde:	4619      	mov	r1, r3
 8017ce0:	220d      	movs	r2, #13
 8017ce2:	f8cd 9000 	str.w	r9, [sp]
 8017ce6:	4638      	mov	r0, r7
 8017ce8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017cea:	f7f0 f83d 	bl	8007d68 <_Unwind_VRS_Get>
 8017cee:	9a05      	ldr	r2, [sp, #20]
 8017cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cf2:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 8017cf6:	9a03      	ldr	r2, [sp, #12]
 8017cf8:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8017cfc:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 8017d00:	f8c8 3020 	str.w	r3, [r8, #32]
 8017d04:	2006      	movs	r0, #6
 8017d06:	e6d1      	b.n	8017aac <__gxx_personality_v0+0x30>
 8017d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	f43f aec6 	beq.w	8017a9c <__gxx_personality_v0+0x20>
 8017d10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d12:	189a      	adds	r2, r3, r2
 8017d14:	9203      	str	r2, [sp, #12]
 8017d16:	2c00      	cmp	r4, #0
 8017d18:	f000 80f0 	beq.w	8017efc <__gxx_personality_v0+0x480>
 8017d1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017d1e:	3c01      	subs	r4, #1
 8017d20:	4423      	add	r3, r4
 8017d22:	2a00      	cmp	r2, #0
 8017d24:	f43f aeba 	beq.w	8017a9c <__gxx_personality_v0+0x20>
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	f000 80f8 	beq.w	8017f1e <__gxx_personality_v0+0x4a2>
 8017d2e:	9a04      	ldr	r2, [sp, #16]
 8017d30:	f012 0208 	ands.w	r2, r2, #8
 8017d34:	9209      	str	r2, [sp, #36]	; 0x24
 8017d36:	f000 8103 	beq.w	8017f40 <__gxx_personality_v0+0x4c4>
 8017d3a:	2147      	movs	r1, #71	; 0x47
 8017d3c:	224e      	movs	r2, #78	; 0x4e
 8017d3e:	f888 1000 	strb.w	r1, [r8]
 8017d42:	f888 2001 	strb.w	r2, [r8, #1]
 8017d46:	2155      	movs	r1, #85	; 0x55
 8017d48:	2243      	movs	r2, #67	; 0x43
 8017d4a:	f888 1002 	strb.w	r1, [r8, #2]
 8017d4e:	f888 2003 	strb.w	r2, [r8, #3]
 8017d52:	2146      	movs	r1, #70	; 0x46
 8017d54:	224f      	movs	r2, #79	; 0x4f
 8017d56:	f888 1004 	strb.w	r1, [r8, #4]
 8017d5a:	f888 2005 	strb.w	r2, [r8, #5]
 8017d5e:	2152      	movs	r1, #82	; 0x52
 8017d60:	2200      	movs	r2, #0
 8017d62:	f888 1006 	strb.w	r1, [r8, #6]
 8017d66:	f888 2007 	strb.w	r2, [r8, #7]
 8017d6a:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 8017d6e:	2200      	movs	r2, #0
 8017d70:	9207      	str	r2, [sp, #28]
 8017d72:	f8cd 9020 	str.w	r9, [sp, #32]
 8017d76:	2400      	movs	r4, #0
 8017d78:	4621      	mov	r1, r4
 8017d7a:	e000      	b.n	8017d7e <__gxx_personality_v0+0x302>
 8017d7c:	462b      	mov	r3, r5
 8017d7e:	461d      	mov	r5, r3
 8017d80:	f815 0b01 	ldrb.w	r0, [r5], #1
 8017d84:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8017d88:	408a      	lsls	r2, r1
 8017d8a:	0606      	lsls	r6, r0, #24
 8017d8c:	ea44 0402 	orr.w	r4, r4, r2
 8017d90:	f101 0107 	add.w	r1, r1, #7
 8017d94:	d4f2      	bmi.n	8017d7c <__gxx_personality_v0+0x300>
 8017d96:	291f      	cmp	r1, #31
 8017d98:	d805      	bhi.n	8017da6 <__gxx_personality_v0+0x32a>
 8017d9a:	0640      	lsls	r0, r0, #25
 8017d9c:	d503      	bpl.n	8017da6 <__gxx_personality_v0+0x32a>
 8017d9e:	2201      	movs	r2, #1
 8017da0:	408a      	lsls	r2, r1
 8017da2:	4252      	negs	r2, r2
 8017da4:	4314      	orrs	r4, r2
 8017da6:	2600      	movs	r6, #0
 8017da8:	4631      	mov	r1, r6
 8017daa:	46a1      	mov	r9, r4
 8017dac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8017db0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8017db4:	408a      	lsls	r2, r1
 8017db6:	4316      	orrs	r6, r2
 8017db8:	0602      	lsls	r2, r0, #24
 8017dba:	f101 0107 	add.w	r1, r1, #7
 8017dbe:	d4f5      	bmi.n	8017dac <__gxx_personality_v0+0x330>
 8017dc0:	291f      	cmp	r1, #31
 8017dc2:	d805      	bhi.n	8017dd0 <__gxx_personality_v0+0x354>
 8017dc4:	0647      	lsls	r7, r0, #25
 8017dc6:	d503      	bpl.n	8017dd0 <__gxx_personality_v0+0x354>
 8017dc8:	2301      	movs	r3, #1
 8017dca:	408b      	lsls	r3, r1
 8017dcc:	425b      	negs	r3, r3
 8017dce:	431e      	orrs	r6, r3
 8017dd0:	2c00      	cmp	r4, #0
 8017dd2:	d04c      	beq.n	8017e6e <__gxx_personality_v0+0x3f2>
 8017dd4:	dc4e      	bgt.n	8017e74 <__gxx_personality_v0+0x3f8>
 8017dd6:	f104 0a01 	add.w	sl, r4, #1
 8017dda:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 8017dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017de0:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8017de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017de8:	f1b8 0f00 	cmp.w	r8, #0
 8017dec:	d001      	beq.n	8017df2 <__gxx_personality_v0+0x376>
 8017dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017df0:	b12b      	cbz	r3, 8017dfe <__gxx_personality_v0+0x382>
 8017df2:	b351      	cbz	r1, 8017e4a <__gxx_personality_v0+0x3ce>
 8017df4:	2e00      	cmp	r6, #0
 8017df6:	f000 808b 	beq.w	8017f10 <__gxx_personality_v0+0x494>
 8017dfa:	19ab      	adds	r3, r5, r6
 8017dfc:	e7bb      	b.n	8017d76 <__gxx_personality_v0+0x2fa>
 8017dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e00:	9311      	str	r3, [sp, #68]	; 0x44
 8017e02:	b929      	cbnz	r1, 8017e10 <__gxx_personality_v0+0x394>
 8017e04:	e091      	b.n	8017f2a <__gxx_personality_v0+0x4ae>
 8017e06:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8017e0a:	2900      	cmp	r1, #0
 8017e0c:	f000 808d 	beq.w	8017f2a <__gxx_personality_v0+0x4ae>
 8017e10:	4439      	add	r1, r7
 8017e12:	465b      	mov	r3, fp
 8017e14:	2200      	movs	r2, #0
 8017e16:	4640      	mov	r0, r8
 8017e18:	f7ff fb80 	bl	801751c <__cxa_type_match>
 8017e1c:	2800      	cmp	r0, #0
 8017e1e:	d0f2      	beq.n	8017e06 <__gxx_personality_v0+0x38a>
 8017e20:	e7e8      	b.n	8017df4 <__gxx_personality_v0+0x378>
 8017e22:	00e2      	lsls	r2, r4, #3
 8017e24:	4252      	negs	r2, r2
 8017e26:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 8017e2a:	441a      	add	r2, r3
 8017e2c:	9b08      	ldr	r3, [sp, #32]
 8017e2e:	f7ff fd5f 	bl	80178f0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8017e32:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017e34:	b149      	cbz	r1, 8017e4a <__gxx_personality_v0+0x3ce>
 8017e36:	f1b8 0f00 	cmp.w	r8, #0
 8017e3a:	d0db      	beq.n	8017df4 <__gxx_personality_v0+0x378>
 8017e3c:	ab0c      	add	r3, sp, #48	; 0x30
 8017e3e:	2200      	movs	r2, #0
 8017e40:	4640      	mov	r0, r8
 8017e42:	f7ff fb6b 	bl	801751c <__cxa_type_match>
 8017e46:	2800      	cmp	r0, #0
 8017e48:	d0d4      	beq.n	8017df4 <__gxx_personality_v0+0x378>
 8017e4a:	9b04      	ldr	r3, [sp, #16]
 8017e4c:	07d8      	lsls	r0, r3, #31
 8017e4e:	464a      	mov	r2, r9
 8017e50:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8017e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017e58:	f53f af40 	bmi.w	8017cdc <__gxx_personality_v0+0x260>
 8017e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	f43f aef8 	beq.w	8017c54 <__gxx_personality_v0+0x1d8>
 8017e64:	2c00      	cmp	r4, #0
 8017e66:	f6bf aefa 	bge.w	8017c5e <__gxx_personality_v0+0x1e2>
 8017e6a:	f7ff f969 	bl	8017140 <_ZSt10unexpectedv>
 8017e6e:	2301      	movs	r3, #1
 8017e70:	9307      	str	r3, [sp, #28]
 8017e72:	e7bf      	b.n	8017df4 <__gxx_personality_v0+0x378>
 8017e74:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017e78:	28ff      	cmp	r0, #255	; 0xff
 8017e7a:	d03b      	beq.n	8017ef4 <__gxx_personality_v0+0x478>
 8017e7c:	f000 0307 	and.w	r3, r0, #7
 8017e80:	2b04      	cmp	r3, #4
 8017e82:	d86a      	bhi.n	8017f5a <__gxx_personality_v0+0x4de>
 8017e84:	a201      	add	r2, pc, #4	; (adr r2, 8017e8c <__gxx_personality_v0+0x410>)
 8017e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e8a:	bf00      	nop
 8017e8c:	08017ea7 	.word	0x08017ea7
 8017e90:	08017f5b 	.word	0x08017f5b
 8017e94:	08017ea1 	.word	0x08017ea1
 8017e98:	08017ea7 	.word	0x08017ea7
 8017e9c:	08017e23 	.word	0x08017e23
 8017ea0:	0062      	lsls	r2, r4, #1
 8017ea2:	4252      	negs	r2, r2
 8017ea4:	e7bf      	b.n	8017e26 <__gxx_personality_v0+0x3aa>
 8017ea6:	00a2      	lsls	r2, r4, #2
 8017ea8:	4252      	negs	r2, r2
 8017eaa:	e7bc      	b.n	8017e26 <__gxx_personality_v0+0x3aa>
 8017eac:	3301      	adds	r3, #1
 8017eae:	461d      	mov	r5, r3
 8017eb0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8017eb4:	4638      	mov	r0, r7
 8017eb6:	f7ff fd97 	bl	80179e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8017eba:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017ebe:	28ff      	cmp	r0, #255	; 0xff
 8017ec0:	d01a      	beq.n	8017ef8 <__gxx_personality_v0+0x47c>
 8017ec2:	4639      	mov	r1, r7
 8017ec4:	f7ff fd74 	bl	80179b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8017ec8:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 8017ecc:	0092      	lsls	r2, r2, #2
 8017ece:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8017ed0:	9014      	str	r0, [sp, #80]	; 0x50
 8017ed2:	58ab      	ldr	r3, [r5, r2]
 8017ed4:	4415      	add	r5, r2
 8017ed6:	b133      	cbz	r3, 8017ee6 <__gxx_personality_v0+0x46a>
 8017ed8:	462a      	mov	r2, r5
 8017eda:	2300      	movs	r3, #0
 8017edc:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	2900      	cmp	r1, #0
 8017ee4:	d1fa      	bne.n	8017edc <__gxx_personality_v0+0x460>
 8017ee6:	2204      	movs	r2, #4
 8017ee8:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 8017eec:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 8017ef0:	2503      	movs	r5, #3
 8017ef2:	e6b5      	b.n	8017c60 <__gxx_personality_v0+0x1e4>
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	e796      	b.n	8017e26 <__gxx_personality_v0+0x3aa>
 8017ef8:	2000      	movs	r0, #0
 8017efa:	e7e5      	b.n	8017ec8 <__gxx_personality_v0+0x44c>
 8017efc:	9b03      	ldr	r3, [sp, #12]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	f43f adcc 	beq.w	8017a9c <__gxx_personality_v0+0x20>
 8017f04:	9b04      	ldr	r3, [sp, #16]
 8017f06:	07da      	lsls	r2, r3, #31
 8017f08:	f53f adc8 	bmi.w	8017a9c <__gxx_personality_v0+0x20>
 8017f0c:	2502      	movs	r5, #2
 8017f0e:	e6a7      	b.n	8017c60 <__gxx_personality_v0+0x1e4>
 8017f10:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 8017f14:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f43f adbf 	beq.w	8017a9c <__gxx_personality_v0+0x20>
 8017f1e:	9b04      	ldr	r3, [sp, #16]
 8017f20:	07dd      	lsls	r5, r3, #31
 8017f22:	f53f adbb 	bmi.w	8017a9c <__gxx_personality_v0+0x20>
 8017f26:	2400      	movs	r4, #0
 8017f28:	e7f0      	b.n	8017f0c <__gxx_personality_v0+0x490>
 8017f2a:	9b04      	ldr	r3, [sp, #16]
 8017f2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017f2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017f32:	07de      	lsls	r6, r3, #31
 8017f34:	4655      	mov	r5, sl
 8017f36:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8017f3a:	f53f aecf 	bmi.w	8017cdc <__gxx_personality_v0+0x260>
 8017f3e:	e7b7      	b.n	8017eb0 <__gxx_personality_v0+0x434>
 8017f40:	f898 2007 	ldrb.w	r2, [r8, #7]
 8017f44:	2a01      	cmp	r2, #1
 8017f46:	bf0c      	ite	eq
 8017f48:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 8017f4c:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 8017f50:	920c      	str	r2, [sp, #48]	; 0x30
 8017f52:	e70a      	b.n	8017d6a <__gxx_personality_v0+0x2ee>
 8017f54:	f7ff fc40 	bl	80177d8 <__cxa_begin_catch>
 8017f58:	e630      	b.n	8017bbc <__gxx_personality_v0+0x140>
 8017f5a:	f000 f8e1 	bl	8018120 <abort>
 8017f5e:	bf00      	nop

08017f60 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8017f60:	b570      	push	{r4, r5, r6, lr}
 8017f62:	4b3c      	ldr	r3, [pc, #240]	; (8018054 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 8017f64:	781a      	ldrb	r2, [r3, #0]
 8017f66:	b082      	sub	sp, #8
 8017f68:	2a00      	cmp	r2, #0
 8017f6a:	d135      	bne.n	8017fd8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 8017f6c:	2401      	movs	r4, #1
 8017f6e:	701c      	strb	r4, [r3, #0]
 8017f70:	f000 f87e 	bl	8018070 <__cxa_current_exception_type>
 8017f74:	2800      	cmp	r0, #0
 8017f76:	d03d      	beq.n	8017ff4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 8017f78:	6844      	ldr	r4, [r0, #4]
 8017f7a:	4d37      	ldr	r5, [pc, #220]	; (8018058 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8017f7c:	7823      	ldrb	r3, [r4, #0]
 8017f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8017f80:	ab02      	add	r3, sp, #8
 8017f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017f86:	bf08      	it	eq
 8017f88:	3401      	addeq	r4, #1
 8017f8a:	f843 2d04 	str.w	r2, [r3, #-4]!
 8017f8e:	2200      	movs	r2, #0
 8017f90:	4611      	mov	r1, r2
 8017f92:	4620      	mov	r0, r4
 8017f94:	f7ee fe34 	bl	8006c00 <__cxa_demangle>
 8017f98:	682b      	ldr	r3, [r5, #0]
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	68db      	ldr	r3, [r3, #12]
 8017f9e:	482f      	ldr	r0, [pc, #188]	; (801805c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8017fa0:	2230      	movs	r2, #48	; 0x30
 8017fa2:	2101      	movs	r1, #1
 8017fa4:	f000 fad0 	bl	8018548 <fwrite>
 8017fa8:	9b01      	ldr	r3, [sp, #4]
 8017faa:	b17b      	cbz	r3, 8017fcc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8017fac:	682b      	ldr	r3, [r5, #0]
 8017fae:	4620      	mov	r0, r4
 8017fb0:	68d9      	ldr	r1, [r3, #12]
 8017fb2:	f000 f929 	bl	8018208 <fputs>
 8017fb6:	682b      	ldr	r3, [r5, #0]
 8017fb8:	4829      	ldr	r0, [pc, #164]	; (8018060 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	2202      	movs	r2, #2
 8017fbe:	2101      	movs	r1, #1
 8017fc0:	f000 fac2 	bl	8018548 <fwrite>
 8017fc4:	9b01      	ldr	r3, [sp, #4]
 8017fc6:	b18b      	cbz	r3, 8017fec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8017fc8:	f7ff f93e 	bl	8017248 <__cxa_rethrow>
 8017fcc:	682b      	ldr	r3, [r5, #0]
 8017fce:	4630      	mov	r0, r6
 8017fd0:	68d9      	ldr	r1, [r3, #12]
 8017fd2:	f000 f919 	bl	8018208 <fputs>
 8017fd6:	e7ee      	b.n	8017fb6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8017fd8:	4b1f      	ldr	r3, [pc, #124]	; (8018058 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8017fda:	4822      	ldr	r0, [pc, #136]	; (8018064 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	221d      	movs	r2, #29
 8017fe0:	68db      	ldr	r3, [r3, #12]
 8017fe2:	2101      	movs	r1, #1
 8017fe4:	f000 fab0 	bl	8018548 <fwrite>
 8017fe8:	f000 f89a 	bl	8018120 <abort>
 8017fec:	4630      	mov	r0, r6
 8017fee:	f000 fae9 	bl	80185c4 <free>
 8017ff2:	e7e9      	b.n	8017fc8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 8017ff4:	4b18      	ldr	r3, [pc, #96]	; (8018058 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8017ff6:	481c      	ldr	r0, [pc, #112]	; (8018068 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	4621      	mov	r1, r4
 8017ffc:	68db      	ldr	r3, [r3, #12]
 8017ffe:	222d      	movs	r2, #45	; 0x2d
 8018000:	f000 faa2 	bl	8018548 <fwrite>
 8018004:	f000 f88c 	bl	8018120 <abort>
 8018008:	2901      	cmp	r1, #1
 801800a:	460c      	mov	r4, r1
 801800c:	d119      	bne.n	8018042 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 801800e:	f7ff fbe3 	bl	80177d8 <__cxa_begin_catch>
 8018012:	6803      	ldr	r3, [r0, #0]
 8018014:	689b      	ldr	r3, [r3, #8]
 8018016:	4798      	blx	r3
 8018018:	682b      	ldr	r3, [r5, #0]
 801801a:	4606      	mov	r6, r0
 801801c:	68db      	ldr	r3, [r3, #12]
 801801e:	4813      	ldr	r0, [pc, #76]	; (801806c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8018020:	4621      	mov	r1, r4
 8018022:	220b      	movs	r2, #11
 8018024:	f000 fa90 	bl	8018548 <fwrite>
 8018028:	682b      	ldr	r3, [r5, #0]
 801802a:	4630      	mov	r0, r6
 801802c:	68d9      	ldr	r1, [r3, #12]
 801802e:	f000 f8eb 	bl	8018208 <fputs>
 8018032:	682b      	ldr	r3, [r5, #0]
 8018034:	200a      	movs	r0, #10
 8018036:	68d9      	ldr	r1, [r3, #12]
 8018038:	f000 f8a4 	bl	8018184 <fputc>
 801803c:	f7ff fc0c 	bl	8017858 <__cxa_end_catch>
 8018040:	e7e0      	b.n	8018004 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 8018042:	f7ff fbc9 	bl	80177d8 <__cxa_begin_catch>
 8018046:	f7ff fc07 	bl	8017858 <__cxa_end_catch>
 801804a:	e7db      	b.n	8018004 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 801804c:	f7ff fc04 	bl	8017858 <__cxa_end_catch>
 8018050:	f7ff fa5e 	bl	8017510 <__cxa_end_cleanup>
 8018054:	2001b9e0 	.word	0x2001b9e0
 8018058:	2000002c 	.word	0x2000002c
 801805c:	08093f40 	.word	0x08093f40
 8018060:	08093f74 	.word	0x08093f74
 8018064:	08093f20 	.word	0x08093f20
 8018068:	08093f78 	.word	0x08093f78
 801806c:	08093fa8 	.word	0x08093fa8

08018070 <__cxa_current_exception_type>:
 8018070:	b508      	push	{r3, lr}
 8018072:	f7ff fc39 	bl	80178e8 <__cxa_get_globals>
 8018076:	6800      	ldr	r0, [r0, #0]
 8018078:	b130      	cbz	r0, 8018088 <__cxa_current_exception_type+0x18>
 801807a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 801807e:	6800      	ldr	r0, [r0, #0]
 8018080:	2b01      	cmp	r3, #1
 8018082:	bf08      	it	eq
 8018084:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 8018088:	bd08      	pop	{r3, pc}
 801808a:	bf00      	nop

0801808c <round>:
 801808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801808e:	ec57 6b10 	vmov	r6, r7, d0
 8018092:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8018096:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801809a:	2c13      	cmp	r4, #19
 801809c:	463b      	mov	r3, r7
 801809e:	463d      	mov	r5, r7
 80180a0:	dc17      	bgt.n	80180d2 <round+0x46>
 80180a2:	2c00      	cmp	r4, #0
 80180a4:	da09      	bge.n	80180ba <round+0x2e>
 80180a6:	3401      	adds	r4, #1
 80180a8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80180ac:	d103      	bne.n	80180b6 <round+0x2a>
 80180ae:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80180b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80180b6:	2100      	movs	r1, #0
 80180b8:	e02c      	b.n	8018114 <round+0x88>
 80180ba:	4a18      	ldr	r2, [pc, #96]	; (801811c <round+0x90>)
 80180bc:	4122      	asrs	r2, r4
 80180be:	4217      	tst	r7, r2
 80180c0:	d100      	bne.n	80180c4 <round+0x38>
 80180c2:	b19e      	cbz	r6, 80180ec <round+0x60>
 80180c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80180c8:	4123      	asrs	r3, r4
 80180ca:	442b      	add	r3, r5
 80180cc:	ea23 0302 	bic.w	r3, r3, r2
 80180d0:	e7f1      	b.n	80180b6 <round+0x2a>
 80180d2:	2c33      	cmp	r4, #51	; 0x33
 80180d4:	dd0d      	ble.n	80180f2 <round+0x66>
 80180d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80180da:	d107      	bne.n	80180ec <round+0x60>
 80180dc:	4630      	mov	r0, r6
 80180de:	4639      	mov	r1, r7
 80180e0:	ee10 2a10 	vmov	r2, s0
 80180e4:	f7ee fe6c 	bl	8006dc0 <__adddf3>
 80180e8:	4606      	mov	r6, r0
 80180ea:	460f      	mov	r7, r1
 80180ec:	ec47 6b10 	vmov	d0, r6, r7
 80180f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180f2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80180f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180fa:	40d0      	lsrs	r0, r2
 80180fc:	4206      	tst	r6, r0
 80180fe:	d0f5      	beq.n	80180ec <round+0x60>
 8018100:	2201      	movs	r2, #1
 8018102:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018106:	fa02 f404 	lsl.w	r4, r2, r4
 801810a:	1931      	adds	r1, r6, r4
 801810c:	bf28      	it	cs
 801810e:	189b      	addcs	r3, r3, r2
 8018110:	ea21 0100 	bic.w	r1, r1, r0
 8018114:	461f      	mov	r7, r3
 8018116:	460e      	mov	r6, r1
 8018118:	e7e8      	b.n	80180ec <round+0x60>
 801811a:	bf00      	nop
 801811c:	000fffff 	.word	0x000fffff

08018120 <abort>:
 8018120:	b508      	push	{r3, lr}
 8018122:	2006      	movs	r0, #6
 8018124:	f000 fef2 	bl	8018f0c <raise>
 8018128:	2001      	movs	r0, #1
 801812a:	f7fe fedd 	bl	8016ee8 <_exit>
	...

08018130 <__errno>:
 8018130:	4b01      	ldr	r3, [pc, #4]	; (8018138 <__errno+0x8>)
 8018132:	6818      	ldr	r0, [r3, #0]
 8018134:	4770      	bx	lr
 8018136:	bf00      	nop
 8018138:	2000002c 	.word	0x2000002c

0801813c <_fputc_r>:
 801813c:	b570      	push	{r4, r5, r6, lr}
 801813e:	460e      	mov	r6, r1
 8018140:	4614      	mov	r4, r2
 8018142:	4605      	mov	r5, r0
 8018144:	b118      	cbz	r0, 801814e <_fputc_r+0x12>
 8018146:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018148:	b90b      	cbnz	r3, 801814e <_fputc_r+0x12>
 801814a:	f003 f94b 	bl	801b3e4 <__sinit>
 801814e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018150:	07d8      	lsls	r0, r3, #31
 8018152:	d405      	bmi.n	8018160 <_fputc_r+0x24>
 8018154:	89a3      	ldrh	r3, [r4, #12]
 8018156:	0599      	lsls	r1, r3, #22
 8018158:	d402      	bmi.n	8018160 <_fputc_r+0x24>
 801815a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801815c:	f000 fa28 	bl	80185b0 <__retarget_lock_acquire_recursive>
 8018160:	4622      	mov	r2, r4
 8018162:	4628      	mov	r0, r5
 8018164:	4631      	mov	r1, r6
 8018166:	f000 fcb3 	bl	8018ad0 <_putc_r>
 801816a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801816c:	07da      	lsls	r2, r3, #31
 801816e:	4605      	mov	r5, r0
 8018170:	d405      	bmi.n	801817e <_fputc_r+0x42>
 8018172:	89a3      	ldrh	r3, [r4, #12]
 8018174:	059b      	lsls	r3, r3, #22
 8018176:	d402      	bmi.n	801817e <_fputc_r+0x42>
 8018178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801817a:	f000 fa1a 	bl	80185b2 <__retarget_lock_release_recursive>
 801817e:	4628      	mov	r0, r5
 8018180:	bd70      	pop	{r4, r5, r6, pc}
	...

08018184 <fputc>:
 8018184:	4b02      	ldr	r3, [pc, #8]	; (8018190 <fputc+0xc>)
 8018186:	460a      	mov	r2, r1
 8018188:	4601      	mov	r1, r0
 801818a:	6818      	ldr	r0, [r3, #0]
 801818c:	f7ff bfd6 	b.w	801813c <_fputc_r>
 8018190:	2000002c 	.word	0x2000002c

08018194 <_fputs_r>:
 8018194:	b530      	push	{r4, r5, lr}
 8018196:	b087      	sub	sp, #28
 8018198:	4605      	mov	r5, r0
 801819a:	4608      	mov	r0, r1
 801819c:	4614      	mov	r4, r2
 801819e:	9101      	str	r1, [sp, #4]
 80181a0:	f7ee fe00 	bl	8006da4 <strlen>
 80181a4:	ab01      	add	r3, sp, #4
 80181a6:	9303      	str	r3, [sp, #12]
 80181a8:	2301      	movs	r3, #1
 80181aa:	9005      	str	r0, [sp, #20]
 80181ac:	9002      	str	r0, [sp, #8]
 80181ae:	9304      	str	r3, [sp, #16]
 80181b0:	b125      	cbz	r5, 80181bc <_fputs_r+0x28>
 80181b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80181b4:	b913      	cbnz	r3, 80181bc <_fputs_r+0x28>
 80181b6:	4628      	mov	r0, r5
 80181b8:	f003 f914 	bl	801b3e4 <__sinit>
 80181bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80181be:	07db      	lsls	r3, r3, #31
 80181c0:	d405      	bmi.n	80181ce <_fputs_r+0x3a>
 80181c2:	89a3      	ldrh	r3, [r4, #12]
 80181c4:	0598      	lsls	r0, r3, #22
 80181c6:	d402      	bmi.n	80181ce <_fputs_r+0x3a>
 80181c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80181ca:	f000 f9f1 	bl	80185b0 <__retarget_lock_acquire_recursive>
 80181ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181d2:	0499      	lsls	r1, r3, #18
 80181d4:	d406      	bmi.n	80181e4 <_fputs_r+0x50>
 80181d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80181da:	81a3      	strh	r3, [r4, #12]
 80181dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80181de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80181e2:	6663      	str	r3, [r4, #100]	; 0x64
 80181e4:	aa03      	add	r2, sp, #12
 80181e6:	4628      	mov	r0, r5
 80181e8:	4621      	mov	r1, r4
 80181ea:	f000 f815 	bl	8018218 <__sfvwrite_r>
 80181ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80181f0:	07da      	lsls	r2, r3, #31
 80181f2:	4605      	mov	r5, r0
 80181f4:	d405      	bmi.n	8018202 <_fputs_r+0x6e>
 80181f6:	89a3      	ldrh	r3, [r4, #12]
 80181f8:	059b      	lsls	r3, r3, #22
 80181fa:	d402      	bmi.n	8018202 <_fputs_r+0x6e>
 80181fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80181fe:	f000 f9d8 	bl	80185b2 <__retarget_lock_release_recursive>
 8018202:	4628      	mov	r0, r5
 8018204:	b007      	add	sp, #28
 8018206:	bd30      	pop	{r4, r5, pc}

08018208 <fputs>:
 8018208:	4b02      	ldr	r3, [pc, #8]	; (8018214 <fputs+0xc>)
 801820a:	460a      	mov	r2, r1
 801820c:	4601      	mov	r1, r0
 801820e:	6818      	ldr	r0, [r3, #0]
 8018210:	f7ff bfc0 	b.w	8018194 <_fputs_r>
 8018214:	2000002c 	.word	0x2000002c

08018218 <__sfvwrite_r>:
 8018218:	6893      	ldr	r3, [r2, #8]
 801821a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801821e:	4680      	mov	r8, r0
 8018220:	460c      	mov	r4, r1
 8018222:	4691      	mov	r9, r2
 8018224:	b91b      	cbnz	r3, 801822e <__sfvwrite_r+0x16>
 8018226:	2000      	movs	r0, #0
 8018228:	b003      	add	sp, #12
 801822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801822e:	898b      	ldrh	r3, [r1, #12]
 8018230:	0718      	lsls	r0, r3, #28
 8018232:	d54f      	bpl.n	80182d4 <__sfvwrite_r+0xbc>
 8018234:	690b      	ldr	r3, [r1, #16]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d04c      	beq.n	80182d4 <__sfvwrite_r+0xbc>
 801823a:	89a5      	ldrh	r5, [r4, #12]
 801823c:	f8d9 6000 	ldr.w	r6, [r9]
 8018240:	f015 0702 	ands.w	r7, r5, #2
 8018244:	d169      	bne.n	801831a <__sfvwrite_r+0x102>
 8018246:	f015 0501 	ands.w	r5, r5, #1
 801824a:	f000 809a 	beq.w	8018382 <__sfvwrite_r+0x16a>
 801824e:	4638      	mov	r0, r7
 8018250:	46ba      	mov	sl, r7
 8018252:	46bb      	mov	fp, r7
 8018254:	f1bb 0f00 	cmp.w	fp, #0
 8018258:	f000 8103 	beq.w	8018462 <__sfvwrite_r+0x24a>
 801825c:	b950      	cbnz	r0, 8018274 <__sfvwrite_r+0x5c>
 801825e:	465a      	mov	r2, fp
 8018260:	210a      	movs	r1, #10
 8018262:	4650      	mov	r0, sl
 8018264:	f7ee fd44 	bl	8006cf0 <memchr>
 8018268:	2800      	cmp	r0, #0
 801826a:	f000 80ff 	beq.w	801846c <__sfvwrite_r+0x254>
 801826e:	3001      	adds	r0, #1
 8018270:	eba0 070a 	sub.w	r7, r0, sl
 8018274:	6820      	ldr	r0, [r4, #0]
 8018276:	6921      	ldr	r1, [r4, #16]
 8018278:	6962      	ldr	r2, [r4, #20]
 801827a:	455f      	cmp	r7, fp
 801827c:	463b      	mov	r3, r7
 801827e:	bf28      	it	cs
 8018280:	465b      	movcs	r3, fp
 8018282:	4288      	cmp	r0, r1
 8018284:	f240 80f5 	bls.w	8018472 <__sfvwrite_r+0x25a>
 8018288:	68a5      	ldr	r5, [r4, #8]
 801828a:	4415      	add	r5, r2
 801828c:	42ab      	cmp	r3, r5
 801828e:	f340 80f0 	ble.w	8018472 <__sfvwrite_r+0x25a>
 8018292:	4651      	mov	r1, sl
 8018294:	462a      	mov	r2, r5
 8018296:	f000 fbed 	bl	8018a74 <memmove>
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	442b      	add	r3, r5
 801829e:	6023      	str	r3, [r4, #0]
 80182a0:	4621      	mov	r1, r4
 80182a2:	4640      	mov	r0, r8
 80182a4:	f003 f832 	bl	801b30c <_fflush_r>
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d165      	bne.n	8018378 <__sfvwrite_r+0x160>
 80182ac:	1b7f      	subs	r7, r7, r5
 80182ae:	f040 80fa 	bne.w	80184a6 <__sfvwrite_r+0x28e>
 80182b2:	4621      	mov	r1, r4
 80182b4:	4640      	mov	r0, r8
 80182b6:	f003 f829 	bl	801b30c <_fflush_r>
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d15c      	bne.n	8018378 <__sfvwrite_r+0x160>
 80182be:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80182c2:	44aa      	add	sl, r5
 80182c4:	ebab 0b05 	sub.w	fp, fp, r5
 80182c8:	1b5d      	subs	r5, r3, r5
 80182ca:	f8c9 5008 	str.w	r5, [r9, #8]
 80182ce:	2d00      	cmp	r5, #0
 80182d0:	d1c0      	bne.n	8018254 <__sfvwrite_r+0x3c>
 80182d2:	e7a8      	b.n	8018226 <__sfvwrite_r+0xe>
 80182d4:	4621      	mov	r1, r4
 80182d6:	4640      	mov	r0, r8
 80182d8:	f002 f8ec 	bl	801a4b4 <__swsetup_r>
 80182dc:	2800      	cmp	r0, #0
 80182de:	d0ac      	beq.n	801823a <__sfvwrite_r+0x22>
 80182e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182e4:	e7a0      	b.n	8018228 <__sfvwrite_r+0x10>
 80182e6:	e9d6 a700 	ldrd	sl, r7, [r6]
 80182ea:	3608      	adds	r6, #8
 80182ec:	2f00      	cmp	r7, #0
 80182ee:	d0fa      	beq.n	80182e6 <__sfvwrite_r+0xce>
 80182f0:	455f      	cmp	r7, fp
 80182f2:	463b      	mov	r3, r7
 80182f4:	4652      	mov	r2, sl
 80182f6:	bf28      	it	cs
 80182f8:	465b      	movcs	r3, fp
 80182fa:	69e1      	ldr	r1, [r4, #28]
 80182fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80182fe:	4640      	mov	r0, r8
 8018300:	47a8      	blx	r5
 8018302:	2800      	cmp	r0, #0
 8018304:	dd38      	ble.n	8018378 <__sfvwrite_r+0x160>
 8018306:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801830a:	4482      	add	sl, r0
 801830c:	1a3f      	subs	r7, r7, r0
 801830e:	1a18      	subs	r0, r3, r0
 8018310:	f8c9 0008 	str.w	r0, [r9, #8]
 8018314:	2800      	cmp	r0, #0
 8018316:	d1e9      	bne.n	80182ec <__sfvwrite_r+0xd4>
 8018318:	e785      	b.n	8018226 <__sfvwrite_r+0xe>
 801831a:	f04f 0a00 	mov.w	sl, #0
 801831e:	4657      	mov	r7, sl
 8018320:	f8df b18c 	ldr.w	fp, [pc, #396]	; 80184b0 <__sfvwrite_r+0x298>
 8018324:	e7e2      	b.n	80182ec <__sfvwrite_r+0xd4>
 8018326:	e9d6 5a00 	ldrd	r5, sl, [r6]
 801832a:	3608      	adds	r6, #8
 801832c:	f1ba 0f00 	cmp.w	sl, #0
 8018330:	d0f9      	beq.n	8018326 <__sfvwrite_r+0x10e>
 8018332:	89a2      	ldrh	r2, [r4, #12]
 8018334:	68a3      	ldr	r3, [r4, #8]
 8018336:	6820      	ldr	r0, [r4, #0]
 8018338:	0591      	lsls	r1, r2, #22
 801833a:	d564      	bpl.n	8018406 <__sfvwrite_r+0x1ee>
 801833c:	4553      	cmp	r3, sl
 801833e:	d836      	bhi.n	80183ae <__sfvwrite_r+0x196>
 8018340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018344:	d033      	beq.n	80183ae <__sfvwrite_r+0x196>
 8018346:	6921      	ldr	r1, [r4, #16]
 8018348:	6967      	ldr	r7, [r4, #20]
 801834a:	eba0 0b01 	sub.w	fp, r0, r1
 801834e:	2302      	movs	r3, #2
 8018350:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018354:	fb97 f7f3 	sdiv	r7, r7, r3
 8018358:	f10b 0301 	add.w	r3, fp, #1
 801835c:	4453      	add	r3, sl
 801835e:	429f      	cmp	r7, r3
 8018360:	bf38      	it	cc
 8018362:	461f      	movcc	r7, r3
 8018364:	0553      	lsls	r3, r2, #21
 8018366:	d53e      	bpl.n	80183e6 <__sfvwrite_r+0x1ce>
 8018368:	4639      	mov	r1, r7
 801836a:	4640      	mov	r0, r8
 801836c:	f000 f932 	bl	80185d4 <_malloc_r>
 8018370:	b948      	cbnz	r0, 8018386 <__sfvwrite_r+0x16e>
 8018372:	230c      	movs	r3, #12
 8018374:	f8c8 3000 	str.w	r3, [r8]
 8018378:	89a3      	ldrh	r3, [r4, #12]
 801837a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801837e:	81a3      	strh	r3, [r4, #12]
 8018380:	e7ae      	b.n	80182e0 <__sfvwrite_r+0xc8>
 8018382:	46aa      	mov	sl, r5
 8018384:	e7d2      	b.n	801832c <__sfvwrite_r+0x114>
 8018386:	465a      	mov	r2, fp
 8018388:	6921      	ldr	r1, [r4, #16]
 801838a:	9001      	str	r0, [sp, #4]
 801838c:	f000 fb67 	bl	8018a5e <memcpy>
 8018390:	89a2      	ldrh	r2, [r4, #12]
 8018392:	9b01      	ldr	r3, [sp, #4]
 8018394:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8018398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801839c:	81a2      	strh	r2, [r4, #12]
 801839e:	6123      	str	r3, [r4, #16]
 80183a0:	6167      	str	r7, [r4, #20]
 80183a2:	445b      	add	r3, fp
 80183a4:	eba7 070b 	sub.w	r7, r7, fp
 80183a8:	6023      	str	r3, [r4, #0]
 80183aa:	60a7      	str	r7, [r4, #8]
 80183ac:	4653      	mov	r3, sl
 80183ae:	4553      	cmp	r3, sl
 80183b0:	bf28      	it	cs
 80183b2:	4653      	movcs	r3, sl
 80183b4:	461a      	mov	r2, r3
 80183b6:	4629      	mov	r1, r5
 80183b8:	6820      	ldr	r0, [r4, #0]
 80183ba:	9301      	str	r3, [sp, #4]
 80183bc:	f000 fb5a 	bl	8018a74 <memmove>
 80183c0:	68a2      	ldr	r2, [r4, #8]
 80183c2:	9b01      	ldr	r3, [sp, #4]
 80183c4:	1ad2      	subs	r2, r2, r3
 80183c6:	60a2      	str	r2, [r4, #8]
 80183c8:	6822      	ldr	r2, [r4, #0]
 80183ca:	4413      	add	r3, r2
 80183cc:	4657      	mov	r7, sl
 80183ce:	6023      	str	r3, [r4, #0]
 80183d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80183d4:	443d      	add	r5, r7
 80183d6:	ebaa 0a07 	sub.w	sl, sl, r7
 80183da:	1bdf      	subs	r7, r3, r7
 80183dc:	f8c9 7008 	str.w	r7, [r9, #8]
 80183e0:	2f00      	cmp	r7, #0
 80183e2:	d1a3      	bne.n	801832c <__sfvwrite_r+0x114>
 80183e4:	e71f      	b.n	8018226 <__sfvwrite_r+0xe>
 80183e6:	463a      	mov	r2, r7
 80183e8:	4640      	mov	r0, r8
 80183ea:	f000 fbad 	bl	8018b48 <_realloc_r>
 80183ee:	4603      	mov	r3, r0
 80183f0:	2800      	cmp	r0, #0
 80183f2:	d1d4      	bne.n	801839e <__sfvwrite_r+0x186>
 80183f4:	6921      	ldr	r1, [r4, #16]
 80183f6:	4640      	mov	r0, r8
 80183f8:	f003 f884 	bl	801b504 <_free_r>
 80183fc:	89a3      	ldrh	r3, [r4, #12]
 80183fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018402:	81a3      	strh	r3, [r4, #12]
 8018404:	e7b5      	b.n	8018372 <__sfvwrite_r+0x15a>
 8018406:	6922      	ldr	r2, [r4, #16]
 8018408:	4282      	cmp	r2, r0
 801840a:	d302      	bcc.n	8018412 <__sfvwrite_r+0x1fa>
 801840c:	6962      	ldr	r2, [r4, #20]
 801840e:	4552      	cmp	r2, sl
 8018410:	d916      	bls.n	8018440 <__sfvwrite_r+0x228>
 8018412:	4553      	cmp	r3, sl
 8018414:	bf28      	it	cs
 8018416:	4653      	movcs	r3, sl
 8018418:	461a      	mov	r2, r3
 801841a:	4629      	mov	r1, r5
 801841c:	461f      	mov	r7, r3
 801841e:	f000 fb29 	bl	8018a74 <memmove>
 8018422:	68a3      	ldr	r3, [r4, #8]
 8018424:	6822      	ldr	r2, [r4, #0]
 8018426:	1bdb      	subs	r3, r3, r7
 8018428:	443a      	add	r2, r7
 801842a:	60a3      	str	r3, [r4, #8]
 801842c:	6022      	str	r2, [r4, #0]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d1ce      	bne.n	80183d0 <__sfvwrite_r+0x1b8>
 8018432:	4621      	mov	r1, r4
 8018434:	4640      	mov	r0, r8
 8018436:	f002 ff69 	bl	801b30c <_fflush_r>
 801843a:	2800      	cmp	r0, #0
 801843c:	d0c8      	beq.n	80183d0 <__sfvwrite_r+0x1b8>
 801843e:	e79b      	b.n	8018378 <__sfvwrite_r+0x160>
 8018440:	4b1a      	ldr	r3, [pc, #104]	; (80184ac <__sfvwrite_r+0x294>)
 8018442:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8018444:	69e1      	ldr	r1, [r4, #28]
 8018446:	459a      	cmp	sl, r3
 8018448:	bf94      	ite	ls
 801844a:	4653      	movls	r3, sl
 801844c:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8018450:	4640      	mov	r0, r8
 8018452:	fb93 f3f2 	sdiv	r3, r3, r2
 8018456:	4353      	muls	r3, r2
 8018458:	462a      	mov	r2, r5
 801845a:	47b8      	blx	r7
 801845c:	1e07      	subs	r7, r0, #0
 801845e:	dcb7      	bgt.n	80183d0 <__sfvwrite_r+0x1b8>
 8018460:	e78a      	b.n	8018378 <__sfvwrite_r+0x160>
 8018462:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8018466:	2000      	movs	r0, #0
 8018468:	3608      	adds	r6, #8
 801846a:	e6f3      	b.n	8018254 <__sfvwrite_r+0x3c>
 801846c:	f10b 0701 	add.w	r7, fp, #1
 8018470:	e700      	b.n	8018274 <__sfvwrite_r+0x5c>
 8018472:	429a      	cmp	r2, r3
 8018474:	dc09      	bgt.n	801848a <__sfvwrite_r+0x272>
 8018476:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018478:	69e1      	ldr	r1, [r4, #28]
 801847a:	4613      	mov	r3, r2
 801847c:	4640      	mov	r0, r8
 801847e:	4652      	mov	r2, sl
 8018480:	47a8      	blx	r5
 8018482:	1e05      	subs	r5, r0, #0
 8018484:	f73f af12 	bgt.w	80182ac <__sfvwrite_r+0x94>
 8018488:	e776      	b.n	8018378 <__sfvwrite_r+0x160>
 801848a:	461a      	mov	r2, r3
 801848c:	4651      	mov	r1, sl
 801848e:	9301      	str	r3, [sp, #4]
 8018490:	f000 faf0 	bl	8018a74 <memmove>
 8018494:	9b01      	ldr	r3, [sp, #4]
 8018496:	68a2      	ldr	r2, [r4, #8]
 8018498:	1ad2      	subs	r2, r2, r3
 801849a:	60a2      	str	r2, [r4, #8]
 801849c:	6822      	ldr	r2, [r4, #0]
 801849e:	441a      	add	r2, r3
 80184a0:	6022      	str	r2, [r4, #0]
 80184a2:	461d      	mov	r5, r3
 80184a4:	e702      	b.n	80182ac <__sfvwrite_r+0x94>
 80184a6:	2001      	movs	r0, #1
 80184a8:	e709      	b.n	80182be <__sfvwrite_r+0xa6>
 80184aa:	bf00      	nop
 80184ac:	7ffffffe 	.word	0x7ffffffe
 80184b0:	7ffffc00 	.word	0x7ffffc00

080184b4 <_fwrite_r>:
 80184b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184b8:	b086      	sub	sp, #24
 80184ba:	fb02 f503 	mul.w	r5, r2, r3
 80184be:	461e      	mov	r6, r3
 80184c0:	ab01      	add	r3, sp, #4
 80184c2:	9303      	str	r3, [sp, #12]
 80184c4:	2301      	movs	r3, #1
 80184c6:	4617      	mov	r7, r2
 80184c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80184ca:	9101      	str	r1, [sp, #4]
 80184cc:	9502      	str	r5, [sp, #8]
 80184ce:	9505      	str	r5, [sp, #20]
 80184d0:	9304      	str	r3, [sp, #16]
 80184d2:	4680      	mov	r8, r0
 80184d4:	b118      	cbz	r0, 80184de <_fwrite_r+0x2a>
 80184d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80184d8:	b90b      	cbnz	r3, 80184de <_fwrite_r+0x2a>
 80184da:	f002 ff83 	bl	801b3e4 <__sinit>
 80184de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80184e0:	07d8      	lsls	r0, r3, #31
 80184e2:	d405      	bmi.n	80184f0 <_fwrite_r+0x3c>
 80184e4:	89a3      	ldrh	r3, [r4, #12]
 80184e6:	0599      	lsls	r1, r3, #22
 80184e8:	d402      	bmi.n	80184f0 <_fwrite_r+0x3c>
 80184ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184ec:	f000 f860 	bl	80185b0 <__retarget_lock_acquire_recursive>
 80184f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184f4:	049a      	lsls	r2, r3, #18
 80184f6:	d406      	bmi.n	8018506 <_fwrite_r+0x52>
 80184f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80184fc:	81a3      	strh	r3, [r4, #12]
 80184fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018504:	6663      	str	r3, [r4, #100]	; 0x64
 8018506:	aa03      	add	r2, sp, #12
 8018508:	4621      	mov	r1, r4
 801850a:	4640      	mov	r0, r8
 801850c:	f7ff fe84 	bl	8018218 <__sfvwrite_r>
 8018510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018512:	b958      	cbnz	r0, 801852c <_fwrite_r+0x78>
 8018514:	07d8      	lsls	r0, r3, #31
 8018516:	d405      	bmi.n	8018524 <_fwrite_r+0x70>
 8018518:	89a3      	ldrh	r3, [r4, #12]
 801851a:	0599      	lsls	r1, r3, #22
 801851c:	d402      	bmi.n	8018524 <_fwrite_r+0x70>
 801851e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018520:	f000 f847 	bl	80185b2 <__retarget_lock_release_recursive>
 8018524:	4630      	mov	r0, r6
 8018526:	b006      	add	sp, #24
 8018528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801852c:	07da      	lsls	r2, r3, #31
 801852e:	d405      	bmi.n	801853c <_fwrite_r+0x88>
 8018530:	89a3      	ldrh	r3, [r4, #12]
 8018532:	059b      	lsls	r3, r3, #22
 8018534:	d402      	bmi.n	801853c <_fwrite_r+0x88>
 8018536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018538:	f000 f83b 	bl	80185b2 <__retarget_lock_release_recursive>
 801853c:	9b05      	ldr	r3, [sp, #20]
 801853e:	1aed      	subs	r5, r5, r3
 8018540:	fbb5 f6f7 	udiv	r6, r5, r7
 8018544:	e7ee      	b.n	8018524 <_fwrite_r+0x70>
	...

08018548 <fwrite>:
 8018548:	b507      	push	{r0, r1, r2, lr}
 801854a:	9300      	str	r3, [sp, #0]
 801854c:	4613      	mov	r3, r2
 801854e:	460a      	mov	r2, r1
 8018550:	4601      	mov	r1, r0
 8018552:	4803      	ldr	r0, [pc, #12]	; (8018560 <fwrite+0x18>)
 8018554:	6800      	ldr	r0, [r0, #0]
 8018556:	f7ff ffad 	bl	80184b4 <_fwrite_r>
 801855a:	b003      	add	sp, #12
 801855c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018560:	2000002c 	.word	0x2000002c

08018564 <__libc_init_array>:
 8018564:	b570      	push	{r4, r5, r6, lr}
 8018566:	4e0d      	ldr	r6, [pc, #52]	; (801859c <__libc_init_array+0x38>)
 8018568:	4c0d      	ldr	r4, [pc, #52]	; (80185a0 <__libc_init_array+0x3c>)
 801856a:	1ba4      	subs	r4, r4, r6
 801856c:	10a4      	asrs	r4, r4, #2
 801856e:	2500      	movs	r5, #0
 8018570:	42a5      	cmp	r5, r4
 8018572:	d109      	bne.n	8018588 <__libc_init_array+0x24>
 8018574:	4e0b      	ldr	r6, [pc, #44]	; (80185a4 <__libc_init_array+0x40>)
 8018576:	4c0c      	ldr	r4, [pc, #48]	; (80185a8 <__libc_init_array+0x44>)
 8018578:	f003 fe3e 	bl	801c1f8 <_init>
 801857c:	1ba4      	subs	r4, r4, r6
 801857e:	10a4      	asrs	r4, r4, #2
 8018580:	2500      	movs	r5, #0
 8018582:	42a5      	cmp	r5, r4
 8018584:	d105      	bne.n	8018592 <__libc_init_array+0x2e>
 8018586:	bd70      	pop	{r4, r5, r6, pc}
 8018588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801858c:	4798      	blx	r3
 801858e:	3501      	adds	r5, #1
 8018590:	e7ee      	b.n	8018570 <__libc_init_array+0xc>
 8018592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018596:	4798      	blx	r3
 8018598:	3501      	adds	r5, #1
 801859a:	e7f2      	b.n	8018582 <__libc_init_array+0x1e>
 801859c:	08094d0c 	.word	0x08094d0c
 80185a0:	08094d0c 	.word	0x08094d0c
 80185a4:	08094d0c 	.word	0x08094d0c
 80185a8:	08094d1c 	.word	0x08094d1c

080185ac <__retarget_lock_init_recursive>:
 80185ac:	4770      	bx	lr

080185ae <__retarget_lock_close_recursive>:
 80185ae:	4770      	bx	lr

080185b0 <__retarget_lock_acquire_recursive>:
 80185b0:	4770      	bx	lr

080185b2 <__retarget_lock_release_recursive>:
 80185b2:	4770      	bx	lr

080185b4 <malloc>:
 80185b4:	4b02      	ldr	r3, [pc, #8]	; (80185c0 <malloc+0xc>)
 80185b6:	4601      	mov	r1, r0
 80185b8:	6818      	ldr	r0, [r3, #0]
 80185ba:	f000 b80b 	b.w	80185d4 <_malloc_r>
 80185be:	bf00      	nop
 80185c0:	2000002c 	.word	0x2000002c

080185c4 <free>:
 80185c4:	4b02      	ldr	r3, [pc, #8]	; (80185d0 <free+0xc>)
 80185c6:	4601      	mov	r1, r0
 80185c8:	6818      	ldr	r0, [r3, #0]
 80185ca:	f002 bf9b 	b.w	801b504 <_free_r>
 80185ce:	bf00      	nop
 80185d0:	2000002c 	.word	0x2000002c

080185d4 <_malloc_r>:
 80185d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d8:	f101 050b 	add.w	r5, r1, #11
 80185dc:	2d16      	cmp	r5, #22
 80185de:	4606      	mov	r6, r0
 80185e0:	d906      	bls.n	80185f0 <_malloc_r+0x1c>
 80185e2:	f035 0507 	bics.w	r5, r5, #7
 80185e6:	d504      	bpl.n	80185f2 <_malloc_r+0x1e>
 80185e8:	230c      	movs	r3, #12
 80185ea:	6033      	str	r3, [r6, #0]
 80185ec:	2400      	movs	r4, #0
 80185ee:	e1a8      	b.n	8018942 <_malloc_r+0x36e>
 80185f0:	2510      	movs	r5, #16
 80185f2:	428d      	cmp	r5, r1
 80185f4:	d3f8      	bcc.n	80185e8 <_malloc_r+0x14>
 80185f6:	4630      	mov	r0, r6
 80185f8:	f000 fa5e 	bl	8018ab8 <__malloc_lock>
 80185fc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8018600:	4fc0      	ldr	r7, [pc, #768]	; (8018904 <_malloc_r+0x330>)
 8018602:	d238      	bcs.n	8018676 <_malloc_r+0xa2>
 8018604:	f105 0208 	add.w	r2, r5, #8
 8018608:	443a      	add	r2, r7
 801860a:	f1a2 0108 	sub.w	r1, r2, #8
 801860e:	6854      	ldr	r4, [r2, #4]
 8018610:	428c      	cmp	r4, r1
 8018612:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8018616:	d102      	bne.n	801861e <_malloc_r+0x4a>
 8018618:	68d4      	ldr	r4, [r2, #12]
 801861a:	42a2      	cmp	r2, r4
 801861c:	d010      	beq.n	8018640 <_malloc_r+0x6c>
 801861e:	6863      	ldr	r3, [r4, #4]
 8018620:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8018624:	f023 0303 	bic.w	r3, r3, #3
 8018628:	60ca      	str	r2, [r1, #12]
 801862a:	4423      	add	r3, r4
 801862c:	6091      	str	r1, [r2, #8]
 801862e:	685a      	ldr	r2, [r3, #4]
 8018630:	f042 0201 	orr.w	r2, r2, #1
 8018634:	605a      	str	r2, [r3, #4]
 8018636:	4630      	mov	r0, r6
 8018638:	f000 fa44 	bl	8018ac4 <__malloc_unlock>
 801863c:	3408      	adds	r4, #8
 801863e:	e180      	b.n	8018942 <_malloc_r+0x36e>
 8018640:	3302      	adds	r3, #2
 8018642:	4ab1      	ldr	r2, [pc, #708]	; (8018908 <_malloc_r+0x334>)
 8018644:	693c      	ldr	r4, [r7, #16]
 8018646:	4294      	cmp	r4, r2
 8018648:	4611      	mov	r1, r2
 801864a:	d075      	beq.n	8018738 <_malloc_r+0x164>
 801864c:	6860      	ldr	r0, [r4, #4]
 801864e:	f020 0c03 	bic.w	ip, r0, #3
 8018652:	ebac 0005 	sub.w	r0, ip, r5
 8018656:	280f      	cmp	r0, #15
 8018658:	dd48      	ble.n	80186ec <_malloc_r+0x118>
 801865a:	1963      	adds	r3, r4, r5
 801865c:	f045 0501 	orr.w	r5, r5, #1
 8018660:	6065      	str	r5, [r4, #4]
 8018662:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8018666:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801866a:	f040 0201 	orr.w	r2, r0, #1
 801866e:	605a      	str	r2, [r3, #4]
 8018670:	f844 000c 	str.w	r0, [r4, ip]
 8018674:	e7df      	b.n	8018636 <_malloc_r+0x62>
 8018676:	0a6b      	lsrs	r3, r5, #9
 8018678:	d02a      	beq.n	80186d0 <_malloc_r+0xfc>
 801867a:	2b04      	cmp	r3, #4
 801867c:	d812      	bhi.n	80186a4 <_malloc_r+0xd0>
 801867e:	09ab      	lsrs	r3, r5, #6
 8018680:	3338      	adds	r3, #56	; 0x38
 8018682:	1c5a      	adds	r2, r3, #1
 8018684:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8018688:	f1a2 0c08 	sub.w	ip, r2, #8
 801868c:	6854      	ldr	r4, [r2, #4]
 801868e:	4564      	cmp	r4, ip
 8018690:	d006      	beq.n	80186a0 <_malloc_r+0xcc>
 8018692:	6862      	ldr	r2, [r4, #4]
 8018694:	f022 0203 	bic.w	r2, r2, #3
 8018698:	1b50      	subs	r0, r2, r5
 801869a:	280f      	cmp	r0, #15
 801869c:	dd1c      	ble.n	80186d8 <_malloc_r+0x104>
 801869e:	3b01      	subs	r3, #1
 80186a0:	3301      	adds	r3, #1
 80186a2:	e7ce      	b.n	8018642 <_malloc_r+0x6e>
 80186a4:	2b14      	cmp	r3, #20
 80186a6:	d801      	bhi.n	80186ac <_malloc_r+0xd8>
 80186a8:	335b      	adds	r3, #91	; 0x5b
 80186aa:	e7ea      	b.n	8018682 <_malloc_r+0xae>
 80186ac:	2b54      	cmp	r3, #84	; 0x54
 80186ae:	d802      	bhi.n	80186b6 <_malloc_r+0xe2>
 80186b0:	0b2b      	lsrs	r3, r5, #12
 80186b2:	336e      	adds	r3, #110	; 0x6e
 80186b4:	e7e5      	b.n	8018682 <_malloc_r+0xae>
 80186b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80186ba:	d802      	bhi.n	80186c2 <_malloc_r+0xee>
 80186bc:	0beb      	lsrs	r3, r5, #15
 80186be:	3377      	adds	r3, #119	; 0x77
 80186c0:	e7df      	b.n	8018682 <_malloc_r+0xae>
 80186c2:	f240 5254 	movw	r2, #1364	; 0x554
 80186c6:	4293      	cmp	r3, r2
 80186c8:	d804      	bhi.n	80186d4 <_malloc_r+0x100>
 80186ca:	0cab      	lsrs	r3, r5, #18
 80186cc:	337c      	adds	r3, #124	; 0x7c
 80186ce:	e7d8      	b.n	8018682 <_malloc_r+0xae>
 80186d0:	233f      	movs	r3, #63	; 0x3f
 80186d2:	e7d6      	b.n	8018682 <_malloc_r+0xae>
 80186d4:	237e      	movs	r3, #126	; 0x7e
 80186d6:	e7d4      	b.n	8018682 <_malloc_r+0xae>
 80186d8:	2800      	cmp	r0, #0
 80186da:	68e1      	ldr	r1, [r4, #12]
 80186dc:	db04      	blt.n	80186e8 <_malloc_r+0x114>
 80186de:	68a3      	ldr	r3, [r4, #8]
 80186e0:	60d9      	str	r1, [r3, #12]
 80186e2:	608b      	str	r3, [r1, #8]
 80186e4:	18a3      	adds	r3, r4, r2
 80186e6:	e7a2      	b.n	801862e <_malloc_r+0x5a>
 80186e8:	460c      	mov	r4, r1
 80186ea:	e7d0      	b.n	801868e <_malloc_r+0xba>
 80186ec:	2800      	cmp	r0, #0
 80186ee:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80186f2:	db07      	blt.n	8018704 <_malloc_r+0x130>
 80186f4:	44a4      	add	ip, r4
 80186f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80186fa:	f043 0301 	orr.w	r3, r3, #1
 80186fe:	f8cc 3004 	str.w	r3, [ip, #4]
 8018702:	e798      	b.n	8018636 <_malloc_r+0x62>
 8018704:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8018708:	6878      	ldr	r0, [r7, #4]
 801870a:	f080 8099 	bcs.w	8018840 <_malloc_r+0x26c>
 801870e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8018712:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8018716:	2201      	movs	r2, #1
 8018718:	f10c 0c01 	add.w	ip, ip, #1
 801871c:	fa02 f20e 	lsl.w	r2, r2, lr
 8018720:	4310      	orrs	r0, r2
 8018722:	6078      	str	r0, [r7, #4]
 8018724:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8018728:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 801872c:	3a08      	subs	r2, #8
 801872e:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8018732:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8018736:	60c4      	str	r4, [r0, #12]
 8018738:	2001      	movs	r0, #1
 801873a:	109a      	asrs	r2, r3, #2
 801873c:	fa00 f202 	lsl.w	r2, r0, r2
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	4290      	cmp	r0, r2
 8018744:	d326      	bcc.n	8018794 <_malloc_r+0x1c0>
 8018746:	4210      	tst	r0, r2
 8018748:	d106      	bne.n	8018758 <_malloc_r+0x184>
 801874a:	f023 0303 	bic.w	r3, r3, #3
 801874e:	0052      	lsls	r2, r2, #1
 8018750:	4210      	tst	r0, r2
 8018752:	f103 0304 	add.w	r3, r3, #4
 8018756:	d0fa      	beq.n	801874e <_malloc_r+0x17a>
 8018758:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 801875c:	46e1      	mov	r9, ip
 801875e:	4698      	mov	r8, r3
 8018760:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8018764:	454c      	cmp	r4, r9
 8018766:	f040 80af 	bne.w	80188c8 <_malloc_r+0x2f4>
 801876a:	f108 0801 	add.w	r8, r8, #1
 801876e:	f018 0f03 	tst.w	r8, #3
 8018772:	f109 0908 	add.w	r9, r9, #8
 8018776:	d1f3      	bne.n	8018760 <_malloc_r+0x18c>
 8018778:	0798      	lsls	r0, r3, #30
 801877a:	f040 80e8 	bne.w	801894e <_malloc_r+0x37a>
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	ea23 0302 	bic.w	r3, r3, r2
 8018784:	607b      	str	r3, [r7, #4]
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	0052      	lsls	r2, r2, #1
 801878a:	4290      	cmp	r0, r2
 801878c:	d302      	bcc.n	8018794 <_malloc_r+0x1c0>
 801878e:	2a00      	cmp	r2, #0
 8018790:	f040 80ec 	bne.w	801896c <_malloc_r+0x398>
 8018794:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8018798:	f8da 4004 	ldr.w	r4, [sl, #4]
 801879c:	f024 0203 	bic.w	r2, r4, #3
 80187a0:	42aa      	cmp	r2, r5
 80187a2:	d303      	bcc.n	80187ac <_malloc_r+0x1d8>
 80187a4:	1b53      	subs	r3, r2, r5
 80187a6:	2b0f      	cmp	r3, #15
 80187a8:	f300 8140 	bgt.w	8018a2c <_malloc_r+0x458>
 80187ac:	4b57      	ldr	r3, [pc, #348]	; (801890c <_malloc_r+0x338>)
 80187ae:	9200      	str	r2, [sp, #0]
 80187b0:	2008      	movs	r0, #8
 80187b2:	681c      	ldr	r4, [r3, #0]
 80187b4:	f001 fe16 	bl	801a3e4 <sysconf>
 80187b8:	4b55      	ldr	r3, [pc, #340]	; (8018910 <_malloc_r+0x33c>)
 80187ba:	9a00      	ldr	r2, [sp, #0]
 80187bc:	6819      	ldr	r1, [r3, #0]
 80187be:	3410      	adds	r4, #16
 80187c0:	3101      	adds	r1, #1
 80187c2:	442c      	add	r4, r5
 80187c4:	bf1f      	itttt	ne
 80187c6:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 80187ca:	1824      	addne	r4, r4, r0
 80187cc:	4241      	negne	r1, r0
 80187ce:	400c      	andne	r4, r1
 80187d0:	4680      	mov	r8, r0
 80187d2:	4621      	mov	r1, r4
 80187d4:	4630      	mov	r0, r6
 80187d6:	e9cd 2300 	strd	r2, r3, [sp]
 80187da:	f000 fb5d 	bl	8018e98 <_sbrk_r>
 80187de:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80187e2:	4683      	mov	fp, r0
 80187e4:	f000 80fb 	beq.w	80189de <_malloc_r+0x40a>
 80187e8:	9a00      	ldr	r2, [sp, #0]
 80187ea:	9b01      	ldr	r3, [sp, #4]
 80187ec:	eb0a 0102 	add.w	r1, sl, r2
 80187f0:	4281      	cmp	r1, r0
 80187f2:	d902      	bls.n	80187fa <_malloc_r+0x226>
 80187f4:	45ba      	cmp	sl, r7
 80187f6:	f040 80f2 	bne.w	80189de <_malloc_r+0x40a>
 80187fa:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801891c <_malloc_r+0x348>
 80187fe:	f8d9 0000 	ldr.w	r0, [r9]
 8018802:	4559      	cmp	r1, fp
 8018804:	eb00 0e04 	add.w	lr, r0, r4
 8018808:	f8c9 e000 	str.w	lr, [r9]
 801880c:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8018810:	f040 80ae 	bne.w	8018970 <_malloc_r+0x39c>
 8018814:	ea11 0f0c 	tst.w	r1, ip
 8018818:	f040 80aa 	bne.w	8018970 <_malloc_r+0x39c>
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	4414      	add	r4, r2
 8018820:	f044 0401 	orr.w	r4, r4, #1
 8018824:	605c      	str	r4, [r3, #4]
 8018826:	4a3b      	ldr	r2, [pc, #236]	; (8018914 <_malloc_r+0x340>)
 8018828:	f8d9 3000 	ldr.w	r3, [r9]
 801882c:	6811      	ldr	r1, [r2, #0]
 801882e:	428b      	cmp	r3, r1
 8018830:	bf88      	it	hi
 8018832:	6013      	strhi	r3, [r2, #0]
 8018834:	4a38      	ldr	r2, [pc, #224]	; (8018918 <_malloc_r+0x344>)
 8018836:	6811      	ldr	r1, [r2, #0]
 8018838:	428b      	cmp	r3, r1
 801883a:	bf88      	it	hi
 801883c:	6013      	strhi	r3, [r2, #0]
 801883e:	e0ce      	b.n	80189de <_malloc_r+0x40a>
 8018840:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8018844:	2a04      	cmp	r2, #4
 8018846:	d818      	bhi.n	801887a <_malloc_r+0x2a6>
 8018848:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801884c:	3238      	adds	r2, #56	; 0x38
 801884e:	f102 0e01 	add.w	lr, r2, #1
 8018852:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8018856:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 801885a:	45f0      	cmp	r8, lr
 801885c:	d12b      	bne.n	80188b6 <_malloc_r+0x2e2>
 801885e:	1092      	asrs	r2, r2, #2
 8018860:	f04f 0c01 	mov.w	ip, #1
 8018864:	fa0c f202 	lsl.w	r2, ip, r2
 8018868:	4310      	orrs	r0, r2
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8018870:	f8c8 4008 	str.w	r4, [r8, #8]
 8018874:	f8ce 400c 	str.w	r4, [lr, #12]
 8018878:	e75e      	b.n	8018738 <_malloc_r+0x164>
 801887a:	2a14      	cmp	r2, #20
 801887c:	d801      	bhi.n	8018882 <_malloc_r+0x2ae>
 801887e:	325b      	adds	r2, #91	; 0x5b
 8018880:	e7e5      	b.n	801884e <_malloc_r+0x27a>
 8018882:	2a54      	cmp	r2, #84	; 0x54
 8018884:	d803      	bhi.n	801888e <_malloc_r+0x2ba>
 8018886:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801888a:	326e      	adds	r2, #110	; 0x6e
 801888c:	e7df      	b.n	801884e <_malloc_r+0x27a>
 801888e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018892:	d803      	bhi.n	801889c <_malloc_r+0x2c8>
 8018894:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8018898:	3277      	adds	r2, #119	; 0x77
 801889a:	e7d8      	b.n	801884e <_malloc_r+0x27a>
 801889c:	f240 5e54 	movw	lr, #1364	; 0x554
 80188a0:	4572      	cmp	r2, lr
 80188a2:	bf9a      	itte	ls
 80188a4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80188a8:	327c      	addls	r2, #124	; 0x7c
 80188aa:	227e      	movhi	r2, #126	; 0x7e
 80188ac:	e7cf      	b.n	801884e <_malloc_r+0x27a>
 80188ae:	f8de e008 	ldr.w	lr, [lr, #8]
 80188b2:	45f0      	cmp	r8, lr
 80188b4:	d005      	beq.n	80188c2 <_malloc_r+0x2ee>
 80188b6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80188ba:	f022 0203 	bic.w	r2, r2, #3
 80188be:	4562      	cmp	r2, ip
 80188c0:	d8f5      	bhi.n	80188ae <_malloc_r+0x2da>
 80188c2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80188c6:	e7d1      	b.n	801886c <_malloc_r+0x298>
 80188c8:	6860      	ldr	r0, [r4, #4]
 80188ca:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80188ce:	f020 0003 	bic.w	r0, r0, #3
 80188d2:	eba0 0a05 	sub.w	sl, r0, r5
 80188d6:	f1ba 0f0f 	cmp.w	sl, #15
 80188da:	dd21      	ble.n	8018920 <_malloc_r+0x34c>
 80188dc:	68a2      	ldr	r2, [r4, #8]
 80188de:	1963      	adds	r3, r4, r5
 80188e0:	f045 0501 	orr.w	r5, r5, #1
 80188e4:	6065      	str	r5, [r4, #4]
 80188e6:	f8c2 e00c 	str.w	lr, [r2, #12]
 80188ea:	f8ce 2008 	str.w	r2, [lr, #8]
 80188ee:	f04a 0201 	orr.w	r2, sl, #1
 80188f2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80188f6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80188fa:	605a      	str	r2, [r3, #4]
 80188fc:	f844 a000 	str.w	sl, [r4, r0]
 8018900:	e699      	b.n	8018636 <_malloc_r+0x62>
 8018902:	bf00      	nop
 8018904:	20000458 	.word	0x20000458
 8018908:	20000460 	.word	0x20000460
 801890c:	2001ba14 	.word	0x2001ba14
 8018910:	20000860 	.word	0x20000860
 8018914:	2001ba0c 	.word	0x2001ba0c
 8018918:	2001ba10 	.word	0x2001ba10
 801891c:	2001b9e4 	.word	0x2001b9e4
 8018920:	f1ba 0f00 	cmp.w	sl, #0
 8018924:	db11      	blt.n	801894a <_malloc_r+0x376>
 8018926:	4420      	add	r0, r4
 8018928:	6843      	ldr	r3, [r0, #4]
 801892a:	f043 0301 	orr.w	r3, r3, #1
 801892e:	6043      	str	r3, [r0, #4]
 8018930:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8018934:	4630      	mov	r0, r6
 8018936:	f8c3 e00c 	str.w	lr, [r3, #12]
 801893a:	f8ce 3008 	str.w	r3, [lr, #8]
 801893e:	f000 f8c1 	bl	8018ac4 <__malloc_unlock>
 8018942:	4620      	mov	r0, r4
 8018944:	b003      	add	sp, #12
 8018946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801894a:	4674      	mov	r4, lr
 801894c:	e70a      	b.n	8018764 <_malloc_r+0x190>
 801894e:	f1ac 0008 	sub.w	r0, ip, #8
 8018952:	f8dc c000 	ldr.w	ip, [ip]
 8018956:	4584      	cmp	ip, r0
 8018958:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801895c:	f43f af0c 	beq.w	8018778 <_malloc_r+0x1a4>
 8018960:	e711      	b.n	8018786 <_malloc_r+0x1b2>
 8018962:	3304      	adds	r3, #4
 8018964:	0052      	lsls	r2, r2, #1
 8018966:	4210      	tst	r0, r2
 8018968:	d0fb      	beq.n	8018962 <_malloc_r+0x38e>
 801896a:	e6f5      	b.n	8018758 <_malloc_r+0x184>
 801896c:	4643      	mov	r3, r8
 801896e:	e7fa      	b.n	8018966 <_malloc_r+0x392>
 8018970:	6818      	ldr	r0, [r3, #0]
 8018972:	9200      	str	r2, [sp, #0]
 8018974:	3001      	adds	r0, #1
 8018976:	bf1b      	ittet	ne
 8018978:	ebab 0101 	subne.w	r1, fp, r1
 801897c:	4471      	addne	r1, lr
 801897e:	f8c3 b000 	streq.w	fp, [r3]
 8018982:	f8c9 1000 	strne.w	r1, [r9]
 8018986:	f01b 0307 	ands.w	r3, fp, #7
 801898a:	bf1c      	itt	ne
 801898c:	f1c3 0308 	rsbne	r3, r3, #8
 8018990:	449b      	addne	fp, r3
 8018992:	445c      	add	r4, fp
 8018994:	4498      	add	r8, r3
 8018996:	ea04 030c 	and.w	r3, r4, ip
 801899a:	eba8 0803 	sub.w	r8, r8, r3
 801899e:	4641      	mov	r1, r8
 80189a0:	4630      	mov	r0, r6
 80189a2:	f000 fa79 	bl	8018e98 <_sbrk_r>
 80189a6:	1c43      	adds	r3, r0, #1
 80189a8:	bf04      	itt	eq
 80189aa:	4658      	moveq	r0, fp
 80189ac:	f04f 0800 	moveq.w	r8, #0
 80189b0:	f8d9 3000 	ldr.w	r3, [r9]
 80189b4:	f8c7 b008 	str.w	fp, [r7, #8]
 80189b8:	eba0 000b 	sub.w	r0, r0, fp
 80189bc:	4440      	add	r0, r8
 80189be:	4443      	add	r3, r8
 80189c0:	f040 0001 	orr.w	r0, r0, #1
 80189c4:	45ba      	cmp	sl, r7
 80189c6:	9a00      	ldr	r2, [sp, #0]
 80189c8:	f8c9 3000 	str.w	r3, [r9]
 80189cc:	f8cb 0004 	str.w	r0, [fp, #4]
 80189d0:	f43f af29 	beq.w	8018826 <_malloc_r+0x252>
 80189d4:	2a0f      	cmp	r2, #15
 80189d6:	d810      	bhi.n	80189fa <_malloc_r+0x426>
 80189d8:	2301      	movs	r3, #1
 80189da:	f8cb 3004 	str.w	r3, [fp, #4]
 80189de:	68bb      	ldr	r3, [r7, #8]
 80189e0:	685a      	ldr	r2, [r3, #4]
 80189e2:	f022 0203 	bic.w	r2, r2, #3
 80189e6:	42aa      	cmp	r2, r5
 80189e8:	eba2 0305 	sub.w	r3, r2, r5
 80189ec:	d301      	bcc.n	80189f2 <_malloc_r+0x41e>
 80189ee:	2b0f      	cmp	r3, #15
 80189f0:	dc1c      	bgt.n	8018a2c <_malloc_r+0x458>
 80189f2:	4630      	mov	r0, r6
 80189f4:	f000 f866 	bl	8018ac4 <__malloc_unlock>
 80189f8:	e5f8      	b.n	80185ec <_malloc_r+0x18>
 80189fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80189fe:	f1a2 040c 	sub.w	r4, r2, #12
 8018a02:	f024 0407 	bic.w	r4, r4, #7
 8018a06:	f003 0301 	and.w	r3, r3, #1
 8018a0a:	4323      	orrs	r3, r4
 8018a0c:	f8ca 3004 	str.w	r3, [sl, #4]
 8018a10:	2205      	movs	r2, #5
 8018a12:	eb0a 0304 	add.w	r3, sl, r4
 8018a16:	2c0f      	cmp	r4, #15
 8018a18:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8018a1c:	f67f af03 	bls.w	8018826 <_malloc_r+0x252>
 8018a20:	f10a 0108 	add.w	r1, sl, #8
 8018a24:	4630      	mov	r0, r6
 8018a26:	f002 fd6d 	bl	801b504 <_free_r>
 8018a2a:	e6fc      	b.n	8018826 <_malloc_r+0x252>
 8018a2c:	68bc      	ldr	r4, [r7, #8]
 8018a2e:	f045 0201 	orr.w	r2, r5, #1
 8018a32:	4425      	add	r5, r4
 8018a34:	f043 0301 	orr.w	r3, r3, #1
 8018a38:	6062      	str	r2, [r4, #4]
 8018a3a:	60bd      	str	r5, [r7, #8]
 8018a3c:	606b      	str	r3, [r5, #4]
 8018a3e:	e5fa      	b.n	8018636 <_malloc_r+0x62>

08018a40 <memcmp>:
 8018a40:	b530      	push	{r4, r5, lr}
 8018a42:	2400      	movs	r4, #0
 8018a44:	42a2      	cmp	r2, r4
 8018a46:	d101      	bne.n	8018a4c <memcmp+0xc>
 8018a48:	2000      	movs	r0, #0
 8018a4a:	e007      	b.n	8018a5c <memcmp+0x1c>
 8018a4c:	5d03      	ldrb	r3, [r0, r4]
 8018a4e:	3401      	adds	r4, #1
 8018a50:	190d      	adds	r5, r1, r4
 8018a52:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8018a56:	42ab      	cmp	r3, r5
 8018a58:	d0f4      	beq.n	8018a44 <memcmp+0x4>
 8018a5a:	1b58      	subs	r0, r3, r5
 8018a5c:	bd30      	pop	{r4, r5, pc}

08018a5e <memcpy>:
 8018a5e:	b510      	push	{r4, lr}
 8018a60:	1e43      	subs	r3, r0, #1
 8018a62:	440a      	add	r2, r1
 8018a64:	4291      	cmp	r1, r2
 8018a66:	d100      	bne.n	8018a6a <memcpy+0xc>
 8018a68:	bd10      	pop	{r4, pc}
 8018a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a72:	e7f7      	b.n	8018a64 <memcpy+0x6>

08018a74 <memmove>:
 8018a74:	4288      	cmp	r0, r1
 8018a76:	b510      	push	{r4, lr}
 8018a78:	eb01 0302 	add.w	r3, r1, r2
 8018a7c:	d807      	bhi.n	8018a8e <memmove+0x1a>
 8018a7e:	1e42      	subs	r2, r0, #1
 8018a80:	4299      	cmp	r1, r3
 8018a82:	d00a      	beq.n	8018a9a <memmove+0x26>
 8018a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a88:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018a8c:	e7f8      	b.n	8018a80 <memmove+0xc>
 8018a8e:	4283      	cmp	r3, r0
 8018a90:	d9f5      	bls.n	8018a7e <memmove+0xa>
 8018a92:	1881      	adds	r1, r0, r2
 8018a94:	1ad2      	subs	r2, r2, r3
 8018a96:	42d3      	cmn	r3, r2
 8018a98:	d100      	bne.n	8018a9c <memmove+0x28>
 8018a9a:	bd10      	pop	{r4, pc}
 8018a9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018aa0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018aa4:	e7f7      	b.n	8018a96 <memmove+0x22>

08018aa6 <memset>:
 8018aa6:	4402      	add	r2, r0
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	4293      	cmp	r3, r2
 8018aac:	d100      	bne.n	8018ab0 <memset+0xa>
 8018aae:	4770      	bx	lr
 8018ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8018ab4:	e7f9      	b.n	8018aaa <memset+0x4>
	...

08018ab8 <__malloc_lock>:
 8018ab8:	4801      	ldr	r0, [pc, #4]	; (8018ac0 <__malloc_lock+0x8>)
 8018aba:	f7ff bd79 	b.w	80185b0 <__retarget_lock_acquire_recursive>
 8018abe:	bf00      	nop
 8018ac0:	2001ba28 	.word	0x2001ba28

08018ac4 <__malloc_unlock>:
 8018ac4:	4801      	ldr	r0, [pc, #4]	; (8018acc <__malloc_unlock+0x8>)
 8018ac6:	f7ff bd74 	b.w	80185b2 <__retarget_lock_release_recursive>
 8018aca:	bf00      	nop
 8018acc:	2001ba28 	.word	0x2001ba28

08018ad0 <_putc_r>:
 8018ad0:	b570      	push	{r4, r5, r6, lr}
 8018ad2:	460d      	mov	r5, r1
 8018ad4:	4614      	mov	r4, r2
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	b118      	cbz	r0, 8018ae2 <_putc_r+0x12>
 8018ada:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018adc:	b90b      	cbnz	r3, 8018ae2 <_putc_r+0x12>
 8018ade:	f002 fc81 	bl	801b3e4 <__sinit>
 8018ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ae4:	07d8      	lsls	r0, r3, #31
 8018ae6:	d405      	bmi.n	8018af4 <_putc_r+0x24>
 8018ae8:	89a3      	ldrh	r3, [r4, #12]
 8018aea:	0599      	lsls	r1, r3, #22
 8018aec:	d402      	bmi.n	8018af4 <_putc_r+0x24>
 8018aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018af0:	f7ff fd5e 	bl	80185b0 <__retarget_lock_acquire_recursive>
 8018af4:	68a3      	ldr	r3, [r4, #8]
 8018af6:	3b01      	subs	r3, #1
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	60a3      	str	r3, [r4, #8]
 8018afc:	da05      	bge.n	8018b0a <_putc_r+0x3a>
 8018afe:	69a2      	ldr	r2, [r4, #24]
 8018b00:	4293      	cmp	r3, r2
 8018b02:	db12      	blt.n	8018b2a <_putc_r+0x5a>
 8018b04:	b2eb      	uxtb	r3, r5
 8018b06:	2b0a      	cmp	r3, #10
 8018b08:	d00f      	beq.n	8018b2a <_putc_r+0x5a>
 8018b0a:	6823      	ldr	r3, [r4, #0]
 8018b0c:	1c5a      	adds	r2, r3, #1
 8018b0e:	6022      	str	r2, [r4, #0]
 8018b10:	701d      	strb	r5, [r3, #0]
 8018b12:	b2ed      	uxtb	r5, r5
 8018b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b16:	07da      	lsls	r2, r3, #31
 8018b18:	d405      	bmi.n	8018b26 <_putc_r+0x56>
 8018b1a:	89a3      	ldrh	r3, [r4, #12]
 8018b1c:	059b      	lsls	r3, r3, #22
 8018b1e:	d402      	bmi.n	8018b26 <_putc_r+0x56>
 8018b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b22:	f7ff fd46 	bl	80185b2 <__retarget_lock_release_recursive>
 8018b26:	4628      	mov	r0, r5
 8018b28:	bd70      	pop	{r4, r5, r6, pc}
 8018b2a:	4629      	mov	r1, r5
 8018b2c:	4622      	mov	r2, r4
 8018b2e:	4630      	mov	r0, r6
 8018b30:	f001 fc65 	bl	801a3fe <__swbuf_r>
 8018b34:	4605      	mov	r5, r0
 8018b36:	e7ed      	b.n	8018b14 <_putc_r+0x44>

08018b38 <realloc>:
 8018b38:	4b02      	ldr	r3, [pc, #8]	; (8018b44 <realloc+0xc>)
 8018b3a:	460a      	mov	r2, r1
 8018b3c:	4601      	mov	r1, r0
 8018b3e:	6818      	ldr	r0, [r3, #0]
 8018b40:	f000 b802 	b.w	8018b48 <_realloc_r>
 8018b44:	2000002c 	.word	0x2000002c

08018b48 <_realloc_r>:
 8018b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b4c:	4682      	mov	sl, r0
 8018b4e:	460c      	mov	r4, r1
 8018b50:	b929      	cbnz	r1, 8018b5e <_realloc_r+0x16>
 8018b52:	4611      	mov	r1, r2
 8018b54:	b003      	add	sp, #12
 8018b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b5a:	f7ff bd3b 	b.w	80185d4 <_malloc_r>
 8018b5e:	9201      	str	r2, [sp, #4]
 8018b60:	f7ff ffaa 	bl	8018ab8 <__malloc_lock>
 8018b64:	9a01      	ldr	r2, [sp, #4]
 8018b66:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8018b6a:	f102 080b 	add.w	r8, r2, #11
 8018b6e:	f1b8 0f16 	cmp.w	r8, #22
 8018b72:	f1a4 0908 	sub.w	r9, r4, #8
 8018b76:	f025 0603 	bic.w	r6, r5, #3
 8018b7a:	d90b      	bls.n	8018b94 <_realloc_r+0x4c>
 8018b7c:	f038 0807 	bics.w	r8, r8, #7
 8018b80:	d50a      	bpl.n	8018b98 <_realloc_r+0x50>
 8018b82:	230c      	movs	r3, #12
 8018b84:	f8ca 3000 	str.w	r3, [sl]
 8018b88:	f04f 0b00 	mov.w	fp, #0
 8018b8c:	4658      	mov	r0, fp
 8018b8e:	b003      	add	sp, #12
 8018b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b94:	f04f 0810 	mov.w	r8, #16
 8018b98:	4590      	cmp	r8, r2
 8018b9a:	d3f2      	bcc.n	8018b82 <_realloc_r+0x3a>
 8018b9c:	45b0      	cmp	r8, r6
 8018b9e:	f340 8170 	ble.w	8018e82 <_realloc_r+0x33a>
 8018ba2:	49a9      	ldr	r1, [pc, #676]	; (8018e48 <_realloc_r+0x300>)
 8018ba4:	9101      	str	r1, [sp, #4]
 8018ba6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8018baa:	eb09 0306 	add.w	r3, r9, r6
 8018bae:	459c      	cmp	ip, r3
 8018bb0:	6858      	ldr	r0, [r3, #4]
 8018bb2:	d005      	beq.n	8018bc0 <_realloc_r+0x78>
 8018bb4:	f020 0101 	bic.w	r1, r0, #1
 8018bb8:	4419      	add	r1, r3
 8018bba:	6849      	ldr	r1, [r1, #4]
 8018bbc:	07cf      	lsls	r7, r1, #31
 8018bbe:	d447      	bmi.n	8018c50 <_realloc_r+0x108>
 8018bc0:	f020 0003 	bic.w	r0, r0, #3
 8018bc4:	459c      	cmp	ip, r3
 8018bc6:	eb06 0700 	add.w	r7, r6, r0
 8018bca:	d119      	bne.n	8018c00 <_realloc_r+0xb8>
 8018bcc:	f108 0110 	add.w	r1, r8, #16
 8018bd0:	42b9      	cmp	r1, r7
 8018bd2:	dc3f      	bgt.n	8018c54 <_realloc_r+0x10c>
 8018bd4:	eb09 0308 	add.w	r3, r9, r8
 8018bd8:	9a01      	ldr	r2, [sp, #4]
 8018bda:	eba7 0708 	sub.w	r7, r7, r8
 8018bde:	f047 0701 	orr.w	r7, r7, #1
 8018be2:	6093      	str	r3, [r2, #8]
 8018be4:	605f      	str	r7, [r3, #4]
 8018be6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018bea:	f003 0301 	and.w	r3, r3, #1
 8018bee:	ea43 0308 	orr.w	r3, r3, r8
 8018bf2:	f844 3c04 	str.w	r3, [r4, #-4]
 8018bf6:	4650      	mov	r0, sl
 8018bf8:	f7ff ff64 	bl	8018ac4 <__malloc_unlock>
 8018bfc:	46a3      	mov	fp, r4
 8018bfe:	e7c5      	b.n	8018b8c <_realloc_r+0x44>
 8018c00:	45b8      	cmp	r8, r7
 8018c02:	dc27      	bgt.n	8018c54 <_realloc_r+0x10c>
 8018c04:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8018c08:	60da      	str	r2, [r3, #12]
 8018c0a:	6093      	str	r3, [r2, #8]
 8018c0c:	eba7 0008 	sub.w	r0, r7, r8
 8018c10:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8018c14:	280f      	cmp	r0, #15
 8018c16:	f002 0201 	and.w	r2, r2, #1
 8018c1a:	eb09 0307 	add.w	r3, r9, r7
 8018c1e:	f240 8132 	bls.w	8018e86 <_realloc_r+0x33e>
 8018c22:	eb09 0108 	add.w	r1, r9, r8
 8018c26:	ea48 0202 	orr.w	r2, r8, r2
 8018c2a:	f040 0001 	orr.w	r0, r0, #1
 8018c2e:	f8c9 2004 	str.w	r2, [r9, #4]
 8018c32:	6048      	str	r0, [r1, #4]
 8018c34:	685a      	ldr	r2, [r3, #4]
 8018c36:	f042 0201 	orr.w	r2, r2, #1
 8018c3a:	605a      	str	r2, [r3, #4]
 8018c3c:	3108      	adds	r1, #8
 8018c3e:	4650      	mov	r0, sl
 8018c40:	f002 fc60 	bl	801b504 <_free_r>
 8018c44:	4650      	mov	r0, sl
 8018c46:	f7ff ff3d 	bl	8018ac4 <__malloc_unlock>
 8018c4a:	f109 0b08 	add.w	fp, r9, #8
 8018c4e:	e79d      	b.n	8018b8c <_realloc_r+0x44>
 8018c50:	2000      	movs	r0, #0
 8018c52:	4603      	mov	r3, r0
 8018c54:	07e9      	lsls	r1, r5, #31
 8018c56:	f100 80c6 	bmi.w	8018de6 <_realloc_r+0x29e>
 8018c5a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8018c5e:	eba9 0505 	sub.w	r5, r9, r5
 8018c62:	6869      	ldr	r1, [r5, #4]
 8018c64:	f021 0103 	bic.w	r1, r1, #3
 8018c68:	eb01 0b06 	add.w	fp, r1, r6
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	f000 8086 	beq.w	8018d7e <_realloc_r+0x236>
 8018c72:	459c      	cmp	ip, r3
 8018c74:	eb00 070b 	add.w	r7, r0, fp
 8018c78:	d149      	bne.n	8018d0e <_realloc_r+0x1c6>
 8018c7a:	f108 0310 	add.w	r3, r8, #16
 8018c7e:	42bb      	cmp	r3, r7
 8018c80:	dc7d      	bgt.n	8018d7e <_realloc_r+0x236>
 8018c82:	46ab      	mov	fp, r5
 8018c84:	68eb      	ldr	r3, [r5, #12]
 8018c86:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8018c8a:	60d3      	str	r3, [r2, #12]
 8018c8c:	609a      	str	r2, [r3, #8]
 8018c8e:	1f32      	subs	r2, r6, #4
 8018c90:	2a24      	cmp	r2, #36	; 0x24
 8018c92:	d837      	bhi.n	8018d04 <_realloc_r+0x1bc>
 8018c94:	2a13      	cmp	r2, #19
 8018c96:	d933      	bls.n	8018d00 <_realloc_r+0x1b8>
 8018c98:	6823      	ldr	r3, [r4, #0]
 8018c9a:	60ab      	str	r3, [r5, #8]
 8018c9c:	6863      	ldr	r3, [r4, #4]
 8018c9e:	60eb      	str	r3, [r5, #12]
 8018ca0:	2a1b      	cmp	r2, #27
 8018ca2:	d81b      	bhi.n	8018cdc <_realloc_r+0x194>
 8018ca4:	3408      	adds	r4, #8
 8018ca6:	f105 0310 	add.w	r3, r5, #16
 8018caa:	6822      	ldr	r2, [r4, #0]
 8018cac:	601a      	str	r2, [r3, #0]
 8018cae:	6862      	ldr	r2, [r4, #4]
 8018cb0:	605a      	str	r2, [r3, #4]
 8018cb2:	68a2      	ldr	r2, [r4, #8]
 8018cb4:	609a      	str	r2, [r3, #8]
 8018cb6:	eb05 0308 	add.w	r3, r5, r8
 8018cba:	9a01      	ldr	r2, [sp, #4]
 8018cbc:	eba7 0708 	sub.w	r7, r7, r8
 8018cc0:	f047 0701 	orr.w	r7, r7, #1
 8018cc4:	6093      	str	r3, [r2, #8]
 8018cc6:	605f      	str	r7, [r3, #4]
 8018cc8:	686b      	ldr	r3, [r5, #4]
 8018cca:	f003 0301 	and.w	r3, r3, #1
 8018cce:	ea43 0308 	orr.w	r3, r3, r8
 8018cd2:	606b      	str	r3, [r5, #4]
 8018cd4:	4650      	mov	r0, sl
 8018cd6:	f7ff fef5 	bl	8018ac4 <__malloc_unlock>
 8018cda:	e757      	b.n	8018b8c <_realloc_r+0x44>
 8018cdc:	68a3      	ldr	r3, [r4, #8]
 8018cde:	612b      	str	r3, [r5, #16]
 8018ce0:	68e3      	ldr	r3, [r4, #12]
 8018ce2:	616b      	str	r3, [r5, #20]
 8018ce4:	2a24      	cmp	r2, #36	; 0x24
 8018ce6:	bf01      	itttt	eq
 8018ce8:	6923      	ldreq	r3, [r4, #16]
 8018cea:	61ab      	streq	r3, [r5, #24]
 8018cec:	6962      	ldreq	r2, [r4, #20]
 8018cee:	61ea      	streq	r2, [r5, #28]
 8018cf0:	bf19      	ittee	ne
 8018cf2:	3410      	addne	r4, #16
 8018cf4:	f105 0318 	addne.w	r3, r5, #24
 8018cf8:	f105 0320 	addeq.w	r3, r5, #32
 8018cfc:	3418      	addeq	r4, #24
 8018cfe:	e7d4      	b.n	8018caa <_realloc_r+0x162>
 8018d00:	465b      	mov	r3, fp
 8018d02:	e7d2      	b.n	8018caa <_realloc_r+0x162>
 8018d04:	4621      	mov	r1, r4
 8018d06:	4658      	mov	r0, fp
 8018d08:	f7ff feb4 	bl	8018a74 <memmove>
 8018d0c:	e7d3      	b.n	8018cb6 <_realloc_r+0x16e>
 8018d0e:	45b8      	cmp	r8, r7
 8018d10:	dc35      	bgt.n	8018d7e <_realloc_r+0x236>
 8018d12:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8018d16:	4628      	mov	r0, r5
 8018d18:	60da      	str	r2, [r3, #12]
 8018d1a:	6093      	str	r3, [r2, #8]
 8018d1c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8018d20:	68eb      	ldr	r3, [r5, #12]
 8018d22:	60d3      	str	r3, [r2, #12]
 8018d24:	609a      	str	r2, [r3, #8]
 8018d26:	1f32      	subs	r2, r6, #4
 8018d28:	2a24      	cmp	r2, #36	; 0x24
 8018d2a:	d824      	bhi.n	8018d76 <_realloc_r+0x22e>
 8018d2c:	2a13      	cmp	r2, #19
 8018d2e:	d908      	bls.n	8018d42 <_realloc_r+0x1fa>
 8018d30:	6823      	ldr	r3, [r4, #0]
 8018d32:	60ab      	str	r3, [r5, #8]
 8018d34:	6863      	ldr	r3, [r4, #4]
 8018d36:	60eb      	str	r3, [r5, #12]
 8018d38:	2a1b      	cmp	r2, #27
 8018d3a:	d80a      	bhi.n	8018d52 <_realloc_r+0x20a>
 8018d3c:	3408      	adds	r4, #8
 8018d3e:	f105 0010 	add.w	r0, r5, #16
 8018d42:	6823      	ldr	r3, [r4, #0]
 8018d44:	6003      	str	r3, [r0, #0]
 8018d46:	6863      	ldr	r3, [r4, #4]
 8018d48:	6043      	str	r3, [r0, #4]
 8018d4a:	68a3      	ldr	r3, [r4, #8]
 8018d4c:	6083      	str	r3, [r0, #8]
 8018d4e:	46a9      	mov	r9, r5
 8018d50:	e75c      	b.n	8018c0c <_realloc_r+0xc4>
 8018d52:	68a3      	ldr	r3, [r4, #8]
 8018d54:	612b      	str	r3, [r5, #16]
 8018d56:	68e3      	ldr	r3, [r4, #12]
 8018d58:	616b      	str	r3, [r5, #20]
 8018d5a:	2a24      	cmp	r2, #36	; 0x24
 8018d5c:	bf01      	itttt	eq
 8018d5e:	6923      	ldreq	r3, [r4, #16]
 8018d60:	61ab      	streq	r3, [r5, #24]
 8018d62:	6963      	ldreq	r3, [r4, #20]
 8018d64:	61eb      	streq	r3, [r5, #28]
 8018d66:	bf19      	ittee	ne
 8018d68:	3410      	addne	r4, #16
 8018d6a:	f105 0018 	addne.w	r0, r5, #24
 8018d6e:	f105 0020 	addeq.w	r0, r5, #32
 8018d72:	3418      	addeq	r4, #24
 8018d74:	e7e5      	b.n	8018d42 <_realloc_r+0x1fa>
 8018d76:	4621      	mov	r1, r4
 8018d78:	f7ff fe7c 	bl	8018a74 <memmove>
 8018d7c:	e7e7      	b.n	8018d4e <_realloc_r+0x206>
 8018d7e:	45d8      	cmp	r8, fp
 8018d80:	dc31      	bgt.n	8018de6 <_realloc_r+0x29e>
 8018d82:	4628      	mov	r0, r5
 8018d84:	68eb      	ldr	r3, [r5, #12]
 8018d86:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8018d8a:	60d3      	str	r3, [r2, #12]
 8018d8c:	609a      	str	r2, [r3, #8]
 8018d8e:	1f32      	subs	r2, r6, #4
 8018d90:	2a24      	cmp	r2, #36	; 0x24
 8018d92:	d824      	bhi.n	8018dde <_realloc_r+0x296>
 8018d94:	2a13      	cmp	r2, #19
 8018d96:	d908      	bls.n	8018daa <_realloc_r+0x262>
 8018d98:	6823      	ldr	r3, [r4, #0]
 8018d9a:	60ab      	str	r3, [r5, #8]
 8018d9c:	6863      	ldr	r3, [r4, #4]
 8018d9e:	60eb      	str	r3, [r5, #12]
 8018da0:	2a1b      	cmp	r2, #27
 8018da2:	d80a      	bhi.n	8018dba <_realloc_r+0x272>
 8018da4:	3408      	adds	r4, #8
 8018da6:	f105 0010 	add.w	r0, r5, #16
 8018daa:	6823      	ldr	r3, [r4, #0]
 8018dac:	6003      	str	r3, [r0, #0]
 8018dae:	6863      	ldr	r3, [r4, #4]
 8018db0:	6043      	str	r3, [r0, #4]
 8018db2:	68a3      	ldr	r3, [r4, #8]
 8018db4:	6083      	str	r3, [r0, #8]
 8018db6:	465f      	mov	r7, fp
 8018db8:	e7c9      	b.n	8018d4e <_realloc_r+0x206>
 8018dba:	68a3      	ldr	r3, [r4, #8]
 8018dbc:	612b      	str	r3, [r5, #16]
 8018dbe:	68e3      	ldr	r3, [r4, #12]
 8018dc0:	616b      	str	r3, [r5, #20]
 8018dc2:	2a24      	cmp	r2, #36	; 0x24
 8018dc4:	bf01      	itttt	eq
 8018dc6:	6923      	ldreq	r3, [r4, #16]
 8018dc8:	61ab      	streq	r3, [r5, #24]
 8018dca:	6963      	ldreq	r3, [r4, #20]
 8018dcc:	61eb      	streq	r3, [r5, #28]
 8018dce:	bf19      	ittee	ne
 8018dd0:	3410      	addne	r4, #16
 8018dd2:	f105 0018 	addne.w	r0, r5, #24
 8018dd6:	f105 0020 	addeq.w	r0, r5, #32
 8018dda:	3418      	addeq	r4, #24
 8018ddc:	e7e5      	b.n	8018daa <_realloc_r+0x262>
 8018dde:	4621      	mov	r1, r4
 8018de0:	f7ff fe48 	bl	8018a74 <memmove>
 8018de4:	e7e7      	b.n	8018db6 <_realloc_r+0x26e>
 8018de6:	4611      	mov	r1, r2
 8018de8:	4650      	mov	r0, sl
 8018dea:	f7ff fbf3 	bl	80185d4 <_malloc_r>
 8018dee:	4683      	mov	fp, r0
 8018df0:	2800      	cmp	r0, #0
 8018df2:	f43f af6f 	beq.w	8018cd4 <_realloc_r+0x18c>
 8018df6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018dfa:	f023 0301 	bic.w	r3, r3, #1
 8018dfe:	444b      	add	r3, r9
 8018e00:	f1a0 0208 	sub.w	r2, r0, #8
 8018e04:	4293      	cmp	r3, r2
 8018e06:	d105      	bne.n	8018e14 <_realloc_r+0x2cc>
 8018e08:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8018e0c:	f027 0703 	bic.w	r7, r7, #3
 8018e10:	4437      	add	r7, r6
 8018e12:	e6fb      	b.n	8018c0c <_realloc_r+0xc4>
 8018e14:	1f32      	subs	r2, r6, #4
 8018e16:	2a24      	cmp	r2, #36	; 0x24
 8018e18:	d82f      	bhi.n	8018e7a <_realloc_r+0x332>
 8018e1a:	2a13      	cmp	r2, #19
 8018e1c:	d92a      	bls.n	8018e74 <_realloc_r+0x32c>
 8018e1e:	6823      	ldr	r3, [r4, #0]
 8018e20:	6003      	str	r3, [r0, #0]
 8018e22:	6863      	ldr	r3, [r4, #4]
 8018e24:	6043      	str	r3, [r0, #4]
 8018e26:	2a1b      	cmp	r2, #27
 8018e28:	d810      	bhi.n	8018e4c <_realloc_r+0x304>
 8018e2a:	f104 0208 	add.w	r2, r4, #8
 8018e2e:	f100 0308 	add.w	r3, r0, #8
 8018e32:	6811      	ldr	r1, [r2, #0]
 8018e34:	6019      	str	r1, [r3, #0]
 8018e36:	6851      	ldr	r1, [r2, #4]
 8018e38:	6059      	str	r1, [r3, #4]
 8018e3a:	6892      	ldr	r2, [r2, #8]
 8018e3c:	609a      	str	r2, [r3, #8]
 8018e3e:	4621      	mov	r1, r4
 8018e40:	4650      	mov	r0, sl
 8018e42:	f002 fb5f 	bl	801b504 <_free_r>
 8018e46:	e745      	b.n	8018cd4 <_realloc_r+0x18c>
 8018e48:	20000458 	.word	0x20000458
 8018e4c:	68a3      	ldr	r3, [r4, #8]
 8018e4e:	6083      	str	r3, [r0, #8]
 8018e50:	68e3      	ldr	r3, [r4, #12]
 8018e52:	60c3      	str	r3, [r0, #12]
 8018e54:	2a24      	cmp	r2, #36	; 0x24
 8018e56:	bf01      	itttt	eq
 8018e58:	6923      	ldreq	r3, [r4, #16]
 8018e5a:	6103      	streq	r3, [r0, #16]
 8018e5c:	6961      	ldreq	r1, [r4, #20]
 8018e5e:	6141      	streq	r1, [r0, #20]
 8018e60:	bf19      	ittee	ne
 8018e62:	f104 0210 	addne.w	r2, r4, #16
 8018e66:	f100 0310 	addne.w	r3, r0, #16
 8018e6a:	f104 0218 	addeq.w	r2, r4, #24
 8018e6e:	f100 0318 	addeq.w	r3, r0, #24
 8018e72:	e7de      	b.n	8018e32 <_realloc_r+0x2ea>
 8018e74:	4603      	mov	r3, r0
 8018e76:	4622      	mov	r2, r4
 8018e78:	e7db      	b.n	8018e32 <_realloc_r+0x2ea>
 8018e7a:	4621      	mov	r1, r4
 8018e7c:	f7ff fdfa 	bl	8018a74 <memmove>
 8018e80:	e7dd      	b.n	8018e3e <_realloc_r+0x2f6>
 8018e82:	4637      	mov	r7, r6
 8018e84:	e6c2      	b.n	8018c0c <_realloc_r+0xc4>
 8018e86:	4317      	orrs	r7, r2
 8018e88:	f8c9 7004 	str.w	r7, [r9, #4]
 8018e8c:	685a      	ldr	r2, [r3, #4]
 8018e8e:	f042 0201 	orr.w	r2, r2, #1
 8018e92:	605a      	str	r2, [r3, #4]
 8018e94:	e6d6      	b.n	8018c44 <_realloc_r+0xfc>
 8018e96:	bf00      	nop

08018e98 <_sbrk_r>:
 8018e98:	b538      	push	{r3, r4, r5, lr}
 8018e9a:	4c06      	ldr	r4, [pc, #24]	; (8018eb4 <_sbrk_r+0x1c>)
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	4605      	mov	r5, r0
 8018ea0:	4608      	mov	r0, r1
 8018ea2:	6023      	str	r3, [r4, #0]
 8018ea4:	f003 f99a 	bl	801c1dc <_sbrk>
 8018ea8:	1c43      	adds	r3, r0, #1
 8018eaa:	d102      	bne.n	8018eb2 <_sbrk_r+0x1a>
 8018eac:	6823      	ldr	r3, [r4, #0]
 8018eae:	b103      	cbz	r3, 8018eb2 <_sbrk_r+0x1a>
 8018eb0:	602b      	str	r3, [r5, #0]
 8018eb2:	bd38      	pop	{r3, r4, r5, pc}
 8018eb4:	2001ba30 	.word	0x2001ba30

08018eb8 <_raise_r>:
 8018eb8:	291f      	cmp	r1, #31
 8018eba:	b538      	push	{r3, r4, r5, lr}
 8018ebc:	4604      	mov	r4, r0
 8018ebe:	460d      	mov	r5, r1
 8018ec0:	d904      	bls.n	8018ecc <_raise_r+0x14>
 8018ec2:	2316      	movs	r3, #22
 8018ec4:	6003      	str	r3, [r0, #0]
 8018ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018eca:	bd38      	pop	{r3, r4, r5, pc}
 8018ecc:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8018ed0:	b112      	cbz	r2, 8018ed8 <_raise_r+0x20>
 8018ed2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ed6:	b94b      	cbnz	r3, 8018eec <_raise_r+0x34>
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f000 f831 	bl	8018f40 <_getpid_r>
 8018ede:	462a      	mov	r2, r5
 8018ee0:	4601      	mov	r1, r0
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ee8:	f000 b818 	b.w	8018f1c <_kill_r>
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d00a      	beq.n	8018f06 <_raise_r+0x4e>
 8018ef0:	1c59      	adds	r1, r3, #1
 8018ef2:	d103      	bne.n	8018efc <_raise_r+0x44>
 8018ef4:	2316      	movs	r3, #22
 8018ef6:	6003      	str	r3, [r0, #0]
 8018ef8:	2001      	movs	r0, #1
 8018efa:	e7e6      	b.n	8018eca <_raise_r+0x12>
 8018efc:	2400      	movs	r4, #0
 8018efe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018f02:	4628      	mov	r0, r5
 8018f04:	4798      	blx	r3
 8018f06:	2000      	movs	r0, #0
 8018f08:	e7df      	b.n	8018eca <_raise_r+0x12>
	...

08018f0c <raise>:
 8018f0c:	4b02      	ldr	r3, [pc, #8]	; (8018f18 <raise+0xc>)
 8018f0e:	4601      	mov	r1, r0
 8018f10:	6818      	ldr	r0, [r3, #0]
 8018f12:	f7ff bfd1 	b.w	8018eb8 <_raise_r>
 8018f16:	bf00      	nop
 8018f18:	2000002c 	.word	0x2000002c

08018f1c <_kill_r>:
 8018f1c:	b538      	push	{r3, r4, r5, lr}
 8018f1e:	4c07      	ldr	r4, [pc, #28]	; (8018f3c <_kill_r+0x20>)
 8018f20:	2300      	movs	r3, #0
 8018f22:	4605      	mov	r5, r0
 8018f24:	4608      	mov	r0, r1
 8018f26:	4611      	mov	r1, r2
 8018f28:	6023      	str	r3, [r4, #0]
 8018f2a:	f003 f94f 	bl	801c1cc <_kill>
 8018f2e:	1c43      	adds	r3, r0, #1
 8018f30:	d102      	bne.n	8018f38 <_kill_r+0x1c>
 8018f32:	6823      	ldr	r3, [r4, #0]
 8018f34:	b103      	cbz	r3, 8018f38 <_kill_r+0x1c>
 8018f36:	602b      	str	r3, [r5, #0]
 8018f38:	bd38      	pop	{r3, r4, r5, pc}
 8018f3a:	bf00      	nop
 8018f3c:	2001ba30 	.word	0x2001ba30

08018f40 <_getpid_r>:
 8018f40:	f003 b93c 	b.w	801c1bc <_getpid>

08018f44 <sprintf>:
 8018f44:	b40e      	push	{r1, r2, r3}
 8018f46:	b500      	push	{lr}
 8018f48:	b09c      	sub	sp, #112	; 0x70
 8018f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8018f4c:	9002      	str	r0, [sp, #8]
 8018f4e:	9006      	str	r0, [sp, #24]
 8018f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018f54:	4809      	ldr	r0, [pc, #36]	; (8018f7c <sprintf+0x38>)
 8018f56:	9107      	str	r1, [sp, #28]
 8018f58:	9104      	str	r1, [sp, #16]
 8018f5a:	4909      	ldr	r1, [pc, #36]	; (8018f80 <sprintf+0x3c>)
 8018f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f60:	9105      	str	r1, [sp, #20]
 8018f62:	6800      	ldr	r0, [r0, #0]
 8018f64:	9301      	str	r3, [sp, #4]
 8018f66:	a902      	add	r1, sp, #8
 8018f68:	f000 f81e 	bl	8018fa8 <_svfprintf_r>
 8018f6c:	9b02      	ldr	r3, [sp, #8]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	701a      	strb	r2, [r3, #0]
 8018f72:	b01c      	add	sp, #112	; 0x70
 8018f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f78:	b003      	add	sp, #12
 8018f7a:	4770      	bx	lr
 8018f7c:	2000002c 	.word	0x2000002c
 8018f80:	ffff0208 	.word	0xffff0208

08018f84 <strncmp>:
 8018f84:	b510      	push	{r4, lr}
 8018f86:	b16a      	cbz	r2, 8018fa4 <strncmp+0x20>
 8018f88:	3901      	subs	r1, #1
 8018f8a:	1884      	adds	r4, r0, r2
 8018f8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018f90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018f94:	4293      	cmp	r3, r2
 8018f96:	d103      	bne.n	8018fa0 <strncmp+0x1c>
 8018f98:	42a0      	cmp	r0, r4
 8018f9a:	d001      	beq.n	8018fa0 <strncmp+0x1c>
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d1f5      	bne.n	8018f8c <strncmp+0x8>
 8018fa0:	1a98      	subs	r0, r3, r2
 8018fa2:	bd10      	pop	{r4, pc}
 8018fa4:	4610      	mov	r0, r2
 8018fa6:	e7fc      	b.n	8018fa2 <strncmp+0x1e>

08018fa8 <_svfprintf_r>:
 8018fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fac:	b0d3      	sub	sp, #332	; 0x14c
 8018fae:	4688      	mov	r8, r1
 8018fb0:	4693      	mov	fp, r2
 8018fb2:	461e      	mov	r6, r3
 8018fb4:	9003      	str	r0, [sp, #12]
 8018fb6:	f002 fb7f 	bl	801b6b8 <_localeconv_r>
 8018fba:	6803      	ldr	r3, [r0, #0]
 8018fbc:	9316      	str	r3, [sp, #88]	; 0x58
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7ed fef0 	bl	8006da4 <strlen>
 8018fc4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8018fc8:	900d      	str	r0, [sp, #52]	; 0x34
 8018fca:	0618      	lsls	r0, r3, #24
 8018fcc:	d518      	bpl.n	8019000 <_svfprintf_r+0x58>
 8018fce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018fd2:	b9ab      	cbnz	r3, 8019000 <_svfprintf_r+0x58>
 8018fd4:	2140      	movs	r1, #64	; 0x40
 8018fd6:	9803      	ldr	r0, [sp, #12]
 8018fd8:	f7ff fafc 	bl	80185d4 <_malloc_r>
 8018fdc:	f8c8 0000 	str.w	r0, [r8]
 8018fe0:	f8c8 0010 	str.w	r0, [r8, #16]
 8018fe4:	b948      	cbnz	r0, 8018ffa <_svfprintf_r+0x52>
 8018fe6:	9a03      	ldr	r2, [sp, #12]
 8018fe8:	230c      	movs	r3, #12
 8018fea:	6013      	str	r3, [r2, #0]
 8018fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8018ff2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018ff4:	b053      	add	sp, #332	; 0x14c
 8018ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ffa:	2340      	movs	r3, #64	; 0x40
 8018ffc:	f8c8 3014 	str.w	r3, [r8, #20]
 8019000:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8019328 <_svfprintf_r+0x380>
 8019004:	2300      	movs	r3, #0
 8019006:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 801900a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801900e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8019012:	ac29      	add	r4, sp, #164	; 0xa4
 8019014:	9426      	str	r4, [sp, #152]	; 0x98
 8019016:	9304      	str	r3, [sp, #16]
 8019018:	9309      	str	r3, [sp, #36]	; 0x24
 801901a:	9312      	str	r3, [sp, #72]	; 0x48
 801901c:	9319      	str	r3, [sp, #100]	; 0x64
 801901e:	930e      	str	r3, [sp, #56]	; 0x38
 8019020:	465d      	mov	r5, fp
 8019022:	462b      	mov	r3, r5
 8019024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019028:	b112      	cbz	r2, 8019030 <_svfprintf_r+0x88>
 801902a:	2a25      	cmp	r2, #37	; 0x25
 801902c:	f040 80e4 	bne.w	80191f8 <_svfprintf_r+0x250>
 8019030:	ebb5 070b 	subs.w	r7, r5, fp
 8019034:	d00e      	beq.n	8019054 <_svfprintf_r+0xac>
 8019036:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019038:	443b      	add	r3, r7
 801903a:	9328      	str	r3, [sp, #160]	; 0xa0
 801903c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801903e:	3301      	adds	r3, #1
 8019040:	2b07      	cmp	r3, #7
 8019042:	e9c4 b700 	strd	fp, r7, [r4]
 8019046:	9327      	str	r3, [sp, #156]	; 0x9c
 8019048:	f300 80d8 	bgt.w	80191fc <_svfprintf_r+0x254>
 801904c:	3408      	adds	r4, #8
 801904e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019050:	443b      	add	r3, r7
 8019052:	930e      	str	r3, [sp, #56]	; 0x38
 8019054:	782b      	ldrb	r3, [r5, #0]
 8019056:	2b00      	cmp	r3, #0
 8019058:	f001 81b4 	beq.w	801a3c4 <_svfprintf_r+0x141c>
 801905c:	1c6b      	adds	r3, r5, #1
 801905e:	930c      	str	r3, [sp, #48]	; 0x30
 8019060:	2300      	movs	r3, #0
 8019062:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019066:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801906a:	930f      	str	r3, [sp, #60]	; 0x3c
 801906c:	469a      	mov	sl, r3
 801906e:	270a      	movs	r7, #10
 8019070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019072:	781b      	ldrb	r3, [r3, #0]
 8019074:	9306      	str	r3, [sp, #24]
 8019076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019078:	3301      	adds	r3, #1
 801907a:	930c      	str	r3, [sp, #48]	; 0x30
 801907c:	9b06      	ldr	r3, [sp, #24]
 801907e:	3b20      	subs	r3, #32
 8019080:	2b5a      	cmp	r3, #90	; 0x5a
 8019082:	f200 8624 	bhi.w	8019cce <_svfprintf_r+0xd26>
 8019086:	a201      	add	r2, pc, #4	; (adr r2, 801908c <_svfprintf_r+0xe4>)
 8019088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801908c:	0801928f 	.word	0x0801928f
 8019090:	08019ccf 	.word	0x08019ccf
 8019094:	08019ccf 	.word	0x08019ccf
 8019098:	080192a1 	.word	0x080192a1
 801909c:	08019ccf 	.word	0x08019ccf
 80190a0:	08019ccf 	.word	0x08019ccf
 80190a4:	08019ccf 	.word	0x08019ccf
 80190a8:	08019255 	.word	0x08019255
 80190ac:	08019ccf 	.word	0x08019ccf
 80190b0:	08019ccf 	.word	0x08019ccf
 80190b4:	080192a7 	.word	0x080192a7
 80190b8:	080192bf 	.word	0x080192bf
 80190bc:	08019ccf 	.word	0x08019ccf
 80190c0:	080192b9 	.word	0x080192b9
 80190c4:	080192c3 	.word	0x080192c3
 80190c8:	08019ccf 	.word	0x08019ccf
 80190cc:	080192f7 	.word	0x080192f7
 80190d0:	080192fd 	.word	0x080192fd
 80190d4:	080192fd 	.word	0x080192fd
 80190d8:	080192fd 	.word	0x080192fd
 80190dc:	080192fd 	.word	0x080192fd
 80190e0:	080192fd 	.word	0x080192fd
 80190e4:	080192fd 	.word	0x080192fd
 80190e8:	080192fd 	.word	0x080192fd
 80190ec:	080192fd 	.word	0x080192fd
 80190f0:	080192fd 	.word	0x080192fd
 80190f4:	08019ccf 	.word	0x08019ccf
 80190f8:	08019ccf 	.word	0x08019ccf
 80190fc:	08019ccf 	.word	0x08019ccf
 8019100:	08019ccf 	.word	0x08019ccf
 8019104:	08019ccf 	.word	0x08019ccf
 8019108:	08019ccf 	.word	0x08019ccf
 801910c:	08019ccf 	.word	0x08019ccf
 8019110:	080193ff 	.word	0x080193ff
 8019114:	08019ccf 	.word	0x08019ccf
 8019118:	08019369 	.word	0x08019369
 801911c:	0801938b 	.word	0x0801938b
 8019120:	080193ff 	.word	0x080193ff
 8019124:	080193ff 	.word	0x080193ff
 8019128:	080193ff 	.word	0x080193ff
 801912c:	08019ccf 	.word	0x08019ccf
 8019130:	08019ccf 	.word	0x08019ccf
 8019134:	08019ccf 	.word	0x08019ccf
 8019138:	08019ccf 	.word	0x08019ccf
 801913c:	0801931d 	.word	0x0801931d
 8019140:	08019ccf 	.word	0x08019ccf
 8019144:	08019ccf 	.word	0x08019ccf
 8019148:	080198d1 	.word	0x080198d1
 801914c:	08019ccf 	.word	0x08019ccf
 8019150:	08019ccf 	.word	0x08019ccf
 8019154:	08019ccf 	.word	0x08019ccf
 8019158:	0801995d 	.word	0x0801995d
 801915c:	08019ccf 	.word	0x08019ccf
 8019160:	08019b3f 	.word	0x08019b3f
 8019164:	08019ccf 	.word	0x08019ccf
 8019168:	08019ccf 	.word	0x08019ccf
 801916c:	08019215 	.word	0x08019215
 8019170:	08019ccf 	.word	0x08019ccf
 8019174:	08019ccf 	.word	0x08019ccf
 8019178:	08019ccf 	.word	0x08019ccf
 801917c:	08019ccf 	.word	0x08019ccf
 8019180:	08019ccf 	.word	0x08019ccf
 8019184:	08019ccf 	.word	0x08019ccf
 8019188:	08019ccf 	.word	0x08019ccf
 801918c:	08019ccf 	.word	0x08019ccf
 8019190:	080193ff 	.word	0x080193ff
 8019194:	08019ccf 	.word	0x08019ccf
 8019198:	08019369 	.word	0x08019369
 801919c:	0801938f 	.word	0x0801938f
 80191a0:	080193ff 	.word	0x080193ff
 80191a4:	080193ff 	.word	0x080193ff
 80191a8:	080193ff 	.word	0x080193ff
 80191ac:	08019335 	.word	0x08019335
 80191b0:	0801938f 	.word	0x0801938f
 80191b4:	0801935d 	.word	0x0801935d
 80191b8:	08019ccf 	.word	0x08019ccf
 80191bc:	0801934f 	.word	0x0801934f
 80191c0:	08019ccf 	.word	0x08019ccf
 80191c4:	0801988b 	.word	0x0801988b
 80191c8:	080198d5 	.word	0x080198d5
 80191cc:	0801993d 	.word	0x0801993d
 80191d0:	0801935d 	.word	0x0801935d
 80191d4:	08019ccf 	.word	0x08019ccf
 80191d8:	0801995d 	.word	0x0801995d
 80191dc:	08019071 	.word	0x08019071
 80191e0:	08019b43 	.word	0x08019b43
 80191e4:	08019ccf 	.word	0x08019ccf
 80191e8:	08019ccf 	.word	0x08019ccf
 80191ec:	08019b81 	.word	0x08019b81
 80191f0:	08019ccf 	.word	0x08019ccf
 80191f4:	08019071 	.word	0x08019071
 80191f8:	461d      	mov	r5, r3
 80191fa:	e712      	b.n	8019022 <_svfprintf_r+0x7a>
 80191fc:	aa26      	add	r2, sp, #152	; 0x98
 80191fe:	4641      	mov	r1, r8
 8019200:	9803      	ldr	r0, [sp, #12]
 8019202:	f002 fe11 	bl	801be28 <__ssprint_r>
 8019206:	2800      	cmp	r0, #0
 8019208:	f040 8166 	bne.w	80194d8 <_svfprintf_r+0x530>
 801920c:	ac29      	add	r4, sp, #164	; 0xa4
 801920e:	e71e      	b.n	801904e <_svfprintf_r+0xa6>
 8019210:	461e      	mov	r6, r3
 8019212:	e72d      	b.n	8019070 <_svfprintf_r+0xc8>
 8019214:	4b46      	ldr	r3, [pc, #280]	; (8019330 <_svfprintf_r+0x388>)
 8019216:	9318      	str	r3, [sp, #96]	; 0x60
 8019218:	f01a 0f20 	tst.w	sl, #32
 801921c:	f000 84b3 	beq.w	8019b86 <_svfprintf_r+0xbde>
 8019220:	3607      	adds	r6, #7
 8019222:	f026 0607 	bic.w	r6, r6, #7
 8019226:	f106 0308 	add.w	r3, r6, #8
 801922a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801922e:	9308      	str	r3, [sp, #32]
 8019230:	f01a 0f01 	tst.w	sl, #1
 8019234:	d00a      	beq.n	801924c <_svfprintf_r+0x2a4>
 8019236:	ea56 0307 	orrs.w	r3, r6, r7
 801923a:	d007      	beq.n	801924c <_svfprintf_r+0x2a4>
 801923c:	2330      	movs	r3, #48	; 0x30
 801923e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019242:	9b06      	ldr	r3, [sp, #24]
 8019244:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8019248:	f04a 0a02 	orr.w	sl, sl, #2
 801924c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8019250:	2302      	movs	r3, #2
 8019252:	e34d      	b.n	80198f0 <_svfprintf_r+0x948>
 8019254:	9803      	ldr	r0, [sp, #12]
 8019256:	f002 fa2f 	bl	801b6b8 <_localeconv_r>
 801925a:	6843      	ldr	r3, [r0, #4]
 801925c:	9319      	str	r3, [sp, #100]	; 0x64
 801925e:	4618      	mov	r0, r3
 8019260:	f7ed fda0 	bl	8006da4 <strlen>
 8019264:	9012      	str	r0, [sp, #72]	; 0x48
 8019266:	9803      	ldr	r0, [sp, #12]
 8019268:	f002 fa26 	bl	801b6b8 <_localeconv_r>
 801926c:	6883      	ldr	r3, [r0, #8]
 801926e:	9309      	str	r3, [sp, #36]	; 0x24
 8019270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019272:	2b00      	cmp	r3, #0
 8019274:	f43f aefc 	beq.w	8019070 <_svfprintf_r+0xc8>
 8019278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801927a:	2b00      	cmp	r3, #0
 801927c:	f43f aef8 	beq.w	8019070 <_svfprintf_r+0xc8>
 8019280:	781b      	ldrb	r3, [r3, #0]
 8019282:	2b00      	cmp	r3, #0
 8019284:	f43f aef4 	beq.w	8019070 <_svfprintf_r+0xc8>
 8019288:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801928c:	e6f0      	b.n	8019070 <_svfprintf_r+0xc8>
 801928e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8019292:	2b00      	cmp	r3, #0
 8019294:	f47f aeec 	bne.w	8019070 <_svfprintf_r+0xc8>
 8019298:	2320      	movs	r3, #32
 801929a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801929e:	e6e7      	b.n	8019070 <_svfprintf_r+0xc8>
 80192a0:	f04a 0a01 	orr.w	sl, sl, #1
 80192a4:	e6e4      	b.n	8019070 <_svfprintf_r+0xc8>
 80192a6:	6832      	ldr	r2, [r6, #0]
 80192a8:	920f      	str	r2, [sp, #60]	; 0x3c
 80192aa:	2a00      	cmp	r2, #0
 80192ac:	f106 0304 	add.w	r3, r6, #4
 80192b0:	daae      	bge.n	8019210 <_svfprintf_r+0x268>
 80192b2:	4252      	negs	r2, r2
 80192b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80192b6:	461e      	mov	r6, r3
 80192b8:	f04a 0a04 	orr.w	sl, sl, #4
 80192bc:	e6d8      	b.n	8019070 <_svfprintf_r+0xc8>
 80192be:	232b      	movs	r3, #43	; 0x2b
 80192c0:	e7eb      	b.n	801929a <_svfprintf_r+0x2f2>
 80192c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80192c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192c6:	7812      	ldrb	r2, [r2, #0]
 80192c8:	9206      	str	r2, [sp, #24]
 80192ca:	2a2a      	cmp	r2, #42	; 0x2a
 80192cc:	f103 0301 	add.w	r3, r3, #1
 80192d0:	d10f      	bne.n	80192f2 <_svfprintf_r+0x34a>
 80192d2:	6835      	ldr	r5, [r6, #0]
 80192d4:	930c      	str	r3, [sp, #48]	; 0x30
 80192d6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80192da:	3604      	adds	r6, #4
 80192dc:	e6c8      	b.n	8019070 <_svfprintf_r+0xc8>
 80192de:	fb07 2505 	mla	r5, r7, r5, r2
 80192e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192e6:	9206      	str	r2, [sp, #24]
 80192e8:	9a06      	ldr	r2, [sp, #24]
 80192ea:	3a30      	subs	r2, #48	; 0x30
 80192ec:	2a09      	cmp	r2, #9
 80192ee:	d9f6      	bls.n	80192de <_svfprintf_r+0x336>
 80192f0:	e6c3      	b.n	801907a <_svfprintf_r+0xd2>
 80192f2:	2500      	movs	r5, #0
 80192f4:	e7f8      	b.n	80192e8 <_svfprintf_r+0x340>
 80192f6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80192fa:	e6b9      	b.n	8019070 <_svfprintf_r+0xc8>
 80192fc:	2200      	movs	r2, #0
 80192fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019300:	920f      	str	r2, [sp, #60]	; 0x3c
 8019302:	9a06      	ldr	r2, [sp, #24]
 8019304:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019306:	3a30      	subs	r2, #48	; 0x30
 8019308:	fb07 2201 	mla	r2, r7, r1, r2
 801930c:	920f      	str	r2, [sp, #60]	; 0x3c
 801930e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019312:	9206      	str	r2, [sp, #24]
 8019314:	3a30      	subs	r2, #48	; 0x30
 8019316:	2a09      	cmp	r2, #9
 8019318:	d9f3      	bls.n	8019302 <_svfprintf_r+0x35a>
 801931a:	e6ae      	b.n	801907a <_svfprintf_r+0xd2>
 801931c:	f04a 0a08 	orr.w	sl, sl, #8
 8019320:	e6a6      	b.n	8019070 <_svfprintf_r+0xc8>
 8019322:	bf00      	nop
 8019324:	f3af 8000 	nop.w
	...
 8019330:	0809483d 	.word	0x0809483d
 8019334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	2b68      	cmp	r3, #104	; 0x68
 801933a:	bf01      	itttt	eq
 801933c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 801933e:	3301      	addeq	r3, #1
 8019340:	930c      	streq	r3, [sp, #48]	; 0x30
 8019342:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8019346:	bf18      	it	ne
 8019348:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801934c:	e690      	b.n	8019070 <_svfprintf_r+0xc8>
 801934e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	2b6c      	cmp	r3, #108	; 0x6c
 8019354:	d105      	bne.n	8019362 <_svfprintf_r+0x3ba>
 8019356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019358:	3301      	adds	r3, #1
 801935a:	930c      	str	r3, [sp, #48]	; 0x30
 801935c:	f04a 0a20 	orr.w	sl, sl, #32
 8019360:	e686      	b.n	8019070 <_svfprintf_r+0xc8>
 8019362:	f04a 0a10 	orr.w	sl, sl, #16
 8019366:	e683      	b.n	8019070 <_svfprintf_r+0xc8>
 8019368:	1d33      	adds	r3, r6, #4
 801936a:	9308      	str	r3, [sp, #32]
 801936c:	2000      	movs	r0, #0
 801936e:	6833      	ldr	r3, [r6, #0]
 8019370:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8019374:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8019378:	4681      	mov	r9, r0
 801937a:	2501      	movs	r5, #1
 801937c:	9010      	str	r0, [sp, #64]	; 0x40
 801937e:	4607      	mov	r7, r0
 8019380:	9007      	str	r0, [sp, #28]
 8019382:	4606      	mov	r6, r0
 8019384:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8019388:	e301      	b.n	801998e <_svfprintf_r+0x9e6>
 801938a:	f04a 0a10 	orr.w	sl, sl, #16
 801938e:	f01a 0f20 	tst.w	sl, #32
 8019392:	d021      	beq.n	80193d8 <_svfprintf_r+0x430>
 8019394:	3607      	adds	r6, #7
 8019396:	f026 0607 	bic.w	r6, r6, #7
 801939a:	f106 0308 	add.w	r3, r6, #8
 801939e:	e9d6 6700 	ldrd	r6, r7, [r6]
 80193a2:	9308      	str	r3, [sp, #32]
 80193a4:	2e00      	cmp	r6, #0
 80193a6:	f177 0300 	sbcs.w	r3, r7, #0
 80193aa:	da06      	bge.n	80193ba <_svfprintf_r+0x412>
 80193ac:	4276      	negs	r6, r6
 80193ae:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80193b2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80193b6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80193ba:	1c6b      	adds	r3, r5, #1
 80193bc:	f040 83f6 	bne.w	8019bac <_svfprintf_r+0xc04>
 80193c0:	2f00      	cmp	r7, #0
 80193c2:	bf08      	it	eq
 80193c4:	2e0a      	cmpeq	r6, #10
 80193c6:	f080 8427 	bcs.w	8019c18 <_svfprintf_r+0xc70>
 80193ca:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80193ce:	3630      	adds	r6, #48	; 0x30
 80193d0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 80193d4:	f000 bc0d 	b.w	8019bf2 <_svfprintf_r+0xc4a>
 80193d8:	1d33      	adds	r3, r6, #4
 80193da:	f01a 0f10 	tst.w	sl, #16
 80193de:	9308      	str	r3, [sp, #32]
 80193e0:	d002      	beq.n	80193e8 <_svfprintf_r+0x440>
 80193e2:	6836      	ldr	r6, [r6, #0]
 80193e4:	17f7      	asrs	r7, r6, #31
 80193e6:	e7dd      	b.n	80193a4 <_svfprintf_r+0x3fc>
 80193e8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80193ec:	6836      	ldr	r6, [r6, #0]
 80193ee:	d001      	beq.n	80193f4 <_svfprintf_r+0x44c>
 80193f0:	b236      	sxth	r6, r6
 80193f2:	e7f7      	b.n	80193e4 <_svfprintf_r+0x43c>
 80193f4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80193f8:	bf18      	it	ne
 80193fa:	b276      	sxtbne	r6, r6
 80193fc:	e7f2      	b.n	80193e4 <_svfprintf_r+0x43c>
 80193fe:	3607      	adds	r6, #7
 8019400:	f026 0607 	bic.w	r6, r6, #7
 8019404:	ed96 7b00 	vldr	d7, [r6]
 8019408:	f106 0308 	add.w	r3, r6, #8
 801940c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8019410:	9308      	str	r3, [sp, #32]
 8019412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019414:	931a      	str	r3, [sp, #104]	; 0x68
 8019416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801941c:	931b      	str	r3, [sp, #108]	; 0x6c
 801941e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019422:	4bb2      	ldr	r3, [pc, #712]	; (80196ec <_svfprintf_r+0x744>)
 8019424:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8019428:	f7ee f91a 	bl	8007660 <__aeabi_dcmpun>
 801942c:	bb00      	cbnz	r0, 8019470 <_svfprintf_r+0x4c8>
 801942e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019432:	4bae      	ldr	r3, [pc, #696]	; (80196ec <_svfprintf_r+0x744>)
 8019434:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8019438:	f7ee f8f4 	bl	8007624 <__aeabi_dcmple>
 801943c:	b9c0      	cbnz	r0, 8019470 <_svfprintf_r+0x4c8>
 801943e:	2200      	movs	r2, #0
 8019440:	2300      	movs	r3, #0
 8019442:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019446:	f7ee f8e3 	bl	8007610 <__aeabi_dcmplt>
 801944a:	b110      	cbz	r0, 8019452 <_svfprintf_r+0x4aa>
 801944c:	232d      	movs	r3, #45	; 0x2d
 801944e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019452:	4aa7      	ldr	r2, [pc, #668]	; (80196f0 <_svfprintf_r+0x748>)
 8019454:	4ba7      	ldr	r3, [pc, #668]	; (80196f4 <_svfprintf_r+0x74c>)
 8019456:	9906      	ldr	r1, [sp, #24]
 8019458:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801945c:	2947      	cmp	r1, #71	; 0x47
 801945e:	bfcc      	ite	gt
 8019460:	4693      	movgt	fp, r2
 8019462:	469b      	movle	fp, r3
 8019464:	f04f 0900 	mov.w	r9, #0
 8019468:	2503      	movs	r5, #3
 801946a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801946e:	e3c6      	b.n	8019bfe <_svfprintf_r+0xc56>
 8019470:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019474:	4610      	mov	r0, r2
 8019476:	4619      	mov	r1, r3
 8019478:	f7ee f8f2 	bl	8007660 <__aeabi_dcmpun>
 801947c:	4681      	mov	r9, r0
 801947e:	b140      	cbz	r0, 8019492 <_svfprintf_r+0x4ea>
 8019480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019482:	4a9d      	ldr	r2, [pc, #628]	; (80196f8 <_svfprintf_r+0x750>)
 8019484:	2b00      	cmp	r3, #0
 8019486:	bfbc      	itt	lt
 8019488:	232d      	movlt	r3, #45	; 0x2d
 801948a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801948e:	4b9b      	ldr	r3, [pc, #620]	; (80196fc <_svfprintf_r+0x754>)
 8019490:	e7e1      	b.n	8019456 <_svfprintf_r+0x4ae>
 8019492:	9b06      	ldr	r3, [sp, #24]
 8019494:	f023 0320 	bic.w	r3, r3, #32
 8019498:	2b41      	cmp	r3, #65	; 0x41
 801949a:	9307      	str	r3, [sp, #28]
 801949c:	d125      	bne.n	80194ea <_svfprintf_r+0x542>
 801949e:	2330      	movs	r3, #48	; 0x30
 80194a0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80194a4:	9b06      	ldr	r3, [sp, #24]
 80194a6:	2b61      	cmp	r3, #97	; 0x61
 80194a8:	bf14      	ite	ne
 80194aa:	2358      	movne	r3, #88	; 0x58
 80194ac:	2378      	moveq	r3, #120	; 0x78
 80194ae:	2d63      	cmp	r5, #99	; 0x63
 80194b0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80194b4:	f04a 0a02 	orr.w	sl, sl, #2
 80194b8:	f340 8108 	ble.w	80196cc <_svfprintf_r+0x724>
 80194bc:	1c69      	adds	r1, r5, #1
 80194be:	9803      	ldr	r0, [sp, #12]
 80194c0:	f7ff f888 	bl	80185d4 <_malloc_r>
 80194c4:	4683      	mov	fp, r0
 80194c6:	2800      	cmp	r0, #0
 80194c8:	f040 8103 	bne.w	80196d2 <_svfprintf_r+0x72a>
 80194cc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80194d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194d4:	f8a8 300c 	strh.w	r3, [r8, #12]
 80194d8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80194dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80194e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194e2:	bf18      	it	ne
 80194e4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80194e8:	e582      	b.n	8018ff0 <_svfprintf_r+0x48>
 80194ea:	1c69      	adds	r1, r5, #1
 80194ec:	f000 80f3 	beq.w	80196d6 <_svfprintf_r+0x72e>
 80194f0:	9b07      	ldr	r3, [sp, #28]
 80194f2:	2b47      	cmp	r3, #71	; 0x47
 80194f4:	d102      	bne.n	80194fc <_svfprintf_r+0x554>
 80194f6:	2d00      	cmp	r5, #0
 80194f8:	f000 80ef 	beq.w	80196da <_svfprintf_r+0x732>
 80194fc:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8019500:	9310      	str	r3, [sp, #64]	; 0x40
 8019502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019504:	2b00      	cmp	r3, #0
 8019506:	f280 80eb 	bge.w	80196e0 <_svfprintf_r+0x738>
 801950a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801950c:	9314      	str	r3, [sp, #80]	; 0x50
 801950e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019510:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019514:	9315      	str	r3, [sp, #84]	; 0x54
 8019516:	232d      	movs	r3, #45	; 0x2d
 8019518:	9313      	str	r3, [sp, #76]	; 0x4c
 801951a:	9b07      	ldr	r3, [sp, #28]
 801951c:	2b41      	cmp	r3, #65	; 0x41
 801951e:	f040 8105 	bne.w	801972c <_svfprintf_r+0x784>
 8019522:	a820      	add	r0, sp, #128	; 0x80
 8019524:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8019528:	f002 fbf0 	bl	801bd0c <frexp>
 801952c:	2200      	movs	r2, #0
 801952e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019532:	ec51 0b10 	vmov	r0, r1, d0
 8019536:	f7ed fdf9 	bl	800712c <__aeabi_dmul>
 801953a:	2200      	movs	r2, #0
 801953c:	2300      	movs	r3, #0
 801953e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019542:	f7ee f85b 	bl	80075fc <__aeabi_dcmpeq>
 8019546:	b108      	cbz	r0, 801954c <_svfprintf_r+0x5a4>
 8019548:	2301      	movs	r3, #1
 801954a:	9320      	str	r3, [sp, #128]	; 0x80
 801954c:	4f6c      	ldr	r7, [pc, #432]	; (8019700 <_svfprintf_r+0x758>)
 801954e:	4b6d      	ldr	r3, [pc, #436]	; (8019704 <_svfprintf_r+0x75c>)
 8019550:	9a06      	ldr	r2, [sp, #24]
 8019552:	2a61      	cmp	r2, #97	; 0x61
 8019554:	bf08      	it	eq
 8019556:	461f      	moveq	r7, r3
 8019558:	9711      	str	r7, [sp, #68]	; 0x44
 801955a:	465e      	mov	r6, fp
 801955c:	1e6f      	subs	r7, r5, #1
 801955e:	2200      	movs	r2, #0
 8019560:	4b69      	ldr	r3, [pc, #420]	; (8019708 <_svfprintf_r+0x760>)
 8019562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019566:	f7ed fde1 	bl	800712c <__aeabi_dmul>
 801956a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801956e:	f7ee f88d 	bl	800768c <__aeabi_d2iz>
 8019572:	901c      	str	r0, [sp, #112]	; 0x70
 8019574:	f7ed fd70 	bl	8007058 <__aeabi_i2d>
 8019578:	4602      	mov	r2, r0
 801957a:	460b      	mov	r3, r1
 801957c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019580:	f7ed fc1c 	bl	8006dbc <__aeabi_dsub>
 8019584:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019588:	971d      	str	r7, [sp, #116]	; 0x74
 801958a:	5c9b      	ldrb	r3, [r3, r2]
 801958c:	f806 3b01 	strb.w	r3, [r6], #1
 8019590:	1c7a      	adds	r2, r7, #1
 8019592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019596:	d006      	beq.n	80195a6 <_svfprintf_r+0x5fe>
 8019598:	2200      	movs	r2, #0
 801959a:	2300      	movs	r3, #0
 801959c:	3f01      	subs	r7, #1
 801959e:	f7ee f82d 	bl	80075fc <__aeabi_dcmpeq>
 80195a2:	2800      	cmp	r0, #0
 80195a4:	d0db      	beq.n	801955e <_svfprintf_r+0x5b6>
 80195a6:	2200      	movs	r2, #0
 80195a8:	4b58      	ldr	r3, [pc, #352]	; (801970c <_svfprintf_r+0x764>)
 80195aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80195ae:	f7ee f84d 	bl	800764c <__aeabi_dcmpgt>
 80195b2:	b960      	cbnz	r0, 80195ce <_svfprintf_r+0x626>
 80195b4:	2200      	movs	r2, #0
 80195b6:	4b55      	ldr	r3, [pc, #340]	; (801970c <_svfprintf_r+0x764>)
 80195b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80195bc:	f7ee f81e 	bl	80075fc <__aeabi_dcmpeq>
 80195c0:	2800      	cmp	r0, #0
 80195c2:	f000 80ae 	beq.w	8019722 <_svfprintf_r+0x77a>
 80195c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80195c8:	07db      	lsls	r3, r3, #31
 80195ca:	f140 80aa 	bpl.w	8019722 <_svfprintf_r+0x77a>
 80195ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80195d0:	9624      	str	r6, [sp, #144]	; 0x90
 80195d2:	7bd9      	ldrb	r1, [r3, #15]
 80195d4:	2030      	movs	r0, #48	; 0x30
 80195d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80195d8:	1e53      	subs	r3, r2, #1
 80195da:	9324      	str	r3, [sp, #144]	; 0x90
 80195dc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80195e0:	428b      	cmp	r3, r1
 80195e2:	f000 8095 	beq.w	8019710 <_svfprintf_r+0x768>
 80195e6:	2b39      	cmp	r3, #57	; 0x39
 80195e8:	bf0b      	itete	eq
 80195ea:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 80195ec:	3301      	addne	r3, #1
 80195ee:	7a9b      	ldrbeq	r3, [r3, #10]
 80195f0:	b2db      	uxtbne	r3, r3
 80195f2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80195f6:	4633      	mov	r3, r6
 80195f8:	eba3 030b 	sub.w	r3, r3, fp
 80195fc:	9304      	str	r3, [sp, #16]
 80195fe:	9b07      	ldr	r3, [sp, #28]
 8019600:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8019602:	2b47      	cmp	r3, #71	; 0x47
 8019604:	f040 80d7 	bne.w	80197b6 <_svfprintf_r+0x80e>
 8019608:	1cf7      	adds	r7, r6, #3
 801960a:	db02      	blt.n	8019612 <_svfprintf_r+0x66a>
 801960c:	42b5      	cmp	r5, r6
 801960e:	f280 80fd 	bge.w	801980c <_svfprintf_r+0x864>
 8019612:	9b06      	ldr	r3, [sp, #24]
 8019614:	3b02      	subs	r3, #2
 8019616:	9306      	str	r3, [sp, #24]
 8019618:	9906      	ldr	r1, [sp, #24]
 801961a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801961e:	f021 0120 	bic.w	r1, r1, #32
 8019622:	2941      	cmp	r1, #65	; 0x41
 8019624:	bf08      	it	eq
 8019626:	320f      	addeq	r2, #15
 8019628:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 801962c:	bf06      	itte	eq
 801962e:	b2d2      	uxtbeq	r2, r2
 8019630:	2101      	moveq	r1, #1
 8019632:	2100      	movne	r1, #0
 8019634:	2b00      	cmp	r3, #0
 8019636:	9320      	str	r3, [sp, #128]	; 0x80
 8019638:	bfb8      	it	lt
 801963a:	f1c6 0301 	rsblt	r3, r6, #1
 801963e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8019642:	bfb4      	ite	lt
 8019644:	222d      	movlt	r2, #45	; 0x2d
 8019646:	222b      	movge	r2, #43	; 0x2b
 8019648:	2b09      	cmp	r3, #9
 801964a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801964e:	f340 80c9 	ble.w	80197e4 <_svfprintf_r+0x83c>
 8019652:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8019656:	250a      	movs	r5, #10
 8019658:	fb93 f0f5 	sdiv	r0, r3, r5
 801965c:	fb05 3310 	mls	r3, r5, r0, r3
 8019660:	3330      	adds	r3, #48	; 0x30
 8019662:	2809      	cmp	r0, #9
 8019664:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019668:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 801966c:	4603      	mov	r3, r0
 801966e:	f300 80b2 	bgt.w	80197d6 <_svfprintf_r+0x82e>
 8019672:	3330      	adds	r3, #48	; 0x30
 8019674:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019678:	3a02      	subs	r2, #2
 801967a:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 801967e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8019682:	4282      	cmp	r2, r0
 8019684:	4619      	mov	r1, r3
 8019686:	f0c0 80a8 	bcc.w	80197da <_svfprintf_r+0x832>
 801968a:	9a04      	ldr	r2, [sp, #16]
 801968c:	ab22      	add	r3, sp, #136	; 0x88
 801968e:	1acb      	subs	r3, r1, r3
 8019690:	2a01      	cmp	r2, #1
 8019692:	9317      	str	r3, [sp, #92]	; 0x5c
 8019694:	eb03 0502 	add.w	r5, r3, r2
 8019698:	dc02      	bgt.n	80196a0 <_svfprintf_r+0x6f8>
 801969a:	f01a 0f01 	tst.w	sl, #1
 801969e:	d001      	beq.n	80196a4 <_svfprintf_r+0x6fc>
 80196a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196a2:	441d      	add	r5, r3
 80196a4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80196a8:	2700      	movs	r7, #0
 80196aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80196ae:	9310      	str	r3, [sp, #64]	; 0x40
 80196b0:	9707      	str	r7, [sp, #28]
 80196b2:	463e      	mov	r6, r7
 80196b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	f000 8315 	beq.w	8019ce6 <_svfprintf_r+0xd3e>
 80196bc:	232d      	movs	r3, #45	; 0x2d
 80196be:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80196c2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80196c6:	2300      	movs	r3, #0
 80196c8:	9310      	str	r3, [sp, #64]	; 0x40
 80196ca:	e160      	b.n	801998e <_svfprintf_r+0x9e6>
 80196cc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80196d0:	e714      	b.n	80194fc <_svfprintf_r+0x554>
 80196d2:	4681      	mov	r9, r0
 80196d4:	e712      	b.n	80194fc <_svfprintf_r+0x554>
 80196d6:	2506      	movs	r5, #6
 80196d8:	e710      	b.n	80194fc <_svfprintf_r+0x554>
 80196da:	46a9      	mov	r9, r5
 80196dc:	2501      	movs	r5, #1
 80196de:	e70d      	b.n	80194fc <_svfprintf_r+0x554>
 80196e0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80196e4:	2300      	movs	r3, #0
 80196e6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80196ea:	e715      	b.n	8019518 <_svfprintf_r+0x570>
 80196ec:	7fefffff 	.word	0x7fefffff
 80196f0:	08094820 	.word	0x08094820
 80196f4:	0809481c 	.word	0x0809481c
 80196f8:	08094828 	.word	0x08094828
 80196fc:	08094824 	.word	0x08094824
 8019700:	0809483d 	.word	0x0809483d
 8019704:	0809482c 	.word	0x0809482c
 8019708:	40300000 	.word	0x40300000
 801970c:	3fe00000 	.word	0x3fe00000
 8019710:	f802 0c01 	strb.w	r0, [r2, #-1]
 8019714:	e75f      	b.n	80195d6 <_svfprintf_r+0x62e>
 8019716:	f803 1b01 	strb.w	r1, [r3], #1
 801971a:	1af2      	subs	r2, r6, r3
 801971c:	2a00      	cmp	r2, #0
 801971e:	dafa      	bge.n	8019716 <_svfprintf_r+0x76e>
 8019720:	e76a      	b.n	80195f8 <_svfprintf_r+0x650>
 8019722:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019724:	4633      	mov	r3, r6
 8019726:	2130      	movs	r1, #48	; 0x30
 8019728:	4416      	add	r6, r2
 801972a:	e7f6      	b.n	801971a <_svfprintf_r+0x772>
 801972c:	9b07      	ldr	r3, [sp, #28]
 801972e:	2b46      	cmp	r3, #70	; 0x46
 8019730:	d004      	beq.n	801973c <_svfprintf_r+0x794>
 8019732:	2b45      	cmp	r3, #69	; 0x45
 8019734:	d13a      	bne.n	80197ac <_svfprintf_r+0x804>
 8019736:	1c6e      	adds	r6, r5, #1
 8019738:	2102      	movs	r1, #2
 801973a:	e001      	b.n	8019740 <_svfprintf_r+0x798>
 801973c:	462e      	mov	r6, r5
 801973e:	2103      	movs	r1, #3
 8019740:	ab24      	add	r3, sp, #144	; 0x90
 8019742:	9301      	str	r3, [sp, #4]
 8019744:	ab21      	add	r3, sp, #132	; 0x84
 8019746:	9300      	str	r3, [sp, #0]
 8019748:	4632      	mov	r2, r6
 801974a:	ab20      	add	r3, sp, #128	; 0x80
 801974c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8019750:	9803      	ldr	r0, [sp, #12]
 8019752:	f000 ffa5 	bl	801a6a0 <_dtoa_r>
 8019756:	9b07      	ldr	r3, [sp, #28]
 8019758:	2b47      	cmp	r3, #71	; 0x47
 801975a:	4683      	mov	fp, r0
 801975c:	d102      	bne.n	8019764 <_svfprintf_r+0x7bc>
 801975e:	f01a 0f01 	tst.w	sl, #1
 8019762:	d026      	beq.n	80197b2 <_svfprintf_r+0x80a>
 8019764:	9b07      	ldr	r3, [sp, #28]
 8019766:	2b46      	cmp	r3, #70	; 0x46
 8019768:	eb0b 0706 	add.w	r7, fp, r6
 801976c:	d10f      	bne.n	801978e <_svfprintf_r+0x7e6>
 801976e:	f89b 3000 	ldrb.w	r3, [fp]
 8019772:	2b30      	cmp	r3, #48	; 0x30
 8019774:	d109      	bne.n	801978a <_svfprintf_r+0x7e2>
 8019776:	2200      	movs	r2, #0
 8019778:	2300      	movs	r3, #0
 801977a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801977e:	f7ed ff3d 	bl	80075fc <__aeabi_dcmpeq>
 8019782:	b910      	cbnz	r0, 801978a <_svfprintf_r+0x7e2>
 8019784:	f1c6 0601 	rsb	r6, r6, #1
 8019788:	9620      	str	r6, [sp, #128]	; 0x80
 801978a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801978c:	441f      	add	r7, r3
 801978e:	2200      	movs	r2, #0
 8019790:	2300      	movs	r3, #0
 8019792:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8019796:	f7ed ff31 	bl	80075fc <__aeabi_dcmpeq>
 801979a:	b948      	cbnz	r0, 80197b0 <_svfprintf_r+0x808>
 801979c:	2230      	movs	r2, #48	; 0x30
 801979e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80197a0:	429f      	cmp	r7, r3
 80197a2:	d906      	bls.n	80197b2 <_svfprintf_r+0x80a>
 80197a4:	1c59      	adds	r1, r3, #1
 80197a6:	9124      	str	r1, [sp, #144]	; 0x90
 80197a8:	701a      	strb	r2, [r3, #0]
 80197aa:	e7f8      	b.n	801979e <_svfprintf_r+0x7f6>
 80197ac:	462e      	mov	r6, r5
 80197ae:	e7c3      	b.n	8019738 <_svfprintf_r+0x790>
 80197b0:	9724      	str	r7, [sp, #144]	; 0x90
 80197b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80197b4:	e720      	b.n	80195f8 <_svfprintf_r+0x650>
 80197b6:	9b07      	ldr	r3, [sp, #28]
 80197b8:	2b46      	cmp	r3, #70	; 0x46
 80197ba:	f47f af2d 	bne.w	8019618 <_svfprintf_r+0x670>
 80197be:	2e00      	cmp	r6, #0
 80197c0:	dd1d      	ble.n	80197fe <_svfprintf_r+0x856>
 80197c2:	b915      	cbnz	r5, 80197ca <_svfprintf_r+0x822>
 80197c4:	f01a 0f01 	tst.w	sl, #1
 80197c8:	d034      	beq.n	8019834 <_svfprintf_r+0x88c>
 80197ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197cc:	18f3      	adds	r3, r6, r3
 80197ce:	441d      	add	r5, r3
 80197d0:	2366      	movs	r3, #102	; 0x66
 80197d2:	9306      	str	r3, [sp, #24]
 80197d4:	e033      	b.n	801983e <_svfprintf_r+0x896>
 80197d6:	460a      	mov	r2, r1
 80197d8:	e73e      	b.n	8019658 <_svfprintf_r+0x6b0>
 80197da:	f812 1b01 	ldrb.w	r1, [r2], #1
 80197de:	f803 1b01 	strb.w	r1, [r3], #1
 80197e2:	e74e      	b.n	8019682 <_svfprintf_r+0x6da>
 80197e4:	b941      	cbnz	r1, 80197f8 <_svfprintf_r+0x850>
 80197e6:	2230      	movs	r2, #48	; 0x30
 80197e8:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 80197ec:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 80197f0:	3330      	adds	r3, #48	; 0x30
 80197f2:	1c51      	adds	r1, r2, #1
 80197f4:	7013      	strb	r3, [r2, #0]
 80197f6:	e748      	b.n	801968a <_svfprintf_r+0x6e2>
 80197f8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80197fc:	e7f8      	b.n	80197f0 <_svfprintf_r+0x848>
 80197fe:	b915      	cbnz	r5, 8019806 <_svfprintf_r+0x85e>
 8019800:	f01a 0f01 	tst.w	sl, #1
 8019804:	d018      	beq.n	8019838 <_svfprintf_r+0x890>
 8019806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019808:	3301      	adds	r3, #1
 801980a:	e7e0      	b.n	80197ce <_svfprintf_r+0x826>
 801980c:	9b04      	ldr	r3, [sp, #16]
 801980e:	42b3      	cmp	r3, r6
 8019810:	dc06      	bgt.n	8019820 <_svfprintf_r+0x878>
 8019812:	f01a 0f01 	tst.w	sl, #1
 8019816:	d025      	beq.n	8019864 <_svfprintf_r+0x8bc>
 8019818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801981a:	18f5      	adds	r5, r6, r3
 801981c:	2367      	movs	r3, #103	; 0x67
 801981e:	e7d8      	b.n	80197d2 <_svfprintf_r+0x82a>
 8019820:	9b04      	ldr	r3, [sp, #16]
 8019822:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019824:	2e00      	cmp	r6, #0
 8019826:	eb03 0502 	add.w	r5, r3, r2
 801982a:	dcf7      	bgt.n	801981c <_svfprintf_r+0x874>
 801982c:	f1c6 0301 	rsb	r3, r6, #1
 8019830:	441d      	add	r5, r3
 8019832:	e7f3      	b.n	801981c <_svfprintf_r+0x874>
 8019834:	4635      	mov	r5, r6
 8019836:	e7cb      	b.n	80197d0 <_svfprintf_r+0x828>
 8019838:	2366      	movs	r3, #102	; 0x66
 801983a:	9306      	str	r3, [sp, #24]
 801983c:	2501      	movs	r5, #1
 801983e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8019842:	9307      	str	r3, [sp, #28]
 8019844:	d01f      	beq.n	8019886 <_svfprintf_r+0x8de>
 8019846:	2700      	movs	r7, #0
 8019848:	2e00      	cmp	r6, #0
 801984a:	9707      	str	r7, [sp, #28]
 801984c:	f77f af32 	ble.w	80196b4 <_svfprintf_r+0x70c>
 8019850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	2bff      	cmp	r3, #255	; 0xff
 8019856:	d107      	bne.n	8019868 <_svfprintf_r+0x8c0>
 8019858:	9b07      	ldr	r3, [sp, #28]
 801985a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801985c:	443b      	add	r3, r7
 801985e:	fb02 5503 	mla	r5, r2, r3, r5
 8019862:	e727      	b.n	80196b4 <_svfprintf_r+0x70c>
 8019864:	4635      	mov	r5, r6
 8019866:	e7d9      	b.n	801981c <_svfprintf_r+0x874>
 8019868:	42b3      	cmp	r3, r6
 801986a:	daf5      	bge.n	8019858 <_svfprintf_r+0x8b0>
 801986c:	1af6      	subs	r6, r6, r3
 801986e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019870:	785b      	ldrb	r3, [r3, #1]
 8019872:	b133      	cbz	r3, 8019882 <_svfprintf_r+0x8da>
 8019874:	9b07      	ldr	r3, [sp, #28]
 8019876:	3301      	adds	r3, #1
 8019878:	9307      	str	r3, [sp, #28]
 801987a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801987c:	3301      	adds	r3, #1
 801987e:	9309      	str	r3, [sp, #36]	; 0x24
 8019880:	e7e6      	b.n	8019850 <_svfprintf_r+0x8a8>
 8019882:	3701      	adds	r7, #1
 8019884:	e7e4      	b.n	8019850 <_svfprintf_r+0x8a8>
 8019886:	9f07      	ldr	r7, [sp, #28]
 8019888:	e714      	b.n	80196b4 <_svfprintf_r+0x70c>
 801988a:	4632      	mov	r2, r6
 801988c:	f01a 0f20 	tst.w	sl, #32
 8019890:	f852 3b04 	ldr.w	r3, [r2], #4
 8019894:	9208      	str	r2, [sp, #32]
 8019896:	d009      	beq.n	80198ac <_svfprintf_r+0x904>
 8019898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801989a:	4610      	mov	r0, r2
 801989c:	17d1      	asrs	r1, r2, #31
 801989e:	e9c3 0100 	strd	r0, r1, [r3]
 80198a2:	9e08      	ldr	r6, [sp, #32]
 80198a4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80198a8:	f7ff bbba 	b.w	8019020 <_svfprintf_r+0x78>
 80198ac:	f01a 0f10 	tst.w	sl, #16
 80198b0:	d002      	beq.n	80198b8 <_svfprintf_r+0x910>
 80198b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80198b4:	601a      	str	r2, [r3, #0]
 80198b6:	e7f4      	b.n	80198a2 <_svfprintf_r+0x8fa>
 80198b8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80198bc:	d002      	beq.n	80198c4 <_svfprintf_r+0x91c>
 80198be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80198c0:	801a      	strh	r2, [r3, #0]
 80198c2:	e7ee      	b.n	80198a2 <_svfprintf_r+0x8fa>
 80198c4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80198c8:	d0f3      	beq.n	80198b2 <_svfprintf_r+0x90a>
 80198ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80198cc:	701a      	strb	r2, [r3, #0]
 80198ce:	e7e8      	b.n	80198a2 <_svfprintf_r+0x8fa>
 80198d0:	f04a 0a10 	orr.w	sl, sl, #16
 80198d4:	f01a 0f20 	tst.w	sl, #32
 80198d8:	d01e      	beq.n	8019918 <_svfprintf_r+0x970>
 80198da:	3607      	adds	r6, #7
 80198dc:	f026 0607 	bic.w	r6, r6, #7
 80198e0:	f106 0308 	add.w	r3, r6, #8
 80198e4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80198e8:	9308      	str	r3, [sp, #32]
 80198ea:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80198ee:	2300      	movs	r3, #0
 80198f0:	2200      	movs	r2, #0
 80198f2:	1c69      	adds	r1, r5, #1
 80198f4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80198f8:	f000 815b 	beq.w	8019bb2 <_svfprintf_r+0xc0a>
 80198fc:	4652      	mov	r2, sl
 80198fe:	ea56 0107 	orrs.w	r1, r6, r7
 8019902:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8019906:	f040 8154 	bne.w	8019bb2 <_svfprintf_r+0xc0a>
 801990a:	2d00      	cmp	r5, #0
 801990c:	f000 81d5 	beq.w	8019cba <_svfprintf_r+0xd12>
 8019910:	2b01      	cmp	r3, #1
 8019912:	f040 8151 	bne.w	8019bb8 <_svfprintf_r+0xc10>
 8019916:	e558      	b.n	80193ca <_svfprintf_r+0x422>
 8019918:	1d33      	adds	r3, r6, #4
 801991a:	f01a 0f10 	tst.w	sl, #16
 801991e:	9308      	str	r3, [sp, #32]
 8019920:	d001      	beq.n	8019926 <_svfprintf_r+0x97e>
 8019922:	6836      	ldr	r6, [r6, #0]
 8019924:	e003      	b.n	801992e <_svfprintf_r+0x986>
 8019926:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801992a:	d002      	beq.n	8019932 <_svfprintf_r+0x98a>
 801992c:	8836      	ldrh	r6, [r6, #0]
 801992e:	2700      	movs	r7, #0
 8019930:	e7db      	b.n	80198ea <_svfprintf_r+0x942>
 8019932:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8019936:	d0f4      	beq.n	8019922 <_svfprintf_r+0x97a>
 8019938:	7836      	ldrb	r6, [r6, #0]
 801993a:	e7f8      	b.n	801992e <_svfprintf_r+0x986>
 801993c:	1d33      	adds	r3, r6, #4
 801993e:	9308      	str	r3, [sp, #32]
 8019940:	f647 0330 	movw	r3, #30768	; 0x7830
 8019944:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8019948:	2278      	movs	r2, #120	; 0x78
 801994a:	4bb0      	ldr	r3, [pc, #704]	; (8019c0c <_svfprintf_r+0xc64>)
 801994c:	9318      	str	r3, [sp, #96]	; 0x60
 801994e:	6836      	ldr	r6, [r6, #0]
 8019950:	9206      	str	r2, [sp, #24]
 8019952:	2700      	movs	r7, #0
 8019954:	f04a 0a02 	orr.w	sl, sl, #2
 8019958:	2302      	movs	r3, #2
 801995a:	e7c9      	b.n	80198f0 <_svfprintf_r+0x948>
 801995c:	1d33      	adds	r3, r6, #4
 801995e:	f8d6 b000 	ldr.w	fp, [r6]
 8019962:	9308      	str	r3, [sp, #32]
 8019964:	2600      	movs	r6, #0
 8019966:	1c68      	adds	r0, r5, #1
 8019968:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 801996c:	f000 80e1 	beq.w	8019b32 <_svfprintf_r+0xb8a>
 8019970:	462a      	mov	r2, r5
 8019972:	4631      	mov	r1, r6
 8019974:	4658      	mov	r0, fp
 8019976:	f7ed f9bb 	bl	8006cf0 <memchr>
 801997a:	4681      	mov	r9, r0
 801997c:	2800      	cmp	r0, #0
 801997e:	f43f ad74 	beq.w	801946a <_svfprintf_r+0x4c2>
 8019982:	eba0 050b 	sub.w	r5, r0, fp
 8019986:	46b1      	mov	r9, r6
 8019988:	9610      	str	r6, [sp, #64]	; 0x40
 801998a:	4637      	mov	r7, r6
 801998c:	9607      	str	r6, [sp, #28]
 801998e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019990:	42ab      	cmp	r3, r5
 8019992:	bfb8      	it	lt
 8019994:	462b      	movlt	r3, r5
 8019996:	9311      	str	r3, [sp, #68]	; 0x44
 8019998:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801999c:	b113      	cbz	r3, 80199a4 <_svfprintf_r+0x9fc>
 801999e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80199a0:	3301      	adds	r3, #1
 80199a2:	9311      	str	r3, [sp, #68]	; 0x44
 80199a4:	f01a 0302 	ands.w	r3, sl, #2
 80199a8:	931c      	str	r3, [sp, #112]	; 0x70
 80199aa:	bf1e      	ittt	ne
 80199ac:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80199ae:	3302      	addne	r3, #2
 80199b0:	9311      	strne	r3, [sp, #68]	; 0x44
 80199b2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80199b6:	931d      	str	r3, [sp, #116]	; 0x74
 80199b8:	d122      	bne.n	8019a00 <_svfprintf_r+0xa58>
 80199ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80199be:	1a9b      	subs	r3, r3, r2
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80199c4:	dd1c      	ble.n	8019a00 <_svfprintf_r+0xa58>
 80199c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80199c8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80199cc:	2810      	cmp	r0, #16
 80199ce:	4890      	ldr	r0, [pc, #576]	; (8019c10 <_svfprintf_r+0xc68>)
 80199d0:	6020      	str	r0, [r4, #0]
 80199d2:	f102 0201 	add.w	r2, r2, #1
 80199d6:	f104 0108 	add.w	r1, r4, #8
 80199da:	f300 8188 	bgt.w	8019cee <_svfprintf_r+0xd46>
 80199de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80199e0:	6060      	str	r0, [r4, #4]
 80199e2:	4403      	add	r3, r0
 80199e4:	2a07      	cmp	r2, #7
 80199e6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80199ea:	f340 8195 	ble.w	8019d18 <_svfprintf_r+0xd70>
 80199ee:	aa26      	add	r2, sp, #152	; 0x98
 80199f0:	4641      	mov	r1, r8
 80199f2:	9803      	ldr	r0, [sp, #12]
 80199f4:	f002 fa18 	bl	801be28 <__ssprint_r>
 80199f8:	2800      	cmp	r0, #0
 80199fa:	f040 84c1 	bne.w	801a380 <_svfprintf_r+0x13d8>
 80199fe:	ac29      	add	r4, sp, #164	; 0xa4
 8019a00:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8019a04:	b173      	cbz	r3, 8019a24 <_svfprintf_r+0xa7c>
 8019a06:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8019a0a:	6023      	str	r3, [r4, #0]
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	6063      	str	r3, [r4, #4]
 8019a10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a12:	3301      	adds	r3, #1
 8019a14:	9328      	str	r3, [sp, #160]	; 0xa0
 8019a16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019a18:	3301      	adds	r3, #1
 8019a1a:	2b07      	cmp	r3, #7
 8019a1c:	9327      	str	r3, [sp, #156]	; 0x9c
 8019a1e:	f300 817d 	bgt.w	8019d1c <_svfprintf_r+0xd74>
 8019a22:	3408      	adds	r4, #8
 8019a24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019a26:	b16b      	cbz	r3, 8019a44 <_svfprintf_r+0xa9c>
 8019a28:	ab1f      	add	r3, sp, #124	; 0x7c
 8019a2a:	6023      	str	r3, [r4, #0]
 8019a2c:	2302      	movs	r3, #2
 8019a2e:	6063      	str	r3, [r4, #4]
 8019a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a32:	3302      	adds	r3, #2
 8019a34:	9328      	str	r3, [sp, #160]	; 0xa0
 8019a36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019a38:	3301      	adds	r3, #1
 8019a3a:	2b07      	cmp	r3, #7
 8019a3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8019a3e:	f300 8177 	bgt.w	8019d30 <_svfprintf_r+0xd88>
 8019a42:	3408      	adds	r4, #8
 8019a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a46:	2b80      	cmp	r3, #128	; 0x80
 8019a48:	d122      	bne.n	8019a90 <_svfprintf_r+0xae8>
 8019a4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a4e:	1a9b      	subs	r3, r3, r2
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	9313      	str	r3, [sp, #76]	; 0x4c
 8019a54:	dd1c      	ble.n	8019a90 <_svfprintf_r+0xae8>
 8019a56:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a58:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8019a5c:	2810      	cmp	r0, #16
 8019a5e:	486d      	ldr	r0, [pc, #436]	; (8019c14 <_svfprintf_r+0xc6c>)
 8019a60:	6020      	str	r0, [r4, #0]
 8019a62:	f102 0201 	add.w	r2, r2, #1
 8019a66:	f104 0108 	add.w	r1, r4, #8
 8019a6a:	f300 816b 	bgt.w	8019d44 <_svfprintf_r+0xd9c>
 8019a6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a70:	6060      	str	r0, [r4, #4]
 8019a72:	4403      	add	r3, r0
 8019a74:	2a07      	cmp	r2, #7
 8019a76:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019a7a:	f340 8178 	ble.w	8019d6e <_svfprintf_r+0xdc6>
 8019a7e:	aa26      	add	r2, sp, #152	; 0x98
 8019a80:	4641      	mov	r1, r8
 8019a82:	9803      	ldr	r0, [sp, #12]
 8019a84:	f002 f9d0 	bl	801be28 <__ssprint_r>
 8019a88:	2800      	cmp	r0, #0
 8019a8a:	f040 8479 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019a8e:	ac29      	add	r4, sp, #164	; 0xa4
 8019a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a92:	1b5b      	subs	r3, r3, r5
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	9310      	str	r3, [sp, #64]	; 0x40
 8019a98:	dd1c      	ble.n	8019ad4 <_svfprintf_r+0xb2c>
 8019a9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019a9c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8019aa0:	2810      	cmp	r0, #16
 8019aa2:	485c      	ldr	r0, [pc, #368]	; (8019c14 <_svfprintf_r+0xc6c>)
 8019aa4:	6020      	str	r0, [r4, #0]
 8019aa6:	f102 0201 	add.w	r2, r2, #1
 8019aaa:	f104 0108 	add.w	r1, r4, #8
 8019aae:	f300 8160 	bgt.w	8019d72 <_svfprintf_r+0xdca>
 8019ab2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019ab4:	6060      	str	r0, [r4, #4]
 8019ab6:	4403      	add	r3, r0
 8019ab8:	2a07      	cmp	r2, #7
 8019aba:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019abe:	f340 816d 	ble.w	8019d9c <_svfprintf_r+0xdf4>
 8019ac2:	aa26      	add	r2, sp, #152	; 0x98
 8019ac4:	4641      	mov	r1, r8
 8019ac6:	9803      	ldr	r0, [sp, #12]
 8019ac8:	f002 f9ae 	bl	801be28 <__ssprint_r>
 8019acc:	2800      	cmp	r0, #0
 8019ace:	f040 8457 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019ad2:	ac29      	add	r4, sp, #164	; 0xa4
 8019ad4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019ad6:	9310      	str	r3, [sp, #64]	; 0x40
 8019ad8:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019adc:	f040 8160 	bne.w	8019da0 <_svfprintf_r+0xdf8>
 8019ae0:	e9c4 b500 	strd	fp, r5, [r4]
 8019ae4:	441d      	add	r5, r3
 8019ae6:	9528      	str	r5, [sp, #160]	; 0xa0
 8019ae8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019aea:	3301      	adds	r3, #1
 8019aec:	2b07      	cmp	r3, #7
 8019aee:	9327      	str	r3, [sp, #156]	; 0x9c
 8019af0:	f300 819c 	bgt.w	8019e2c <_svfprintf_r+0xe84>
 8019af4:	3408      	adds	r4, #8
 8019af6:	f01a 0f04 	tst.w	sl, #4
 8019afa:	f040 8423 	bne.w	801a344 <_svfprintf_r+0x139c>
 8019afe:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019b02:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019b04:	428a      	cmp	r2, r1
 8019b06:	bfac      	ite	ge
 8019b08:	189b      	addge	r3, r3, r2
 8019b0a:	185b      	addlt	r3, r3, r1
 8019b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8019b0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b10:	b13b      	cbz	r3, 8019b22 <_svfprintf_r+0xb7a>
 8019b12:	aa26      	add	r2, sp, #152	; 0x98
 8019b14:	4641      	mov	r1, r8
 8019b16:	9803      	ldr	r0, [sp, #12]
 8019b18:	f002 f986 	bl	801be28 <__ssprint_r>
 8019b1c:	2800      	cmp	r0, #0
 8019b1e:	f040 842f 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019b22:	2300      	movs	r3, #0
 8019b24:	9327      	str	r3, [sp, #156]	; 0x9c
 8019b26:	f1b9 0f00 	cmp.w	r9, #0
 8019b2a:	f040 8445 	bne.w	801a3b8 <_svfprintf_r+0x1410>
 8019b2e:	ac29      	add	r4, sp, #164	; 0xa4
 8019b30:	e6b7      	b.n	80198a2 <_svfprintf_r+0x8fa>
 8019b32:	4658      	mov	r0, fp
 8019b34:	f7ed f936 	bl	8006da4 <strlen>
 8019b38:	46b1      	mov	r9, r6
 8019b3a:	4605      	mov	r5, r0
 8019b3c:	e495      	b.n	801946a <_svfprintf_r+0x4c2>
 8019b3e:	f04a 0a10 	orr.w	sl, sl, #16
 8019b42:	f01a 0f20 	tst.w	sl, #32
 8019b46:	d009      	beq.n	8019b5c <_svfprintf_r+0xbb4>
 8019b48:	3607      	adds	r6, #7
 8019b4a:	f026 0607 	bic.w	r6, r6, #7
 8019b4e:	f106 0308 	add.w	r3, r6, #8
 8019b52:	e9d6 6700 	ldrd	r6, r7, [r6]
 8019b56:	9308      	str	r3, [sp, #32]
 8019b58:	2301      	movs	r3, #1
 8019b5a:	e6c9      	b.n	80198f0 <_svfprintf_r+0x948>
 8019b5c:	1d33      	adds	r3, r6, #4
 8019b5e:	f01a 0f10 	tst.w	sl, #16
 8019b62:	9308      	str	r3, [sp, #32]
 8019b64:	d001      	beq.n	8019b6a <_svfprintf_r+0xbc2>
 8019b66:	6836      	ldr	r6, [r6, #0]
 8019b68:	e003      	b.n	8019b72 <_svfprintf_r+0xbca>
 8019b6a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8019b6e:	d002      	beq.n	8019b76 <_svfprintf_r+0xbce>
 8019b70:	8836      	ldrh	r6, [r6, #0]
 8019b72:	2700      	movs	r7, #0
 8019b74:	e7f0      	b.n	8019b58 <_svfprintf_r+0xbb0>
 8019b76:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8019b7a:	d0f4      	beq.n	8019b66 <_svfprintf_r+0xbbe>
 8019b7c:	7836      	ldrb	r6, [r6, #0]
 8019b7e:	e7f8      	b.n	8019b72 <_svfprintf_r+0xbca>
 8019b80:	4b22      	ldr	r3, [pc, #136]	; (8019c0c <_svfprintf_r+0xc64>)
 8019b82:	f7ff bb48 	b.w	8019216 <_svfprintf_r+0x26e>
 8019b86:	1d33      	adds	r3, r6, #4
 8019b88:	f01a 0f10 	tst.w	sl, #16
 8019b8c:	9308      	str	r3, [sp, #32]
 8019b8e:	d001      	beq.n	8019b94 <_svfprintf_r+0xbec>
 8019b90:	6836      	ldr	r6, [r6, #0]
 8019b92:	e003      	b.n	8019b9c <_svfprintf_r+0xbf4>
 8019b94:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8019b98:	d003      	beq.n	8019ba2 <_svfprintf_r+0xbfa>
 8019b9a:	8836      	ldrh	r6, [r6, #0]
 8019b9c:	2700      	movs	r7, #0
 8019b9e:	f7ff bb47 	b.w	8019230 <_svfprintf_r+0x288>
 8019ba2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8019ba6:	d0f3      	beq.n	8019b90 <_svfprintf_r+0xbe8>
 8019ba8:	7836      	ldrb	r6, [r6, #0]
 8019baa:	e7f7      	b.n	8019b9c <_svfprintf_r+0xbf4>
 8019bac:	4652      	mov	r2, sl
 8019bae:	2301      	movs	r3, #1
 8019bb0:	e6a5      	b.n	80198fe <_svfprintf_r+0x956>
 8019bb2:	2b01      	cmp	r3, #1
 8019bb4:	f43f ac04 	beq.w	80193c0 <_svfprintf_r+0x418>
 8019bb8:	2b02      	cmp	r3, #2
 8019bba:	d06c      	beq.n	8019c96 <_svfprintf_r+0xcee>
 8019bbc:	ab52      	add	r3, sp, #328	; 0x148
 8019bbe:	08f1      	lsrs	r1, r6, #3
 8019bc0:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8019bc4:	08f8      	lsrs	r0, r7, #3
 8019bc6:	f006 0207 	and.w	r2, r6, #7
 8019bca:	4607      	mov	r7, r0
 8019bcc:	460e      	mov	r6, r1
 8019bce:	3230      	adds	r2, #48	; 0x30
 8019bd0:	ea56 0107 	orrs.w	r1, r6, r7
 8019bd4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8019bd8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8019bdc:	d114      	bne.n	8019c08 <_svfprintf_r+0xc60>
 8019bde:	f01a 0f01 	tst.w	sl, #1
 8019be2:	d006      	beq.n	8019bf2 <_svfprintf_r+0xc4a>
 8019be4:	2a30      	cmp	r2, #48	; 0x30
 8019be6:	d004      	beq.n	8019bf2 <_svfprintf_r+0xc4a>
 8019be8:	2230      	movs	r2, #48	; 0x30
 8019bea:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8019bee:	f1a3 0b02 	sub.w	fp, r3, #2
 8019bf2:	ab52      	add	r3, sp, #328	; 0x148
 8019bf4:	9510      	str	r5, [sp, #64]	; 0x40
 8019bf6:	f04f 0900 	mov.w	r9, #0
 8019bfa:	eba3 050b 	sub.w	r5, r3, fp
 8019bfe:	464f      	mov	r7, r9
 8019c00:	f8cd 901c 	str.w	r9, [sp, #28]
 8019c04:	464e      	mov	r6, r9
 8019c06:	e6c2      	b.n	801998e <_svfprintf_r+0x9e6>
 8019c08:	465b      	mov	r3, fp
 8019c0a:	e7d8      	b.n	8019bbe <_svfprintf_r+0xc16>
 8019c0c:	0809482c 	.word	0x0809482c
 8019c10:	08094850 	.word	0x08094850
 8019c14:	08094860 	.word	0x08094860
 8019c18:	2300      	movs	r3, #0
 8019c1a:	9304      	str	r3, [sp, #16]
 8019c1c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8019c20:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8019c24:	9307      	str	r3, [sp, #28]
 8019c26:	220a      	movs	r2, #10
 8019c28:	2300      	movs	r3, #0
 8019c2a:	4630      	mov	r0, r6
 8019c2c:	4639      	mov	r1, r7
 8019c2e:	f7ed fd55 	bl	80076dc <__aeabi_uldivmod>
 8019c32:	9b04      	ldr	r3, [sp, #16]
 8019c34:	3301      	adds	r3, #1
 8019c36:	9304      	str	r3, [sp, #16]
 8019c38:	9b07      	ldr	r3, [sp, #28]
 8019c3a:	3230      	adds	r2, #48	; 0x30
 8019c3c:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8019c40:	f809 2c01 	strb.w	r2, [r9, #-1]
 8019c44:	b1d3      	cbz	r3, 8019c7c <_svfprintf_r+0xcd4>
 8019c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c48:	9a04      	ldr	r2, [sp, #16]
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	429a      	cmp	r2, r3
 8019c4e:	d115      	bne.n	8019c7c <_svfprintf_r+0xcd4>
 8019c50:	2aff      	cmp	r2, #255	; 0xff
 8019c52:	d013      	beq.n	8019c7c <_svfprintf_r+0xcd4>
 8019c54:	2f00      	cmp	r7, #0
 8019c56:	bf08      	it	eq
 8019c58:	2e0a      	cmpeq	r6, #10
 8019c5a:	d30f      	bcc.n	8019c7c <_svfprintf_r+0xcd4>
 8019c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019c5e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8019c60:	ebab 0b03 	sub.w	fp, fp, r3
 8019c64:	461a      	mov	r2, r3
 8019c66:	4658      	mov	r0, fp
 8019c68:	f002 f8c9 	bl	801bdfe <strncpy>
 8019c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c6e:	785b      	ldrb	r3, [r3, #1]
 8019c70:	b11b      	cbz	r3, 8019c7a <_svfprintf_r+0xcd2>
 8019c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c74:	3301      	adds	r3, #1
 8019c76:	9309      	str	r3, [sp, #36]	; 0x24
 8019c78:	2300      	movs	r3, #0
 8019c7a:	9304      	str	r3, [sp, #16]
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	4630      	mov	r0, r6
 8019c80:	4639      	mov	r1, r7
 8019c82:	220a      	movs	r2, #10
 8019c84:	f7ed fd2a 	bl	80076dc <__aeabi_uldivmod>
 8019c88:	4606      	mov	r6, r0
 8019c8a:	460f      	mov	r7, r1
 8019c8c:	ea56 0307 	orrs.w	r3, r6, r7
 8019c90:	d0af      	beq.n	8019bf2 <_svfprintf_r+0xc4a>
 8019c92:	46d9      	mov	r9, fp
 8019c94:	e7c7      	b.n	8019c26 <_svfprintf_r+0xc7e>
 8019c96:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8019c9a:	f006 030f 	and.w	r3, r6, #15
 8019c9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019ca0:	5cd3      	ldrb	r3, [r2, r3]
 8019ca2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8019ca6:	0933      	lsrs	r3, r6, #4
 8019ca8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8019cac:	093a      	lsrs	r2, r7, #4
 8019cae:	461e      	mov	r6, r3
 8019cb0:	4617      	mov	r7, r2
 8019cb2:	ea56 0307 	orrs.w	r3, r6, r7
 8019cb6:	d1f0      	bne.n	8019c9a <_svfprintf_r+0xcf2>
 8019cb8:	e79b      	b.n	8019bf2 <_svfprintf_r+0xc4a>
 8019cba:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d197      	bne.n	8019bf2 <_svfprintf_r+0xc4a>
 8019cc2:	07d2      	lsls	r2, r2, #31
 8019cc4:	bf44      	itt	mi
 8019cc6:	2330      	movmi	r3, #48	; 0x30
 8019cc8:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8019ccc:	e791      	b.n	8019bf2 <_svfprintf_r+0xc4a>
 8019cce:	9b06      	ldr	r3, [sp, #24]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	f000 8377 	beq.w	801a3c4 <_svfprintf_r+0x141c>
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8019cdc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8019ce0:	9608      	str	r6, [sp, #32]
 8019ce2:	f7ff bb49 	b.w	8019378 <_svfprintf_r+0x3d0>
 8019ce6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8019cea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019cec:	e4ec      	b.n	80196c8 <_svfprintf_r+0x720>
 8019cee:	2010      	movs	r0, #16
 8019cf0:	4403      	add	r3, r0
 8019cf2:	2a07      	cmp	r2, #7
 8019cf4:	6060      	str	r0, [r4, #4]
 8019cf6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019cfa:	dd08      	ble.n	8019d0e <_svfprintf_r+0xd66>
 8019cfc:	aa26      	add	r2, sp, #152	; 0x98
 8019cfe:	4641      	mov	r1, r8
 8019d00:	9803      	ldr	r0, [sp, #12]
 8019d02:	f002 f891 	bl	801be28 <__ssprint_r>
 8019d06:	2800      	cmp	r0, #0
 8019d08:	f040 833a 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019d0c:	a929      	add	r1, sp, #164	; 0xa4
 8019d0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019d10:	3b10      	subs	r3, #16
 8019d12:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d14:	460c      	mov	r4, r1
 8019d16:	e656      	b.n	80199c6 <_svfprintf_r+0xa1e>
 8019d18:	460c      	mov	r4, r1
 8019d1a:	e671      	b.n	8019a00 <_svfprintf_r+0xa58>
 8019d1c:	aa26      	add	r2, sp, #152	; 0x98
 8019d1e:	4641      	mov	r1, r8
 8019d20:	9803      	ldr	r0, [sp, #12]
 8019d22:	f002 f881 	bl	801be28 <__ssprint_r>
 8019d26:	2800      	cmp	r0, #0
 8019d28:	f040 832a 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019d2c:	ac29      	add	r4, sp, #164	; 0xa4
 8019d2e:	e679      	b.n	8019a24 <_svfprintf_r+0xa7c>
 8019d30:	aa26      	add	r2, sp, #152	; 0x98
 8019d32:	4641      	mov	r1, r8
 8019d34:	9803      	ldr	r0, [sp, #12]
 8019d36:	f002 f877 	bl	801be28 <__ssprint_r>
 8019d3a:	2800      	cmp	r0, #0
 8019d3c:	f040 8320 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019d40:	ac29      	add	r4, sp, #164	; 0xa4
 8019d42:	e67f      	b.n	8019a44 <_svfprintf_r+0xa9c>
 8019d44:	2010      	movs	r0, #16
 8019d46:	4403      	add	r3, r0
 8019d48:	2a07      	cmp	r2, #7
 8019d4a:	6060      	str	r0, [r4, #4]
 8019d4c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019d50:	dd08      	ble.n	8019d64 <_svfprintf_r+0xdbc>
 8019d52:	aa26      	add	r2, sp, #152	; 0x98
 8019d54:	4641      	mov	r1, r8
 8019d56:	9803      	ldr	r0, [sp, #12]
 8019d58:	f002 f866 	bl	801be28 <__ssprint_r>
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	f040 830f 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019d62:	a929      	add	r1, sp, #164	; 0xa4
 8019d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019d66:	3b10      	subs	r3, #16
 8019d68:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d6a:	460c      	mov	r4, r1
 8019d6c:	e673      	b.n	8019a56 <_svfprintf_r+0xaae>
 8019d6e:	460c      	mov	r4, r1
 8019d70:	e68e      	b.n	8019a90 <_svfprintf_r+0xae8>
 8019d72:	2010      	movs	r0, #16
 8019d74:	4403      	add	r3, r0
 8019d76:	2a07      	cmp	r2, #7
 8019d78:	6060      	str	r0, [r4, #4]
 8019d7a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019d7e:	dd08      	ble.n	8019d92 <_svfprintf_r+0xdea>
 8019d80:	aa26      	add	r2, sp, #152	; 0x98
 8019d82:	4641      	mov	r1, r8
 8019d84:	9803      	ldr	r0, [sp, #12]
 8019d86:	f002 f84f 	bl	801be28 <__ssprint_r>
 8019d8a:	2800      	cmp	r0, #0
 8019d8c:	f040 82f8 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019d90:	a929      	add	r1, sp, #164	; 0xa4
 8019d92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d94:	3b10      	subs	r3, #16
 8019d96:	9310      	str	r3, [sp, #64]	; 0x40
 8019d98:	460c      	mov	r4, r1
 8019d9a:	e67e      	b.n	8019a9a <_svfprintf_r+0xaf2>
 8019d9c:	460c      	mov	r4, r1
 8019d9e:	e699      	b.n	8019ad4 <_svfprintf_r+0xb2c>
 8019da0:	9b06      	ldr	r3, [sp, #24]
 8019da2:	2b65      	cmp	r3, #101	; 0x65
 8019da4:	f340 8234 	ble.w	801a210 <_svfprintf_r+0x1268>
 8019da8:	2200      	movs	r2, #0
 8019daa:	2300      	movs	r3, #0
 8019dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019db0:	f7ed fc24 	bl	80075fc <__aeabi_dcmpeq>
 8019db4:	2800      	cmp	r0, #0
 8019db6:	d069      	beq.n	8019e8c <_svfprintf_r+0xee4>
 8019db8:	4b6e      	ldr	r3, [pc, #440]	; (8019f74 <_svfprintf_r+0xfcc>)
 8019dba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019dbc:	6023      	str	r3, [r4, #0]
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	441d      	add	r5, r3
 8019dc2:	6063      	str	r3, [r4, #4]
 8019dc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019dc6:	9528      	str	r5, [sp, #160]	; 0xa0
 8019dc8:	3301      	adds	r3, #1
 8019dca:	2b07      	cmp	r3, #7
 8019dcc:	9327      	str	r3, [sp, #156]	; 0x9c
 8019dce:	dc37      	bgt.n	8019e40 <_svfprintf_r+0xe98>
 8019dd0:	3408      	adds	r4, #8
 8019dd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019dd4:	9a04      	ldr	r2, [sp, #16]
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	db03      	blt.n	8019de2 <_svfprintf_r+0xe3a>
 8019dda:	f01a 0f01 	tst.w	sl, #1
 8019dde:	f43f ae8a 	beq.w	8019af6 <_svfprintf_r+0xb4e>
 8019de2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019de4:	6023      	str	r3, [r4, #0]
 8019de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019de8:	6063      	str	r3, [r4, #4]
 8019dea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019dec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019dee:	4413      	add	r3, r2
 8019df0:	9328      	str	r3, [sp, #160]	; 0xa0
 8019df2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019df4:	3301      	adds	r3, #1
 8019df6:	2b07      	cmp	r3, #7
 8019df8:	9327      	str	r3, [sp, #156]	; 0x9c
 8019dfa:	dc2b      	bgt.n	8019e54 <_svfprintf_r+0xeac>
 8019dfc:	3408      	adds	r4, #8
 8019dfe:	9b04      	ldr	r3, [sp, #16]
 8019e00:	1e5d      	subs	r5, r3, #1
 8019e02:	2d00      	cmp	r5, #0
 8019e04:	f77f ae77 	ble.w	8019af6 <_svfprintf_r+0xb4e>
 8019e08:	4e5b      	ldr	r6, [pc, #364]	; (8019f78 <_svfprintf_r+0xfd0>)
 8019e0a:	2710      	movs	r7, #16
 8019e0c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019e10:	2d10      	cmp	r5, #16
 8019e12:	f103 0301 	add.w	r3, r3, #1
 8019e16:	f104 0108 	add.w	r1, r4, #8
 8019e1a:	6026      	str	r6, [r4, #0]
 8019e1c:	dc24      	bgt.n	8019e68 <_svfprintf_r+0xec0>
 8019e1e:	6065      	str	r5, [r4, #4]
 8019e20:	2b07      	cmp	r3, #7
 8019e22:	4415      	add	r5, r2
 8019e24:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8019e28:	f340 8289 	ble.w	801a33e <_svfprintf_r+0x1396>
 8019e2c:	aa26      	add	r2, sp, #152	; 0x98
 8019e2e:	4641      	mov	r1, r8
 8019e30:	9803      	ldr	r0, [sp, #12]
 8019e32:	f001 fff9 	bl	801be28 <__ssprint_r>
 8019e36:	2800      	cmp	r0, #0
 8019e38:	f040 82a2 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019e3c:	ac29      	add	r4, sp, #164	; 0xa4
 8019e3e:	e65a      	b.n	8019af6 <_svfprintf_r+0xb4e>
 8019e40:	aa26      	add	r2, sp, #152	; 0x98
 8019e42:	4641      	mov	r1, r8
 8019e44:	9803      	ldr	r0, [sp, #12]
 8019e46:	f001 ffef 	bl	801be28 <__ssprint_r>
 8019e4a:	2800      	cmp	r0, #0
 8019e4c:	f040 8298 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019e50:	ac29      	add	r4, sp, #164	; 0xa4
 8019e52:	e7be      	b.n	8019dd2 <_svfprintf_r+0xe2a>
 8019e54:	aa26      	add	r2, sp, #152	; 0x98
 8019e56:	4641      	mov	r1, r8
 8019e58:	9803      	ldr	r0, [sp, #12]
 8019e5a:	f001 ffe5 	bl	801be28 <__ssprint_r>
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	f040 828e 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019e64:	ac29      	add	r4, sp, #164	; 0xa4
 8019e66:	e7ca      	b.n	8019dfe <_svfprintf_r+0xe56>
 8019e68:	3210      	adds	r2, #16
 8019e6a:	2b07      	cmp	r3, #7
 8019e6c:	6067      	str	r7, [r4, #4]
 8019e6e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019e72:	dd08      	ble.n	8019e86 <_svfprintf_r+0xede>
 8019e74:	aa26      	add	r2, sp, #152	; 0x98
 8019e76:	4641      	mov	r1, r8
 8019e78:	9803      	ldr	r0, [sp, #12]
 8019e7a:	f001 ffd5 	bl	801be28 <__ssprint_r>
 8019e7e:	2800      	cmp	r0, #0
 8019e80:	f040 827e 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019e84:	a929      	add	r1, sp, #164	; 0xa4
 8019e86:	3d10      	subs	r5, #16
 8019e88:	460c      	mov	r4, r1
 8019e8a:	e7bf      	b.n	8019e0c <_svfprintf_r+0xe64>
 8019e8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	dc74      	bgt.n	8019f7c <_svfprintf_r+0xfd4>
 8019e92:	4b38      	ldr	r3, [pc, #224]	; (8019f74 <_svfprintf_r+0xfcc>)
 8019e94:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019e96:	6023      	str	r3, [r4, #0]
 8019e98:	2301      	movs	r3, #1
 8019e9a:	441d      	add	r5, r3
 8019e9c:	6063      	str	r3, [r4, #4]
 8019e9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019ea0:	9528      	str	r5, [sp, #160]	; 0xa0
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	2b07      	cmp	r3, #7
 8019ea6:	9327      	str	r3, [sp, #156]	; 0x9c
 8019ea8:	dc3e      	bgt.n	8019f28 <_svfprintf_r+0xf80>
 8019eaa:	3408      	adds	r4, #8
 8019eac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019eae:	b92b      	cbnz	r3, 8019ebc <_svfprintf_r+0xf14>
 8019eb0:	9b04      	ldr	r3, [sp, #16]
 8019eb2:	b91b      	cbnz	r3, 8019ebc <_svfprintf_r+0xf14>
 8019eb4:	f01a 0f01 	tst.w	sl, #1
 8019eb8:	f43f ae1d 	beq.w	8019af6 <_svfprintf_r+0xb4e>
 8019ebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019ebe:	6023      	str	r3, [r4, #0]
 8019ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ec2:	6063      	str	r3, [r4, #4]
 8019ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ec6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019ec8:	4413      	add	r3, r2
 8019eca:	9328      	str	r3, [sp, #160]	; 0xa0
 8019ecc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019ece:	3301      	adds	r3, #1
 8019ed0:	2b07      	cmp	r3, #7
 8019ed2:	9327      	str	r3, [sp, #156]	; 0x9c
 8019ed4:	dc32      	bgt.n	8019f3c <_svfprintf_r+0xf94>
 8019ed6:	3408      	adds	r4, #8
 8019ed8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8019eda:	2d00      	cmp	r5, #0
 8019edc:	da1b      	bge.n	8019f16 <_svfprintf_r+0xf6e>
 8019ede:	4e26      	ldr	r6, [pc, #152]	; (8019f78 <_svfprintf_r+0xfd0>)
 8019ee0:	426d      	negs	r5, r5
 8019ee2:	4623      	mov	r3, r4
 8019ee4:	2710      	movs	r7, #16
 8019ee6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8019eea:	2d10      	cmp	r5, #16
 8019eec:	f102 0201 	add.w	r2, r2, #1
 8019ef0:	f104 0408 	add.w	r4, r4, #8
 8019ef4:	601e      	str	r6, [r3, #0]
 8019ef6:	dc2b      	bgt.n	8019f50 <_svfprintf_r+0xfa8>
 8019ef8:	605d      	str	r5, [r3, #4]
 8019efa:	2a07      	cmp	r2, #7
 8019efc:	440d      	add	r5, r1
 8019efe:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8019f02:	dd08      	ble.n	8019f16 <_svfprintf_r+0xf6e>
 8019f04:	aa26      	add	r2, sp, #152	; 0x98
 8019f06:	4641      	mov	r1, r8
 8019f08:	9803      	ldr	r0, [sp, #12]
 8019f0a:	f001 ff8d 	bl	801be28 <__ssprint_r>
 8019f0e:	2800      	cmp	r0, #0
 8019f10:	f040 8236 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019f14:	ac29      	add	r4, sp, #164	; 0xa4
 8019f16:	9b04      	ldr	r3, [sp, #16]
 8019f18:	6063      	str	r3, [r4, #4]
 8019f1a:	9a04      	ldr	r2, [sp, #16]
 8019f1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f1e:	f8c4 b000 	str.w	fp, [r4]
 8019f22:	4413      	add	r3, r2
 8019f24:	9328      	str	r3, [sp, #160]	; 0xa0
 8019f26:	e5df      	b.n	8019ae8 <_svfprintf_r+0xb40>
 8019f28:	aa26      	add	r2, sp, #152	; 0x98
 8019f2a:	4641      	mov	r1, r8
 8019f2c:	9803      	ldr	r0, [sp, #12]
 8019f2e:	f001 ff7b 	bl	801be28 <__ssprint_r>
 8019f32:	2800      	cmp	r0, #0
 8019f34:	f040 8224 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019f38:	ac29      	add	r4, sp, #164	; 0xa4
 8019f3a:	e7b7      	b.n	8019eac <_svfprintf_r+0xf04>
 8019f3c:	aa26      	add	r2, sp, #152	; 0x98
 8019f3e:	4641      	mov	r1, r8
 8019f40:	9803      	ldr	r0, [sp, #12]
 8019f42:	f001 ff71 	bl	801be28 <__ssprint_r>
 8019f46:	2800      	cmp	r0, #0
 8019f48:	f040 821a 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019f4c:	ac29      	add	r4, sp, #164	; 0xa4
 8019f4e:	e7c3      	b.n	8019ed8 <_svfprintf_r+0xf30>
 8019f50:	3110      	adds	r1, #16
 8019f52:	2a07      	cmp	r2, #7
 8019f54:	605f      	str	r7, [r3, #4]
 8019f56:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8019f5a:	dd08      	ble.n	8019f6e <_svfprintf_r+0xfc6>
 8019f5c:	aa26      	add	r2, sp, #152	; 0x98
 8019f5e:	4641      	mov	r1, r8
 8019f60:	9803      	ldr	r0, [sp, #12]
 8019f62:	f001 ff61 	bl	801be28 <__ssprint_r>
 8019f66:	2800      	cmp	r0, #0
 8019f68:	f040 820a 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019f6c:	ac29      	add	r4, sp, #164	; 0xa4
 8019f6e:	3d10      	subs	r5, #16
 8019f70:	4623      	mov	r3, r4
 8019f72:	e7b8      	b.n	8019ee6 <_svfprintf_r+0xf3e>
 8019f74:	0809484e 	.word	0x0809484e
 8019f78:	08094860 	.word	0x08094860
 8019f7c:	9b04      	ldr	r3, [sp, #16]
 8019f7e:	42b3      	cmp	r3, r6
 8019f80:	bfa8      	it	ge
 8019f82:	4633      	movge	r3, r6
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	461d      	mov	r5, r3
 8019f88:	dd0b      	ble.n	8019fa2 <_svfprintf_r+0xffa>
 8019f8a:	e9c4 b300 	strd	fp, r3, [r4]
 8019f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f90:	442b      	add	r3, r5
 8019f92:	9328      	str	r3, [sp, #160]	; 0xa0
 8019f94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019f96:	3301      	adds	r3, #1
 8019f98:	2b07      	cmp	r3, #7
 8019f9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8019f9c:	f300 8086 	bgt.w	801a0ac <_svfprintf_r+0x1104>
 8019fa0:	3408      	adds	r4, #8
 8019fa2:	2d00      	cmp	r5, #0
 8019fa4:	bfac      	ite	ge
 8019fa6:	1b75      	subge	r5, r6, r5
 8019fa8:	4635      	movlt	r5, r6
 8019faa:	2d00      	cmp	r5, #0
 8019fac:	dd19      	ble.n	8019fe2 <_svfprintf_r+0x103a>
 8019fae:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019fb2:	4896      	ldr	r0, [pc, #600]	; (801a20c <_svfprintf_r+0x1264>)
 8019fb4:	6020      	str	r0, [r4, #0]
 8019fb6:	2d10      	cmp	r5, #16
 8019fb8:	f103 0301 	add.w	r3, r3, #1
 8019fbc:	f104 0108 	add.w	r1, r4, #8
 8019fc0:	dc7e      	bgt.n	801a0c0 <_svfprintf_r+0x1118>
 8019fc2:	6065      	str	r5, [r4, #4]
 8019fc4:	2b07      	cmp	r3, #7
 8019fc6:	4415      	add	r5, r2
 8019fc8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8019fcc:	f340 808b 	ble.w	801a0e6 <_svfprintf_r+0x113e>
 8019fd0:	aa26      	add	r2, sp, #152	; 0x98
 8019fd2:	4641      	mov	r1, r8
 8019fd4:	9803      	ldr	r0, [sp, #12]
 8019fd6:	f001 ff27 	bl	801be28 <__ssprint_r>
 8019fda:	2800      	cmp	r0, #0
 8019fdc:	f040 81d0 	bne.w	801a380 <_svfprintf_r+0x13d8>
 8019fe0:	ac29      	add	r4, sp, #164	; 0xa4
 8019fe2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8019fe6:	445e      	add	r6, fp
 8019fe8:	d009      	beq.n	8019ffe <_svfprintf_r+0x1056>
 8019fea:	9b07      	ldr	r3, [sp, #28]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d17c      	bne.n	801a0ea <_svfprintf_r+0x1142>
 8019ff0:	2f00      	cmp	r7, #0
 8019ff2:	d17c      	bne.n	801a0ee <_svfprintf_r+0x1146>
 8019ff4:	9b04      	ldr	r3, [sp, #16]
 8019ff6:	445b      	add	r3, fp
 8019ff8:	429e      	cmp	r6, r3
 8019ffa:	bf28      	it	cs
 8019ffc:	461e      	movcs	r6, r3
 8019ffe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a000:	9a04      	ldr	r2, [sp, #16]
 801a002:	4293      	cmp	r3, r2
 801a004:	db02      	blt.n	801a00c <_svfprintf_r+0x1064>
 801a006:	f01a 0f01 	tst.w	sl, #1
 801a00a:	d00e      	beq.n	801a02a <_svfprintf_r+0x1082>
 801a00c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a00e:	6023      	str	r3, [r4, #0]
 801a010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a012:	6063      	str	r3, [r4, #4]
 801a014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a016:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a018:	4413      	add	r3, r2
 801a01a:	9328      	str	r3, [sp, #160]	; 0xa0
 801a01c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a01e:	3301      	adds	r3, #1
 801a020:	2b07      	cmp	r3, #7
 801a022:	9327      	str	r3, [sp, #156]	; 0x9c
 801a024:	f300 80dd 	bgt.w	801a1e2 <_svfprintf_r+0x123a>
 801a028:	3408      	adds	r4, #8
 801a02a:	9b04      	ldr	r3, [sp, #16]
 801a02c:	9a04      	ldr	r2, [sp, #16]
 801a02e:	eb0b 0503 	add.w	r5, fp, r3
 801a032:	1bab      	subs	r3, r5, r6
 801a034:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a036:	1b55      	subs	r5, r2, r5
 801a038:	429d      	cmp	r5, r3
 801a03a:	bfa8      	it	ge
 801a03c:	461d      	movge	r5, r3
 801a03e:	2d00      	cmp	r5, #0
 801a040:	dd0b      	ble.n	801a05a <_svfprintf_r+0x10b2>
 801a042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a044:	442b      	add	r3, r5
 801a046:	9328      	str	r3, [sp, #160]	; 0xa0
 801a048:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a04a:	3301      	adds	r3, #1
 801a04c:	2b07      	cmp	r3, #7
 801a04e:	e9c4 6500 	strd	r6, r5, [r4]
 801a052:	9327      	str	r3, [sp, #156]	; 0x9c
 801a054:	f300 80cf 	bgt.w	801a1f6 <_svfprintf_r+0x124e>
 801a058:	3408      	adds	r4, #8
 801a05a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a05c:	9a04      	ldr	r2, [sp, #16]
 801a05e:	2d00      	cmp	r5, #0
 801a060:	eba2 0303 	sub.w	r3, r2, r3
 801a064:	bfac      	ite	ge
 801a066:	1b5d      	subge	r5, r3, r5
 801a068:	461d      	movlt	r5, r3
 801a06a:	2d00      	cmp	r5, #0
 801a06c:	f77f ad43 	ble.w	8019af6 <_svfprintf_r+0xb4e>
 801a070:	4e66      	ldr	r6, [pc, #408]	; (801a20c <_svfprintf_r+0x1264>)
 801a072:	2710      	movs	r7, #16
 801a074:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a078:	2d10      	cmp	r5, #16
 801a07a:	f103 0301 	add.w	r3, r3, #1
 801a07e:	f104 0108 	add.w	r1, r4, #8
 801a082:	6026      	str	r6, [r4, #0]
 801a084:	f77f aecb 	ble.w	8019e1e <_svfprintf_r+0xe76>
 801a088:	3210      	adds	r2, #16
 801a08a:	2b07      	cmp	r3, #7
 801a08c:	6067      	str	r7, [r4, #4]
 801a08e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a092:	dd08      	ble.n	801a0a6 <_svfprintf_r+0x10fe>
 801a094:	aa26      	add	r2, sp, #152	; 0x98
 801a096:	4641      	mov	r1, r8
 801a098:	9803      	ldr	r0, [sp, #12]
 801a09a:	f001 fec5 	bl	801be28 <__ssprint_r>
 801a09e:	2800      	cmp	r0, #0
 801a0a0:	f040 816e 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a0a4:	a929      	add	r1, sp, #164	; 0xa4
 801a0a6:	3d10      	subs	r5, #16
 801a0a8:	460c      	mov	r4, r1
 801a0aa:	e7e3      	b.n	801a074 <_svfprintf_r+0x10cc>
 801a0ac:	aa26      	add	r2, sp, #152	; 0x98
 801a0ae:	4641      	mov	r1, r8
 801a0b0:	9803      	ldr	r0, [sp, #12]
 801a0b2:	f001 feb9 	bl	801be28 <__ssprint_r>
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	f040 8162 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a0bc:	ac29      	add	r4, sp, #164	; 0xa4
 801a0be:	e770      	b.n	8019fa2 <_svfprintf_r+0xffa>
 801a0c0:	2010      	movs	r0, #16
 801a0c2:	4402      	add	r2, r0
 801a0c4:	2b07      	cmp	r3, #7
 801a0c6:	6060      	str	r0, [r4, #4]
 801a0c8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a0cc:	dd08      	ble.n	801a0e0 <_svfprintf_r+0x1138>
 801a0ce:	aa26      	add	r2, sp, #152	; 0x98
 801a0d0:	4641      	mov	r1, r8
 801a0d2:	9803      	ldr	r0, [sp, #12]
 801a0d4:	f001 fea8 	bl	801be28 <__ssprint_r>
 801a0d8:	2800      	cmp	r0, #0
 801a0da:	f040 8151 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a0de:	a929      	add	r1, sp, #164	; 0xa4
 801a0e0:	3d10      	subs	r5, #16
 801a0e2:	460c      	mov	r4, r1
 801a0e4:	e763      	b.n	8019fae <_svfprintf_r+0x1006>
 801a0e6:	460c      	mov	r4, r1
 801a0e8:	e77b      	b.n	8019fe2 <_svfprintf_r+0x103a>
 801a0ea:	2f00      	cmp	r7, #0
 801a0ec:	d049      	beq.n	801a182 <_svfprintf_r+0x11da>
 801a0ee:	3f01      	subs	r7, #1
 801a0f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a0f2:	6023      	str	r3, [r4, #0]
 801a0f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a0f6:	6063      	str	r3, [r4, #4]
 801a0f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a0fc:	4413      	add	r3, r2
 801a0fe:	9328      	str	r3, [sp, #160]	; 0xa0
 801a100:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a102:	3301      	adds	r3, #1
 801a104:	2b07      	cmp	r3, #7
 801a106:	9327      	str	r3, [sp, #156]	; 0x9c
 801a108:	dc42      	bgt.n	801a190 <_svfprintf_r+0x11e8>
 801a10a:	3408      	adds	r4, #8
 801a10c:	9b04      	ldr	r3, [sp, #16]
 801a10e:	445b      	add	r3, fp
 801a110:	1b9a      	subs	r2, r3, r6
 801a112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a114:	781b      	ldrb	r3, [r3, #0]
 801a116:	4293      	cmp	r3, r2
 801a118:	bfa8      	it	ge
 801a11a:	4613      	movge	r3, r2
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	461d      	mov	r5, r3
 801a120:	dd0a      	ble.n	801a138 <_svfprintf_r+0x1190>
 801a122:	e9c4 6300 	strd	r6, r3, [r4]
 801a126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a128:	442b      	add	r3, r5
 801a12a:	9328      	str	r3, [sp, #160]	; 0xa0
 801a12c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a12e:	3301      	adds	r3, #1
 801a130:	2b07      	cmp	r3, #7
 801a132:	9327      	str	r3, [sp, #156]	; 0x9c
 801a134:	dc36      	bgt.n	801a1a4 <_svfprintf_r+0x11fc>
 801a136:	3408      	adds	r4, #8
 801a138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a13a:	781b      	ldrb	r3, [r3, #0]
 801a13c:	2d00      	cmp	r5, #0
 801a13e:	bfac      	ite	ge
 801a140:	1b5d      	subge	r5, r3, r5
 801a142:	461d      	movlt	r5, r3
 801a144:	2d00      	cmp	r5, #0
 801a146:	dd18      	ble.n	801a17a <_svfprintf_r+0x11d2>
 801a148:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801a14c:	482f      	ldr	r0, [pc, #188]	; (801a20c <_svfprintf_r+0x1264>)
 801a14e:	6020      	str	r0, [r4, #0]
 801a150:	2d10      	cmp	r5, #16
 801a152:	f102 0201 	add.w	r2, r2, #1
 801a156:	f104 0108 	add.w	r1, r4, #8
 801a15a:	dc2d      	bgt.n	801a1b8 <_svfprintf_r+0x1210>
 801a15c:	442b      	add	r3, r5
 801a15e:	2a07      	cmp	r2, #7
 801a160:	6065      	str	r5, [r4, #4]
 801a162:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a166:	dd3a      	ble.n	801a1de <_svfprintf_r+0x1236>
 801a168:	aa26      	add	r2, sp, #152	; 0x98
 801a16a:	4641      	mov	r1, r8
 801a16c:	9803      	ldr	r0, [sp, #12]
 801a16e:	f001 fe5b 	bl	801be28 <__ssprint_r>
 801a172:	2800      	cmp	r0, #0
 801a174:	f040 8104 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a178:	ac29      	add	r4, sp, #164	; 0xa4
 801a17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a17c:	781b      	ldrb	r3, [r3, #0]
 801a17e:	441e      	add	r6, r3
 801a180:	e733      	b.n	8019fea <_svfprintf_r+0x1042>
 801a182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a184:	3b01      	subs	r3, #1
 801a186:	9309      	str	r3, [sp, #36]	; 0x24
 801a188:	9b07      	ldr	r3, [sp, #28]
 801a18a:	3b01      	subs	r3, #1
 801a18c:	9307      	str	r3, [sp, #28]
 801a18e:	e7af      	b.n	801a0f0 <_svfprintf_r+0x1148>
 801a190:	aa26      	add	r2, sp, #152	; 0x98
 801a192:	4641      	mov	r1, r8
 801a194:	9803      	ldr	r0, [sp, #12]
 801a196:	f001 fe47 	bl	801be28 <__ssprint_r>
 801a19a:	2800      	cmp	r0, #0
 801a19c:	f040 80f0 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a1a0:	ac29      	add	r4, sp, #164	; 0xa4
 801a1a2:	e7b3      	b.n	801a10c <_svfprintf_r+0x1164>
 801a1a4:	aa26      	add	r2, sp, #152	; 0x98
 801a1a6:	4641      	mov	r1, r8
 801a1a8:	9803      	ldr	r0, [sp, #12]
 801a1aa:	f001 fe3d 	bl	801be28 <__ssprint_r>
 801a1ae:	2800      	cmp	r0, #0
 801a1b0:	f040 80e6 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a1b4:	ac29      	add	r4, sp, #164	; 0xa4
 801a1b6:	e7bf      	b.n	801a138 <_svfprintf_r+0x1190>
 801a1b8:	2010      	movs	r0, #16
 801a1ba:	4403      	add	r3, r0
 801a1bc:	2a07      	cmp	r2, #7
 801a1be:	6060      	str	r0, [r4, #4]
 801a1c0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a1c4:	dd08      	ble.n	801a1d8 <_svfprintf_r+0x1230>
 801a1c6:	aa26      	add	r2, sp, #152	; 0x98
 801a1c8:	4641      	mov	r1, r8
 801a1ca:	9803      	ldr	r0, [sp, #12]
 801a1cc:	f001 fe2c 	bl	801be28 <__ssprint_r>
 801a1d0:	2800      	cmp	r0, #0
 801a1d2:	f040 80d5 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a1d6:	a929      	add	r1, sp, #164	; 0xa4
 801a1d8:	3d10      	subs	r5, #16
 801a1da:	460c      	mov	r4, r1
 801a1dc:	e7b4      	b.n	801a148 <_svfprintf_r+0x11a0>
 801a1de:	460c      	mov	r4, r1
 801a1e0:	e7cb      	b.n	801a17a <_svfprintf_r+0x11d2>
 801a1e2:	aa26      	add	r2, sp, #152	; 0x98
 801a1e4:	4641      	mov	r1, r8
 801a1e6:	9803      	ldr	r0, [sp, #12]
 801a1e8:	f001 fe1e 	bl	801be28 <__ssprint_r>
 801a1ec:	2800      	cmp	r0, #0
 801a1ee:	f040 80c7 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a1f2:	ac29      	add	r4, sp, #164	; 0xa4
 801a1f4:	e719      	b.n	801a02a <_svfprintf_r+0x1082>
 801a1f6:	aa26      	add	r2, sp, #152	; 0x98
 801a1f8:	4641      	mov	r1, r8
 801a1fa:	9803      	ldr	r0, [sp, #12]
 801a1fc:	f001 fe14 	bl	801be28 <__ssprint_r>
 801a200:	2800      	cmp	r0, #0
 801a202:	f040 80bd 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a206:	ac29      	add	r4, sp, #164	; 0xa4
 801a208:	e727      	b.n	801a05a <_svfprintf_r+0x10b2>
 801a20a:	bf00      	nop
 801a20c:	08094860 	.word	0x08094860
 801a210:	9a04      	ldr	r2, [sp, #16]
 801a212:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801a214:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a216:	2a01      	cmp	r2, #1
 801a218:	f105 0501 	add.w	r5, r5, #1
 801a21c:	f103 0301 	add.w	r3, r3, #1
 801a220:	f104 0608 	add.w	r6, r4, #8
 801a224:	dc02      	bgt.n	801a22c <_svfprintf_r+0x1284>
 801a226:	f01a 0f01 	tst.w	sl, #1
 801a22a:	d07d      	beq.n	801a328 <_svfprintf_r+0x1380>
 801a22c:	2201      	movs	r2, #1
 801a22e:	2b07      	cmp	r3, #7
 801a230:	f8c4 b000 	str.w	fp, [r4]
 801a234:	6062      	str	r2, [r4, #4]
 801a236:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801a23a:	dd08      	ble.n	801a24e <_svfprintf_r+0x12a6>
 801a23c:	aa26      	add	r2, sp, #152	; 0x98
 801a23e:	4641      	mov	r1, r8
 801a240:	9803      	ldr	r0, [sp, #12]
 801a242:	f001 fdf1 	bl	801be28 <__ssprint_r>
 801a246:	2800      	cmp	r0, #0
 801a248:	f040 809a 	bne.w	801a380 <_svfprintf_r+0x13d8>
 801a24c:	ae29      	add	r6, sp, #164	; 0xa4
 801a24e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a250:	6033      	str	r3, [r6, #0]
 801a252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a254:	6073      	str	r3, [r6, #4]
 801a256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a258:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a25a:	4413      	add	r3, r2
 801a25c:	9328      	str	r3, [sp, #160]	; 0xa0
 801a25e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a260:	3301      	adds	r3, #1
 801a262:	2b07      	cmp	r3, #7
 801a264:	9327      	str	r3, [sp, #156]	; 0x9c
 801a266:	dc31      	bgt.n	801a2cc <_svfprintf_r+0x1324>
 801a268:	3608      	adds	r6, #8
 801a26a:	9b04      	ldr	r3, [sp, #16]
 801a26c:	2200      	movs	r2, #0
 801a26e:	1e5c      	subs	r4, r3, #1
 801a270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a274:	2300      	movs	r3, #0
 801a276:	f7ed f9c1 	bl	80075fc <__aeabi_dcmpeq>
 801a27a:	2800      	cmp	r0, #0
 801a27c:	d12f      	bne.n	801a2de <_svfprintf_r+0x1336>
 801a27e:	f10b 0301 	add.w	r3, fp, #1
 801a282:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a284:	9904      	ldr	r1, [sp, #16]
 801a286:	e9c6 3400 	strd	r3, r4, [r6]
 801a28a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a28c:	3201      	adds	r2, #1
 801a28e:	3b01      	subs	r3, #1
 801a290:	440b      	add	r3, r1
 801a292:	2a07      	cmp	r2, #7
 801a294:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a298:	dd4f      	ble.n	801a33a <_svfprintf_r+0x1392>
 801a29a:	aa26      	add	r2, sp, #152	; 0x98
 801a29c:	4641      	mov	r1, r8
 801a29e:	9803      	ldr	r0, [sp, #12]
 801a2a0:	f001 fdc2 	bl	801be28 <__ssprint_r>
 801a2a4:	2800      	cmp	r0, #0
 801a2a6:	d16b      	bne.n	801a380 <_svfprintf_r+0x13d8>
 801a2a8:	ae29      	add	r6, sp, #164	; 0xa4
 801a2aa:	ab22      	add	r3, sp, #136	; 0x88
 801a2ac:	6033      	str	r3, [r6, #0]
 801a2ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2b0:	6073      	str	r3, [r6, #4]
 801a2b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a2b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a2b6:	4413      	add	r3, r2
 801a2b8:	9328      	str	r3, [sp, #160]	; 0xa0
 801a2ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a2bc:	3301      	adds	r3, #1
 801a2be:	2b07      	cmp	r3, #7
 801a2c0:	9327      	str	r3, [sp, #156]	; 0x9c
 801a2c2:	f73f adb3 	bgt.w	8019e2c <_svfprintf_r+0xe84>
 801a2c6:	f106 0408 	add.w	r4, r6, #8
 801a2ca:	e414      	b.n	8019af6 <_svfprintf_r+0xb4e>
 801a2cc:	aa26      	add	r2, sp, #152	; 0x98
 801a2ce:	4641      	mov	r1, r8
 801a2d0:	9803      	ldr	r0, [sp, #12]
 801a2d2:	f001 fda9 	bl	801be28 <__ssprint_r>
 801a2d6:	2800      	cmp	r0, #0
 801a2d8:	d152      	bne.n	801a380 <_svfprintf_r+0x13d8>
 801a2da:	ae29      	add	r6, sp, #164	; 0xa4
 801a2dc:	e7c5      	b.n	801a26a <_svfprintf_r+0x12c2>
 801a2de:	2c00      	cmp	r4, #0
 801a2e0:	dde3      	ble.n	801a2aa <_svfprintf_r+0x1302>
 801a2e2:	4d3e      	ldr	r5, [pc, #248]	; (801a3dc <_svfprintf_r+0x1434>)
 801a2e4:	2710      	movs	r7, #16
 801a2e6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a2ea:	2c10      	cmp	r4, #16
 801a2ec:	f103 0301 	add.w	r3, r3, #1
 801a2f0:	f106 0108 	add.w	r1, r6, #8
 801a2f4:	6035      	str	r5, [r6, #0]
 801a2f6:	dc07      	bgt.n	801a308 <_svfprintf_r+0x1360>
 801a2f8:	6074      	str	r4, [r6, #4]
 801a2fa:	2b07      	cmp	r3, #7
 801a2fc:	4414      	add	r4, r2
 801a2fe:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801a302:	dcca      	bgt.n	801a29a <_svfprintf_r+0x12f2>
 801a304:	460e      	mov	r6, r1
 801a306:	e7d0      	b.n	801a2aa <_svfprintf_r+0x1302>
 801a308:	3210      	adds	r2, #16
 801a30a:	2b07      	cmp	r3, #7
 801a30c:	6077      	str	r7, [r6, #4]
 801a30e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a312:	dd06      	ble.n	801a322 <_svfprintf_r+0x137a>
 801a314:	aa26      	add	r2, sp, #152	; 0x98
 801a316:	4641      	mov	r1, r8
 801a318:	9803      	ldr	r0, [sp, #12]
 801a31a:	f001 fd85 	bl	801be28 <__ssprint_r>
 801a31e:	bb78      	cbnz	r0, 801a380 <_svfprintf_r+0x13d8>
 801a320:	a929      	add	r1, sp, #164	; 0xa4
 801a322:	3c10      	subs	r4, #16
 801a324:	460e      	mov	r6, r1
 801a326:	e7de      	b.n	801a2e6 <_svfprintf_r+0x133e>
 801a328:	2201      	movs	r2, #1
 801a32a:	2b07      	cmp	r3, #7
 801a32c:	f8c4 b000 	str.w	fp, [r4]
 801a330:	6062      	str	r2, [r4, #4]
 801a332:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801a336:	ddb8      	ble.n	801a2aa <_svfprintf_r+0x1302>
 801a338:	e7af      	b.n	801a29a <_svfprintf_r+0x12f2>
 801a33a:	3608      	adds	r6, #8
 801a33c:	e7b5      	b.n	801a2aa <_svfprintf_r+0x1302>
 801a33e:	460c      	mov	r4, r1
 801a340:	f7ff bbd9 	b.w	8019af6 <_svfprintf_r+0xb4e>
 801a344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a346:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a348:	1a9d      	subs	r5, r3, r2
 801a34a:	2d00      	cmp	r5, #0
 801a34c:	f77f abd7 	ble.w	8019afe <_svfprintf_r+0xb56>
 801a350:	4e23      	ldr	r6, [pc, #140]	; (801a3e0 <_svfprintf_r+0x1438>)
 801a352:	2710      	movs	r7, #16
 801a354:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a358:	2d10      	cmp	r5, #16
 801a35a:	f103 0301 	add.w	r3, r3, #1
 801a35e:	6026      	str	r6, [r4, #0]
 801a360:	dc18      	bgt.n	801a394 <_svfprintf_r+0x13ec>
 801a362:	6065      	str	r5, [r4, #4]
 801a364:	2b07      	cmp	r3, #7
 801a366:	4415      	add	r5, r2
 801a368:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801a36c:	f77f abc7 	ble.w	8019afe <_svfprintf_r+0xb56>
 801a370:	aa26      	add	r2, sp, #152	; 0x98
 801a372:	4641      	mov	r1, r8
 801a374:	9803      	ldr	r0, [sp, #12]
 801a376:	f001 fd57 	bl	801be28 <__ssprint_r>
 801a37a:	2800      	cmp	r0, #0
 801a37c:	f43f abbf 	beq.w	8019afe <_svfprintf_r+0xb56>
 801a380:	f1b9 0f00 	cmp.w	r9, #0
 801a384:	f43f a8a8 	beq.w	80194d8 <_svfprintf_r+0x530>
 801a388:	4649      	mov	r1, r9
 801a38a:	9803      	ldr	r0, [sp, #12]
 801a38c:	f001 f8ba 	bl	801b504 <_free_r>
 801a390:	f7ff b8a2 	b.w	80194d8 <_svfprintf_r+0x530>
 801a394:	3210      	adds	r2, #16
 801a396:	2b07      	cmp	r3, #7
 801a398:	6067      	str	r7, [r4, #4]
 801a39a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a39e:	dc02      	bgt.n	801a3a6 <_svfprintf_r+0x13fe>
 801a3a0:	3408      	adds	r4, #8
 801a3a2:	3d10      	subs	r5, #16
 801a3a4:	e7d6      	b.n	801a354 <_svfprintf_r+0x13ac>
 801a3a6:	aa26      	add	r2, sp, #152	; 0x98
 801a3a8:	4641      	mov	r1, r8
 801a3aa:	9803      	ldr	r0, [sp, #12]
 801a3ac:	f001 fd3c 	bl	801be28 <__ssprint_r>
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	d1e5      	bne.n	801a380 <_svfprintf_r+0x13d8>
 801a3b4:	ac29      	add	r4, sp, #164	; 0xa4
 801a3b6:	e7f4      	b.n	801a3a2 <_svfprintf_r+0x13fa>
 801a3b8:	4649      	mov	r1, r9
 801a3ba:	9803      	ldr	r0, [sp, #12]
 801a3bc:	f001 f8a2 	bl	801b504 <_free_r>
 801a3c0:	f7ff bbb5 	b.w	8019b2e <_svfprintf_r+0xb86>
 801a3c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	f43f a886 	beq.w	80194d8 <_svfprintf_r+0x530>
 801a3cc:	aa26      	add	r2, sp, #152	; 0x98
 801a3ce:	4641      	mov	r1, r8
 801a3d0:	9803      	ldr	r0, [sp, #12]
 801a3d2:	f001 fd29 	bl	801be28 <__ssprint_r>
 801a3d6:	f7ff b87f 	b.w	80194d8 <_svfprintf_r+0x530>
 801a3da:	bf00      	nop
 801a3dc:	08094860 	.word	0x08094860
 801a3e0:	08094850 	.word	0x08094850

0801a3e4 <sysconf>:
 801a3e4:	2808      	cmp	r0, #8
 801a3e6:	b508      	push	{r3, lr}
 801a3e8:	d006      	beq.n	801a3f8 <sysconf+0x14>
 801a3ea:	f7fd fea1 	bl	8018130 <__errno>
 801a3ee:	2316      	movs	r3, #22
 801a3f0:	6003      	str	r3, [r0, #0]
 801a3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3f6:	bd08      	pop	{r3, pc}
 801a3f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801a3fc:	e7fb      	b.n	801a3f6 <sysconf+0x12>

0801a3fe <__swbuf_r>:
 801a3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a400:	460d      	mov	r5, r1
 801a402:	4614      	mov	r4, r2
 801a404:	4606      	mov	r6, r0
 801a406:	b118      	cbz	r0, 801a410 <__swbuf_r+0x12>
 801a408:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a40a:	b90b      	cbnz	r3, 801a410 <__swbuf_r+0x12>
 801a40c:	f000 ffea 	bl	801b3e4 <__sinit>
 801a410:	69a3      	ldr	r3, [r4, #24]
 801a412:	60a3      	str	r3, [r4, #8]
 801a414:	89a3      	ldrh	r3, [r4, #12]
 801a416:	0719      	lsls	r1, r3, #28
 801a418:	d528      	bpl.n	801a46c <__swbuf_r+0x6e>
 801a41a:	6923      	ldr	r3, [r4, #16]
 801a41c:	b333      	cbz	r3, 801a46c <__swbuf_r+0x6e>
 801a41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a422:	b2ed      	uxtb	r5, r5
 801a424:	049a      	lsls	r2, r3, #18
 801a426:	462f      	mov	r7, r5
 801a428:	d52a      	bpl.n	801a480 <__swbuf_r+0x82>
 801a42a:	6923      	ldr	r3, [r4, #16]
 801a42c:	6820      	ldr	r0, [r4, #0]
 801a42e:	1ac0      	subs	r0, r0, r3
 801a430:	6963      	ldr	r3, [r4, #20]
 801a432:	4283      	cmp	r3, r0
 801a434:	dc04      	bgt.n	801a440 <__swbuf_r+0x42>
 801a436:	4621      	mov	r1, r4
 801a438:	4630      	mov	r0, r6
 801a43a:	f000 ff67 	bl	801b30c <_fflush_r>
 801a43e:	b9d8      	cbnz	r0, 801a478 <__swbuf_r+0x7a>
 801a440:	68a3      	ldr	r3, [r4, #8]
 801a442:	3b01      	subs	r3, #1
 801a444:	60a3      	str	r3, [r4, #8]
 801a446:	6823      	ldr	r3, [r4, #0]
 801a448:	1c5a      	adds	r2, r3, #1
 801a44a:	6022      	str	r2, [r4, #0]
 801a44c:	701d      	strb	r5, [r3, #0]
 801a44e:	6963      	ldr	r3, [r4, #20]
 801a450:	3001      	adds	r0, #1
 801a452:	4283      	cmp	r3, r0
 801a454:	d004      	beq.n	801a460 <__swbuf_r+0x62>
 801a456:	89a3      	ldrh	r3, [r4, #12]
 801a458:	07db      	lsls	r3, r3, #31
 801a45a:	d50f      	bpl.n	801a47c <__swbuf_r+0x7e>
 801a45c:	2d0a      	cmp	r5, #10
 801a45e:	d10d      	bne.n	801a47c <__swbuf_r+0x7e>
 801a460:	4621      	mov	r1, r4
 801a462:	4630      	mov	r0, r6
 801a464:	f000 ff52 	bl	801b30c <_fflush_r>
 801a468:	b140      	cbz	r0, 801a47c <__swbuf_r+0x7e>
 801a46a:	e005      	b.n	801a478 <__swbuf_r+0x7a>
 801a46c:	4621      	mov	r1, r4
 801a46e:	4630      	mov	r0, r6
 801a470:	f000 f820 	bl	801a4b4 <__swsetup_r>
 801a474:	2800      	cmp	r0, #0
 801a476:	d0d2      	beq.n	801a41e <__swbuf_r+0x20>
 801a478:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a47c:	4638      	mov	r0, r7
 801a47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a480:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a484:	81a3      	strh	r3, [r4, #12]
 801a486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a48c:	6663      	str	r3, [r4, #100]	; 0x64
 801a48e:	e7cc      	b.n	801a42a <__swbuf_r+0x2c>

0801a490 <_write_r>:
 801a490:	b538      	push	{r3, r4, r5, lr}
 801a492:	4c07      	ldr	r4, [pc, #28]	; (801a4b0 <_write_r+0x20>)
 801a494:	4605      	mov	r5, r0
 801a496:	4608      	mov	r0, r1
 801a498:	4611      	mov	r1, r2
 801a49a:	2200      	movs	r2, #0
 801a49c:	6022      	str	r2, [r4, #0]
 801a49e:	461a      	mov	r2, r3
 801a4a0:	f7fc fcf6 	bl	8016e90 <_write>
 801a4a4:	1c43      	adds	r3, r0, #1
 801a4a6:	d102      	bne.n	801a4ae <_write_r+0x1e>
 801a4a8:	6823      	ldr	r3, [r4, #0]
 801a4aa:	b103      	cbz	r3, 801a4ae <_write_r+0x1e>
 801a4ac:	602b      	str	r3, [r5, #0]
 801a4ae:	bd38      	pop	{r3, r4, r5, pc}
 801a4b0:	2001ba30 	.word	0x2001ba30

0801a4b4 <__swsetup_r>:
 801a4b4:	b538      	push	{r3, r4, r5, lr}
 801a4b6:	4b2a      	ldr	r3, [pc, #168]	; (801a560 <__swsetup_r+0xac>)
 801a4b8:	4605      	mov	r5, r0
 801a4ba:	6818      	ldr	r0, [r3, #0]
 801a4bc:	460c      	mov	r4, r1
 801a4be:	b118      	cbz	r0, 801a4c8 <__swsetup_r+0x14>
 801a4c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a4c2:	b90b      	cbnz	r3, 801a4c8 <__swsetup_r+0x14>
 801a4c4:	f000 ff8e 	bl	801b3e4 <__sinit>
 801a4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4cc:	b29a      	uxth	r2, r3
 801a4ce:	0711      	lsls	r1, r2, #28
 801a4d0:	d422      	bmi.n	801a518 <__swsetup_r+0x64>
 801a4d2:	06d0      	lsls	r0, r2, #27
 801a4d4:	d407      	bmi.n	801a4e6 <__swsetup_r+0x32>
 801a4d6:	2209      	movs	r2, #9
 801a4d8:	602a      	str	r2, [r5, #0]
 801a4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4de:	81a3      	strh	r3, [r4, #12]
 801a4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4e4:	e034      	b.n	801a550 <__swsetup_r+0x9c>
 801a4e6:	0751      	lsls	r1, r2, #29
 801a4e8:	d512      	bpl.n	801a510 <__swsetup_r+0x5c>
 801a4ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a4ec:	b141      	cbz	r1, 801a500 <__swsetup_r+0x4c>
 801a4ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801a4f2:	4299      	cmp	r1, r3
 801a4f4:	d002      	beq.n	801a4fc <__swsetup_r+0x48>
 801a4f6:	4628      	mov	r0, r5
 801a4f8:	f001 f804 	bl	801b504 <_free_r>
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	6323      	str	r3, [r4, #48]	; 0x30
 801a500:	89a3      	ldrh	r3, [r4, #12]
 801a502:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a506:	81a3      	strh	r3, [r4, #12]
 801a508:	2300      	movs	r3, #0
 801a50a:	6063      	str	r3, [r4, #4]
 801a50c:	6923      	ldr	r3, [r4, #16]
 801a50e:	6023      	str	r3, [r4, #0]
 801a510:	89a3      	ldrh	r3, [r4, #12]
 801a512:	f043 0308 	orr.w	r3, r3, #8
 801a516:	81a3      	strh	r3, [r4, #12]
 801a518:	6923      	ldr	r3, [r4, #16]
 801a51a:	b94b      	cbnz	r3, 801a530 <__swsetup_r+0x7c>
 801a51c:	89a3      	ldrh	r3, [r4, #12]
 801a51e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a526:	d003      	beq.n	801a530 <__swsetup_r+0x7c>
 801a528:	4621      	mov	r1, r4
 801a52a:	4628      	mov	r0, r5
 801a52c:	f001 f8fe 	bl	801b72c <__smakebuf_r>
 801a530:	89a2      	ldrh	r2, [r4, #12]
 801a532:	f012 0301 	ands.w	r3, r2, #1
 801a536:	d00c      	beq.n	801a552 <__swsetup_r+0x9e>
 801a538:	2300      	movs	r3, #0
 801a53a:	60a3      	str	r3, [r4, #8]
 801a53c:	6963      	ldr	r3, [r4, #20]
 801a53e:	425b      	negs	r3, r3
 801a540:	61a3      	str	r3, [r4, #24]
 801a542:	6923      	ldr	r3, [r4, #16]
 801a544:	b953      	cbnz	r3, 801a55c <__swsetup_r+0xa8>
 801a546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a54a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a54e:	d1c4      	bne.n	801a4da <__swsetup_r+0x26>
 801a550:	bd38      	pop	{r3, r4, r5, pc}
 801a552:	0792      	lsls	r2, r2, #30
 801a554:	bf58      	it	pl
 801a556:	6963      	ldrpl	r3, [r4, #20]
 801a558:	60a3      	str	r3, [r4, #8]
 801a55a:	e7f2      	b.n	801a542 <__swsetup_r+0x8e>
 801a55c:	2000      	movs	r0, #0
 801a55e:	e7f7      	b.n	801a550 <__swsetup_r+0x9c>
 801a560:	2000002c 	.word	0x2000002c

0801a564 <register_fini>:
 801a564:	4b02      	ldr	r3, [pc, #8]	; (801a570 <register_fini+0xc>)
 801a566:	b113      	cbz	r3, 801a56e <register_fini+0xa>
 801a568:	4802      	ldr	r0, [pc, #8]	; (801a574 <register_fini+0x10>)
 801a56a:	f000 b805 	b.w	801a578 <atexit>
 801a56e:	4770      	bx	lr
 801a570:	00000000 	.word	0x00000000
 801a574:	0801b435 	.word	0x0801b435

0801a578 <atexit>:
 801a578:	2300      	movs	r3, #0
 801a57a:	4601      	mov	r1, r0
 801a57c:	461a      	mov	r2, r3
 801a57e:	4618      	mov	r0, r3
 801a580:	f001 bcca 	b.w	801bf18 <__register_exitproc>

0801a584 <quorem>:
 801a584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a588:	6903      	ldr	r3, [r0, #16]
 801a58a:	690c      	ldr	r4, [r1, #16]
 801a58c:	42a3      	cmp	r3, r4
 801a58e:	4680      	mov	r8, r0
 801a590:	f2c0 8082 	blt.w	801a698 <quorem+0x114>
 801a594:	3c01      	subs	r4, #1
 801a596:	f101 0714 	add.w	r7, r1, #20
 801a59a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801a59e:	f100 0614 	add.w	r6, r0, #20
 801a5a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801a5a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801a5aa:	eb06 030c 	add.w	r3, r6, ip
 801a5ae:	3501      	adds	r5, #1
 801a5b0:	eb07 090c 	add.w	r9, r7, ip
 801a5b4:	9301      	str	r3, [sp, #4]
 801a5b6:	fbb0 f5f5 	udiv	r5, r0, r5
 801a5ba:	b395      	cbz	r5, 801a622 <quorem+0x9e>
 801a5bc:	f04f 0a00 	mov.w	sl, #0
 801a5c0:	4638      	mov	r0, r7
 801a5c2:	46b6      	mov	lr, r6
 801a5c4:	46d3      	mov	fp, sl
 801a5c6:	f850 2b04 	ldr.w	r2, [r0], #4
 801a5ca:	b293      	uxth	r3, r2
 801a5cc:	fb05 a303 	mla	r3, r5, r3, sl
 801a5d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a5d4:	b29b      	uxth	r3, r3
 801a5d6:	ebab 0303 	sub.w	r3, fp, r3
 801a5da:	0c12      	lsrs	r2, r2, #16
 801a5dc:	f8de b000 	ldr.w	fp, [lr]
 801a5e0:	fb05 a202 	mla	r2, r5, r2, sl
 801a5e4:	fa13 f38b 	uxtah	r3, r3, fp
 801a5e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801a5ec:	fa1f fb82 	uxth.w	fp, r2
 801a5f0:	f8de 2000 	ldr.w	r2, [lr]
 801a5f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801a5f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a5fc:	b29b      	uxth	r3, r3
 801a5fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a602:	4581      	cmp	r9, r0
 801a604:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801a608:	f84e 3b04 	str.w	r3, [lr], #4
 801a60c:	d2db      	bcs.n	801a5c6 <quorem+0x42>
 801a60e:	f856 300c 	ldr.w	r3, [r6, ip]
 801a612:	b933      	cbnz	r3, 801a622 <quorem+0x9e>
 801a614:	9b01      	ldr	r3, [sp, #4]
 801a616:	3b04      	subs	r3, #4
 801a618:	429e      	cmp	r6, r3
 801a61a:	461a      	mov	r2, r3
 801a61c:	d330      	bcc.n	801a680 <quorem+0xfc>
 801a61e:	f8c8 4010 	str.w	r4, [r8, #16]
 801a622:	4640      	mov	r0, r8
 801a624:	f001 faac 	bl	801bb80 <__mcmp>
 801a628:	2800      	cmp	r0, #0
 801a62a:	db25      	blt.n	801a678 <quorem+0xf4>
 801a62c:	3501      	adds	r5, #1
 801a62e:	4630      	mov	r0, r6
 801a630:	f04f 0c00 	mov.w	ip, #0
 801a634:	f857 2b04 	ldr.w	r2, [r7], #4
 801a638:	f8d0 e000 	ldr.w	lr, [r0]
 801a63c:	b293      	uxth	r3, r2
 801a63e:	ebac 0303 	sub.w	r3, ip, r3
 801a642:	0c12      	lsrs	r2, r2, #16
 801a644:	fa13 f38e 	uxtah	r3, r3, lr
 801a648:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a64c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a650:	b29b      	uxth	r3, r3
 801a652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a656:	45b9      	cmp	r9, r7
 801a658:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a65c:	f840 3b04 	str.w	r3, [r0], #4
 801a660:	d2e8      	bcs.n	801a634 <quorem+0xb0>
 801a662:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801a666:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801a66a:	b92a      	cbnz	r2, 801a678 <quorem+0xf4>
 801a66c:	3b04      	subs	r3, #4
 801a66e:	429e      	cmp	r6, r3
 801a670:	461a      	mov	r2, r3
 801a672:	d30b      	bcc.n	801a68c <quorem+0x108>
 801a674:	f8c8 4010 	str.w	r4, [r8, #16]
 801a678:	4628      	mov	r0, r5
 801a67a:	b003      	add	sp, #12
 801a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a680:	6812      	ldr	r2, [r2, #0]
 801a682:	3b04      	subs	r3, #4
 801a684:	2a00      	cmp	r2, #0
 801a686:	d1ca      	bne.n	801a61e <quorem+0x9a>
 801a688:	3c01      	subs	r4, #1
 801a68a:	e7c5      	b.n	801a618 <quorem+0x94>
 801a68c:	6812      	ldr	r2, [r2, #0]
 801a68e:	3b04      	subs	r3, #4
 801a690:	2a00      	cmp	r2, #0
 801a692:	d1ef      	bne.n	801a674 <quorem+0xf0>
 801a694:	3c01      	subs	r4, #1
 801a696:	e7ea      	b.n	801a66e <quorem+0xea>
 801a698:	2000      	movs	r0, #0
 801a69a:	e7ee      	b.n	801a67a <quorem+0xf6>
 801a69c:	0000      	movs	r0, r0
	...

0801a6a0 <_dtoa_r>:
 801a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a4:	b097      	sub	sp, #92	; 0x5c
 801a6a6:	ec57 6b10 	vmov	r6, r7, d0
 801a6aa:	9106      	str	r1, [sp, #24]
 801a6ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801a6ae:	920b      	str	r2, [sp, #44]	; 0x2c
 801a6b0:	4604      	mov	r4, r0
 801a6b2:	9312      	str	r3, [sp, #72]	; 0x48
 801a6b4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a6b6:	e9cd 6700 	strd	r6, r7, [sp]
 801a6ba:	b141      	cbz	r1, 801a6ce <_dtoa_r+0x2e>
 801a6bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a6be:	604a      	str	r2, [r1, #4]
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	4093      	lsls	r3, r2
 801a6c4:	608b      	str	r3, [r1, #8]
 801a6c6:	f001 f896 	bl	801b7f6 <_Bfree>
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	6423      	str	r3, [r4, #64]	; 0x40
 801a6ce:	1e3b      	subs	r3, r7, #0
 801a6d0:	bfb9      	ittee	lt
 801a6d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a6d6:	9301      	strlt	r3, [sp, #4]
 801a6d8:	2300      	movge	r3, #0
 801a6da:	602b      	strge	r3, [r5, #0]
 801a6dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a6e0:	4baf      	ldr	r3, [pc, #700]	; (801a9a0 <_dtoa_r+0x300>)
 801a6e2:	bfbc      	itt	lt
 801a6e4:	2201      	movlt	r2, #1
 801a6e6:	602a      	strlt	r2, [r5, #0]
 801a6e8:	ea33 0308 	bics.w	r3, r3, r8
 801a6ec:	d116      	bne.n	801a71c <_dtoa_r+0x7c>
 801a6ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a6f0:	f242 730f 	movw	r3, #9999	; 0x270f
 801a6f4:	6013      	str	r3, [r2, #0]
 801a6f6:	9b00      	ldr	r3, [sp, #0]
 801a6f8:	b923      	cbnz	r3, 801a704 <_dtoa_r+0x64>
 801a6fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801a6fe:	2800      	cmp	r0, #0
 801a700:	f000 8543 	beq.w	801b18a <_dtoa_r+0xaea>
 801a704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a706:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801a9b4 <_dtoa_r+0x314>
 801a70a:	b11b      	cbz	r3, 801a714 <_dtoa_r+0x74>
 801a70c:	f10b 0303 	add.w	r3, fp, #3
 801a710:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a712:	6013      	str	r3, [r2, #0]
 801a714:	4658      	mov	r0, fp
 801a716:	b017      	add	sp, #92	; 0x5c
 801a718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a71c:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a720:	2200      	movs	r2, #0
 801a722:	2300      	movs	r3, #0
 801a724:	4630      	mov	r0, r6
 801a726:	4639      	mov	r1, r7
 801a728:	f7ec ff68 	bl	80075fc <__aeabi_dcmpeq>
 801a72c:	4681      	mov	r9, r0
 801a72e:	b160      	cbz	r0, 801a74a <_dtoa_r+0xaa>
 801a730:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a732:	2301      	movs	r3, #1
 801a734:	6013      	str	r3, [r2, #0]
 801a736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a738:	2b00      	cmp	r3, #0
 801a73a:	f000 8522 	beq.w	801b182 <_dtoa_r+0xae2>
 801a73e:	4b99      	ldr	r3, [pc, #612]	; (801a9a4 <_dtoa_r+0x304>)
 801a740:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a742:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801a746:	6013      	str	r3, [r2, #0]
 801a748:	e7e4      	b.n	801a714 <_dtoa_r+0x74>
 801a74a:	aa14      	add	r2, sp, #80	; 0x50
 801a74c:	a915      	add	r1, sp, #84	; 0x54
 801a74e:	ec47 6b10 	vmov	d0, r6, r7
 801a752:	4620      	mov	r0, r4
 801a754:	f001 fa8b 	bl	801bc6e <__d2b>
 801a758:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a75c:	9004      	str	r0, [sp, #16]
 801a75e:	2d00      	cmp	r5, #0
 801a760:	d07c      	beq.n	801a85c <_dtoa_r+0x1bc>
 801a762:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a766:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801a76a:	46b2      	mov	sl, r6
 801a76c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801a770:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a774:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801a778:	2200      	movs	r2, #0
 801a77a:	4b8b      	ldr	r3, [pc, #556]	; (801a9a8 <_dtoa_r+0x308>)
 801a77c:	4650      	mov	r0, sl
 801a77e:	4659      	mov	r1, fp
 801a780:	f7ec fb1c 	bl	8006dbc <__aeabi_dsub>
 801a784:	a380      	add	r3, pc, #512	; (adr r3, 801a988 <_dtoa_r+0x2e8>)
 801a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a78a:	f7ec fccf 	bl	800712c <__aeabi_dmul>
 801a78e:	a380      	add	r3, pc, #512	; (adr r3, 801a990 <_dtoa_r+0x2f0>)
 801a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a794:	f7ec fb14 	bl	8006dc0 <__adddf3>
 801a798:	4606      	mov	r6, r0
 801a79a:	4628      	mov	r0, r5
 801a79c:	460f      	mov	r7, r1
 801a79e:	f7ec fc5b 	bl	8007058 <__aeabi_i2d>
 801a7a2:	a37d      	add	r3, pc, #500	; (adr r3, 801a998 <_dtoa_r+0x2f8>)
 801a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a8:	f7ec fcc0 	bl	800712c <__aeabi_dmul>
 801a7ac:	4602      	mov	r2, r0
 801a7ae:	460b      	mov	r3, r1
 801a7b0:	4630      	mov	r0, r6
 801a7b2:	4639      	mov	r1, r7
 801a7b4:	f7ec fb04 	bl	8006dc0 <__adddf3>
 801a7b8:	4606      	mov	r6, r0
 801a7ba:	460f      	mov	r7, r1
 801a7bc:	f7ec ff66 	bl	800768c <__aeabi_d2iz>
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	4682      	mov	sl, r0
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	4630      	mov	r0, r6
 801a7c8:	4639      	mov	r1, r7
 801a7ca:	f7ec ff21 	bl	8007610 <__aeabi_dcmplt>
 801a7ce:	b148      	cbz	r0, 801a7e4 <_dtoa_r+0x144>
 801a7d0:	4650      	mov	r0, sl
 801a7d2:	f7ec fc41 	bl	8007058 <__aeabi_i2d>
 801a7d6:	4632      	mov	r2, r6
 801a7d8:	463b      	mov	r3, r7
 801a7da:	f7ec ff0f 	bl	80075fc <__aeabi_dcmpeq>
 801a7de:	b908      	cbnz	r0, 801a7e4 <_dtoa_r+0x144>
 801a7e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a7e4:	f1ba 0f16 	cmp.w	sl, #22
 801a7e8:	d859      	bhi.n	801a89e <_dtoa_r+0x1fe>
 801a7ea:	4970      	ldr	r1, [pc, #448]	; (801a9ac <_dtoa_r+0x30c>)
 801a7ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801a7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7f8:	f7ec ff28 	bl	800764c <__aeabi_dcmpgt>
 801a7fc:	2800      	cmp	r0, #0
 801a7fe:	d050      	beq.n	801a8a2 <_dtoa_r+0x202>
 801a800:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a804:	2300      	movs	r3, #0
 801a806:	930f      	str	r3, [sp, #60]	; 0x3c
 801a808:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a80a:	1b5d      	subs	r5, r3, r5
 801a80c:	f1b5 0801 	subs.w	r8, r5, #1
 801a810:	bf49      	itett	mi
 801a812:	f1c5 0301 	rsbmi	r3, r5, #1
 801a816:	2300      	movpl	r3, #0
 801a818:	9305      	strmi	r3, [sp, #20]
 801a81a:	f04f 0800 	movmi.w	r8, #0
 801a81e:	bf58      	it	pl
 801a820:	9305      	strpl	r3, [sp, #20]
 801a822:	f1ba 0f00 	cmp.w	sl, #0
 801a826:	db3e      	blt.n	801a8a6 <_dtoa_r+0x206>
 801a828:	2300      	movs	r3, #0
 801a82a:	44d0      	add	r8, sl
 801a82c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801a830:	9307      	str	r3, [sp, #28]
 801a832:	9b06      	ldr	r3, [sp, #24]
 801a834:	2b09      	cmp	r3, #9
 801a836:	f200 808d 	bhi.w	801a954 <_dtoa_r+0x2b4>
 801a83a:	2b05      	cmp	r3, #5
 801a83c:	bfc4      	itt	gt
 801a83e:	3b04      	subgt	r3, #4
 801a840:	9306      	strgt	r3, [sp, #24]
 801a842:	9b06      	ldr	r3, [sp, #24]
 801a844:	f1a3 0302 	sub.w	r3, r3, #2
 801a848:	bfcc      	ite	gt
 801a84a:	2500      	movgt	r5, #0
 801a84c:	2501      	movle	r5, #1
 801a84e:	2b03      	cmp	r3, #3
 801a850:	f200 808c 	bhi.w	801a96c <_dtoa_r+0x2cc>
 801a854:	e8df f003 	tbb	[pc, r3]
 801a858:	6e317c7a 	.word	0x6e317c7a
 801a85c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801a860:	441d      	add	r5, r3
 801a862:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801a866:	2820      	cmp	r0, #32
 801a868:	dd13      	ble.n	801a892 <_dtoa_r+0x1f2>
 801a86a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801a86e:	9b00      	ldr	r3, [sp, #0]
 801a870:	fa08 f800 	lsl.w	r8, r8, r0
 801a874:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801a878:	fa23 f000 	lsr.w	r0, r3, r0
 801a87c:	ea48 0000 	orr.w	r0, r8, r0
 801a880:	f7ec fbda 	bl	8007038 <__aeabi_ui2d>
 801a884:	2301      	movs	r3, #1
 801a886:	4682      	mov	sl, r0
 801a888:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801a88c:	3d01      	subs	r5, #1
 801a88e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a890:	e772      	b.n	801a778 <_dtoa_r+0xd8>
 801a892:	9b00      	ldr	r3, [sp, #0]
 801a894:	f1c0 0020 	rsb	r0, r0, #32
 801a898:	fa03 f000 	lsl.w	r0, r3, r0
 801a89c:	e7f0      	b.n	801a880 <_dtoa_r+0x1e0>
 801a89e:	2301      	movs	r3, #1
 801a8a0:	e7b1      	b.n	801a806 <_dtoa_r+0x166>
 801a8a2:	900f      	str	r0, [sp, #60]	; 0x3c
 801a8a4:	e7b0      	b.n	801a808 <_dtoa_r+0x168>
 801a8a6:	9b05      	ldr	r3, [sp, #20]
 801a8a8:	eba3 030a 	sub.w	r3, r3, sl
 801a8ac:	9305      	str	r3, [sp, #20]
 801a8ae:	f1ca 0300 	rsb	r3, sl, #0
 801a8b2:	9307      	str	r3, [sp, #28]
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	930e      	str	r3, [sp, #56]	; 0x38
 801a8b8:	e7bb      	b.n	801a832 <_dtoa_r+0x192>
 801a8ba:	2301      	movs	r3, #1
 801a8bc:	930a      	str	r3, [sp, #40]	; 0x28
 801a8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	dd56      	ble.n	801a972 <_dtoa_r+0x2d2>
 801a8c4:	9302      	str	r3, [sp, #8]
 801a8c6:	4699      	mov	r9, r3
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	6462      	str	r2, [r4, #68]	; 0x44
 801a8cc:	2204      	movs	r2, #4
 801a8ce:	f102 0014 	add.w	r0, r2, #20
 801a8d2:	4298      	cmp	r0, r3
 801a8d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a8d6:	d951      	bls.n	801a97c <_dtoa_r+0x2dc>
 801a8d8:	4620      	mov	r0, r4
 801a8da:	f000 ff67 	bl	801b7ac <_Balloc>
 801a8de:	f1b9 0f0e 	cmp.w	r9, #14
 801a8e2:	4683      	mov	fp, r0
 801a8e4:	6420      	str	r0, [r4, #64]	; 0x40
 801a8e6:	f200 80e8 	bhi.w	801aaba <_dtoa_r+0x41a>
 801a8ea:	2d00      	cmp	r5, #0
 801a8ec:	f000 80e5 	beq.w	801aaba <_dtoa_r+0x41a>
 801a8f0:	ed9d 7b00 	vldr	d7, [sp]
 801a8f4:	f1ba 0f00 	cmp.w	sl, #0
 801a8f8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801a8fc:	dd76      	ble.n	801a9ec <_dtoa_r+0x34c>
 801a8fe:	4a2b      	ldr	r2, [pc, #172]	; (801a9ac <_dtoa_r+0x30c>)
 801a900:	f00a 030f 	and.w	r3, sl, #15
 801a904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a908:	ed93 7b00 	vldr	d7, [r3]
 801a90c:	ea4f 162a 	mov.w	r6, sl, asr #4
 801a910:	06f0      	lsls	r0, r6, #27
 801a912:	ed8d 7b08 	vstr	d7, [sp, #32]
 801a916:	d567      	bpl.n	801a9e8 <_dtoa_r+0x348>
 801a918:	4b25      	ldr	r3, [pc, #148]	; (801a9b0 <_dtoa_r+0x310>)
 801a91a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a91e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a922:	f7ec fd2d 	bl	8007380 <__aeabi_ddiv>
 801a926:	e9cd 0100 	strd	r0, r1, [sp]
 801a92a:	f006 060f 	and.w	r6, r6, #15
 801a92e:	2503      	movs	r5, #3
 801a930:	4f1f      	ldr	r7, [pc, #124]	; (801a9b0 <_dtoa_r+0x310>)
 801a932:	e04e      	b.n	801a9d2 <_dtoa_r+0x332>
 801a934:	2301      	movs	r3, #1
 801a936:	930a      	str	r3, [sp, #40]	; 0x28
 801a938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a93a:	4453      	add	r3, sl
 801a93c:	f103 0901 	add.w	r9, r3, #1
 801a940:	9302      	str	r3, [sp, #8]
 801a942:	464b      	mov	r3, r9
 801a944:	2b01      	cmp	r3, #1
 801a946:	bfb8      	it	lt
 801a948:	2301      	movlt	r3, #1
 801a94a:	e7bd      	b.n	801a8c8 <_dtoa_r+0x228>
 801a94c:	2300      	movs	r3, #0
 801a94e:	e7b5      	b.n	801a8bc <_dtoa_r+0x21c>
 801a950:	2300      	movs	r3, #0
 801a952:	e7f0      	b.n	801a936 <_dtoa_r+0x296>
 801a954:	2501      	movs	r5, #1
 801a956:	2300      	movs	r3, #0
 801a958:	9306      	str	r3, [sp, #24]
 801a95a:	950a      	str	r5, [sp, #40]	; 0x28
 801a95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a960:	9302      	str	r3, [sp, #8]
 801a962:	4699      	mov	r9, r3
 801a964:	2200      	movs	r2, #0
 801a966:	2312      	movs	r3, #18
 801a968:	920b      	str	r2, [sp, #44]	; 0x2c
 801a96a:	e7ad      	b.n	801a8c8 <_dtoa_r+0x228>
 801a96c:	2301      	movs	r3, #1
 801a96e:	930a      	str	r3, [sp, #40]	; 0x28
 801a970:	e7f4      	b.n	801a95c <_dtoa_r+0x2bc>
 801a972:	2301      	movs	r3, #1
 801a974:	9302      	str	r3, [sp, #8]
 801a976:	4699      	mov	r9, r3
 801a978:	461a      	mov	r2, r3
 801a97a:	e7f5      	b.n	801a968 <_dtoa_r+0x2c8>
 801a97c:	3101      	adds	r1, #1
 801a97e:	6461      	str	r1, [r4, #68]	; 0x44
 801a980:	0052      	lsls	r2, r2, #1
 801a982:	e7a4      	b.n	801a8ce <_dtoa_r+0x22e>
 801a984:	f3af 8000 	nop.w
 801a988:	636f4361 	.word	0x636f4361
 801a98c:	3fd287a7 	.word	0x3fd287a7
 801a990:	8b60c8b3 	.word	0x8b60c8b3
 801a994:	3fc68a28 	.word	0x3fc68a28
 801a998:	509f79fb 	.word	0x509f79fb
 801a99c:	3fd34413 	.word	0x3fd34413
 801a9a0:	7ff00000 	.word	0x7ff00000
 801a9a4:	0809484f 	.word	0x0809484f
 801a9a8:	3ff80000 	.word	0x3ff80000
 801a9ac:	080948a8 	.word	0x080948a8
 801a9b0:	08094880 	.word	0x08094880
 801a9b4:	08094879 	.word	0x08094879
 801a9b8:	07f1      	lsls	r1, r6, #31
 801a9ba:	d508      	bpl.n	801a9ce <_dtoa_r+0x32e>
 801a9bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a9c4:	f7ec fbb2 	bl	800712c <__aeabi_dmul>
 801a9c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a9cc:	3501      	adds	r5, #1
 801a9ce:	1076      	asrs	r6, r6, #1
 801a9d0:	3708      	adds	r7, #8
 801a9d2:	2e00      	cmp	r6, #0
 801a9d4:	d1f0      	bne.n	801a9b8 <_dtoa_r+0x318>
 801a9d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a9da:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a9de:	f7ec fccf 	bl	8007380 <__aeabi_ddiv>
 801a9e2:	e9cd 0100 	strd	r0, r1, [sp]
 801a9e6:	e01a      	b.n	801aa1e <_dtoa_r+0x37e>
 801a9e8:	2502      	movs	r5, #2
 801a9ea:	e7a1      	b.n	801a930 <_dtoa_r+0x290>
 801a9ec:	f000 80a0 	beq.w	801ab30 <_dtoa_r+0x490>
 801a9f0:	f1ca 0600 	rsb	r6, sl, #0
 801a9f4:	4b9f      	ldr	r3, [pc, #636]	; (801ac74 <_dtoa_r+0x5d4>)
 801a9f6:	4fa0      	ldr	r7, [pc, #640]	; (801ac78 <_dtoa_r+0x5d8>)
 801a9f8:	f006 020f 	and.w	r2, r6, #15
 801a9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801aa08:	f7ec fb90 	bl	800712c <__aeabi_dmul>
 801aa0c:	e9cd 0100 	strd	r0, r1, [sp]
 801aa10:	1136      	asrs	r6, r6, #4
 801aa12:	2300      	movs	r3, #0
 801aa14:	2502      	movs	r5, #2
 801aa16:	2e00      	cmp	r6, #0
 801aa18:	d17f      	bne.n	801ab1a <_dtoa_r+0x47a>
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d1e1      	bne.n	801a9e2 <_dtoa_r+0x342>
 801aa1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	f000 8087 	beq.w	801ab34 <_dtoa_r+0x494>
 801aa26:	e9dd 6700 	ldrd	r6, r7, [sp]
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	4b93      	ldr	r3, [pc, #588]	; (801ac7c <_dtoa_r+0x5dc>)
 801aa2e:	4630      	mov	r0, r6
 801aa30:	4639      	mov	r1, r7
 801aa32:	f7ec fded 	bl	8007610 <__aeabi_dcmplt>
 801aa36:	2800      	cmp	r0, #0
 801aa38:	d07c      	beq.n	801ab34 <_dtoa_r+0x494>
 801aa3a:	f1b9 0f00 	cmp.w	r9, #0
 801aa3e:	d079      	beq.n	801ab34 <_dtoa_r+0x494>
 801aa40:	9b02      	ldr	r3, [sp, #8]
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	dd35      	ble.n	801aab2 <_dtoa_r+0x412>
 801aa46:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801aa4a:	9308      	str	r3, [sp, #32]
 801aa4c:	4639      	mov	r1, r7
 801aa4e:	2200      	movs	r2, #0
 801aa50:	4b8b      	ldr	r3, [pc, #556]	; (801ac80 <_dtoa_r+0x5e0>)
 801aa52:	4630      	mov	r0, r6
 801aa54:	f7ec fb6a 	bl	800712c <__aeabi_dmul>
 801aa58:	e9cd 0100 	strd	r0, r1, [sp]
 801aa5c:	9f02      	ldr	r7, [sp, #8]
 801aa5e:	3501      	adds	r5, #1
 801aa60:	4628      	mov	r0, r5
 801aa62:	f7ec faf9 	bl	8007058 <__aeabi_i2d>
 801aa66:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa6a:	f7ec fb5f 	bl	800712c <__aeabi_dmul>
 801aa6e:	2200      	movs	r2, #0
 801aa70:	4b84      	ldr	r3, [pc, #528]	; (801ac84 <_dtoa_r+0x5e4>)
 801aa72:	f7ec f9a5 	bl	8006dc0 <__adddf3>
 801aa76:	4605      	mov	r5, r0
 801aa78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801aa7c:	2f00      	cmp	r7, #0
 801aa7e:	d15d      	bne.n	801ab3c <_dtoa_r+0x49c>
 801aa80:	2200      	movs	r2, #0
 801aa82:	4b81      	ldr	r3, [pc, #516]	; (801ac88 <_dtoa_r+0x5e8>)
 801aa84:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aa88:	f7ec f998 	bl	8006dbc <__aeabi_dsub>
 801aa8c:	462a      	mov	r2, r5
 801aa8e:	4633      	mov	r3, r6
 801aa90:	e9cd 0100 	strd	r0, r1, [sp]
 801aa94:	f7ec fdda 	bl	800764c <__aeabi_dcmpgt>
 801aa98:	2800      	cmp	r0, #0
 801aa9a:	f040 8288 	bne.w	801afae <_dtoa_r+0x90e>
 801aa9e:	462a      	mov	r2, r5
 801aaa0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801aaa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aaa8:	f7ec fdb2 	bl	8007610 <__aeabi_dcmplt>
 801aaac:	2800      	cmp	r0, #0
 801aaae:	f040 827c 	bne.w	801afaa <_dtoa_r+0x90a>
 801aab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801aab6:	e9cd 2300 	strd	r2, r3, [sp]
 801aaba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	f2c0 8150 	blt.w	801ad62 <_dtoa_r+0x6c2>
 801aac2:	f1ba 0f0e 	cmp.w	sl, #14
 801aac6:	f300 814c 	bgt.w	801ad62 <_dtoa_r+0x6c2>
 801aaca:	4b6a      	ldr	r3, [pc, #424]	; (801ac74 <_dtoa_r+0x5d4>)
 801aacc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801aad0:	ed93 7b00 	vldr	d7, [r3]
 801aad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aadc:	f280 80d8 	bge.w	801ac90 <_dtoa_r+0x5f0>
 801aae0:	f1b9 0f00 	cmp.w	r9, #0
 801aae4:	f300 80d4 	bgt.w	801ac90 <_dtoa_r+0x5f0>
 801aae8:	f040 825e 	bne.w	801afa8 <_dtoa_r+0x908>
 801aaec:	2200      	movs	r2, #0
 801aaee:	4b66      	ldr	r3, [pc, #408]	; (801ac88 <_dtoa_r+0x5e8>)
 801aaf0:	ec51 0b17 	vmov	r0, r1, d7
 801aaf4:	f7ec fb1a 	bl	800712c <__aeabi_dmul>
 801aaf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aafc:	f7ec fd9c 	bl	8007638 <__aeabi_dcmpge>
 801ab00:	464f      	mov	r7, r9
 801ab02:	464e      	mov	r6, r9
 801ab04:	2800      	cmp	r0, #0
 801ab06:	f040 8234 	bne.w	801af72 <_dtoa_r+0x8d2>
 801ab0a:	2331      	movs	r3, #49	; 0x31
 801ab0c:	f10b 0501 	add.w	r5, fp, #1
 801ab10:	f88b 3000 	strb.w	r3, [fp]
 801ab14:	f10a 0a01 	add.w	sl, sl, #1
 801ab18:	e22f      	b.n	801af7a <_dtoa_r+0x8da>
 801ab1a:	07f2      	lsls	r2, r6, #31
 801ab1c:	d505      	bpl.n	801ab2a <_dtoa_r+0x48a>
 801ab1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ab22:	f7ec fb03 	bl	800712c <__aeabi_dmul>
 801ab26:	3501      	adds	r5, #1
 801ab28:	2301      	movs	r3, #1
 801ab2a:	1076      	asrs	r6, r6, #1
 801ab2c:	3708      	adds	r7, #8
 801ab2e:	e772      	b.n	801aa16 <_dtoa_r+0x376>
 801ab30:	2502      	movs	r5, #2
 801ab32:	e774      	b.n	801aa1e <_dtoa_r+0x37e>
 801ab34:	f8cd a020 	str.w	sl, [sp, #32]
 801ab38:	464f      	mov	r7, r9
 801ab3a:	e791      	b.n	801aa60 <_dtoa_r+0x3c0>
 801ab3c:	4b4d      	ldr	r3, [pc, #308]	; (801ac74 <_dtoa_r+0x5d4>)
 801ab3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ab42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801ab46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d047      	beq.n	801abdc <_dtoa_r+0x53c>
 801ab4c:	4602      	mov	r2, r0
 801ab4e:	460b      	mov	r3, r1
 801ab50:	2000      	movs	r0, #0
 801ab52:	494e      	ldr	r1, [pc, #312]	; (801ac8c <_dtoa_r+0x5ec>)
 801ab54:	f7ec fc14 	bl	8007380 <__aeabi_ddiv>
 801ab58:	462a      	mov	r2, r5
 801ab5a:	4633      	mov	r3, r6
 801ab5c:	f7ec f92e 	bl	8006dbc <__aeabi_dsub>
 801ab60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ab64:	465d      	mov	r5, fp
 801ab66:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ab6a:	f7ec fd8f 	bl	800768c <__aeabi_d2iz>
 801ab6e:	4606      	mov	r6, r0
 801ab70:	f7ec fa72 	bl	8007058 <__aeabi_i2d>
 801ab74:	4602      	mov	r2, r0
 801ab76:	460b      	mov	r3, r1
 801ab78:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ab7c:	f7ec f91e 	bl	8006dbc <__aeabi_dsub>
 801ab80:	3630      	adds	r6, #48	; 0x30
 801ab82:	f805 6b01 	strb.w	r6, [r5], #1
 801ab86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ab8a:	e9cd 0100 	strd	r0, r1, [sp]
 801ab8e:	f7ec fd3f 	bl	8007610 <__aeabi_dcmplt>
 801ab92:	2800      	cmp	r0, #0
 801ab94:	d163      	bne.n	801ac5e <_dtoa_r+0x5be>
 801ab96:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ab9a:	2000      	movs	r0, #0
 801ab9c:	4937      	ldr	r1, [pc, #220]	; (801ac7c <_dtoa_r+0x5dc>)
 801ab9e:	f7ec f90d 	bl	8006dbc <__aeabi_dsub>
 801aba2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801aba6:	f7ec fd33 	bl	8007610 <__aeabi_dcmplt>
 801abaa:	2800      	cmp	r0, #0
 801abac:	f040 80b7 	bne.w	801ad1e <_dtoa_r+0x67e>
 801abb0:	eba5 030b 	sub.w	r3, r5, fp
 801abb4:	429f      	cmp	r7, r3
 801abb6:	f77f af7c 	ble.w	801aab2 <_dtoa_r+0x412>
 801abba:	2200      	movs	r2, #0
 801abbc:	4b30      	ldr	r3, [pc, #192]	; (801ac80 <_dtoa_r+0x5e0>)
 801abbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801abc2:	f7ec fab3 	bl	800712c <__aeabi_dmul>
 801abc6:	2200      	movs	r2, #0
 801abc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801abcc:	4b2c      	ldr	r3, [pc, #176]	; (801ac80 <_dtoa_r+0x5e0>)
 801abce:	e9dd 0100 	ldrd	r0, r1, [sp]
 801abd2:	f7ec faab 	bl	800712c <__aeabi_dmul>
 801abd6:	e9cd 0100 	strd	r0, r1, [sp]
 801abda:	e7c4      	b.n	801ab66 <_dtoa_r+0x4c6>
 801abdc:	462a      	mov	r2, r5
 801abde:	4633      	mov	r3, r6
 801abe0:	f7ec faa4 	bl	800712c <__aeabi_dmul>
 801abe4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801abe8:	eb0b 0507 	add.w	r5, fp, r7
 801abec:	465e      	mov	r6, fp
 801abee:	e9dd 0100 	ldrd	r0, r1, [sp]
 801abf2:	f7ec fd4b 	bl	800768c <__aeabi_d2iz>
 801abf6:	4607      	mov	r7, r0
 801abf8:	f7ec fa2e 	bl	8007058 <__aeabi_i2d>
 801abfc:	3730      	adds	r7, #48	; 0x30
 801abfe:	4602      	mov	r2, r0
 801ac00:	460b      	mov	r3, r1
 801ac02:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac06:	f7ec f8d9 	bl	8006dbc <__aeabi_dsub>
 801ac0a:	f806 7b01 	strb.w	r7, [r6], #1
 801ac0e:	42ae      	cmp	r6, r5
 801ac10:	e9cd 0100 	strd	r0, r1, [sp]
 801ac14:	f04f 0200 	mov.w	r2, #0
 801ac18:	d126      	bne.n	801ac68 <_dtoa_r+0x5c8>
 801ac1a:	4b1c      	ldr	r3, [pc, #112]	; (801ac8c <_dtoa_r+0x5ec>)
 801ac1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ac20:	f7ec f8ce 	bl	8006dc0 <__adddf3>
 801ac24:	4602      	mov	r2, r0
 801ac26:	460b      	mov	r3, r1
 801ac28:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac2c:	f7ec fd0e 	bl	800764c <__aeabi_dcmpgt>
 801ac30:	2800      	cmp	r0, #0
 801ac32:	d174      	bne.n	801ad1e <_dtoa_r+0x67e>
 801ac34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ac38:	2000      	movs	r0, #0
 801ac3a:	4914      	ldr	r1, [pc, #80]	; (801ac8c <_dtoa_r+0x5ec>)
 801ac3c:	f7ec f8be 	bl	8006dbc <__aeabi_dsub>
 801ac40:	4602      	mov	r2, r0
 801ac42:	460b      	mov	r3, r1
 801ac44:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac48:	f7ec fce2 	bl	8007610 <__aeabi_dcmplt>
 801ac4c:	2800      	cmp	r0, #0
 801ac4e:	f43f af30 	beq.w	801aab2 <_dtoa_r+0x412>
 801ac52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ac56:	2b30      	cmp	r3, #48	; 0x30
 801ac58:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801ac5c:	d002      	beq.n	801ac64 <_dtoa_r+0x5c4>
 801ac5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ac62:	e04a      	b.n	801acfa <_dtoa_r+0x65a>
 801ac64:	4615      	mov	r5, r2
 801ac66:	e7f4      	b.n	801ac52 <_dtoa_r+0x5b2>
 801ac68:	4b05      	ldr	r3, [pc, #20]	; (801ac80 <_dtoa_r+0x5e0>)
 801ac6a:	f7ec fa5f 	bl	800712c <__aeabi_dmul>
 801ac6e:	e9cd 0100 	strd	r0, r1, [sp]
 801ac72:	e7bc      	b.n	801abee <_dtoa_r+0x54e>
 801ac74:	080948a8 	.word	0x080948a8
 801ac78:	08094880 	.word	0x08094880
 801ac7c:	3ff00000 	.word	0x3ff00000
 801ac80:	40240000 	.word	0x40240000
 801ac84:	401c0000 	.word	0x401c0000
 801ac88:	40140000 	.word	0x40140000
 801ac8c:	3fe00000 	.word	0x3fe00000
 801ac90:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ac94:	465d      	mov	r5, fp
 801ac96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ac9a:	4630      	mov	r0, r6
 801ac9c:	4639      	mov	r1, r7
 801ac9e:	f7ec fb6f 	bl	8007380 <__aeabi_ddiv>
 801aca2:	f7ec fcf3 	bl	800768c <__aeabi_d2iz>
 801aca6:	4680      	mov	r8, r0
 801aca8:	f7ec f9d6 	bl	8007058 <__aeabi_i2d>
 801acac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801acb0:	f7ec fa3c 	bl	800712c <__aeabi_dmul>
 801acb4:	4602      	mov	r2, r0
 801acb6:	460b      	mov	r3, r1
 801acb8:	4630      	mov	r0, r6
 801acba:	4639      	mov	r1, r7
 801acbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801acc0:	f7ec f87c 	bl	8006dbc <__aeabi_dsub>
 801acc4:	f805 6b01 	strb.w	r6, [r5], #1
 801acc8:	eba5 060b 	sub.w	r6, r5, fp
 801accc:	45b1      	cmp	r9, r6
 801acce:	4602      	mov	r2, r0
 801acd0:	460b      	mov	r3, r1
 801acd2:	d139      	bne.n	801ad48 <_dtoa_r+0x6a8>
 801acd4:	f7ec f874 	bl	8006dc0 <__adddf3>
 801acd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801acdc:	4606      	mov	r6, r0
 801acde:	460f      	mov	r7, r1
 801ace0:	f7ec fcb4 	bl	800764c <__aeabi_dcmpgt>
 801ace4:	b9c8      	cbnz	r0, 801ad1a <_dtoa_r+0x67a>
 801ace6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801acea:	4630      	mov	r0, r6
 801acec:	4639      	mov	r1, r7
 801acee:	f7ec fc85 	bl	80075fc <__aeabi_dcmpeq>
 801acf2:	b110      	cbz	r0, 801acfa <_dtoa_r+0x65a>
 801acf4:	f018 0f01 	tst.w	r8, #1
 801acf8:	d10f      	bne.n	801ad1a <_dtoa_r+0x67a>
 801acfa:	9904      	ldr	r1, [sp, #16]
 801acfc:	4620      	mov	r0, r4
 801acfe:	f000 fd7a 	bl	801b7f6 <_Bfree>
 801ad02:	2300      	movs	r3, #0
 801ad04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad06:	702b      	strb	r3, [r5, #0]
 801ad08:	f10a 0301 	add.w	r3, sl, #1
 801ad0c:	6013      	str	r3, [r2, #0]
 801ad0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	f43f acff 	beq.w	801a714 <_dtoa_r+0x74>
 801ad16:	601d      	str	r5, [r3, #0]
 801ad18:	e4fc      	b.n	801a714 <_dtoa_r+0x74>
 801ad1a:	f8cd a020 	str.w	sl, [sp, #32]
 801ad1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ad22:	2a39      	cmp	r2, #57	; 0x39
 801ad24:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 801ad28:	d108      	bne.n	801ad3c <_dtoa_r+0x69c>
 801ad2a:	459b      	cmp	fp, r3
 801ad2c:	d10a      	bne.n	801ad44 <_dtoa_r+0x6a4>
 801ad2e:	9b08      	ldr	r3, [sp, #32]
 801ad30:	3301      	adds	r3, #1
 801ad32:	9308      	str	r3, [sp, #32]
 801ad34:	2330      	movs	r3, #48	; 0x30
 801ad36:	f88b 3000 	strb.w	r3, [fp]
 801ad3a:	465b      	mov	r3, fp
 801ad3c:	781a      	ldrb	r2, [r3, #0]
 801ad3e:	3201      	adds	r2, #1
 801ad40:	701a      	strb	r2, [r3, #0]
 801ad42:	e78c      	b.n	801ac5e <_dtoa_r+0x5be>
 801ad44:	461d      	mov	r5, r3
 801ad46:	e7ea      	b.n	801ad1e <_dtoa_r+0x67e>
 801ad48:	2200      	movs	r2, #0
 801ad4a:	4b9b      	ldr	r3, [pc, #620]	; (801afb8 <_dtoa_r+0x918>)
 801ad4c:	f7ec f9ee 	bl	800712c <__aeabi_dmul>
 801ad50:	2200      	movs	r2, #0
 801ad52:	2300      	movs	r3, #0
 801ad54:	4606      	mov	r6, r0
 801ad56:	460f      	mov	r7, r1
 801ad58:	f7ec fc50 	bl	80075fc <__aeabi_dcmpeq>
 801ad5c:	2800      	cmp	r0, #0
 801ad5e:	d09a      	beq.n	801ac96 <_dtoa_r+0x5f6>
 801ad60:	e7cb      	b.n	801acfa <_dtoa_r+0x65a>
 801ad62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad64:	2a00      	cmp	r2, #0
 801ad66:	f000 808b 	beq.w	801ae80 <_dtoa_r+0x7e0>
 801ad6a:	9a06      	ldr	r2, [sp, #24]
 801ad6c:	2a01      	cmp	r2, #1
 801ad6e:	dc6e      	bgt.n	801ae4e <_dtoa_r+0x7ae>
 801ad70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ad72:	2a00      	cmp	r2, #0
 801ad74:	d067      	beq.n	801ae46 <_dtoa_r+0x7a6>
 801ad76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ad7a:	9f07      	ldr	r7, [sp, #28]
 801ad7c:	9d05      	ldr	r5, [sp, #20]
 801ad7e:	9a05      	ldr	r2, [sp, #20]
 801ad80:	2101      	movs	r1, #1
 801ad82:	441a      	add	r2, r3
 801ad84:	4620      	mov	r0, r4
 801ad86:	9205      	str	r2, [sp, #20]
 801ad88:	4498      	add	r8, r3
 801ad8a:	f000 fdc6 	bl	801b91a <__i2b>
 801ad8e:	4606      	mov	r6, r0
 801ad90:	2d00      	cmp	r5, #0
 801ad92:	dd0c      	ble.n	801adae <_dtoa_r+0x70e>
 801ad94:	f1b8 0f00 	cmp.w	r8, #0
 801ad98:	dd09      	ble.n	801adae <_dtoa_r+0x70e>
 801ad9a:	4545      	cmp	r5, r8
 801ad9c:	9a05      	ldr	r2, [sp, #20]
 801ad9e:	462b      	mov	r3, r5
 801ada0:	bfa8      	it	ge
 801ada2:	4643      	movge	r3, r8
 801ada4:	1ad2      	subs	r2, r2, r3
 801ada6:	9205      	str	r2, [sp, #20]
 801ada8:	1aed      	subs	r5, r5, r3
 801adaa:	eba8 0803 	sub.w	r8, r8, r3
 801adae:	9b07      	ldr	r3, [sp, #28]
 801adb0:	b1eb      	cbz	r3, 801adee <_dtoa_r+0x74e>
 801adb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d067      	beq.n	801ae88 <_dtoa_r+0x7e8>
 801adb8:	b18f      	cbz	r7, 801adde <_dtoa_r+0x73e>
 801adba:	4631      	mov	r1, r6
 801adbc:	463a      	mov	r2, r7
 801adbe:	4620      	mov	r0, r4
 801adc0:	f000 fe4a 	bl	801ba58 <__pow5mult>
 801adc4:	9a04      	ldr	r2, [sp, #16]
 801adc6:	4601      	mov	r1, r0
 801adc8:	4606      	mov	r6, r0
 801adca:	4620      	mov	r0, r4
 801adcc:	f000 fdae 	bl	801b92c <__multiply>
 801add0:	9904      	ldr	r1, [sp, #16]
 801add2:	9008      	str	r0, [sp, #32]
 801add4:	4620      	mov	r0, r4
 801add6:	f000 fd0e 	bl	801b7f6 <_Bfree>
 801adda:	9b08      	ldr	r3, [sp, #32]
 801addc:	9304      	str	r3, [sp, #16]
 801adde:	9b07      	ldr	r3, [sp, #28]
 801ade0:	1bda      	subs	r2, r3, r7
 801ade2:	d004      	beq.n	801adee <_dtoa_r+0x74e>
 801ade4:	9904      	ldr	r1, [sp, #16]
 801ade6:	4620      	mov	r0, r4
 801ade8:	f000 fe36 	bl	801ba58 <__pow5mult>
 801adec:	9004      	str	r0, [sp, #16]
 801adee:	2101      	movs	r1, #1
 801adf0:	4620      	mov	r0, r4
 801adf2:	f000 fd92 	bl	801b91a <__i2b>
 801adf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adf8:	4607      	mov	r7, r0
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	f000 81cf 	beq.w	801b19e <_dtoa_r+0xafe>
 801ae00:	461a      	mov	r2, r3
 801ae02:	4601      	mov	r1, r0
 801ae04:	4620      	mov	r0, r4
 801ae06:	f000 fe27 	bl	801ba58 <__pow5mult>
 801ae0a:	9b06      	ldr	r3, [sp, #24]
 801ae0c:	2b01      	cmp	r3, #1
 801ae0e:	4607      	mov	r7, r0
 801ae10:	dc40      	bgt.n	801ae94 <_dtoa_r+0x7f4>
 801ae12:	9b00      	ldr	r3, [sp, #0]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d139      	bne.n	801ae8c <_dtoa_r+0x7ec>
 801ae18:	9b01      	ldr	r3, [sp, #4]
 801ae1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d136      	bne.n	801ae90 <_dtoa_r+0x7f0>
 801ae22:	9b01      	ldr	r3, [sp, #4]
 801ae24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ae28:	0d1b      	lsrs	r3, r3, #20
 801ae2a:	051b      	lsls	r3, r3, #20
 801ae2c:	b12b      	cbz	r3, 801ae3a <_dtoa_r+0x79a>
 801ae2e:	9b05      	ldr	r3, [sp, #20]
 801ae30:	3301      	adds	r3, #1
 801ae32:	9305      	str	r3, [sp, #20]
 801ae34:	f108 0801 	add.w	r8, r8, #1
 801ae38:	2301      	movs	r3, #1
 801ae3a:	9307      	str	r3, [sp, #28]
 801ae3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d12a      	bne.n	801ae98 <_dtoa_r+0x7f8>
 801ae42:	2001      	movs	r0, #1
 801ae44:	e030      	b.n	801aea8 <_dtoa_r+0x808>
 801ae46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ae48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ae4c:	e795      	b.n	801ad7a <_dtoa_r+0x6da>
 801ae4e:	9b07      	ldr	r3, [sp, #28]
 801ae50:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 801ae54:	42bb      	cmp	r3, r7
 801ae56:	bfbf      	itttt	lt
 801ae58:	9b07      	ldrlt	r3, [sp, #28]
 801ae5a:	9707      	strlt	r7, [sp, #28]
 801ae5c:	1afa      	sublt	r2, r7, r3
 801ae5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801ae60:	bfbb      	ittet	lt
 801ae62:	189b      	addlt	r3, r3, r2
 801ae64:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ae66:	1bdf      	subge	r7, r3, r7
 801ae68:	2700      	movlt	r7, #0
 801ae6a:	f1b9 0f00 	cmp.w	r9, #0
 801ae6e:	bfb5      	itete	lt
 801ae70:	9b05      	ldrlt	r3, [sp, #20]
 801ae72:	9d05      	ldrge	r5, [sp, #20]
 801ae74:	eba3 0509 	sublt.w	r5, r3, r9
 801ae78:	464b      	movge	r3, r9
 801ae7a:	bfb8      	it	lt
 801ae7c:	2300      	movlt	r3, #0
 801ae7e:	e77e      	b.n	801ad7e <_dtoa_r+0x6de>
 801ae80:	9f07      	ldr	r7, [sp, #28]
 801ae82:	9d05      	ldr	r5, [sp, #20]
 801ae84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ae86:	e783      	b.n	801ad90 <_dtoa_r+0x6f0>
 801ae88:	9a07      	ldr	r2, [sp, #28]
 801ae8a:	e7ab      	b.n	801ade4 <_dtoa_r+0x744>
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	e7d4      	b.n	801ae3a <_dtoa_r+0x79a>
 801ae90:	9b00      	ldr	r3, [sp, #0]
 801ae92:	e7d2      	b.n	801ae3a <_dtoa_r+0x79a>
 801ae94:	2300      	movs	r3, #0
 801ae96:	9307      	str	r3, [sp, #28]
 801ae98:	693b      	ldr	r3, [r7, #16]
 801ae9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801ae9e:	6918      	ldr	r0, [r3, #16]
 801aea0:	f000 fced 	bl	801b87e <__hi0bits>
 801aea4:	f1c0 0020 	rsb	r0, r0, #32
 801aea8:	4440      	add	r0, r8
 801aeaa:	f010 001f 	ands.w	r0, r0, #31
 801aeae:	d047      	beq.n	801af40 <_dtoa_r+0x8a0>
 801aeb0:	f1c0 0320 	rsb	r3, r0, #32
 801aeb4:	2b04      	cmp	r3, #4
 801aeb6:	dd3b      	ble.n	801af30 <_dtoa_r+0x890>
 801aeb8:	9b05      	ldr	r3, [sp, #20]
 801aeba:	f1c0 001c 	rsb	r0, r0, #28
 801aebe:	4403      	add	r3, r0
 801aec0:	9305      	str	r3, [sp, #20]
 801aec2:	4405      	add	r5, r0
 801aec4:	4480      	add	r8, r0
 801aec6:	9b05      	ldr	r3, [sp, #20]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	dd05      	ble.n	801aed8 <_dtoa_r+0x838>
 801aecc:	461a      	mov	r2, r3
 801aece:	9904      	ldr	r1, [sp, #16]
 801aed0:	4620      	mov	r0, r4
 801aed2:	f000 fe01 	bl	801bad8 <__lshift>
 801aed6:	9004      	str	r0, [sp, #16]
 801aed8:	f1b8 0f00 	cmp.w	r8, #0
 801aedc:	dd05      	ble.n	801aeea <_dtoa_r+0x84a>
 801aede:	4639      	mov	r1, r7
 801aee0:	4642      	mov	r2, r8
 801aee2:	4620      	mov	r0, r4
 801aee4:	f000 fdf8 	bl	801bad8 <__lshift>
 801aee8:	4607      	mov	r7, r0
 801aeea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aeec:	b353      	cbz	r3, 801af44 <_dtoa_r+0x8a4>
 801aeee:	4639      	mov	r1, r7
 801aef0:	9804      	ldr	r0, [sp, #16]
 801aef2:	f000 fe45 	bl	801bb80 <__mcmp>
 801aef6:	2800      	cmp	r0, #0
 801aef8:	da24      	bge.n	801af44 <_dtoa_r+0x8a4>
 801aefa:	2300      	movs	r3, #0
 801aefc:	220a      	movs	r2, #10
 801aefe:	9904      	ldr	r1, [sp, #16]
 801af00:	4620      	mov	r0, r4
 801af02:	f000 fc81 	bl	801b808 <__multadd>
 801af06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af08:	9004      	str	r0, [sp, #16]
 801af0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801af0e:	2b00      	cmp	r3, #0
 801af10:	f000 814c 	beq.w	801b1ac <_dtoa_r+0xb0c>
 801af14:	2300      	movs	r3, #0
 801af16:	4631      	mov	r1, r6
 801af18:	220a      	movs	r2, #10
 801af1a:	4620      	mov	r0, r4
 801af1c:	f000 fc74 	bl	801b808 <__multadd>
 801af20:	9b02      	ldr	r3, [sp, #8]
 801af22:	2b00      	cmp	r3, #0
 801af24:	4606      	mov	r6, r0
 801af26:	dc4f      	bgt.n	801afc8 <_dtoa_r+0x928>
 801af28:	9b06      	ldr	r3, [sp, #24]
 801af2a:	2b02      	cmp	r3, #2
 801af2c:	dd4c      	ble.n	801afc8 <_dtoa_r+0x928>
 801af2e:	e011      	b.n	801af54 <_dtoa_r+0x8b4>
 801af30:	d0c9      	beq.n	801aec6 <_dtoa_r+0x826>
 801af32:	9a05      	ldr	r2, [sp, #20]
 801af34:	331c      	adds	r3, #28
 801af36:	441a      	add	r2, r3
 801af38:	9205      	str	r2, [sp, #20]
 801af3a:	441d      	add	r5, r3
 801af3c:	4498      	add	r8, r3
 801af3e:	e7c2      	b.n	801aec6 <_dtoa_r+0x826>
 801af40:	4603      	mov	r3, r0
 801af42:	e7f6      	b.n	801af32 <_dtoa_r+0x892>
 801af44:	f1b9 0f00 	cmp.w	r9, #0
 801af48:	dc38      	bgt.n	801afbc <_dtoa_r+0x91c>
 801af4a:	9b06      	ldr	r3, [sp, #24]
 801af4c:	2b02      	cmp	r3, #2
 801af4e:	dd35      	ble.n	801afbc <_dtoa_r+0x91c>
 801af50:	f8cd 9008 	str.w	r9, [sp, #8]
 801af54:	9b02      	ldr	r3, [sp, #8]
 801af56:	b963      	cbnz	r3, 801af72 <_dtoa_r+0x8d2>
 801af58:	4639      	mov	r1, r7
 801af5a:	2205      	movs	r2, #5
 801af5c:	4620      	mov	r0, r4
 801af5e:	f000 fc53 	bl	801b808 <__multadd>
 801af62:	4601      	mov	r1, r0
 801af64:	4607      	mov	r7, r0
 801af66:	9804      	ldr	r0, [sp, #16]
 801af68:	f000 fe0a 	bl	801bb80 <__mcmp>
 801af6c:	2800      	cmp	r0, #0
 801af6e:	f73f adcc 	bgt.w	801ab0a <_dtoa_r+0x46a>
 801af72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af74:	465d      	mov	r5, fp
 801af76:	ea6f 0a03 	mvn.w	sl, r3
 801af7a:	f04f 0900 	mov.w	r9, #0
 801af7e:	4639      	mov	r1, r7
 801af80:	4620      	mov	r0, r4
 801af82:	f000 fc38 	bl	801b7f6 <_Bfree>
 801af86:	2e00      	cmp	r6, #0
 801af88:	f43f aeb7 	beq.w	801acfa <_dtoa_r+0x65a>
 801af8c:	f1b9 0f00 	cmp.w	r9, #0
 801af90:	d005      	beq.n	801af9e <_dtoa_r+0x8fe>
 801af92:	45b1      	cmp	r9, r6
 801af94:	d003      	beq.n	801af9e <_dtoa_r+0x8fe>
 801af96:	4649      	mov	r1, r9
 801af98:	4620      	mov	r0, r4
 801af9a:	f000 fc2c 	bl	801b7f6 <_Bfree>
 801af9e:	4631      	mov	r1, r6
 801afa0:	4620      	mov	r0, r4
 801afa2:	f000 fc28 	bl	801b7f6 <_Bfree>
 801afa6:	e6a8      	b.n	801acfa <_dtoa_r+0x65a>
 801afa8:	2700      	movs	r7, #0
 801afaa:	463e      	mov	r6, r7
 801afac:	e7e1      	b.n	801af72 <_dtoa_r+0x8d2>
 801afae:	f8dd a020 	ldr.w	sl, [sp, #32]
 801afb2:	463e      	mov	r6, r7
 801afb4:	e5a9      	b.n	801ab0a <_dtoa_r+0x46a>
 801afb6:	bf00      	nop
 801afb8:	40240000 	.word	0x40240000
 801afbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afbe:	f8cd 9008 	str.w	r9, [sp, #8]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	f000 80f9 	beq.w	801b1ba <_dtoa_r+0xb1a>
 801afc8:	2d00      	cmp	r5, #0
 801afca:	dd05      	ble.n	801afd8 <_dtoa_r+0x938>
 801afcc:	4631      	mov	r1, r6
 801afce:	462a      	mov	r2, r5
 801afd0:	4620      	mov	r0, r4
 801afd2:	f000 fd81 	bl	801bad8 <__lshift>
 801afd6:	4606      	mov	r6, r0
 801afd8:	9b07      	ldr	r3, [sp, #28]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d04c      	beq.n	801b078 <_dtoa_r+0x9d8>
 801afde:	6871      	ldr	r1, [r6, #4]
 801afe0:	4620      	mov	r0, r4
 801afe2:	f000 fbe3 	bl	801b7ac <_Balloc>
 801afe6:	6932      	ldr	r2, [r6, #16]
 801afe8:	3202      	adds	r2, #2
 801afea:	4605      	mov	r5, r0
 801afec:	0092      	lsls	r2, r2, #2
 801afee:	f106 010c 	add.w	r1, r6, #12
 801aff2:	300c      	adds	r0, #12
 801aff4:	f7fd fd33 	bl	8018a5e <memcpy>
 801aff8:	2201      	movs	r2, #1
 801affa:	4629      	mov	r1, r5
 801affc:	4620      	mov	r0, r4
 801affe:	f000 fd6b 	bl	801bad8 <__lshift>
 801b002:	9b00      	ldr	r3, [sp, #0]
 801b004:	f8cd b014 	str.w	fp, [sp, #20]
 801b008:	f003 0301 	and.w	r3, r3, #1
 801b00c:	46b1      	mov	r9, r6
 801b00e:	9307      	str	r3, [sp, #28]
 801b010:	4606      	mov	r6, r0
 801b012:	4639      	mov	r1, r7
 801b014:	9804      	ldr	r0, [sp, #16]
 801b016:	f7ff fab5 	bl	801a584 <quorem>
 801b01a:	4649      	mov	r1, r9
 801b01c:	4605      	mov	r5, r0
 801b01e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b022:	9804      	ldr	r0, [sp, #16]
 801b024:	f000 fdac 	bl	801bb80 <__mcmp>
 801b028:	4632      	mov	r2, r6
 801b02a:	9000      	str	r0, [sp, #0]
 801b02c:	4639      	mov	r1, r7
 801b02e:	4620      	mov	r0, r4
 801b030:	f000 fdc0 	bl	801bbb4 <__mdiff>
 801b034:	68c3      	ldr	r3, [r0, #12]
 801b036:	4602      	mov	r2, r0
 801b038:	bb03      	cbnz	r3, 801b07c <_dtoa_r+0x9dc>
 801b03a:	4601      	mov	r1, r0
 801b03c:	9008      	str	r0, [sp, #32]
 801b03e:	9804      	ldr	r0, [sp, #16]
 801b040:	f000 fd9e 	bl	801bb80 <__mcmp>
 801b044:	9a08      	ldr	r2, [sp, #32]
 801b046:	4603      	mov	r3, r0
 801b048:	4611      	mov	r1, r2
 801b04a:	4620      	mov	r0, r4
 801b04c:	9308      	str	r3, [sp, #32]
 801b04e:	f000 fbd2 	bl	801b7f6 <_Bfree>
 801b052:	9b08      	ldr	r3, [sp, #32]
 801b054:	b9a3      	cbnz	r3, 801b080 <_dtoa_r+0x9e0>
 801b056:	9a06      	ldr	r2, [sp, #24]
 801b058:	b992      	cbnz	r2, 801b080 <_dtoa_r+0x9e0>
 801b05a:	9a07      	ldr	r2, [sp, #28]
 801b05c:	b982      	cbnz	r2, 801b080 <_dtoa_r+0x9e0>
 801b05e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b062:	d029      	beq.n	801b0b8 <_dtoa_r+0xa18>
 801b064:	9b00      	ldr	r3, [sp, #0]
 801b066:	2b00      	cmp	r3, #0
 801b068:	dd01      	ble.n	801b06e <_dtoa_r+0x9ce>
 801b06a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801b06e:	9b05      	ldr	r3, [sp, #20]
 801b070:	1c5d      	adds	r5, r3, #1
 801b072:	f883 8000 	strb.w	r8, [r3]
 801b076:	e782      	b.n	801af7e <_dtoa_r+0x8de>
 801b078:	4630      	mov	r0, r6
 801b07a:	e7c2      	b.n	801b002 <_dtoa_r+0x962>
 801b07c:	2301      	movs	r3, #1
 801b07e:	e7e3      	b.n	801b048 <_dtoa_r+0x9a8>
 801b080:	9a00      	ldr	r2, [sp, #0]
 801b082:	2a00      	cmp	r2, #0
 801b084:	db04      	blt.n	801b090 <_dtoa_r+0x9f0>
 801b086:	d125      	bne.n	801b0d4 <_dtoa_r+0xa34>
 801b088:	9a06      	ldr	r2, [sp, #24]
 801b08a:	bb1a      	cbnz	r2, 801b0d4 <_dtoa_r+0xa34>
 801b08c:	9a07      	ldr	r2, [sp, #28]
 801b08e:	bb0a      	cbnz	r2, 801b0d4 <_dtoa_r+0xa34>
 801b090:	2b00      	cmp	r3, #0
 801b092:	ddec      	ble.n	801b06e <_dtoa_r+0x9ce>
 801b094:	2201      	movs	r2, #1
 801b096:	9904      	ldr	r1, [sp, #16]
 801b098:	4620      	mov	r0, r4
 801b09a:	f000 fd1d 	bl	801bad8 <__lshift>
 801b09e:	4639      	mov	r1, r7
 801b0a0:	9004      	str	r0, [sp, #16]
 801b0a2:	f000 fd6d 	bl	801bb80 <__mcmp>
 801b0a6:	2800      	cmp	r0, #0
 801b0a8:	dc03      	bgt.n	801b0b2 <_dtoa_r+0xa12>
 801b0aa:	d1e0      	bne.n	801b06e <_dtoa_r+0x9ce>
 801b0ac:	f018 0f01 	tst.w	r8, #1
 801b0b0:	d0dd      	beq.n	801b06e <_dtoa_r+0x9ce>
 801b0b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b0b6:	d1d8      	bne.n	801b06a <_dtoa_r+0x9ca>
 801b0b8:	9b05      	ldr	r3, [sp, #20]
 801b0ba:	9a05      	ldr	r2, [sp, #20]
 801b0bc:	1c5d      	adds	r5, r3, #1
 801b0be:	2339      	movs	r3, #57	; 0x39
 801b0c0:	7013      	strb	r3, [r2, #0]
 801b0c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b0c6:	2b39      	cmp	r3, #57	; 0x39
 801b0c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801b0cc:	d04f      	beq.n	801b16e <_dtoa_r+0xace>
 801b0ce:	3301      	adds	r3, #1
 801b0d0:	7013      	strb	r3, [r2, #0]
 801b0d2:	e754      	b.n	801af7e <_dtoa_r+0x8de>
 801b0d4:	9a05      	ldr	r2, [sp, #20]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	f102 0501 	add.w	r5, r2, #1
 801b0dc:	dd06      	ble.n	801b0ec <_dtoa_r+0xa4c>
 801b0de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b0e2:	d0e9      	beq.n	801b0b8 <_dtoa_r+0xa18>
 801b0e4:	f108 0801 	add.w	r8, r8, #1
 801b0e8:	9b05      	ldr	r3, [sp, #20]
 801b0ea:	e7c2      	b.n	801b072 <_dtoa_r+0x9d2>
 801b0ec:	9a02      	ldr	r2, [sp, #8]
 801b0ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b0f2:	eba5 030b 	sub.w	r3, r5, fp
 801b0f6:	4293      	cmp	r3, r2
 801b0f8:	d021      	beq.n	801b13e <_dtoa_r+0xa9e>
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	220a      	movs	r2, #10
 801b0fe:	9904      	ldr	r1, [sp, #16]
 801b100:	4620      	mov	r0, r4
 801b102:	f000 fb81 	bl	801b808 <__multadd>
 801b106:	45b1      	cmp	r9, r6
 801b108:	9004      	str	r0, [sp, #16]
 801b10a:	f04f 0300 	mov.w	r3, #0
 801b10e:	f04f 020a 	mov.w	r2, #10
 801b112:	4649      	mov	r1, r9
 801b114:	4620      	mov	r0, r4
 801b116:	d105      	bne.n	801b124 <_dtoa_r+0xa84>
 801b118:	f000 fb76 	bl	801b808 <__multadd>
 801b11c:	4681      	mov	r9, r0
 801b11e:	4606      	mov	r6, r0
 801b120:	9505      	str	r5, [sp, #20]
 801b122:	e776      	b.n	801b012 <_dtoa_r+0x972>
 801b124:	f000 fb70 	bl	801b808 <__multadd>
 801b128:	4631      	mov	r1, r6
 801b12a:	4681      	mov	r9, r0
 801b12c:	2300      	movs	r3, #0
 801b12e:	220a      	movs	r2, #10
 801b130:	4620      	mov	r0, r4
 801b132:	f000 fb69 	bl	801b808 <__multadd>
 801b136:	4606      	mov	r6, r0
 801b138:	e7f2      	b.n	801b120 <_dtoa_r+0xa80>
 801b13a:	f04f 0900 	mov.w	r9, #0
 801b13e:	2201      	movs	r2, #1
 801b140:	9904      	ldr	r1, [sp, #16]
 801b142:	4620      	mov	r0, r4
 801b144:	f000 fcc8 	bl	801bad8 <__lshift>
 801b148:	4639      	mov	r1, r7
 801b14a:	9004      	str	r0, [sp, #16]
 801b14c:	f000 fd18 	bl	801bb80 <__mcmp>
 801b150:	2800      	cmp	r0, #0
 801b152:	dcb6      	bgt.n	801b0c2 <_dtoa_r+0xa22>
 801b154:	d102      	bne.n	801b15c <_dtoa_r+0xabc>
 801b156:	f018 0f01 	tst.w	r8, #1
 801b15a:	d1b2      	bne.n	801b0c2 <_dtoa_r+0xa22>
 801b15c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b160:	2b30      	cmp	r3, #48	; 0x30
 801b162:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801b166:	f47f af0a 	bne.w	801af7e <_dtoa_r+0x8de>
 801b16a:	4615      	mov	r5, r2
 801b16c:	e7f6      	b.n	801b15c <_dtoa_r+0xabc>
 801b16e:	4593      	cmp	fp, r2
 801b170:	d105      	bne.n	801b17e <_dtoa_r+0xade>
 801b172:	2331      	movs	r3, #49	; 0x31
 801b174:	f10a 0a01 	add.w	sl, sl, #1
 801b178:	f88b 3000 	strb.w	r3, [fp]
 801b17c:	e6ff      	b.n	801af7e <_dtoa_r+0x8de>
 801b17e:	4615      	mov	r5, r2
 801b180:	e79f      	b.n	801b0c2 <_dtoa_r+0xa22>
 801b182:	f8df b064 	ldr.w	fp, [pc, #100]	; 801b1e8 <_dtoa_r+0xb48>
 801b186:	f7ff bac5 	b.w	801a714 <_dtoa_r+0x74>
 801b18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b18c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 801b1ec <_dtoa_r+0xb4c>
 801b190:	2b00      	cmp	r3, #0
 801b192:	f43f aabf 	beq.w	801a714 <_dtoa_r+0x74>
 801b196:	f10b 0308 	add.w	r3, fp, #8
 801b19a:	f7ff bab9 	b.w	801a710 <_dtoa_r+0x70>
 801b19e:	9b06      	ldr	r3, [sp, #24]
 801b1a0:	2b01      	cmp	r3, #1
 801b1a2:	f77f ae36 	ble.w	801ae12 <_dtoa_r+0x772>
 801b1a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1a8:	9307      	str	r3, [sp, #28]
 801b1aa:	e64a      	b.n	801ae42 <_dtoa_r+0x7a2>
 801b1ac:	9b02      	ldr	r3, [sp, #8]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	dc03      	bgt.n	801b1ba <_dtoa_r+0xb1a>
 801b1b2:	9b06      	ldr	r3, [sp, #24]
 801b1b4:	2b02      	cmp	r3, #2
 801b1b6:	f73f aecd 	bgt.w	801af54 <_dtoa_r+0x8b4>
 801b1ba:	465d      	mov	r5, fp
 801b1bc:	4639      	mov	r1, r7
 801b1be:	9804      	ldr	r0, [sp, #16]
 801b1c0:	f7ff f9e0 	bl	801a584 <quorem>
 801b1c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b1c8:	f805 8b01 	strb.w	r8, [r5], #1
 801b1cc:	9a02      	ldr	r2, [sp, #8]
 801b1ce:	eba5 030b 	sub.w	r3, r5, fp
 801b1d2:	429a      	cmp	r2, r3
 801b1d4:	ddb1      	ble.n	801b13a <_dtoa_r+0xa9a>
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	220a      	movs	r2, #10
 801b1da:	9904      	ldr	r1, [sp, #16]
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f000 fb13 	bl	801b808 <__multadd>
 801b1e2:	9004      	str	r0, [sp, #16]
 801b1e4:	e7ea      	b.n	801b1bc <_dtoa_r+0xb1c>
 801b1e6:	bf00      	nop
 801b1e8:	0809484e 	.word	0x0809484e
 801b1ec:	08094870 	.word	0x08094870

0801b1f0 <__sflush_r>:
 801b1f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b1f4:	b293      	uxth	r3, r2
 801b1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1fa:	4605      	mov	r5, r0
 801b1fc:	0718      	lsls	r0, r3, #28
 801b1fe:	460c      	mov	r4, r1
 801b200:	d45f      	bmi.n	801b2c2 <__sflush_r+0xd2>
 801b202:	684b      	ldr	r3, [r1, #4]
 801b204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b208:	2b00      	cmp	r3, #0
 801b20a:	818a      	strh	r2, [r1, #12]
 801b20c:	dc05      	bgt.n	801b21a <__sflush_r+0x2a>
 801b20e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801b210:	2b00      	cmp	r3, #0
 801b212:	dc02      	bgt.n	801b21a <__sflush_r+0x2a>
 801b214:	2000      	movs	r0, #0
 801b216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b21c:	2e00      	cmp	r6, #0
 801b21e:	d0f9      	beq.n	801b214 <__sflush_r+0x24>
 801b220:	2300      	movs	r3, #0
 801b222:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b226:	682f      	ldr	r7, [r5, #0]
 801b228:	69e1      	ldr	r1, [r4, #28]
 801b22a:	602b      	str	r3, [r5, #0]
 801b22c:	d036      	beq.n	801b29c <__sflush_r+0xac>
 801b22e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801b230:	89a3      	ldrh	r3, [r4, #12]
 801b232:	075a      	lsls	r2, r3, #29
 801b234:	d505      	bpl.n	801b242 <__sflush_r+0x52>
 801b236:	6863      	ldr	r3, [r4, #4]
 801b238:	1ac0      	subs	r0, r0, r3
 801b23a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b23c:	b10b      	cbz	r3, 801b242 <__sflush_r+0x52>
 801b23e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b240:	1ac0      	subs	r0, r0, r3
 801b242:	2300      	movs	r3, #0
 801b244:	4602      	mov	r2, r0
 801b246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b248:	69e1      	ldr	r1, [r4, #28]
 801b24a:	4628      	mov	r0, r5
 801b24c:	47b0      	blx	r6
 801b24e:	1c43      	adds	r3, r0, #1
 801b250:	89a3      	ldrh	r3, [r4, #12]
 801b252:	d106      	bne.n	801b262 <__sflush_r+0x72>
 801b254:	6829      	ldr	r1, [r5, #0]
 801b256:	291d      	cmp	r1, #29
 801b258:	d84c      	bhi.n	801b2f4 <__sflush_r+0x104>
 801b25a:	4a2b      	ldr	r2, [pc, #172]	; (801b308 <__sflush_r+0x118>)
 801b25c:	40ca      	lsrs	r2, r1
 801b25e:	07d6      	lsls	r6, r2, #31
 801b260:	d548      	bpl.n	801b2f4 <__sflush_r+0x104>
 801b262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b266:	b21b      	sxth	r3, r3
 801b268:	2200      	movs	r2, #0
 801b26a:	6062      	str	r2, [r4, #4]
 801b26c:	04d9      	lsls	r1, r3, #19
 801b26e:	6922      	ldr	r2, [r4, #16]
 801b270:	81a3      	strh	r3, [r4, #12]
 801b272:	6022      	str	r2, [r4, #0]
 801b274:	d504      	bpl.n	801b280 <__sflush_r+0x90>
 801b276:	1c42      	adds	r2, r0, #1
 801b278:	d101      	bne.n	801b27e <__sflush_r+0x8e>
 801b27a:	682b      	ldr	r3, [r5, #0]
 801b27c:	b903      	cbnz	r3, 801b280 <__sflush_r+0x90>
 801b27e:	6520      	str	r0, [r4, #80]	; 0x50
 801b280:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b282:	602f      	str	r7, [r5, #0]
 801b284:	2900      	cmp	r1, #0
 801b286:	d0c5      	beq.n	801b214 <__sflush_r+0x24>
 801b288:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801b28c:	4299      	cmp	r1, r3
 801b28e:	d002      	beq.n	801b296 <__sflush_r+0xa6>
 801b290:	4628      	mov	r0, r5
 801b292:	f000 f937 	bl	801b504 <_free_r>
 801b296:	2000      	movs	r0, #0
 801b298:	6320      	str	r0, [r4, #48]	; 0x30
 801b29a:	e7bc      	b.n	801b216 <__sflush_r+0x26>
 801b29c:	2301      	movs	r3, #1
 801b29e:	4628      	mov	r0, r5
 801b2a0:	47b0      	blx	r6
 801b2a2:	1c41      	adds	r1, r0, #1
 801b2a4:	d1c4      	bne.n	801b230 <__sflush_r+0x40>
 801b2a6:	682b      	ldr	r3, [r5, #0]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d0c1      	beq.n	801b230 <__sflush_r+0x40>
 801b2ac:	2b1d      	cmp	r3, #29
 801b2ae:	d001      	beq.n	801b2b4 <__sflush_r+0xc4>
 801b2b0:	2b16      	cmp	r3, #22
 801b2b2:	d101      	bne.n	801b2b8 <__sflush_r+0xc8>
 801b2b4:	602f      	str	r7, [r5, #0]
 801b2b6:	e7ad      	b.n	801b214 <__sflush_r+0x24>
 801b2b8:	89a3      	ldrh	r3, [r4, #12]
 801b2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2be:	81a3      	strh	r3, [r4, #12]
 801b2c0:	e7a9      	b.n	801b216 <__sflush_r+0x26>
 801b2c2:	690f      	ldr	r7, [r1, #16]
 801b2c4:	2f00      	cmp	r7, #0
 801b2c6:	d0a5      	beq.n	801b214 <__sflush_r+0x24>
 801b2c8:	079b      	lsls	r3, r3, #30
 801b2ca:	680e      	ldr	r6, [r1, #0]
 801b2cc:	bf08      	it	eq
 801b2ce:	694b      	ldreq	r3, [r1, #20]
 801b2d0:	600f      	str	r7, [r1, #0]
 801b2d2:	bf18      	it	ne
 801b2d4:	2300      	movne	r3, #0
 801b2d6:	eba6 0807 	sub.w	r8, r6, r7
 801b2da:	608b      	str	r3, [r1, #8]
 801b2dc:	f1b8 0f00 	cmp.w	r8, #0
 801b2e0:	dd98      	ble.n	801b214 <__sflush_r+0x24>
 801b2e2:	4643      	mov	r3, r8
 801b2e4:	463a      	mov	r2, r7
 801b2e6:	69e1      	ldr	r1, [r4, #28]
 801b2e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b2ea:	4628      	mov	r0, r5
 801b2ec:	47b0      	blx	r6
 801b2ee:	2800      	cmp	r0, #0
 801b2f0:	dc06      	bgt.n	801b300 <__sflush_r+0x110>
 801b2f2:	89a3      	ldrh	r3, [r4, #12]
 801b2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2f8:	81a3      	strh	r3, [r4, #12]
 801b2fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2fe:	e78a      	b.n	801b216 <__sflush_r+0x26>
 801b300:	4407      	add	r7, r0
 801b302:	eba8 0800 	sub.w	r8, r8, r0
 801b306:	e7e9      	b.n	801b2dc <__sflush_r+0xec>
 801b308:	20400001 	.word	0x20400001

0801b30c <_fflush_r>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	460c      	mov	r4, r1
 801b310:	4605      	mov	r5, r0
 801b312:	b118      	cbz	r0, 801b31c <_fflush_r+0x10>
 801b314:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b316:	b90b      	cbnz	r3, 801b31c <_fflush_r+0x10>
 801b318:	f000 f864 	bl	801b3e4 <__sinit>
 801b31c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801b320:	b1b8      	cbz	r0, 801b352 <_fflush_r+0x46>
 801b322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b324:	07db      	lsls	r3, r3, #31
 801b326:	d404      	bmi.n	801b332 <_fflush_r+0x26>
 801b328:	0581      	lsls	r1, r0, #22
 801b32a:	d402      	bmi.n	801b332 <_fflush_r+0x26>
 801b32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b32e:	f7fd f93f 	bl	80185b0 <__retarget_lock_acquire_recursive>
 801b332:	4628      	mov	r0, r5
 801b334:	4621      	mov	r1, r4
 801b336:	f7ff ff5b 	bl	801b1f0 <__sflush_r>
 801b33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b33c:	07da      	lsls	r2, r3, #31
 801b33e:	4605      	mov	r5, r0
 801b340:	d405      	bmi.n	801b34e <_fflush_r+0x42>
 801b342:	89a3      	ldrh	r3, [r4, #12]
 801b344:	059b      	lsls	r3, r3, #22
 801b346:	d402      	bmi.n	801b34e <_fflush_r+0x42>
 801b348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b34a:	f7fd f932 	bl	80185b2 <__retarget_lock_release_recursive>
 801b34e:	4628      	mov	r0, r5
 801b350:	bd38      	pop	{r3, r4, r5, pc}
 801b352:	4605      	mov	r5, r0
 801b354:	e7fb      	b.n	801b34e <_fflush_r+0x42>
	...

0801b358 <std>:
 801b358:	2300      	movs	r3, #0
 801b35a:	b510      	push	{r4, lr}
 801b35c:	4604      	mov	r4, r0
 801b35e:	e9c0 3300 	strd	r3, r3, [r0]
 801b362:	6083      	str	r3, [r0, #8]
 801b364:	8181      	strh	r1, [r0, #12]
 801b366:	6643      	str	r3, [r0, #100]	; 0x64
 801b368:	81c2      	strh	r2, [r0, #14]
 801b36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b36e:	6183      	str	r3, [r0, #24]
 801b370:	4619      	mov	r1, r3
 801b372:	2208      	movs	r2, #8
 801b374:	305c      	adds	r0, #92	; 0x5c
 801b376:	f7fd fb96 	bl	8018aa6 <memset>
 801b37a:	4b07      	ldr	r3, [pc, #28]	; (801b398 <std+0x40>)
 801b37c:	6223      	str	r3, [r4, #32]
 801b37e:	4b07      	ldr	r3, [pc, #28]	; (801b39c <std+0x44>)
 801b380:	6263      	str	r3, [r4, #36]	; 0x24
 801b382:	4b07      	ldr	r3, [pc, #28]	; (801b3a0 <std+0x48>)
 801b384:	62a3      	str	r3, [r4, #40]	; 0x28
 801b386:	4b07      	ldr	r3, [pc, #28]	; (801b3a4 <std+0x4c>)
 801b388:	61e4      	str	r4, [r4, #28]
 801b38a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b38c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b394:	f7fd b90a 	b.w	80185ac <__retarget_lock_init_recursive>
 801b398:	0801bd79 	.word	0x0801bd79
 801b39c:	0801bd9b 	.word	0x0801bd9b
 801b3a0:	0801bdd3 	.word	0x0801bdd3
 801b3a4:	0801bdf7 	.word	0x0801bdf7

0801b3a8 <_cleanup_r>:
 801b3a8:	4901      	ldr	r1, [pc, #4]	; (801b3b0 <_cleanup_r+0x8>)
 801b3aa:	f000 b967 	b.w	801b67c <_fwalk_reent>
 801b3ae:	bf00      	nop
 801b3b0:	0801c041 	.word	0x0801c041

0801b3b4 <__sfp_lock_acquire>:
 801b3b4:	4801      	ldr	r0, [pc, #4]	; (801b3bc <__sfp_lock_acquire+0x8>)
 801b3b6:	f7fd b8fb 	b.w	80185b0 <__retarget_lock_acquire_recursive>
 801b3ba:	bf00      	nop
 801b3bc:	2001ba2c 	.word	0x2001ba2c

0801b3c0 <__sfp_lock_release>:
 801b3c0:	4801      	ldr	r0, [pc, #4]	; (801b3c8 <__sfp_lock_release+0x8>)
 801b3c2:	f7fd b8f6 	b.w	80185b2 <__retarget_lock_release_recursive>
 801b3c6:	bf00      	nop
 801b3c8:	2001ba2c 	.word	0x2001ba2c

0801b3cc <__sinit_lock_acquire>:
 801b3cc:	4801      	ldr	r0, [pc, #4]	; (801b3d4 <__sinit_lock_acquire+0x8>)
 801b3ce:	f7fd b8ef 	b.w	80185b0 <__retarget_lock_acquire_recursive>
 801b3d2:	bf00      	nop
 801b3d4:	2001ba27 	.word	0x2001ba27

0801b3d8 <__sinit_lock_release>:
 801b3d8:	4801      	ldr	r0, [pc, #4]	; (801b3e0 <__sinit_lock_release+0x8>)
 801b3da:	f7fd b8ea 	b.w	80185b2 <__retarget_lock_release_recursive>
 801b3de:	bf00      	nop
 801b3e0:	2001ba27 	.word	0x2001ba27

0801b3e4 <__sinit>:
 801b3e4:	b510      	push	{r4, lr}
 801b3e6:	4604      	mov	r4, r0
 801b3e8:	f7ff fff0 	bl	801b3cc <__sinit_lock_acquire>
 801b3ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b3ee:	b11a      	cbz	r2, 801b3f8 <__sinit+0x14>
 801b3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3f4:	f7ff bff0 	b.w	801b3d8 <__sinit_lock_release>
 801b3f8:	4b0d      	ldr	r3, [pc, #52]	; (801b430 <__sinit+0x4c>)
 801b3fa:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b3fc:	2303      	movs	r3, #3
 801b3fe:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801b402:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801b406:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801b40a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801b40e:	2104      	movs	r1, #4
 801b410:	6860      	ldr	r0, [r4, #4]
 801b412:	f7ff ffa1 	bl	801b358 <std>
 801b416:	2201      	movs	r2, #1
 801b418:	2109      	movs	r1, #9
 801b41a:	68a0      	ldr	r0, [r4, #8]
 801b41c:	f7ff ff9c 	bl	801b358 <std>
 801b420:	2202      	movs	r2, #2
 801b422:	2112      	movs	r1, #18
 801b424:	68e0      	ldr	r0, [r4, #12]
 801b426:	f7ff ff97 	bl	801b358 <std>
 801b42a:	2301      	movs	r3, #1
 801b42c:	63a3      	str	r3, [r4, #56]	; 0x38
 801b42e:	e7df      	b.n	801b3f0 <__sinit+0xc>
 801b430:	0801b3a9 	.word	0x0801b3a9

0801b434 <__libc_fini_array>:
 801b434:	b538      	push	{r3, r4, r5, lr}
 801b436:	4d07      	ldr	r5, [pc, #28]	; (801b454 <__libc_fini_array+0x20>)
 801b438:	4c07      	ldr	r4, [pc, #28]	; (801b458 <__libc_fini_array+0x24>)
 801b43a:	1b64      	subs	r4, r4, r5
 801b43c:	10a4      	asrs	r4, r4, #2
 801b43e:	b91c      	cbnz	r4, 801b448 <__libc_fini_array+0x14>
 801b440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b444:	f000 bede 	b.w	801c204 <_fini>
 801b448:	3c01      	subs	r4, #1
 801b44a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801b44e:	4798      	blx	r3
 801b450:	e7f5      	b.n	801b43e <__libc_fini_array+0xa>
 801b452:	bf00      	nop
 801b454:	08094d1c 	.word	0x08094d1c
 801b458:	08094d24 	.word	0x08094d24

0801b45c <_malloc_trim_r>:
 801b45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b460:	4605      	mov	r5, r0
 801b462:	2008      	movs	r0, #8
 801b464:	460c      	mov	r4, r1
 801b466:	f7fe ffbd 	bl	801a3e4 <sysconf>
 801b46a:	4f23      	ldr	r7, [pc, #140]	; (801b4f8 <_malloc_trim_r+0x9c>)
 801b46c:	4680      	mov	r8, r0
 801b46e:	4628      	mov	r0, r5
 801b470:	f7fd fb22 	bl	8018ab8 <__malloc_lock>
 801b474:	68bb      	ldr	r3, [r7, #8]
 801b476:	685e      	ldr	r6, [r3, #4]
 801b478:	f026 0603 	bic.w	r6, r6, #3
 801b47c:	1b34      	subs	r4, r6, r4
 801b47e:	3c11      	subs	r4, #17
 801b480:	4444      	add	r4, r8
 801b482:	fbb4 f4f8 	udiv	r4, r4, r8
 801b486:	3c01      	subs	r4, #1
 801b488:	fb08 f404 	mul.w	r4, r8, r4
 801b48c:	45a0      	cmp	r8, r4
 801b48e:	dd05      	ble.n	801b49c <_malloc_trim_r+0x40>
 801b490:	4628      	mov	r0, r5
 801b492:	f7fd fb17 	bl	8018ac4 <__malloc_unlock>
 801b496:	2000      	movs	r0, #0
 801b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b49c:	2100      	movs	r1, #0
 801b49e:	4628      	mov	r0, r5
 801b4a0:	f7fd fcfa 	bl	8018e98 <_sbrk_r>
 801b4a4:	68bb      	ldr	r3, [r7, #8]
 801b4a6:	4433      	add	r3, r6
 801b4a8:	4298      	cmp	r0, r3
 801b4aa:	d1f1      	bne.n	801b490 <_malloc_trim_r+0x34>
 801b4ac:	4261      	negs	r1, r4
 801b4ae:	4628      	mov	r0, r5
 801b4b0:	f7fd fcf2 	bl	8018e98 <_sbrk_r>
 801b4b4:	3001      	adds	r0, #1
 801b4b6:	d110      	bne.n	801b4da <_malloc_trim_r+0x7e>
 801b4b8:	2100      	movs	r1, #0
 801b4ba:	4628      	mov	r0, r5
 801b4bc:	f7fd fcec 	bl	8018e98 <_sbrk_r>
 801b4c0:	68ba      	ldr	r2, [r7, #8]
 801b4c2:	1a83      	subs	r3, r0, r2
 801b4c4:	2b0f      	cmp	r3, #15
 801b4c6:	dde3      	ble.n	801b490 <_malloc_trim_r+0x34>
 801b4c8:	490c      	ldr	r1, [pc, #48]	; (801b4fc <_malloc_trim_r+0xa0>)
 801b4ca:	6809      	ldr	r1, [r1, #0]
 801b4cc:	1a40      	subs	r0, r0, r1
 801b4ce:	490c      	ldr	r1, [pc, #48]	; (801b500 <_malloc_trim_r+0xa4>)
 801b4d0:	f043 0301 	orr.w	r3, r3, #1
 801b4d4:	6008      	str	r0, [r1, #0]
 801b4d6:	6053      	str	r3, [r2, #4]
 801b4d8:	e7da      	b.n	801b490 <_malloc_trim_r+0x34>
 801b4da:	68bb      	ldr	r3, [r7, #8]
 801b4dc:	4a08      	ldr	r2, [pc, #32]	; (801b500 <_malloc_trim_r+0xa4>)
 801b4de:	1b36      	subs	r6, r6, r4
 801b4e0:	f046 0601 	orr.w	r6, r6, #1
 801b4e4:	605e      	str	r6, [r3, #4]
 801b4e6:	6813      	ldr	r3, [r2, #0]
 801b4e8:	4628      	mov	r0, r5
 801b4ea:	1b1c      	subs	r4, r3, r4
 801b4ec:	6014      	str	r4, [r2, #0]
 801b4ee:	f7fd fae9 	bl	8018ac4 <__malloc_unlock>
 801b4f2:	2001      	movs	r0, #1
 801b4f4:	e7d0      	b.n	801b498 <_malloc_trim_r+0x3c>
 801b4f6:	bf00      	nop
 801b4f8:	20000458 	.word	0x20000458
 801b4fc:	20000860 	.word	0x20000860
 801b500:	2001b9e4 	.word	0x2001b9e4

0801b504 <_free_r>:
 801b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b508:	4604      	mov	r4, r0
 801b50a:	4688      	mov	r8, r1
 801b50c:	2900      	cmp	r1, #0
 801b50e:	f000 80ab 	beq.w	801b668 <_free_r+0x164>
 801b512:	f7fd fad1 	bl	8018ab8 <__malloc_lock>
 801b516:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801b51a:	4d54      	ldr	r5, [pc, #336]	; (801b66c <_free_r+0x168>)
 801b51c:	f022 0001 	bic.w	r0, r2, #1
 801b520:	f1a8 0308 	sub.w	r3, r8, #8
 801b524:	181f      	adds	r7, r3, r0
 801b526:	68a9      	ldr	r1, [r5, #8]
 801b528:	687e      	ldr	r6, [r7, #4]
 801b52a:	42b9      	cmp	r1, r7
 801b52c:	f026 0603 	bic.w	r6, r6, #3
 801b530:	f002 0201 	and.w	r2, r2, #1
 801b534:	d11b      	bne.n	801b56e <_free_r+0x6a>
 801b536:	4430      	add	r0, r6
 801b538:	b93a      	cbnz	r2, 801b54a <_free_r+0x46>
 801b53a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801b53e:	1a9b      	subs	r3, r3, r2
 801b540:	4410      	add	r0, r2
 801b542:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801b546:	60ca      	str	r2, [r1, #12]
 801b548:	6091      	str	r1, [r2, #8]
 801b54a:	f040 0201 	orr.w	r2, r0, #1
 801b54e:	605a      	str	r2, [r3, #4]
 801b550:	60ab      	str	r3, [r5, #8]
 801b552:	4b47      	ldr	r3, [pc, #284]	; (801b670 <_free_r+0x16c>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	4283      	cmp	r3, r0
 801b558:	d804      	bhi.n	801b564 <_free_r+0x60>
 801b55a:	4b46      	ldr	r3, [pc, #280]	; (801b674 <_free_r+0x170>)
 801b55c:	4620      	mov	r0, r4
 801b55e:	6819      	ldr	r1, [r3, #0]
 801b560:	f7ff ff7c 	bl	801b45c <_malloc_trim_r>
 801b564:	4620      	mov	r0, r4
 801b566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b56a:	f7fd baab 	b.w	8018ac4 <__malloc_unlock>
 801b56e:	607e      	str	r6, [r7, #4]
 801b570:	2a00      	cmp	r2, #0
 801b572:	d139      	bne.n	801b5e8 <_free_r+0xe4>
 801b574:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801b578:	1a5b      	subs	r3, r3, r1
 801b57a:	4408      	add	r0, r1
 801b57c:	6899      	ldr	r1, [r3, #8]
 801b57e:	f105 0c08 	add.w	ip, r5, #8
 801b582:	4561      	cmp	r1, ip
 801b584:	d032      	beq.n	801b5ec <_free_r+0xe8>
 801b586:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801b58a:	f8c1 c00c 	str.w	ip, [r1, #12]
 801b58e:	f8cc 1008 	str.w	r1, [ip, #8]
 801b592:	19b9      	adds	r1, r7, r6
 801b594:	6849      	ldr	r1, [r1, #4]
 801b596:	07c9      	lsls	r1, r1, #31
 801b598:	d40a      	bmi.n	801b5b0 <_free_r+0xac>
 801b59a:	4430      	add	r0, r6
 801b59c:	68b9      	ldr	r1, [r7, #8]
 801b59e:	bb3a      	cbnz	r2, 801b5f0 <_free_r+0xec>
 801b5a0:	4e35      	ldr	r6, [pc, #212]	; (801b678 <_free_r+0x174>)
 801b5a2:	42b1      	cmp	r1, r6
 801b5a4:	d124      	bne.n	801b5f0 <_free_r+0xec>
 801b5a6:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801b5aa:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801b5ae:	2201      	movs	r2, #1
 801b5b0:	f040 0101 	orr.w	r1, r0, #1
 801b5b4:	6059      	str	r1, [r3, #4]
 801b5b6:	5018      	str	r0, [r3, r0]
 801b5b8:	2a00      	cmp	r2, #0
 801b5ba:	d1d3      	bne.n	801b564 <_free_r+0x60>
 801b5bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801b5c0:	d21a      	bcs.n	801b5f8 <_free_r+0xf4>
 801b5c2:	08c0      	lsrs	r0, r0, #3
 801b5c4:	1081      	asrs	r1, r0, #2
 801b5c6:	2201      	movs	r2, #1
 801b5c8:	408a      	lsls	r2, r1
 801b5ca:	6869      	ldr	r1, [r5, #4]
 801b5cc:	3001      	adds	r0, #1
 801b5ce:	430a      	orrs	r2, r1
 801b5d0:	606a      	str	r2, [r5, #4]
 801b5d2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801b5d6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801b5da:	3a08      	subs	r2, #8
 801b5dc:	e9c3 1202 	strd	r1, r2, [r3, #8]
 801b5e0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801b5e4:	60cb      	str	r3, [r1, #12]
 801b5e6:	e7bd      	b.n	801b564 <_free_r+0x60>
 801b5e8:	2200      	movs	r2, #0
 801b5ea:	e7d2      	b.n	801b592 <_free_r+0x8e>
 801b5ec:	2201      	movs	r2, #1
 801b5ee:	e7d0      	b.n	801b592 <_free_r+0x8e>
 801b5f0:	68fe      	ldr	r6, [r7, #12]
 801b5f2:	60ce      	str	r6, [r1, #12]
 801b5f4:	60b1      	str	r1, [r6, #8]
 801b5f6:	e7db      	b.n	801b5b0 <_free_r+0xac>
 801b5f8:	0a42      	lsrs	r2, r0, #9
 801b5fa:	2a04      	cmp	r2, #4
 801b5fc:	d813      	bhi.n	801b626 <_free_r+0x122>
 801b5fe:	0982      	lsrs	r2, r0, #6
 801b600:	3238      	adds	r2, #56	; 0x38
 801b602:	1c51      	adds	r1, r2, #1
 801b604:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801b608:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801b60c:	428e      	cmp	r6, r1
 801b60e:	d124      	bne.n	801b65a <_free_r+0x156>
 801b610:	2001      	movs	r0, #1
 801b612:	1092      	asrs	r2, r2, #2
 801b614:	fa00 f202 	lsl.w	r2, r0, r2
 801b618:	6868      	ldr	r0, [r5, #4]
 801b61a:	4302      	orrs	r2, r0
 801b61c:	606a      	str	r2, [r5, #4]
 801b61e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801b622:	60b3      	str	r3, [r6, #8]
 801b624:	e7de      	b.n	801b5e4 <_free_r+0xe0>
 801b626:	2a14      	cmp	r2, #20
 801b628:	d801      	bhi.n	801b62e <_free_r+0x12a>
 801b62a:	325b      	adds	r2, #91	; 0x5b
 801b62c:	e7e9      	b.n	801b602 <_free_r+0xfe>
 801b62e:	2a54      	cmp	r2, #84	; 0x54
 801b630:	d802      	bhi.n	801b638 <_free_r+0x134>
 801b632:	0b02      	lsrs	r2, r0, #12
 801b634:	326e      	adds	r2, #110	; 0x6e
 801b636:	e7e4      	b.n	801b602 <_free_r+0xfe>
 801b638:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801b63c:	d802      	bhi.n	801b644 <_free_r+0x140>
 801b63e:	0bc2      	lsrs	r2, r0, #15
 801b640:	3277      	adds	r2, #119	; 0x77
 801b642:	e7de      	b.n	801b602 <_free_r+0xfe>
 801b644:	f240 5154 	movw	r1, #1364	; 0x554
 801b648:	428a      	cmp	r2, r1
 801b64a:	bf9a      	itte	ls
 801b64c:	0c82      	lsrls	r2, r0, #18
 801b64e:	327c      	addls	r2, #124	; 0x7c
 801b650:	227e      	movhi	r2, #126	; 0x7e
 801b652:	e7d6      	b.n	801b602 <_free_r+0xfe>
 801b654:	6889      	ldr	r1, [r1, #8]
 801b656:	428e      	cmp	r6, r1
 801b658:	d004      	beq.n	801b664 <_free_r+0x160>
 801b65a:	684a      	ldr	r2, [r1, #4]
 801b65c:	f022 0203 	bic.w	r2, r2, #3
 801b660:	4282      	cmp	r2, r0
 801b662:	d8f7      	bhi.n	801b654 <_free_r+0x150>
 801b664:	68ce      	ldr	r6, [r1, #12]
 801b666:	e7da      	b.n	801b61e <_free_r+0x11a>
 801b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b66c:	20000458 	.word	0x20000458
 801b670:	20000864 	.word	0x20000864
 801b674:	2001ba14 	.word	0x2001ba14
 801b678:	20000460 	.word	0x20000460

0801b67c <_fwalk_reent>:
 801b67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b680:	4680      	mov	r8, r0
 801b682:	4689      	mov	r9, r1
 801b684:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801b688:	2600      	movs	r6, #0
 801b68a:	b914      	cbnz	r4, 801b692 <_fwalk_reent+0x16>
 801b68c:	4630      	mov	r0, r6
 801b68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b692:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801b696:	3f01      	subs	r7, #1
 801b698:	d501      	bpl.n	801b69e <_fwalk_reent+0x22>
 801b69a:	6824      	ldr	r4, [r4, #0]
 801b69c:	e7f5      	b.n	801b68a <_fwalk_reent+0xe>
 801b69e:	89ab      	ldrh	r3, [r5, #12]
 801b6a0:	2b01      	cmp	r3, #1
 801b6a2:	d907      	bls.n	801b6b4 <_fwalk_reent+0x38>
 801b6a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6a8:	3301      	adds	r3, #1
 801b6aa:	d003      	beq.n	801b6b4 <_fwalk_reent+0x38>
 801b6ac:	4629      	mov	r1, r5
 801b6ae:	4640      	mov	r0, r8
 801b6b0:	47c8      	blx	r9
 801b6b2:	4306      	orrs	r6, r0
 801b6b4:	3568      	adds	r5, #104	; 0x68
 801b6b6:	e7ee      	b.n	801b696 <_fwalk_reent+0x1a>

0801b6b8 <_localeconv_r>:
 801b6b8:	4b04      	ldr	r3, [pc, #16]	; (801b6cc <_localeconv_r+0x14>)
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b6be:	4b04      	ldr	r3, [pc, #16]	; (801b6d0 <_localeconv_r+0x18>)
 801b6c0:	2800      	cmp	r0, #0
 801b6c2:	bf08      	it	eq
 801b6c4:	4618      	moveq	r0, r3
 801b6c6:	30f0      	adds	r0, #240	; 0xf0
 801b6c8:	4770      	bx	lr
 801b6ca:	bf00      	nop
 801b6cc:	2000002c 	.word	0x2000002c
 801b6d0:	2000086c 	.word	0x2000086c

0801b6d4 <__swhatbuf_r>:
 801b6d4:	b570      	push	{r4, r5, r6, lr}
 801b6d6:	460e      	mov	r6, r1
 801b6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6dc:	2900      	cmp	r1, #0
 801b6de:	b096      	sub	sp, #88	; 0x58
 801b6e0:	4614      	mov	r4, r2
 801b6e2:	461d      	mov	r5, r3
 801b6e4:	da09      	bge.n	801b6fa <__swhatbuf_r+0x26>
 801b6e6:	89b3      	ldrh	r3, [r6, #12]
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b6ee:	602a      	str	r2, [r5, #0]
 801b6f0:	d116      	bne.n	801b720 <__swhatbuf_r+0x4c>
 801b6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b6f6:	6023      	str	r3, [r4, #0]
 801b6f8:	e015      	b.n	801b726 <__swhatbuf_r+0x52>
 801b6fa:	466a      	mov	r2, sp
 801b6fc:	f000 fcf8 	bl	801c0f0 <_fstat_r>
 801b700:	2800      	cmp	r0, #0
 801b702:	dbf0      	blt.n	801b6e6 <__swhatbuf_r+0x12>
 801b704:	9a01      	ldr	r2, [sp, #4]
 801b706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b70a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b70e:	425a      	negs	r2, r3
 801b710:	415a      	adcs	r2, r3
 801b712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b716:	602a      	str	r2, [r5, #0]
 801b718:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b71c:	6023      	str	r3, [r4, #0]
 801b71e:	e002      	b.n	801b726 <__swhatbuf_r+0x52>
 801b720:	2340      	movs	r3, #64	; 0x40
 801b722:	6023      	str	r3, [r4, #0]
 801b724:	4610      	mov	r0, r2
 801b726:	b016      	add	sp, #88	; 0x58
 801b728:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b72c <__smakebuf_r>:
 801b72c:	898b      	ldrh	r3, [r1, #12]
 801b72e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b730:	079d      	lsls	r5, r3, #30
 801b732:	4606      	mov	r6, r0
 801b734:	460c      	mov	r4, r1
 801b736:	d507      	bpl.n	801b748 <__smakebuf_r+0x1c>
 801b738:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801b73c:	6023      	str	r3, [r4, #0]
 801b73e:	6123      	str	r3, [r4, #16]
 801b740:	2301      	movs	r3, #1
 801b742:	6163      	str	r3, [r4, #20]
 801b744:	b002      	add	sp, #8
 801b746:	bd70      	pop	{r4, r5, r6, pc}
 801b748:	ab01      	add	r3, sp, #4
 801b74a:	466a      	mov	r2, sp
 801b74c:	f7ff ffc2 	bl	801b6d4 <__swhatbuf_r>
 801b750:	9900      	ldr	r1, [sp, #0]
 801b752:	4605      	mov	r5, r0
 801b754:	4630      	mov	r0, r6
 801b756:	f7fc ff3d 	bl	80185d4 <_malloc_r>
 801b75a:	b948      	cbnz	r0, 801b770 <__smakebuf_r+0x44>
 801b75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b760:	059a      	lsls	r2, r3, #22
 801b762:	d4ef      	bmi.n	801b744 <__smakebuf_r+0x18>
 801b764:	f023 0303 	bic.w	r3, r3, #3
 801b768:	f043 0302 	orr.w	r3, r3, #2
 801b76c:	81a3      	strh	r3, [r4, #12]
 801b76e:	e7e3      	b.n	801b738 <__smakebuf_r+0xc>
 801b770:	4b0d      	ldr	r3, [pc, #52]	; (801b7a8 <__smakebuf_r+0x7c>)
 801b772:	63f3      	str	r3, [r6, #60]	; 0x3c
 801b774:	89a3      	ldrh	r3, [r4, #12]
 801b776:	6020      	str	r0, [r4, #0]
 801b778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b77c:	81a3      	strh	r3, [r4, #12]
 801b77e:	9b00      	ldr	r3, [sp, #0]
 801b780:	6163      	str	r3, [r4, #20]
 801b782:	9b01      	ldr	r3, [sp, #4]
 801b784:	6120      	str	r0, [r4, #16]
 801b786:	b15b      	cbz	r3, 801b7a0 <__smakebuf_r+0x74>
 801b788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b78c:	4630      	mov	r0, r6
 801b78e:	f000 fcc1 	bl	801c114 <_isatty_r>
 801b792:	b128      	cbz	r0, 801b7a0 <__smakebuf_r+0x74>
 801b794:	89a3      	ldrh	r3, [r4, #12]
 801b796:	f023 0303 	bic.w	r3, r3, #3
 801b79a:	f043 0301 	orr.w	r3, r3, #1
 801b79e:	81a3      	strh	r3, [r4, #12]
 801b7a0:	89a3      	ldrh	r3, [r4, #12]
 801b7a2:	431d      	orrs	r5, r3
 801b7a4:	81a5      	strh	r5, [r4, #12]
 801b7a6:	e7cd      	b.n	801b744 <__smakebuf_r+0x18>
 801b7a8:	0801b3a9 	.word	0x0801b3a9

0801b7ac <_Balloc>:
 801b7ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801b7ae:	b570      	push	{r4, r5, r6, lr}
 801b7b0:	4605      	mov	r5, r0
 801b7b2:	460c      	mov	r4, r1
 801b7b4:	b17b      	cbz	r3, 801b7d6 <_Balloc+0x2a>
 801b7b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801b7b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b7bc:	b9a0      	cbnz	r0, 801b7e8 <_Balloc+0x3c>
 801b7be:	2101      	movs	r1, #1
 801b7c0:	fa01 f604 	lsl.w	r6, r1, r4
 801b7c4:	1d72      	adds	r2, r6, #5
 801b7c6:	0092      	lsls	r2, r2, #2
 801b7c8:	4628      	mov	r0, r5
 801b7ca:	f000 fbfb 	bl	801bfc4 <_calloc_r>
 801b7ce:	b148      	cbz	r0, 801b7e4 <_Balloc+0x38>
 801b7d0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801b7d4:	e00b      	b.n	801b7ee <_Balloc+0x42>
 801b7d6:	2221      	movs	r2, #33	; 0x21
 801b7d8:	2104      	movs	r1, #4
 801b7da:	f000 fbf3 	bl	801bfc4 <_calloc_r>
 801b7de:	64e8      	str	r0, [r5, #76]	; 0x4c
 801b7e0:	2800      	cmp	r0, #0
 801b7e2:	d1e8      	bne.n	801b7b6 <_Balloc+0xa>
 801b7e4:	2000      	movs	r0, #0
 801b7e6:	bd70      	pop	{r4, r5, r6, pc}
 801b7e8:	6802      	ldr	r2, [r0, #0]
 801b7ea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b7f4:	e7f7      	b.n	801b7e6 <_Balloc+0x3a>

0801b7f6 <_Bfree>:
 801b7f6:	b131      	cbz	r1, 801b806 <_Bfree+0x10>
 801b7f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801b7fa:	684a      	ldr	r2, [r1, #4]
 801b7fc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b800:	6008      	str	r0, [r1, #0]
 801b802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801b806:	4770      	bx	lr

0801b808 <__multadd>:
 801b808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b80c:	690d      	ldr	r5, [r1, #16]
 801b80e:	461f      	mov	r7, r3
 801b810:	4606      	mov	r6, r0
 801b812:	460c      	mov	r4, r1
 801b814:	f101 0c14 	add.w	ip, r1, #20
 801b818:	2300      	movs	r3, #0
 801b81a:	f8dc 0000 	ldr.w	r0, [ip]
 801b81e:	b281      	uxth	r1, r0
 801b820:	fb02 7101 	mla	r1, r2, r1, r7
 801b824:	0c0f      	lsrs	r7, r1, #16
 801b826:	0c00      	lsrs	r0, r0, #16
 801b828:	fb02 7000 	mla	r0, r2, r0, r7
 801b82c:	b289      	uxth	r1, r1
 801b82e:	3301      	adds	r3, #1
 801b830:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801b834:	429d      	cmp	r5, r3
 801b836:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801b83a:	f84c 1b04 	str.w	r1, [ip], #4
 801b83e:	dcec      	bgt.n	801b81a <__multadd+0x12>
 801b840:	b1d7      	cbz	r7, 801b878 <__multadd+0x70>
 801b842:	68a3      	ldr	r3, [r4, #8]
 801b844:	42ab      	cmp	r3, r5
 801b846:	dc12      	bgt.n	801b86e <__multadd+0x66>
 801b848:	6861      	ldr	r1, [r4, #4]
 801b84a:	4630      	mov	r0, r6
 801b84c:	3101      	adds	r1, #1
 801b84e:	f7ff ffad 	bl	801b7ac <_Balloc>
 801b852:	6922      	ldr	r2, [r4, #16]
 801b854:	3202      	adds	r2, #2
 801b856:	f104 010c 	add.w	r1, r4, #12
 801b85a:	4680      	mov	r8, r0
 801b85c:	0092      	lsls	r2, r2, #2
 801b85e:	300c      	adds	r0, #12
 801b860:	f7fd f8fd 	bl	8018a5e <memcpy>
 801b864:	4621      	mov	r1, r4
 801b866:	4630      	mov	r0, r6
 801b868:	f7ff ffc5 	bl	801b7f6 <_Bfree>
 801b86c:	4644      	mov	r4, r8
 801b86e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b872:	3501      	adds	r5, #1
 801b874:	615f      	str	r7, [r3, #20]
 801b876:	6125      	str	r5, [r4, #16]
 801b878:	4620      	mov	r0, r4
 801b87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b87e <__hi0bits>:
 801b87e:	0c02      	lsrs	r2, r0, #16
 801b880:	0412      	lsls	r2, r2, #16
 801b882:	4603      	mov	r3, r0
 801b884:	b9b2      	cbnz	r2, 801b8b4 <__hi0bits+0x36>
 801b886:	0403      	lsls	r3, r0, #16
 801b888:	2010      	movs	r0, #16
 801b88a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b88e:	bf04      	itt	eq
 801b890:	021b      	lsleq	r3, r3, #8
 801b892:	3008      	addeq	r0, #8
 801b894:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b898:	bf04      	itt	eq
 801b89a:	011b      	lsleq	r3, r3, #4
 801b89c:	3004      	addeq	r0, #4
 801b89e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b8a2:	bf04      	itt	eq
 801b8a4:	009b      	lsleq	r3, r3, #2
 801b8a6:	3002      	addeq	r0, #2
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	db06      	blt.n	801b8ba <__hi0bits+0x3c>
 801b8ac:	005b      	lsls	r3, r3, #1
 801b8ae:	d503      	bpl.n	801b8b8 <__hi0bits+0x3a>
 801b8b0:	3001      	adds	r0, #1
 801b8b2:	4770      	bx	lr
 801b8b4:	2000      	movs	r0, #0
 801b8b6:	e7e8      	b.n	801b88a <__hi0bits+0xc>
 801b8b8:	2020      	movs	r0, #32
 801b8ba:	4770      	bx	lr

0801b8bc <__lo0bits>:
 801b8bc:	6803      	ldr	r3, [r0, #0]
 801b8be:	f013 0207 	ands.w	r2, r3, #7
 801b8c2:	4601      	mov	r1, r0
 801b8c4:	d00b      	beq.n	801b8de <__lo0bits+0x22>
 801b8c6:	07da      	lsls	r2, r3, #31
 801b8c8:	d423      	bmi.n	801b912 <__lo0bits+0x56>
 801b8ca:	0798      	lsls	r0, r3, #30
 801b8cc:	bf49      	itett	mi
 801b8ce:	085b      	lsrmi	r3, r3, #1
 801b8d0:	089b      	lsrpl	r3, r3, #2
 801b8d2:	2001      	movmi	r0, #1
 801b8d4:	600b      	strmi	r3, [r1, #0]
 801b8d6:	bf5c      	itt	pl
 801b8d8:	600b      	strpl	r3, [r1, #0]
 801b8da:	2002      	movpl	r0, #2
 801b8dc:	4770      	bx	lr
 801b8de:	b298      	uxth	r0, r3
 801b8e0:	b9a8      	cbnz	r0, 801b90e <__lo0bits+0x52>
 801b8e2:	0c1b      	lsrs	r3, r3, #16
 801b8e4:	2010      	movs	r0, #16
 801b8e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b8ea:	bf04      	itt	eq
 801b8ec:	0a1b      	lsreq	r3, r3, #8
 801b8ee:	3008      	addeq	r0, #8
 801b8f0:	071a      	lsls	r2, r3, #28
 801b8f2:	bf04      	itt	eq
 801b8f4:	091b      	lsreq	r3, r3, #4
 801b8f6:	3004      	addeq	r0, #4
 801b8f8:	079a      	lsls	r2, r3, #30
 801b8fa:	bf04      	itt	eq
 801b8fc:	089b      	lsreq	r3, r3, #2
 801b8fe:	3002      	addeq	r0, #2
 801b900:	07da      	lsls	r2, r3, #31
 801b902:	d402      	bmi.n	801b90a <__lo0bits+0x4e>
 801b904:	085b      	lsrs	r3, r3, #1
 801b906:	d006      	beq.n	801b916 <__lo0bits+0x5a>
 801b908:	3001      	adds	r0, #1
 801b90a:	600b      	str	r3, [r1, #0]
 801b90c:	4770      	bx	lr
 801b90e:	4610      	mov	r0, r2
 801b910:	e7e9      	b.n	801b8e6 <__lo0bits+0x2a>
 801b912:	2000      	movs	r0, #0
 801b914:	4770      	bx	lr
 801b916:	2020      	movs	r0, #32
 801b918:	4770      	bx	lr

0801b91a <__i2b>:
 801b91a:	b510      	push	{r4, lr}
 801b91c:	460c      	mov	r4, r1
 801b91e:	2101      	movs	r1, #1
 801b920:	f7ff ff44 	bl	801b7ac <_Balloc>
 801b924:	2201      	movs	r2, #1
 801b926:	6144      	str	r4, [r0, #20]
 801b928:	6102      	str	r2, [r0, #16]
 801b92a:	bd10      	pop	{r4, pc}

0801b92c <__multiply>:
 801b92c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b930:	4614      	mov	r4, r2
 801b932:	690a      	ldr	r2, [r1, #16]
 801b934:	6923      	ldr	r3, [r4, #16]
 801b936:	429a      	cmp	r2, r3
 801b938:	bfb8      	it	lt
 801b93a:	460b      	movlt	r3, r1
 801b93c:	4688      	mov	r8, r1
 801b93e:	bfbc      	itt	lt
 801b940:	46a0      	movlt	r8, r4
 801b942:	461c      	movlt	r4, r3
 801b944:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b948:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b94c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b950:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b954:	eb07 0609 	add.w	r6, r7, r9
 801b958:	42b3      	cmp	r3, r6
 801b95a:	bfb8      	it	lt
 801b95c:	3101      	addlt	r1, #1
 801b95e:	f7ff ff25 	bl	801b7ac <_Balloc>
 801b962:	f100 0514 	add.w	r5, r0, #20
 801b966:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801b96a:	462b      	mov	r3, r5
 801b96c:	2200      	movs	r2, #0
 801b96e:	4573      	cmp	r3, lr
 801b970:	d316      	bcc.n	801b9a0 <__multiply+0x74>
 801b972:	f104 0214 	add.w	r2, r4, #20
 801b976:	f108 0114 	add.w	r1, r8, #20
 801b97a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801b97e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801b982:	9300      	str	r3, [sp, #0]
 801b984:	9b00      	ldr	r3, [sp, #0]
 801b986:	9201      	str	r2, [sp, #4]
 801b988:	4293      	cmp	r3, r2
 801b98a:	d80c      	bhi.n	801b9a6 <__multiply+0x7a>
 801b98c:	2e00      	cmp	r6, #0
 801b98e:	dd03      	ble.n	801b998 <__multiply+0x6c>
 801b990:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b994:	2b00      	cmp	r3, #0
 801b996:	d05d      	beq.n	801ba54 <__multiply+0x128>
 801b998:	6106      	str	r6, [r0, #16]
 801b99a:	b003      	add	sp, #12
 801b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a0:	f843 2b04 	str.w	r2, [r3], #4
 801b9a4:	e7e3      	b.n	801b96e <__multiply+0x42>
 801b9a6:	f8b2 b000 	ldrh.w	fp, [r2]
 801b9aa:	f1bb 0f00 	cmp.w	fp, #0
 801b9ae:	d023      	beq.n	801b9f8 <__multiply+0xcc>
 801b9b0:	4689      	mov	r9, r1
 801b9b2:	46ac      	mov	ip, r5
 801b9b4:	f04f 0800 	mov.w	r8, #0
 801b9b8:	f859 4b04 	ldr.w	r4, [r9], #4
 801b9bc:	f8dc a000 	ldr.w	sl, [ip]
 801b9c0:	b2a3      	uxth	r3, r4
 801b9c2:	fa1f fa8a 	uxth.w	sl, sl
 801b9c6:	fb0b a303 	mla	r3, fp, r3, sl
 801b9ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b9ce:	f8dc 4000 	ldr.w	r4, [ip]
 801b9d2:	4443      	add	r3, r8
 801b9d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b9d8:	fb0b 840a 	mla	r4, fp, sl, r8
 801b9dc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801b9e0:	46e2      	mov	sl, ip
 801b9e2:	b29b      	uxth	r3, r3
 801b9e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b9e8:	454f      	cmp	r7, r9
 801b9ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b9ee:	f84a 3b04 	str.w	r3, [sl], #4
 801b9f2:	d82b      	bhi.n	801ba4c <__multiply+0x120>
 801b9f4:	f8cc 8004 	str.w	r8, [ip, #4]
 801b9f8:	9b01      	ldr	r3, [sp, #4]
 801b9fa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801b9fe:	3204      	adds	r2, #4
 801ba00:	f1ba 0f00 	cmp.w	sl, #0
 801ba04:	d020      	beq.n	801ba48 <__multiply+0x11c>
 801ba06:	682b      	ldr	r3, [r5, #0]
 801ba08:	4689      	mov	r9, r1
 801ba0a:	46a8      	mov	r8, r5
 801ba0c:	f04f 0b00 	mov.w	fp, #0
 801ba10:	f8b9 c000 	ldrh.w	ip, [r9]
 801ba14:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801ba18:	fb0a 440c 	mla	r4, sl, ip, r4
 801ba1c:	445c      	add	r4, fp
 801ba1e:	46c4      	mov	ip, r8
 801ba20:	b29b      	uxth	r3, r3
 801ba22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801ba26:	f84c 3b04 	str.w	r3, [ip], #4
 801ba2a:	f859 3b04 	ldr.w	r3, [r9], #4
 801ba2e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801ba32:	0c1b      	lsrs	r3, r3, #16
 801ba34:	fb0a b303 	mla	r3, sl, r3, fp
 801ba38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801ba3c:	454f      	cmp	r7, r9
 801ba3e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801ba42:	d805      	bhi.n	801ba50 <__multiply+0x124>
 801ba44:	f8c8 3004 	str.w	r3, [r8, #4]
 801ba48:	3504      	adds	r5, #4
 801ba4a:	e79b      	b.n	801b984 <__multiply+0x58>
 801ba4c:	46d4      	mov	ip, sl
 801ba4e:	e7b3      	b.n	801b9b8 <__multiply+0x8c>
 801ba50:	46e0      	mov	r8, ip
 801ba52:	e7dd      	b.n	801ba10 <__multiply+0xe4>
 801ba54:	3e01      	subs	r6, #1
 801ba56:	e799      	b.n	801b98c <__multiply+0x60>

0801ba58 <__pow5mult>:
 801ba58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba5c:	4615      	mov	r5, r2
 801ba5e:	f012 0203 	ands.w	r2, r2, #3
 801ba62:	4606      	mov	r6, r0
 801ba64:	460f      	mov	r7, r1
 801ba66:	d007      	beq.n	801ba78 <__pow5mult+0x20>
 801ba68:	3a01      	subs	r2, #1
 801ba6a:	4c1a      	ldr	r4, [pc, #104]	; (801bad4 <__pow5mult+0x7c>)
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ba72:	f7ff fec9 	bl	801b808 <__multadd>
 801ba76:	4607      	mov	r7, r0
 801ba78:	10ad      	asrs	r5, r5, #2
 801ba7a:	d027      	beq.n	801bacc <__pow5mult+0x74>
 801ba7c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801ba7e:	b944      	cbnz	r4, 801ba92 <__pow5mult+0x3a>
 801ba80:	f240 2171 	movw	r1, #625	; 0x271
 801ba84:	4630      	mov	r0, r6
 801ba86:	f7ff ff48 	bl	801b91a <__i2b>
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	64b0      	str	r0, [r6, #72]	; 0x48
 801ba8e:	4604      	mov	r4, r0
 801ba90:	6003      	str	r3, [r0, #0]
 801ba92:	f04f 0800 	mov.w	r8, #0
 801ba96:	07eb      	lsls	r3, r5, #31
 801ba98:	d50a      	bpl.n	801bab0 <__pow5mult+0x58>
 801ba9a:	4639      	mov	r1, r7
 801ba9c:	4622      	mov	r2, r4
 801ba9e:	4630      	mov	r0, r6
 801baa0:	f7ff ff44 	bl	801b92c <__multiply>
 801baa4:	4639      	mov	r1, r7
 801baa6:	4681      	mov	r9, r0
 801baa8:	4630      	mov	r0, r6
 801baaa:	f7ff fea4 	bl	801b7f6 <_Bfree>
 801baae:	464f      	mov	r7, r9
 801bab0:	106d      	asrs	r5, r5, #1
 801bab2:	d00b      	beq.n	801bacc <__pow5mult+0x74>
 801bab4:	6820      	ldr	r0, [r4, #0]
 801bab6:	b938      	cbnz	r0, 801bac8 <__pow5mult+0x70>
 801bab8:	4622      	mov	r2, r4
 801baba:	4621      	mov	r1, r4
 801babc:	4630      	mov	r0, r6
 801babe:	f7ff ff35 	bl	801b92c <__multiply>
 801bac2:	6020      	str	r0, [r4, #0]
 801bac4:	f8c0 8000 	str.w	r8, [r0]
 801bac8:	4604      	mov	r4, r0
 801baca:	e7e4      	b.n	801ba96 <__pow5mult+0x3e>
 801bacc:	4638      	mov	r0, r7
 801bace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bad2:	bf00      	nop
 801bad4:	08094970 	.word	0x08094970

0801bad8 <__lshift>:
 801bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801badc:	460c      	mov	r4, r1
 801bade:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bae2:	6923      	ldr	r3, [r4, #16]
 801bae4:	6849      	ldr	r1, [r1, #4]
 801bae6:	eb0a 0903 	add.w	r9, sl, r3
 801baea:	68a3      	ldr	r3, [r4, #8]
 801baec:	4607      	mov	r7, r0
 801baee:	4616      	mov	r6, r2
 801baf0:	f109 0501 	add.w	r5, r9, #1
 801baf4:	42ab      	cmp	r3, r5
 801baf6:	db32      	blt.n	801bb5e <__lshift+0x86>
 801baf8:	4638      	mov	r0, r7
 801bafa:	f7ff fe57 	bl	801b7ac <_Balloc>
 801bafe:	2300      	movs	r3, #0
 801bb00:	4680      	mov	r8, r0
 801bb02:	f100 0114 	add.w	r1, r0, #20
 801bb06:	461a      	mov	r2, r3
 801bb08:	4553      	cmp	r3, sl
 801bb0a:	db2b      	blt.n	801bb64 <__lshift+0x8c>
 801bb0c:	6920      	ldr	r0, [r4, #16]
 801bb0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bb12:	f104 0314 	add.w	r3, r4, #20
 801bb16:	f016 021f 	ands.w	r2, r6, #31
 801bb1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bb1e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bb22:	d025      	beq.n	801bb70 <__lshift+0x98>
 801bb24:	f1c2 0e20 	rsb	lr, r2, #32
 801bb28:	2000      	movs	r0, #0
 801bb2a:	681e      	ldr	r6, [r3, #0]
 801bb2c:	468a      	mov	sl, r1
 801bb2e:	4096      	lsls	r6, r2
 801bb30:	4330      	orrs	r0, r6
 801bb32:	f84a 0b04 	str.w	r0, [sl], #4
 801bb36:	f853 0b04 	ldr.w	r0, [r3], #4
 801bb3a:	459c      	cmp	ip, r3
 801bb3c:	fa20 f00e 	lsr.w	r0, r0, lr
 801bb40:	d814      	bhi.n	801bb6c <__lshift+0x94>
 801bb42:	6048      	str	r0, [r1, #4]
 801bb44:	b108      	cbz	r0, 801bb4a <__lshift+0x72>
 801bb46:	f109 0502 	add.w	r5, r9, #2
 801bb4a:	3d01      	subs	r5, #1
 801bb4c:	4638      	mov	r0, r7
 801bb4e:	f8c8 5010 	str.w	r5, [r8, #16]
 801bb52:	4621      	mov	r1, r4
 801bb54:	f7ff fe4f 	bl	801b7f6 <_Bfree>
 801bb58:	4640      	mov	r0, r8
 801bb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb5e:	3101      	adds	r1, #1
 801bb60:	005b      	lsls	r3, r3, #1
 801bb62:	e7c7      	b.n	801baf4 <__lshift+0x1c>
 801bb64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801bb68:	3301      	adds	r3, #1
 801bb6a:	e7cd      	b.n	801bb08 <__lshift+0x30>
 801bb6c:	4651      	mov	r1, sl
 801bb6e:	e7dc      	b.n	801bb2a <__lshift+0x52>
 801bb70:	3904      	subs	r1, #4
 801bb72:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb76:	f841 2f04 	str.w	r2, [r1, #4]!
 801bb7a:	459c      	cmp	ip, r3
 801bb7c:	d8f9      	bhi.n	801bb72 <__lshift+0x9a>
 801bb7e:	e7e4      	b.n	801bb4a <__lshift+0x72>

0801bb80 <__mcmp>:
 801bb80:	6903      	ldr	r3, [r0, #16]
 801bb82:	690a      	ldr	r2, [r1, #16]
 801bb84:	1a9b      	subs	r3, r3, r2
 801bb86:	b530      	push	{r4, r5, lr}
 801bb88:	d10c      	bne.n	801bba4 <__mcmp+0x24>
 801bb8a:	0092      	lsls	r2, r2, #2
 801bb8c:	3014      	adds	r0, #20
 801bb8e:	3114      	adds	r1, #20
 801bb90:	1884      	adds	r4, r0, r2
 801bb92:	4411      	add	r1, r2
 801bb94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bb98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bb9c:	4295      	cmp	r5, r2
 801bb9e:	d003      	beq.n	801bba8 <__mcmp+0x28>
 801bba0:	d305      	bcc.n	801bbae <__mcmp+0x2e>
 801bba2:	2301      	movs	r3, #1
 801bba4:	4618      	mov	r0, r3
 801bba6:	bd30      	pop	{r4, r5, pc}
 801bba8:	42a0      	cmp	r0, r4
 801bbaa:	d3f3      	bcc.n	801bb94 <__mcmp+0x14>
 801bbac:	e7fa      	b.n	801bba4 <__mcmp+0x24>
 801bbae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bbb2:	e7f7      	b.n	801bba4 <__mcmp+0x24>

0801bbb4 <__mdiff>:
 801bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bbb8:	460d      	mov	r5, r1
 801bbba:	4607      	mov	r7, r0
 801bbbc:	4611      	mov	r1, r2
 801bbbe:	4628      	mov	r0, r5
 801bbc0:	4614      	mov	r4, r2
 801bbc2:	f7ff ffdd 	bl	801bb80 <__mcmp>
 801bbc6:	1e06      	subs	r6, r0, #0
 801bbc8:	d108      	bne.n	801bbdc <__mdiff+0x28>
 801bbca:	4631      	mov	r1, r6
 801bbcc:	4638      	mov	r0, r7
 801bbce:	f7ff fded 	bl	801b7ac <_Balloc>
 801bbd2:	2301      	movs	r3, #1
 801bbd4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801bbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbdc:	bfa4      	itt	ge
 801bbde:	4623      	movge	r3, r4
 801bbe0:	462c      	movge	r4, r5
 801bbe2:	4638      	mov	r0, r7
 801bbe4:	6861      	ldr	r1, [r4, #4]
 801bbe6:	bfa6      	itte	ge
 801bbe8:	461d      	movge	r5, r3
 801bbea:	2600      	movge	r6, #0
 801bbec:	2601      	movlt	r6, #1
 801bbee:	f7ff fddd 	bl	801b7ac <_Balloc>
 801bbf2:	692b      	ldr	r3, [r5, #16]
 801bbf4:	60c6      	str	r6, [r0, #12]
 801bbf6:	6926      	ldr	r6, [r4, #16]
 801bbf8:	f105 0914 	add.w	r9, r5, #20
 801bbfc:	f104 0214 	add.w	r2, r4, #20
 801bc00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801bc04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801bc08:	f100 0514 	add.w	r5, r0, #20
 801bc0c:	f04f 0e00 	mov.w	lr, #0
 801bc10:	f852 ab04 	ldr.w	sl, [r2], #4
 801bc14:	f859 4b04 	ldr.w	r4, [r9], #4
 801bc18:	fa1e f18a 	uxtah	r1, lr, sl
 801bc1c:	b2a3      	uxth	r3, r4
 801bc1e:	1ac9      	subs	r1, r1, r3
 801bc20:	0c23      	lsrs	r3, r4, #16
 801bc22:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801bc26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801bc2a:	b289      	uxth	r1, r1
 801bc2c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801bc30:	45c8      	cmp	r8, r9
 801bc32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801bc36:	4694      	mov	ip, r2
 801bc38:	f845 3b04 	str.w	r3, [r5], #4
 801bc3c:	d8e8      	bhi.n	801bc10 <__mdiff+0x5c>
 801bc3e:	45bc      	cmp	ip, r7
 801bc40:	d304      	bcc.n	801bc4c <__mdiff+0x98>
 801bc42:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801bc46:	b183      	cbz	r3, 801bc6a <__mdiff+0xb6>
 801bc48:	6106      	str	r6, [r0, #16]
 801bc4a:	e7c5      	b.n	801bbd8 <__mdiff+0x24>
 801bc4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801bc50:	fa1e f381 	uxtah	r3, lr, r1
 801bc54:	141a      	asrs	r2, r3, #16
 801bc56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bc5a:	b29b      	uxth	r3, r3
 801bc5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bc60:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801bc64:	f845 3b04 	str.w	r3, [r5], #4
 801bc68:	e7e9      	b.n	801bc3e <__mdiff+0x8a>
 801bc6a:	3e01      	subs	r6, #1
 801bc6c:	e7e9      	b.n	801bc42 <__mdiff+0x8e>

0801bc6e <__d2b>:
 801bc6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bc72:	460e      	mov	r6, r1
 801bc74:	2101      	movs	r1, #1
 801bc76:	ec59 8b10 	vmov	r8, r9, d0
 801bc7a:	4615      	mov	r5, r2
 801bc7c:	f7ff fd96 	bl	801b7ac <_Balloc>
 801bc80:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801bc84:	4607      	mov	r7, r0
 801bc86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bc8a:	bb34      	cbnz	r4, 801bcda <__d2b+0x6c>
 801bc8c:	9301      	str	r3, [sp, #4]
 801bc8e:	f1b8 0300 	subs.w	r3, r8, #0
 801bc92:	d027      	beq.n	801bce4 <__d2b+0x76>
 801bc94:	a802      	add	r0, sp, #8
 801bc96:	f840 3d08 	str.w	r3, [r0, #-8]!
 801bc9a:	f7ff fe0f 	bl	801b8bc <__lo0bits>
 801bc9e:	9900      	ldr	r1, [sp, #0]
 801bca0:	b1f0      	cbz	r0, 801bce0 <__d2b+0x72>
 801bca2:	9a01      	ldr	r2, [sp, #4]
 801bca4:	f1c0 0320 	rsb	r3, r0, #32
 801bca8:	fa02 f303 	lsl.w	r3, r2, r3
 801bcac:	430b      	orrs	r3, r1
 801bcae:	40c2      	lsrs	r2, r0
 801bcb0:	617b      	str	r3, [r7, #20]
 801bcb2:	9201      	str	r2, [sp, #4]
 801bcb4:	9b01      	ldr	r3, [sp, #4]
 801bcb6:	61bb      	str	r3, [r7, #24]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	bf14      	ite	ne
 801bcbc:	2102      	movne	r1, #2
 801bcbe:	2101      	moveq	r1, #1
 801bcc0:	6139      	str	r1, [r7, #16]
 801bcc2:	b1c4      	cbz	r4, 801bcf6 <__d2b+0x88>
 801bcc4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801bcc8:	4404      	add	r4, r0
 801bcca:	6034      	str	r4, [r6, #0]
 801bccc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bcd0:	6028      	str	r0, [r5, #0]
 801bcd2:	4638      	mov	r0, r7
 801bcd4:	b003      	add	sp, #12
 801bcd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bcda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bcde:	e7d5      	b.n	801bc8c <__d2b+0x1e>
 801bce0:	6179      	str	r1, [r7, #20]
 801bce2:	e7e7      	b.n	801bcb4 <__d2b+0x46>
 801bce4:	a801      	add	r0, sp, #4
 801bce6:	f7ff fde9 	bl	801b8bc <__lo0bits>
 801bcea:	9b01      	ldr	r3, [sp, #4]
 801bcec:	617b      	str	r3, [r7, #20]
 801bcee:	2101      	movs	r1, #1
 801bcf0:	6139      	str	r1, [r7, #16]
 801bcf2:	3020      	adds	r0, #32
 801bcf4:	e7e5      	b.n	801bcc2 <__d2b+0x54>
 801bcf6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801bcfa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bcfe:	6030      	str	r0, [r6, #0]
 801bd00:	6918      	ldr	r0, [r3, #16]
 801bd02:	f7ff fdbc 	bl	801b87e <__hi0bits>
 801bd06:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801bd0a:	e7e1      	b.n	801bcd0 <__d2b+0x62>

0801bd0c <frexp>:
 801bd0c:	b570      	push	{r4, r5, r6, lr}
 801bd0e:	2100      	movs	r1, #0
 801bd10:	ec55 4b10 	vmov	r4, r5, d0
 801bd14:	6001      	str	r1, [r0, #0]
 801bd16:	4916      	ldr	r1, [pc, #88]	; (801bd70 <frexp+0x64>)
 801bd18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bd1c:	428b      	cmp	r3, r1
 801bd1e:	4606      	mov	r6, r0
 801bd20:	462a      	mov	r2, r5
 801bd22:	dc22      	bgt.n	801bd6a <frexp+0x5e>
 801bd24:	ee10 1a10 	vmov	r1, s0
 801bd28:	4319      	orrs	r1, r3
 801bd2a:	d01e      	beq.n	801bd6a <frexp+0x5e>
 801bd2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bd30:	da0d      	bge.n	801bd4e <frexp+0x42>
 801bd32:	2200      	movs	r2, #0
 801bd34:	4b0f      	ldr	r3, [pc, #60]	; (801bd74 <frexp+0x68>)
 801bd36:	ee10 0a10 	vmov	r0, s0
 801bd3a:	4629      	mov	r1, r5
 801bd3c:	f7eb f9f6 	bl	800712c <__aeabi_dmul>
 801bd40:	460a      	mov	r2, r1
 801bd42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bd46:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801bd4a:	4604      	mov	r4, r0
 801bd4c:	6031      	str	r1, [r6, #0]
 801bd4e:	6831      	ldr	r1, [r6, #0]
 801bd50:	151b      	asrs	r3, r3, #20
 801bd52:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801bd56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bd5a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801bd5e:	440b      	add	r3, r1
 801bd60:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801bd64:	6033      	str	r3, [r6, #0]
 801bd66:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801bd6a:	ec45 4b10 	vmov	d0, r4, r5
 801bd6e:	bd70      	pop	{r4, r5, r6, pc}
 801bd70:	7fefffff 	.word	0x7fefffff
 801bd74:	43500000 	.word	0x43500000

0801bd78 <__sread>:
 801bd78:	b510      	push	{r4, lr}
 801bd7a:	460c      	mov	r4, r1
 801bd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd80:	f000 f9fc 	bl	801c17c <_read_r>
 801bd84:	2800      	cmp	r0, #0
 801bd86:	bfab      	itete	ge
 801bd88:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801bd8a:	89a3      	ldrhlt	r3, [r4, #12]
 801bd8c:	181b      	addge	r3, r3, r0
 801bd8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bd92:	bfac      	ite	ge
 801bd94:	6523      	strge	r3, [r4, #80]	; 0x50
 801bd96:	81a3      	strhlt	r3, [r4, #12]
 801bd98:	bd10      	pop	{r4, pc}

0801bd9a <__swrite>:
 801bd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd9e:	461f      	mov	r7, r3
 801bda0:	898b      	ldrh	r3, [r1, #12]
 801bda2:	05db      	lsls	r3, r3, #23
 801bda4:	4605      	mov	r5, r0
 801bda6:	460c      	mov	r4, r1
 801bda8:	4616      	mov	r6, r2
 801bdaa:	d505      	bpl.n	801bdb8 <__swrite+0x1e>
 801bdac:	2302      	movs	r3, #2
 801bdae:	2200      	movs	r2, #0
 801bdb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdb4:	f000 f9be 	bl	801c134 <_lseek_r>
 801bdb8:	89a3      	ldrh	r3, [r4, #12]
 801bdba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bdbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bdc2:	81a3      	strh	r3, [r4, #12]
 801bdc4:	4632      	mov	r2, r6
 801bdc6:	463b      	mov	r3, r7
 801bdc8:	4628      	mov	r0, r5
 801bdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bdce:	f7fe bb5f 	b.w	801a490 <_write_r>

0801bdd2 <__sseek>:
 801bdd2:	b510      	push	{r4, lr}
 801bdd4:	460c      	mov	r4, r1
 801bdd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdda:	f000 f9ab 	bl	801c134 <_lseek_r>
 801bdde:	1c43      	adds	r3, r0, #1
 801bde0:	89a3      	ldrh	r3, [r4, #12]
 801bde2:	bf15      	itete	ne
 801bde4:	6520      	strne	r0, [r4, #80]	; 0x50
 801bde6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bdea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bdee:	81a3      	strheq	r3, [r4, #12]
 801bdf0:	bf18      	it	ne
 801bdf2:	81a3      	strhne	r3, [r4, #12]
 801bdf4:	bd10      	pop	{r4, pc}

0801bdf6 <__sclose>:
 801bdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdfa:	f000 b911 	b.w	801c020 <_close_r>

0801bdfe <strncpy>:
 801bdfe:	b570      	push	{r4, r5, r6, lr}
 801be00:	3901      	subs	r1, #1
 801be02:	4604      	mov	r4, r0
 801be04:	b902      	cbnz	r2, 801be08 <strncpy+0xa>
 801be06:	bd70      	pop	{r4, r5, r6, pc}
 801be08:	4623      	mov	r3, r4
 801be0a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801be0e:	f803 5b01 	strb.w	r5, [r3], #1
 801be12:	1e56      	subs	r6, r2, #1
 801be14:	b92d      	cbnz	r5, 801be22 <strncpy+0x24>
 801be16:	4414      	add	r4, r2
 801be18:	42a3      	cmp	r3, r4
 801be1a:	d0f4      	beq.n	801be06 <strncpy+0x8>
 801be1c:	f803 5b01 	strb.w	r5, [r3], #1
 801be20:	e7fa      	b.n	801be18 <strncpy+0x1a>
 801be22:	461c      	mov	r4, r3
 801be24:	4632      	mov	r2, r6
 801be26:	e7ed      	b.n	801be04 <strncpy+0x6>

0801be28 <__ssprint_r>:
 801be28:	6893      	ldr	r3, [r2, #8]
 801be2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be2e:	4681      	mov	r9, r0
 801be30:	460c      	mov	r4, r1
 801be32:	4616      	mov	r6, r2
 801be34:	2b00      	cmp	r3, #0
 801be36:	d05e      	beq.n	801bef6 <__ssprint_r+0xce>
 801be38:	f04f 0b00 	mov.w	fp, #0
 801be3c:	f8d2 a000 	ldr.w	sl, [r2]
 801be40:	465f      	mov	r7, fp
 801be42:	b357      	cbz	r7, 801be9a <__ssprint_r+0x72>
 801be44:	68a3      	ldr	r3, [r4, #8]
 801be46:	429f      	cmp	r7, r3
 801be48:	d340      	bcc.n	801becc <__ssprint_r+0xa4>
 801be4a:	89a2      	ldrh	r2, [r4, #12]
 801be4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801be50:	d03c      	beq.n	801becc <__ssprint_r+0xa4>
 801be52:	6825      	ldr	r5, [r4, #0]
 801be54:	6921      	ldr	r1, [r4, #16]
 801be56:	eba5 0801 	sub.w	r8, r5, r1
 801be5a:	6965      	ldr	r5, [r4, #20]
 801be5c:	2302      	movs	r3, #2
 801be5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be62:	fb95 f5f3 	sdiv	r5, r5, r3
 801be66:	f108 0301 	add.w	r3, r8, #1
 801be6a:	443b      	add	r3, r7
 801be6c:	429d      	cmp	r5, r3
 801be6e:	bf38      	it	cc
 801be70:	461d      	movcc	r5, r3
 801be72:	0553      	lsls	r3, r2, #21
 801be74:	d544      	bpl.n	801bf00 <__ssprint_r+0xd8>
 801be76:	4629      	mov	r1, r5
 801be78:	4648      	mov	r0, r9
 801be7a:	f7fc fbab 	bl	80185d4 <_malloc_r>
 801be7e:	b988      	cbnz	r0, 801bea4 <__ssprint_r+0x7c>
 801be80:	230c      	movs	r3, #12
 801be82:	f8c9 3000 	str.w	r3, [r9]
 801be86:	89a3      	ldrh	r3, [r4, #12]
 801be88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be8c:	81a3      	strh	r3, [r4, #12]
 801be8e:	2300      	movs	r3, #0
 801be90:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801be94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801be98:	e02f      	b.n	801befa <__ssprint_r+0xd2>
 801be9a:	e9da b700 	ldrd	fp, r7, [sl]
 801be9e:	f10a 0a08 	add.w	sl, sl, #8
 801bea2:	e7ce      	b.n	801be42 <__ssprint_r+0x1a>
 801bea4:	4642      	mov	r2, r8
 801bea6:	6921      	ldr	r1, [r4, #16]
 801bea8:	9001      	str	r0, [sp, #4]
 801beaa:	f7fc fdd8 	bl	8018a5e <memcpy>
 801beae:	89a2      	ldrh	r2, [r4, #12]
 801beb0:	9b01      	ldr	r3, [sp, #4]
 801beb2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801beb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801beba:	81a2      	strh	r2, [r4, #12]
 801bebc:	6123      	str	r3, [r4, #16]
 801bebe:	6165      	str	r5, [r4, #20]
 801bec0:	4443      	add	r3, r8
 801bec2:	eba5 0508 	sub.w	r5, r5, r8
 801bec6:	6023      	str	r3, [r4, #0]
 801bec8:	60a5      	str	r5, [r4, #8]
 801beca:	463b      	mov	r3, r7
 801becc:	42bb      	cmp	r3, r7
 801bece:	bf28      	it	cs
 801bed0:	463b      	movcs	r3, r7
 801bed2:	461a      	mov	r2, r3
 801bed4:	4659      	mov	r1, fp
 801bed6:	6820      	ldr	r0, [r4, #0]
 801bed8:	9301      	str	r3, [sp, #4]
 801beda:	f7fc fdcb 	bl	8018a74 <memmove>
 801bede:	68a2      	ldr	r2, [r4, #8]
 801bee0:	9b01      	ldr	r3, [sp, #4]
 801bee2:	1ad2      	subs	r2, r2, r3
 801bee4:	60a2      	str	r2, [r4, #8]
 801bee6:	6822      	ldr	r2, [r4, #0]
 801bee8:	4413      	add	r3, r2
 801beea:	6023      	str	r3, [r4, #0]
 801beec:	68b3      	ldr	r3, [r6, #8]
 801beee:	1bdf      	subs	r7, r3, r7
 801bef0:	60b7      	str	r7, [r6, #8]
 801bef2:	2f00      	cmp	r7, #0
 801bef4:	d1d1      	bne.n	801be9a <__ssprint_r+0x72>
 801bef6:	2000      	movs	r0, #0
 801bef8:	6070      	str	r0, [r6, #4]
 801befa:	b003      	add	sp, #12
 801befc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf00:	462a      	mov	r2, r5
 801bf02:	4648      	mov	r0, r9
 801bf04:	f7fc fe20 	bl	8018b48 <_realloc_r>
 801bf08:	4603      	mov	r3, r0
 801bf0a:	2800      	cmp	r0, #0
 801bf0c:	d1d6      	bne.n	801bebc <__ssprint_r+0x94>
 801bf0e:	6921      	ldr	r1, [r4, #16]
 801bf10:	4648      	mov	r0, r9
 801bf12:	f7ff faf7 	bl	801b504 <_free_r>
 801bf16:	e7b3      	b.n	801be80 <__ssprint_r+0x58>

0801bf18 <__register_exitproc>:
 801bf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf1c:	4c26      	ldr	r4, [pc, #152]	; (801bfb8 <__register_exitproc+0xa0>)
 801bf1e:	4606      	mov	r6, r0
 801bf20:	6820      	ldr	r0, [r4, #0]
 801bf22:	4698      	mov	r8, r3
 801bf24:	460f      	mov	r7, r1
 801bf26:	4691      	mov	r9, r2
 801bf28:	f7fc fb42 	bl	80185b0 <__retarget_lock_acquire_recursive>
 801bf2c:	4b23      	ldr	r3, [pc, #140]	; (801bfbc <__register_exitproc+0xa4>)
 801bf2e:	681d      	ldr	r5, [r3, #0]
 801bf30:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 801bf34:	b918      	cbnz	r0, 801bf3e <__register_exitproc+0x26>
 801bf36:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 801bf3a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801bf3e:	6843      	ldr	r3, [r0, #4]
 801bf40:	2b1f      	cmp	r3, #31
 801bf42:	dd19      	ble.n	801bf78 <__register_exitproc+0x60>
 801bf44:	4b1e      	ldr	r3, [pc, #120]	; (801bfc0 <__register_exitproc+0xa8>)
 801bf46:	b933      	cbnz	r3, 801bf56 <__register_exitproc+0x3e>
 801bf48:	6820      	ldr	r0, [r4, #0]
 801bf4a:	f7fc fb32 	bl	80185b2 <__retarget_lock_release_recursive>
 801bf4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801bf5a:	f7fc fb2b 	bl	80185b4 <malloc>
 801bf5e:	2800      	cmp	r0, #0
 801bf60:	d0f2      	beq.n	801bf48 <__register_exitproc+0x30>
 801bf62:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 801bf66:	6003      	str	r3, [r0, #0]
 801bf68:	2200      	movs	r2, #0
 801bf6a:	6042      	str	r2, [r0, #4]
 801bf6c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801bf70:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 801bf74:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 801bf78:	6843      	ldr	r3, [r0, #4]
 801bf7a:	b19e      	cbz	r6, 801bfa4 <__register_exitproc+0x8c>
 801bf7c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 801bf80:	2201      	movs	r2, #1
 801bf82:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 801bf86:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 801bf8a:	409a      	lsls	r2, r3
 801bf8c:	4311      	orrs	r1, r2
 801bf8e:	2e02      	cmp	r6, #2
 801bf90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 801bf94:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 801bf98:	bf02      	ittt	eq
 801bf9a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 801bf9e:	430a      	orreq	r2, r1
 801bfa0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 801bfa4:	1c5a      	adds	r2, r3, #1
 801bfa6:	3302      	adds	r3, #2
 801bfa8:	6042      	str	r2, [r0, #4]
 801bfaa:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 801bfae:	6820      	ldr	r0, [r4, #0]
 801bfb0:	f7fc faff 	bl	80185b2 <__retarget_lock_release_recursive>
 801bfb4:	2000      	movs	r0, #0
 801bfb6:	e7cc      	b.n	801bf52 <__register_exitproc+0x3a>
 801bfb8:	20000868 	.word	0x20000868
 801bfbc:	08094818 	.word	0x08094818
 801bfc0:	080185b5 	.word	0x080185b5

0801bfc4 <_calloc_r>:
 801bfc4:	b510      	push	{r4, lr}
 801bfc6:	4351      	muls	r1, r2
 801bfc8:	f7fc fb04 	bl	80185d4 <_malloc_r>
 801bfcc:	4604      	mov	r4, r0
 801bfce:	b198      	cbz	r0, 801bff8 <_calloc_r+0x34>
 801bfd0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801bfd4:	f022 0203 	bic.w	r2, r2, #3
 801bfd8:	3a04      	subs	r2, #4
 801bfda:	2a24      	cmp	r2, #36	; 0x24
 801bfdc:	d81b      	bhi.n	801c016 <_calloc_r+0x52>
 801bfde:	2a13      	cmp	r2, #19
 801bfe0:	d917      	bls.n	801c012 <_calloc_r+0x4e>
 801bfe2:	2100      	movs	r1, #0
 801bfe4:	2a1b      	cmp	r2, #27
 801bfe6:	e9c0 1100 	strd	r1, r1, [r0]
 801bfea:	d807      	bhi.n	801bffc <_calloc_r+0x38>
 801bfec:	f100 0308 	add.w	r3, r0, #8
 801bff0:	2200      	movs	r2, #0
 801bff2:	e9c3 2200 	strd	r2, r2, [r3]
 801bff6:	609a      	str	r2, [r3, #8]
 801bff8:	4620      	mov	r0, r4
 801bffa:	bd10      	pop	{r4, pc}
 801bffc:	2a24      	cmp	r2, #36	; 0x24
 801bffe:	e9c0 1102 	strd	r1, r1, [r0, #8]
 801c002:	bf11      	iteee	ne
 801c004:	f100 0310 	addne.w	r3, r0, #16
 801c008:	6101      	streq	r1, [r0, #16]
 801c00a:	f100 0318 	addeq.w	r3, r0, #24
 801c00e:	6141      	streq	r1, [r0, #20]
 801c010:	e7ee      	b.n	801bff0 <_calloc_r+0x2c>
 801c012:	4603      	mov	r3, r0
 801c014:	e7ec      	b.n	801bff0 <_calloc_r+0x2c>
 801c016:	2100      	movs	r1, #0
 801c018:	f7fc fd45 	bl	8018aa6 <memset>
 801c01c:	e7ec      	b.n	801bff8 <_calloc_r+0x34>
	...

0801c020 <_close_r>:
 801c020:	b538      	push	{r3, r4, r5, lr}
 801c022:	4c06      	ldr	r4, [pc, #24]	; (801c03c <_close_r+0x1c>)
 801c024:	2300      	movs	r3, #0
 801c026:	4605      	mov	r5, r0
 801c028:	4608      	mov	r0, r1
 801c02a:	6023      	str	r3, [r4, #0]
 801c02c:	f7fa ff4c 	bl	8016ec8 <_close>
 801c030:	1c43      	adds	r3, r0, #1
 801c032:	d102      	bne.n	801c03a <_close_r+0x1a>
 801c034:	6823      	ldr	r3, [r4, #0]
 801c036:	b103      	cbz	r3, 801c03a <_close_r+0x1a>
 801c038:	602b      	str	r3, [r5, #0]
 801c03a:	bd38      	pop	{r3, r4, r5, pc}
 801c03c:	2001ba30 	.word	0x2001ba30

0801c040 <_fclose_r>:
 801c040:	b570      	push	{r4, r5, r6, lr}
 801c042:	4606      	mov	r6, r0
 801c044:	460c      	mov	r4, r1
 801c046:	b911      	cbnz	r1, 801c04e <_fclose_r+0xe>
 801c048:	2500      	movs	r5, #0
 801c04a:	4628      	mov	r0, r5
 801c04c:	bd70      	pop	{r4, r5, r6, pc}
 801c04e:	b118      	cbz	r0, 801c058 <_fclose_r+0x18>
 801c050:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801c052:	b90b      	cbnz	r3, 801c058 <_fclose_r+0x18>
 801c054:	f7ff f9c6 	bl	801b3e4 <__sinit>
 801c058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c05a:	07d8      	lsls	r0, r3, #31
 801c05c:	d405      	bmi.n	801c06a <_fclose_r+0x2a>
 801c05e:	89a3      	ldrh	r3, [r4, #12]
 801c060:	0599      	lsls	r1, r3, #22
 801c062:	d402      	bmi.n	801c06a <_fclose_r+0x2a>
 801c064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c066:	f7fc faa3 	bl	80185b0 <__retarget_lock_acquire_recursive>
 801c06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c06e:	b93b      	cbnz	r3, 801c080 <_fclose_r+0x40>
 801c070:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801c072:	f015 0501 	ands.w	r5, r5, #1
 801c076:	d1e7      	bne.n	801c048 <_fclose_r+0x8>
 801c078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c07a:	f7fc fa9a 	bl	80185b2 <__retarget_lock_release_recursive>
 801c07e:	e7e4      	b.n	801c04a <_fclose_r+0xa>
 801c080:	4621      	mov	r1, r4
 801c082:	4630      	mov	r0, r6
 801c084:	f7ff f8b4 	bl	801b1f0 <__sflush_r>
 801c088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801c08a:	4605      	mov	r5, r0
 801c08c:	b133      	cbz	r3, 801c09c <_fclose_r+0x5c>
 801c08e:	69e1      	ldr	r1, [r4, #28]
 801c090:	4630      	mov	r0, r6
 801c092:	4798      	blx	r3
 801c094:	2800      	cmp	r0, #0
 801c096:	bfb8      	it	lt
 801c098:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 801c09c:	89a3      	ldrh	r3, [r4, #12]
 801c09e:	061a      	lsls	r2, r3, #24
 801c0a0:	d503      	bpl.n	801c0aa <_fclose_r+0x6a>
 801c0a2:	6921      	ldr	r1, [r4, #16]
 801c0a4:	4630      	mov	r0, r6
 801c0a6:	f7ff fa2d 	bl	801b504 <_free_r>
 801c0aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c0ac:	b141      	cbz	r1, 801c0c0 <_fclose_r+0x80>
 801c0ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801c0b2:	4299      	cmp	r1, r3
 801c0b4:	d002      	beq.n	801c0bc <_fclose_r+0x7c>
 801c0b6:	4630      	mov	r0, r6
 801c0b8:	f7ff fa24 	bl	801b504 <_free_r>
 801c0bc:	2300      	movs	r3, #0
 801c0be:	6323      	str	r3, [r4, #48]	; 0x30
 801c0c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c0c2:	b121      	cbz	r1, 801c0ce <_fclose_r+0x8e>
 801c0c4:	4630      	mov	r0, r6
 801c0c6:	f7ff fa1d 	bl	801b504 <_free_r>
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	6463      	str	r3, [r4, #68]	; 0x44
 801c0ce:	f7ff f971 	bl	801b3b4 <__sfp_lock_acquire>
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	81a3      	strh	r3, [r4, #12]
 801c0d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c0d8:	07db      	lsls	r3, r3, #31
 801c0da:	d402      	bmi.n	801c0e2 <_fclose_r+0xa2>
 801c0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0de:	f7fc fa68 	bl	80185b2 <__retarget_lock_release_recursive>
 801c0e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0e4:	f7fc fa63 	bl	80185ae <__retarget_lock_close_recursive>
 801c0e8:	f7ff f96a 	bl	801b3c0 <__sfp_lock_release>
 801c0ec:	e7ad      	b.n	801c04a <_fclose_r+0xa>
	...

0801c0f0 <_fstat_r>:
 801c0f0:	b538      	push	{r3, r4, r5, lr}
 801c0f2:	4c07      	ldr	r4, [pc, #28]	; (801c110 <_fstat_r+0x20>)
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	4605      	mov	r5, r0
 801c0f8:	4608      	mov	r0, r1
 801c0fa:	4611      	mov	r1, r2
 801c0fc:	6023      	str	r3, [r4, #0]
 801c0fe:	f7fa fee7 	bl	8016ed0 <_fstat>
 801c102:	1c43      	adds	r3, r0, #1
 801c104:	d102      	bne.n	801c10c <_fstat_r+0x1c>
 801c106:	6823      	ldr	r3, [r4, #0]
 801c108:	b103      	cbz	r3, 801c10c <_fstat_r+0x1c>
 801c10a:	602b      	str	r3, [r5, #0]
 801c10c:	bd38      	pop	{r3, r4, r5, pc}
 801c10e:	bf00      	nop
 801c110:	2001ba30 	.word	0x2001ba30

0801c114 <_isatty_r>:
 801c114:	b538      	push	{r3, r4, r5, lr}
 801c116:	4c06      	ldr	r4, [pc, #24]	; (801c130 <_isatty_r+0x1c>)
 801c118:	2300      	movs	r3, #0
 801c11a:	4605      	mov	r5, r0
 801c11c:	4608      	mov	r0, r1
 801c11e:	6023      	str	r3, [r4, #0]
 801c120:	f7fa feda 	bl	8016ed8 <_isatty>
 801c124:	1c43      	adds	r3, r0, #1
 801c126:	d102      	bne.n	801c12e <_isatty_r+0x1a>
 801c128:	6823      	ldr	r3, [r4, #0]
 801c12a:	b103      	cbz	r3, 801c12e <_isatty_r+0x1a>
 801c12c:	602b      	str	r3, [r5, #0]
 801c12e:	bd38      	pop	{r3, r4, r5, pc}
 801c130:	2001ba30 	.word	0x2001ba30

0801c134 <_lseek_r>:
 801c134:	b538      	push	{r3, r4, r5, lr}
 801c136:	4c07      	ldr	r4, [pc, #28]	; (801c154 <_lseek_r+0x20>)
 801c138:	4605      	mov	r5, r0
 801c13a:	4608      	mov	r0, r1
 801c13c:	4611      	mov	r1, r2
 801c13e:	2200      	movs	r2, #0
 801c140:	6022      	str	r2, [r4, #0]
 801c142:	461a      	mov	r2, r3
 801c144:	f7fa fecc 	bl	8016ee0 <_lseek>
 801c148:	1c43      	adds	r3, r0, #1
 801c14a:	d102      	bne.n	801c152 <_lseek_r+0x1e>
 801c14c:	6823      	ldr	r3, [r4, #0]
 801c14e:	b103      	cbz	r3, 801c152 <_lseek_r+0x1e>
 801c150:	602b      	str	r3, [r5, #0]
 801c152:	bd38      	pop	{r3, r4, r5, pc}
 801c154:	2001ba30 	.word	0x2001ba30

0801c158 <__ascii_mbtowc>:
 801c158:	b082      	sub	sp, #8
 801c15a:	b901      	cbnz	r1, 801c15e <__ascii_mbtowc+0x6>
 801c15c:	a901      	add	r1, sp, #4
 801c15e:	b142      	cbz	r2, 801c172 <__ascii_mbtowc+0x1a>
 801c160:	b14b      	cbz	r3, 801c176 <__ascii_mbtowc+0x1e>
 801c162:	7813      	ldrb	r3, [r2, #0]
 801c164:	600b      	str	r3, [r1, #0]
 801c166:	7812      	ldrb	r2, [r2, #0]
 801c168:	1c10      	adds	r0, r2, #0
 801c16a:	bf18      	it	ne
 801c16c:	2001      	movne	r0, #1
 801c16e:	b002      	add	sp, #8
 801c170:	4770      	bx	lr
 801c172:	4610      	mov	r0, r2
 801c174:	e7fb      	b.n	801c16e <__ascii_mbtowc+0x16>
 801c176:	f06f 0001 	mvn.w	r0, #1
 801c17a:	e7f8      	b.n	801c16e <__ascii_mbtowc+0x16>

0801c17c <_read_r>:
 801c17c:	b538      	push	{r3, r4, r5, lr}
 801c17e:	4c07      	ldr	r4, [pc, #28]	; (801c19c <_read_r+0x20>)
 801c180:	4605      	mov	r5, r0
 801c182:	4608      	mov	r0, r1
 801c184:	4611      	mov	r1, r2
 801c186:	2200      	movs	r2, #0
 801c188:	6022      	str	r2, [r4, #0]
 801c18a:	461a      	mov	r2, r3
 801c18c:	f7fa fe8e 	bl	8016eac <_read>
 801c190:	1c43      	adds	r3, r0, #1
 801c192:	d102      	bne.n	801c19a <_read_r+0x1e>
 801c194:	6823      	ldr	r3, [r4, #0]
 801c196:	b103      	cbz	r3, 801c19a <_read_r+0x1e>
 801c198:	602b      	str	r3, [r5, #0]
 801c19a:	bd38      	pop	{r3, r4, r5, pc}
 801c19c:	2001ba30 	.word	0x2001ba30

0801c1a0 <__ascii_wctomb>:
 801c1a0:	b149      	cbz	r1, 801c1b6 <__ascii_wctomb+0x16>
 801c1a2:	2aff      	cmp	r2, #255	; 0xff
 801c1a4:	bf85      	ittet	hi
 801c1a6:	238a      	movhi	r3, #138	; 0x8a
 801c1a8:	6003      	strhi	r3, [r0, #0]
 801c1aa:	700a      	strbls	r2, [r1, #0]
 801c1ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c1b0:	bf98      	it	ls
 801c1b2:	2001      	movls	r0, #1
 801c1b4:	4770      	bx	lr
 801c1b6:	4608      	mov	r0, r1
 801c1b8:	4770      	bx	lr
	...

0801c1bc <_getpid>:
 801c1bc:	4b02      	ldr	r3, [pc, #8]	; (801c1c8 <_getpid+0xc>)
 801c1be:	2258      	movs	r2, #88	; 0x58
 801c1c0:	601a      	str	r2, [r3, #0]
 801c1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1c6:	4770      	bx	lr
 801c1c8:	2001ba30 	.word	0x2001ba30

0801c1cc <_kill>:
 801c1cc:	4b02      	ldr	r3, [pc, #8]	; (801c1d8 <_kill+0xc>)
 801c1ce:	2258      	movs	r2, #88	; 0x58
 801c1d0:	601a      	str	r2, [r3, #0]
 801c1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1d6:	4770      	bx	lr
 801c1d8:	2001ba30 	.word	0x2001ba30

0801c1dc <_sbrk>:
 801c1dc:	4b04      	ldr	r3, [pc, #16]	; (801c1f0 <_sbrk+0x14>)
 801c1de:	6819      	ldr	r1, [r3, #0]
 801c1e0:	4602      	mov	r2, r0
 801c1e2:	b909      	cbnz	r1, 801c1e8 <_sbrk+0xc>
 801c1e4:	4903      	ldr	r1, [pc, #12]	; (801c1f4 <_sbrk+0x18>)
 801c1e6:	6019      	str	r1, [r3, #0]
 801c1e8:	6818      	ldr	r0, [r3, #0]
 801c1ea:	4402      	add	r2, r0
 801c1ec:	601a      	str	r2, [r3, #0]
 801c1ee:	4770      	bx	lr
 801c1f0:	2001ba18 	.word	0x2001ba18
 801c1f4:	2001ba34 	.word	0x2001ba34

0801c1f8 <_init>:
 801c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1fa:	bf00      	nop
 801c1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1fe:	bc08      	pop	{r3}
 801c200:	469e      	mov	lr, r3
 801c202:	4770      	bx	lr

0801c204 <_fini>:
 801c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c206:	bf00      	nop
 801c208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c20a:	bc08      	pop	{r3}
 801c20c:	469e      	mov	lr, r3
 801c20e:	4770      	bx	lr
